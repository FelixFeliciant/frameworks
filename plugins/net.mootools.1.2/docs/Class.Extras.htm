<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" lang="en"><head>



	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="author" content="Valerio Proietti, mad4milk" />
	<meta name="copyright" content="copyright 2006 www.mad4milk.net" />
	<meta name="Description" content="mootools, a super lightweight web2.0 javascript framework" />
	<meta name="Keywords" content="mootools,moo.fx,javascript effects,javascript framework,ajax framework,moo.ajax" />
	<meta name="robots" content="all" />

	<!--

               ____        _                      __  __      __   __
   ___   __   / __'\     _\'\      __   ___   __ /\_\/\ \    /\ \ / /  web 2.0 beta
  /\  \_/ '\ /\ \Z\ \   / __ \    /__\ /\  \_/ '\\/_/\ \ \   \ \ \ /__
  \ \  __/\ \\ \  __ \ /\ \Z\ \  / \Z\\\ \  __/\ \  __\ \ \___\ \  _ '\
   \ \_\ \ \_\\ \_\ \ \\ \_____\/\____ \\ \_\ \ \_\/\ \\ \____\\ \_\ \_\
    \/_/  \/_/ \/_/\/_/ \/_____/\/___/\_\\/_/  \/_/\ \_\\/____/ \/_/\/_/
                                     \/_/           \/_/       be happy.

	-->

	<title>MooTools Docs - Plugins/Class.Extras</title>
	
	<!-- Shortcut Icons -->
	
	<link href="http://mootools.net/assets/icons/icon.png" rel="shortcut icon" type="image/x-icon" />
	<link href="http://mootools.net/assets/icons/ipod-icon.png" rel="apple-touch-icon" />
	
	<!-- BluePrint -->
	
	<link href="assets/screen.css" rel="stylesheet" type="text/css" media="screen" />
	<link href="assets/print.css" rel="stylesheet" type="text/css" media="print" />
	
	<!-- StyleSheets -->
	
	<link href="assets/layout.css" rel="stylesheet" type="text/css" media="screen" />
	<link href="assets/main.css" rel="stylesheet" type="text/css" media="screen" />
	
	<!-- Scripts -->
	
	<script src="assets/mootools.js" type="text/javascript"></script>
	<script src="assets/mootools_002.js" type="text/javascript"></script>
	
	<!-- Section Specific -->
	
	<link href="assets/docs.css" rel="stylesheet" type="text/css" media="screen" />	
<script type="text/javascript" src="assets/jsapi"></script>	
<script type="text/javascript" src="assets/docs.js"></script><script src="assets/a" type="text/javascript"></script><script src="assets/defaulten.js" type="text/javascript"></script>
	
</head><body>

<div id="header">
	
	<div class="container">
		<a href="http://mediatemple.net/" id="mediatemple"><span>in partnership with mediatemple</span></a>

		<div id="logo">
			<h1><a href="http://mootools.net/"><span>MooTools</span></a></h1>
			<h2><span>a compact javascript framework</span></h2>
		</div>

	</div>
	
</div>

<div id="wrapper">

		<div class="container">
		
			<div id="main-menu" class="span-4">
			
			<h4>Core</h4>
<div><a href="Core.htm">Core</a></div>
<div><a href="Browser.htm">Browser</a></div>
<h4>Native</h4>
<div><a href="Array.htm">Array</a></div>
<div><a href="Function.htm">Function</a></div>
<div><a href="Number.htm">Number</a></div>
<div><a href="String.htm">String</a></div>
<div><a href="Hash.htm">Hash</a></div>
<div><a href="Event.htm">Event</a></div>
<h4>Class</h4>
<div><a href="Class.htm">Class</a></div>
<div><a href="Class.Extras.htm">Class.Extras</a></div>
<h4>Element</h4>
<div><a href="Element.htm">Element</a></div>
<div><a href="Element.Event.htm">Element.Event</a></div>
<div><a href="Element.Style.htm">Element.Style</a></div>
<div><a href="Element.Dimensions.htm">Element.Dimensions</a></div>
<h4>Utilities</h4>
<div><a href="Selectors.htm">Selectors</a></div>
<div><a href="DomReady.htm">DomReady</a></div>
<div><a href="JSON.htm">JSON</a></div>
<div><a href="Cookie.htm">Cookie</a></div>
<div><a href="Swiff.htm">Swiff</a></div>
<h4>Fx</h4>
<div><a href="Fx.htm">Fx</a></div>
<div><a href="Fx.CSS.htm">Fx.CSS</a></div>
<div><a href="Fx.Tween.htm">Fx.Tween</a></div>
<div><a href="Fx.Morph.htm">Fx.Morph</a></div>
<div><a href="Fx.Transitions.htm">Fx.Transitions</a></div>
<h4>Request</h4>
<div><a href="Request.htm">Request</a></div>
<div><a href="Request.HTML.htm">Request.HTML</a></div>
<div><a href="Request.JSON.htm">Request.JSON</a></div>
<h4>Plugins</h4>
<div><a href="Fx.Slide.htm">Fx.Slide</a></div>
<div><a href="Fx.Scroll.htm">Fx.Scroll</a></div>
<div><a href="Fx.Elements.htm">Fx.Elements</a></div>
<div><a href="Drag.htm">Drag</a></div>
<div><a href="Drag.Move.htm">Drag.Move</a></div>
<div><a href="Color.htm">Color</a></div>
<div><a href="Group.htm">Group</a></div>
<div><a href="Hash.Cookie.htm">Hash.Cookie</a></div>
<div><a href="Sortables.htm">Sortables</a></div>
<div><a href="Tips.htm">Tips</a></div>
<div><a href="SmoothScroll.htm">SmoothScroll</a></div>
<div><a href="Slider.htm">Slider</a></div>
<div><a href="Scroller.htm">Scroller</a></div>
<div><a href="Assets.htm">Assets</a></div>
<div><a href="Accordion.htm">Accordion</a></div>
</div>
		
			<div id="main" class="l-border r-border span-15">
			
				<h1 id="Chain"><a href="#Chain">Class: Chain</a></h1>

<p class="description">A Utility Class which executes functions one after another, with each function firing after completion of the previous.
Its methods can be implemented with <a href="Class.htm#Class:implement">Class:implement</a> into any <a href="Class.htm">Class</a>, and it is currently implemented in <a href="Fx.htm">Fx</a> and <a href="Request.htm">Request</a>.
In <a href="Fx.htm">Fx</a>, for example, it is used to create custom, complex animations.</p>

<h2 id="Chain:constructor"><a href="#Chain:constructor">Chain Method: constructor</a></h2>

<h3 class="description">Syntax:</h3>

<h4>For new classes:</h4>

<pre class="javascript"><span class="kw2">var</span> MyClass = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span><span class="br0">{</span> Implements: Chain <span class="br0">}</span><span class="br0">)</span>;
</pre>

<h4>For existing classes:</h4>

<pre class="javascript">MyClass.<span class="me1">implement</span><span class="br0">(</span>Chain<span class="br0">)</span>;
</pre>

<h4>Stand alone</h4>

<pre class="javascript"><span class="kw2">var</span> myChain = <span class="kw2">new</span> Chain;
</pre>

<h3>Example:</h3>

<pre class="javascript">    <span class="kw2">var</span> Todo = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span><span class="br0">{</span>
        Implements: Chain,
        initialize: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
            <span class="kw1">this</span>.<span class="me1">chain</span>.<span class="me1">apply</span><span class="br0">(</span><span class="kw1">this</span>, arguments<span class="br0">)</span>;
        <span class="br0">}</span>
    <span class="br0">}</span><span class="br0">)</span>;
&nbsp;
    <span class="kw2">var</span> myTodoList = <span class="kw2">new</span> Todo<span class="br0">(</span>
        <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'get groceries'</span><span class="br0">)</span>; <span class="br0">}</span>,
        <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'go workout'</span><span class="br0">)</span>; <span class="br0">}</span>,
        <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'code mootools documentation until eyes close involuntarily'</span><span class="br0">)</span>; <span class="br0">}</span>,
        <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'sleep'</span><span class="br0">)</span>; <span class="br0">}</span>
    <span class="br0">)</span>;
</pre>

<h3>See Also:</h3>

<ul>
<li><a href="Class.htm">Class</a></li>
</ul>
<h2 id="Chain:chain"><a href="#Chain:chain">Chain Method: chain</a></h2>

<p class="description">Adds functions to the end of the call stack of the Chain instance.</p>

<h3>Syntax:</h3>

<pre class="javascript">myClass.<span class="me1">chain</span><span class="br0">(</span>fn<span class="br0">[</span>, fn2<span class="br0">[</span>, fn3<span class="br0">[</span>, ...<span class="br0">]</span><span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>fn - (<em>function</em> or <em>array</em>) The function (or array
of functions) to add to the chain call stack. Will accept and number of
functions or arrays of functions.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>object</em>) The current Class instance. Calls to chain can also be chained.</li>
</ul>
<h3>Example:</h3>

<pre class="javascript"><span class="co1">//Fx.Tween has already implemented the Chain class because of inheritance of the Fx class.</span>
<span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Tween</span><span class="br0">(</span><span class="st0">'myElement'</span>, <span class="st0">'opacity'</span><span class="br0">)</span>;
myFx.<span class="me1">start</span><span class="br0">(</span><span class="nu0">1</span>,<span class="nu0">0</span><span class="br0">)</span>.<span class="me1">chain</span><span class="br0">(</span>
    <span class="co1">//Notice that &quot;this&quot; refers to the calling object (in this case, the myFx object).</span>
    <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw1">this</span>.<span class="me1">start</span><span class="br0">(</span><span class="nu0">0</span>,<span class="nu0">1</span><span class="br0">)</span>; <span class="br0">}</span>,
    <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw1">this</span>.<span class="me1">start</span><span class="br0">(</span><span class="nu0">1</span>,<span class="nu0">0</span><span class="br0">)</span>; <span class="br0">}</span>,
    <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw1">this</span>.<span class="me1">start</span><span class="br0">(</span><span class="nu0">0</span>,<span class="nu0">1</span><span class="br0">)</span>; <span class="br0">}</span>
<span class="br0">)</span>; <span class="co1">//Will fade the Element out and in twice.</span>
</pre>

<h3>See Also:</h3>

<ul>
<li>
<a href="Fx.htm">Fx</a>, <a href="Fx.Tween.htm">Fx.Tween</a>
</li>
</ul>
<h2 id="Chain:callChain"><a href="#Chain:callChain">Chain Method: callChain</a></h2>

<p class="description">Removes the first function of the Chain instance stack and executes it. The next function will then become first in the array.</p>

<h3>Syntax:</h3>

<pre class="javascript">myClass.<span class="me1">callChain</span><span class="br0">(</span><span class="br0">[</span>any arguments<span class="br0">]</span><span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>Any arguments passed in will be passed to the &quot;next&quot; function.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>mixed</em>) The return value of the &quot;next&quot; function or false when the chain was empty.</li>
</ul>
<h3>Example:</h3>

<pre class="javascript"><span class="kw2">var</span> myChain = <span class="kw2">new</span> Chain<span class="br0">(</span><span class="br0">)</span>;
myChain.<span class="me1">chain</span><span class="br0">(</span>
    <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'do dishes'</span><span class="br0">)</span>; <span class="br0">}</span>,
    <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'put away clean dishes'</span><span class="br0">)</span>; <span class="br0">}</span>
<span class="br0">)</span>;
myChain.<span class="me1">callChain</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//Will alert 'do dishes'.</span>
myChain.<span class="me1">callChain</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//Will alert 'put away clean dishes'.</span>
</pre>

<h2 id="Chain:clearChain"><a href="#Chain:clearChain">Chain Method: clearChain</a></h2>

<p class="description">Clears the stack of a Chain instance.</p>

<h3>Syntax:</h3>

<pre class="javascript">myClass.<span class="me1">clearChain</span><span class="br0">(</span><span class="br0">)</span>;
</pre>

<h3>Returns:</h3>

<ul>
<li>(<em>object</em>) The current Class instance.</li>
</ul>
<h3>Example:</h3>

<pre class="javascript"><span class="kw2">var</span> myFx = Fx.<span class="me1">Tween</span><span class="br0">(</span><span class="st0">'myElement'</span>, <span class="st0">'color'</span><span class="br0">)</span>; <span class="co1">//Fx.Tween inherited Fx's implementation of Chain.</span>
myFx.<span class="me1">chain</span><span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw1">while</span><span class="br0">(</span><span class="kw2">true</span><span class="br0">)</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">&quot;D'oh!&quot;</span><span class="br0">)</span>; <span class="br0">}</span><span class="br0">)</span>; <span class="co1">//Chains an infinite loop of alerts.</span>
myFx.<span class="me1">clearChain</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//Cancels the infinite loop of alerts before allowing it to begin.</span>
</pre>

<h3>See Also:</h3>

<ul>
<li>
<a href="Fx.htm">Fx</a>, <a href="Fx.Tween.htm">Fx.Tween</a>
</li>
</ul>
<h1 id="Events"><a href="#Events">Class: Events</a></h1>

<p class="description">A Utility Class. Its methods can be implemented with <a href="Class.htm#Class:implement">Class:implement</a> into any <a href="Class.htm">Class</a>.
In <a href="Fx.htm">Fx</a>,
for example, this Class is used to allow any number of functions to be
added to the Fx events, like 'complete', 'start', and 'cancel'.
Events in a Class that implements <a href="#Events">Events</a> must be either added as an option or with addEvent, not directly through .options.onEventName.</p>

<h3>Syntax:</h3>

<h4>For new classes:</h4>

<pre class="javascript"><span class="kw2">var</span> MyClass = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span><span class="br0">{</span> Implements: Events <span class="br0">}</span><span class="br0">)</span>;
</pre>

<h4>For existing classes:</h4>

<pre class="javascript">MyClass.<span class="me1">implement</span><span class="br0">(</span>Events<span class="br0">)</span>;
</pre>

<h3>Implementing:</h3>

<ul>
<li>This class can be implemented into other classes to add its functionality to them.</li>
<li>Events has been designed to work well with the <a href="#Options">Options</a>
class. When the option property begins with 'on' and is followed by a
capital letter it will be added as an event (e.g. 'onComplete' will add
as 'complete' event).</li>
</ul>
<h3>Example:</h3>

<pre class="javascript"><span class="kw2">var</span> Widget = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span><span class="br0">{</span>
    Implements: Events,
    initialize: <span class="kw2">function</span><span class="br0">(</span>element<span class="br0">)</span><span class="br0">{</span>
        <span class="co1">// ...</span>
    <span class="br0">}</span>,
    complete: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
        <span class="kw1">this</span>.<span class="me1">fireEvent</span><span class="br0">(</span><span class="st0">'complete'</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;
&nbsp;
<span class="kw2">var</span> myWidget = <span class="kw2">new</span> Widget<span class="br0">(</span><span class="br0">)</span>;
myWidget.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'complete'</span>, myFunction<span class="br0">)</span>;
</pre>

<h3>Notes:</h3>

<ul>
<li>Events starting with 'on' are still supported in all methods and
are converted to their representation without 'on' (e.g. 'onComplete'
becomes 'complete').</li>
</ul>
<h3>See Also:</h3>

<ul>
<li>
<a href="Class.htm">Class</a>, <a href="#Options">Options</a>
</li>
</ul>
<h2 id="Events:addEvent"><a href="#Events:addEvent">Events Method: addEvent</a></h2>

<p class="description">Adds an event to the Class instance's event stack.</p>

<h3>Syntax:</h3>

<pre class="javascript">myClass.<span class="me1">addEvent</span><span class="br0">(</span>type, fn<span class="br0">[</span>, internal<span class="br0">]</span><span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>type     - (<em>string</em>) The type of event (e.g. 'complete').</li>
<li>fn       - (<em>function</em>) The function to execute.</li>
<li>internal - (<em>boolean</em>, optional) Sets the function property: internal to true. Internal property is used to prevent removal.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>object</em>) This Class instance.</li>
</ul>
<h3>Example:</h3>

<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Tween</span><span class="br0">(</span><span class="st0">'element'</span>, <span class="st0">'opacity'</span><span class="br0">)</span>;
myFx.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'start'</span>, myStartFunction<span class="br0">)</span>;
</pre>

<h2 id="Events:addEvents"><a href="#Events:addEvents">Events Method: addEvents</a></h2>

<p class="description">The same as <a href="#Events:addEvent">addEvent</a>, but accepts an object to add multiple events at once.</p>

<h3>Syntax:</h3>

<pre class="javascript">myClass.<span class="me1">addEvents</span><span class="br0">(</span>events<span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>events - (<em>object</em>) An object with key/value representing:
key the event name (e.g. 'start'), and value the function that is
called when the Event occurs.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>object</em>) This Class instance.</li>
</ul>
<h3>Example:</h3>

<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Tween</span><span class="br0">(</span><span class="st0">'element'</span>, <span class="st0">'opacity'</span><span class="br0">)</span>;
myFx.<span class="me1">addEvents</span><span class="br0">(</span><span class="br0">{</span>
    <span class="st0">'start'</span>: myStartFunction,
    <span class="st0">'complete'</span>: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'Done.'</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;
</pre>

<h2 id="Events:fireEvent"><a href="#Events:fireEvent">Events Method: fireEvent</a></h2>

<p class="description">Fires all events of the specified type in the Class instance.</p>

<h3>Syntax:</h3>

<pre class="javascript">myClass.<span class="me1">fireEvent</span><span class="br0">(</span>type<span class="br0">[</span>, args<span class="br0">[</span>, delay<span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>type  - (<em>string</em>) The type of event (e.g. 'complete').</li>
<li>args  - (<em>mixed</em>, optional) The argument(s) to pass to the function. To pass more than one argument, the arguments must be in an array.</li>
<li>delay - (<em>number</em>, optional) Delay in miliseconds to wait before executing the event (defaults to 0).</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>object</em>) This Class instance.</li>
</ul>
<h3>Example:</h3>

<pre class="javascript"><span class="kw2">var</span> Widget = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span><span class="br0">{</span>
    Implements: Events,
    initialize: <span class="kw2">function</span><span class="br0">(</span>arg1, arg2<span class="br0">)</span><span class="br0">{</span>
        <span class="co1">//...</span>
        <span class="kw1">this</span>.<span class="me1">fireEvent</span><span class="br0">(</span><span class="st0">&quot;initialize&quot;</span>, <span class="br0">[</span>arg1, arg2<span class="br0">]</span>, <span class="nu0">50</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;
</pre>

<h2 id="Events:removeEvent"><a href="#Events:removeEvent">Events Method: removeEvent</a></h2>

<p class="description">Removes an event from the stack of events of the Class instance.</p>

<h3>Syntax:</h3>

<pre class="javascript">myClass.<span class="me1">removeEvent</span><span class="br0">(</span>type, fn<span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>type - (<em>string</em>) The type of event (e.g. 'complete').</li>
<li>fn   - (<em>function</em>) The function to remove.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>object</em>) This Class instance.</li>
</ul>
<h3>Notes:</h3>

<ul>
<li>If the function has the property internal and is set to true, then the event will not be removed.</li>
</ul>
<h2 id="Events:removeEvents"><a href="#Events:removeEvents">Events Method: removeEvents</a></h2>

<p class="description">Removes all events of the given type from the
stack of events of a Class instance. If no type is specified, removes
all events of all types.</p>

<h3>Syntax:</h3>

<pre class="javascript">myClass.<span class="me1">removeEvents</span><span class="br0">(</span><span class="br0">[</span>events<span class="br0">]</span><span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>events - (optional) If not passed removes all events of all types.

<ul>
<li>(<em>string</em>) The event name (e.g. 'success'). Removes all events of that type.</li>
<li>(<em>object</em>) An object of type function pairs. Like the one passed to <a href="#Events:addEvents">addEvents</a>.</li>
</ul>
</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>object</em>) The current Class instance.</li>
</ul>
<h3>Example:</h3>

<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Tween</span><span class="br0">(</span><span class="st0">'myElement'</span>, <span class="st0">'opacity'</span><span class="br0">)</span>;
myFx.<span class="me1">removeEvents</span><span class="br0">(</span><span class="st0">'complete'</span><span class="br0">)</span>;
</pre>

<h3>Notes:</h3>

<ul>
<li>removeEvents will not remove internal events. See <a href="Element.htm.Event/#Element:removeEvent">Events:removeEvent</a>.</li>
</ul>
<h1 id="Options"><a href="#Options">Class: Options</a></h1>

<p class="description">A Utility Class. Its methods can be implemented with <a href="Class.htm#Class:implement">Class:implement</a> into any <a href="Class.htm">Class</a>.
Used to automate the setting of a Class instance's options.
Will also add Class <a href="#Events">Events</a> when the option property begins with 'on' and is followed by a capital letter (e.g. 'onComplete' adds a 'complete' event).</p>

<h3>Syntax:</h3>

<h4>For new classes:</h4>

<pre class="javascript"><span class="kw2">var</span> MyClass = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span><span class="br0">{</span>Implements: Options<span class="br0">}</span><span class="br0">)</span>;
</pre>

<h4>For existing classes:</h4>

<pre class="javascript">MyClass.<span class="me1">implement</span><span class="br0">(</span>Options<span class="br0">)</span>;
</pre>

<h2 id="Options:setOptions"><a href="#Options:setOptions">Options Method: setOptions</a></h2>

<p class="description">Merges the default options of the Class with the options passed in.</p>

<h3>Syntax:</h3>

<pre class="javascript">myClass.<span class="me1">setOptions</span><span class="br0">(</span><span class="br0">[</span>options<span class="br0">]</span><span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>options - (<em>object</em>, optional) The user defined options to merge with the defaults.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>object</em>) The current Class instance.</li>
</ul>
<h3>Example:</h3>

<pre class="javascript"><span class="kw2">var</span> Widget = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span><span class="br0">{</span>
    Implements: Options,
    options: <span class="br0">{</span>
        color: <span class="st0">'#fff'</span>,
        size: <span class="br0">{</span>
            width: <span class="nu0">100</span>,
            height: <span class="nu0">100</span>
        <span class="br0">}</span>
    <span class="br0">}</span>,
    initialize: <span class="kw2">function</span><span class="br0">(</span>options<span class="br0">)</span><span class="br0">{</span>
        <span class="kw1">this</span>.<span class="me1">setOptions</span><span class="br0">(</span>options<span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;
&nbsp;
<span class="kw2">var</span> myWidget = <span class="kw2">new</span> Widget<span class="br0">(</span><span class="br0">{</span>
    color: <span class="st0">'#f00'</span>,
    size: <span class="br0">{</span>
        width: <span class="nu0">200</span>
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;
&nbsp;
<span class="co1">//myWidget.options is now: {color: #f00, size: {width: 200, height: 100}}</span>
</pre>

<h3>Notes:</h3>

<ul>
<li>Relies on the default options of a Class defined in its options property.</li>
<li>If a Class has <a href="#Events">Events</a> implemented, every
option beginning with 'on' and followed by a capital letter (e.g.
'onComplete') becomes a Class instance event, assuming the value of the
option is a function.</li>
</ul>
</div>
		
			<div id="menu" class="span-2 last">
			
			<h4 class="menu-item"><a href="#Chain">Chain</a></h4>
<div class="menu-item"><a href="#Chain:constructor">constructor</a></div>
<div class="menu-item"><a href="#Chain:chain">chain</a></div>
<div class="menu-item"><a href="#Chain:callChain">callChain</a></div>
<div class="menu-item"><a href="#Chain:clearChain">clearChain</a></div>
<h4 class="menu-item"><a href="#Events">Events</a></h4>
<div class="menu-item"><a href="#Events:addEvent">addEvent</a></div>
<div class="menu-item"><a href="#Events:addEvents">addEvents</a></div>
<div class="menu-item"><a href="#Events:fireEvent">fireEvent</a></div>
<div class="menu-item"><a href="#Events:removeEvent">removeEvent</a></div>
<div class="menu-item"><a href="#Events:removeEvents">removeEvents</a></div>
<h4 class="menu-item"><a href="#Options">Options</a></h4>
<div class="menu-item"><a href="#Options:setOptions">setOptions</a></div>
</div>
			
			<div id="footy" class="clear span-24">
				<p class="quiet">This documentation is released under a <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">Attribution-NonCommercial-ShareAlike 3.0</a> License.</p>
			</div>
		
		</div>
	
</div>
<div id="footer">
	<div class="container">
		<p class="copy"><a href="http://mad4milk.net/" id="mucca"></a></p>
		<p>copyright ©2006-2008 <a href="http://mad4milk.net/">Valerio Proietti</a></p>
	</div>
</div>

</body></html>