<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" lang="en"><head>



	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="author" content="Valerio Proietti, mad4milk" />
	<meta name="copyright" content="copyright 2006 www.mad4milk.net" />
	<meta name="Description" content="mootools, a super lightweight web2.0 javascript framework" />
	<meta name="Keywords" content="mootools,moo.fx,javascript effects,javascript framework,ajax framework,moo.ajax" />
	<meta name="robots" content="all" />

	<!--

               ____        _                      __  __      __   __
   ___   __   / __'\     _\'\      __   ___   __ /\_\/\ \    /\ \ / /  web 2.0 beta
  /\  \_/ '\ /\ \Z\ \   / __ \    /__\ /\  \_/ '\\/_/\ \ \   \ \ \ /__
  \ \  __/\ \\ \  __ \ /\ \Z\ \  / \Z\\\ \  __/\ \  __\ \ \___\ \  _ '\
   \ \_\ \ \_\\ \_\ \ \\ \_____\/\____ \\ \_\ \ \_\/\ \\ \____\\ \_\ \_\
    \/_/  \/_/ \/_/\/_/ \/_____/\/___/\_\\/_/  \/_/\ \_\\/____/ \/_/\/_/
                                     \/_/           \/_/       be happy.

	-->

	<title>MooTools Docs - Plugins/Array</title>
	
	<!-- Shortcut Icons -->
	
	<link href="http://mootools.net/assets/icons/icon.png" rel="shortcut icon" type="image/x-icon" />
	<link href="http://mootools.net/assets/icons/ipod-icon.png" rel="apple-touch-icon" />
	
	<!-- BluePrint -->
	
	<link href="assets/screen.css" rel="stylesheet" type="text/css" media="screen" />
	<link href="assets/print.css" rel="stylesheet" type="text/css" media="print" />
	
	<!-- StyleSheets -->
	
	<link href="assets/layout.css" rel="stylesheet" type="text/css" media="screen" />
	<link href="assets/main.css" rel="stylesheet" type="text/css" media="screen" />
	
	<!-- Scripts -->
	
	<script src="assets/mootools.js" type="text/javascript"></script>
	<script src="assets/mootools_002.js" type="text/javascript"></script>
	
	<!-- Section Specific -->
	
	<link href="assets/docs.css" rel="stylesheet" type="text/css" media="screen" />	
<script type="text/javascript" src="assets/jsapi"></script>	
<script type="text/javascript" src="assets/docs.js"></script><script src="assets/a" type="text/javascript"></script><script src="assets/defaulten.js" type="text/javascript"></script>
	
</head><body>

<div id="header">
	
	<div class="container">
		<a href="http://mediatemple.net/" id="mediatemple"><span>in partnership with mediatemple</span></a>

		<div id="logo">
			<h1><a href="http://mootools.net/"><span>MooTools</span></a></h1>
			<h2><span>a compact javascript framework</span></h2>
		</div>

	</div>
	
</div>

<div id="wrapper">

		<div class="container">
		
			<div id="main-menu" class="span-4">
			
			<h4>Core</h4>
<div><a href="Core.htm">Core</a></div>
<div><a href="Browser.htm">Browser</a></div>
<h4>Native</h4>
<div><a href="Array.htm">Array</a></div>
<div><a href="Function.htm">Function</a></div>
<div><a href="Number.htm">Number</a></div>
<div><a href="String.htm">String</a></div>
<div><a href="Hash.htm">Hash</a></div>
<div><a href="Event.htm">Event</a></div>
<h4>Class</h4>
<div><a href="Class.htm">Class</a></div>
<div><a href="Class.Extras.htm">Class.Extras</a></div>
<h4>Element</h4>
<div><a href="Element.htm">Element</a></div>
<div><a href="Element.Event.htm">Element.Event</a></div>
<div><a href="Element.Style.htm">Element.Style</a></div>
<div><a href="Element.Dimensions.htm">Element.Dimensions</a></div>
<h4>Utilities</h4>
<div><a href="Selectors.htm">Selectors</a></div>
<div><a href="DomReady.htm">DomReady</a></div>
<div><a href="JSON.htm">JSON</a></div>
<div><a href="Cookie.htm">Cookie</a></div>
<div><a href="Swiff.htm">Swiff</a></div>
<h4>Fx</h4>
<div><a href="Fx.htm">Fx</a></div>
<div><a href="Fx.CSS.htm">Fx.CSS</a></div>
<div><a href="Fx.Tween.htm">Fx.Tween</a></div>
<div><a href="Fx.Morph.htm">Fx.Morph</a></div>
<div><a href="Fx.Transitions.htm">Fx.Transitions</a></div>
<h4>Request</h4>
<div><a href="Request.htm">Request</a></div>
<div><a href="Request.HTML.htm">Request.HTML</a></div>
<div><a href="Request.JSON.htm">Request.JSON</a></div>
<h4>Plugins</h4>
<div><a href="Fx.Slide.htm">Fx.Slide</a></div>
<div><a href="Fx.Scroll.htm">Fx.Scroll</a></div>
<div><a href="Fx.Elements.htm">Fx.Elements</a></div>
<div><a href="Drag.htm">Drag</a></div>
<div><a href="Drag.Move.htm">Drag.Move</a></div>
<div><a href="Color.htm">Color</a></div>
<div><a href="Group.htm">Group</a></div>
<div><a href="Hash.Cookie.htm">Hash.Cookie</a></div>
<div><a href="Sortables.htm">Sortables</a></div>
<div><a href="Tips.htm">Tips</a></div>
<div><a href="SmoothScroll.htm">SmoothScroll</a></div>
<div><a href="Slider.htm">Slider</a></div>
<div><a href="Scroller.htm">Scroller</a></div>
<div><a href="Assets.htm">Assets</a></div>
<div><a href="Accordion.htm">Accordion</a></div>
</div>
		
			<div id="main" class="l-border r-border span-15">
			
				<h1 id="Array"><a href="#Array">Native: Array</a></h1>

<p class="description">A collection of Array methods.</p>

<h3>See Also:</h3>

<ul>
<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array">MDC Array</a></li>
</ul>
<h2 id="Array:each"><a href="#Array:each">Array Method: each</a></h2>

<p class="description">Calls a function for each element in the array.</p>

<h3>Syntax:</h3>

<pre class="javascript">myArray.<span class="me1">each</span><span class="br0">(</span>fn<span class="br0">[</span>, bind<span class="br0">]</span><span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>fn   - (<em>function</em>) The function which should be executed on each item in the array. This function is passed the item and its index in the array.</li>
<li>bind - (<em>object</em>, optional) The object to be used as 'this' in the function. For more information see <a href="Function.htm#Function:bind">Function:bind</a>.</li>
</ol>
<h4>Argument: fn</h4>

<h5>Syntax</h5>

<pre class="javascript">fn<span class="br0">(</span><span class="kw1">item</span>, index, array<span class="br0">)</span>
</pre>

<h5>Arguments:</h5>

<ol>
<li>item   - (<em>mixed</em>) The current item in the array.</li>
<li>index  - (<em>number</em>) The current item's index in the array.</li>
<li>array  - (<em>array</em>) The actual array.</li>
</ol>
<h3>Examples:</h3>

<pre class="javascript"><span class="co1">//Alerts &quot;0 = apple&quot;, &quot;1 = banana&quot;, and so on:</span>
<span class="br0">[</span><span class="st0">'apple'</span>, <span class="st0">'banana'</span>, <span class="st0">'lemon'</span><span class="br0">]</span>.<span class="me1">each</span><span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="kw1">item</span>, index<span class="br0">)</span><span class="br0">{</span>
    <span class="kw3">alert</span><span class="br0">(</span>index + <span class="st0">&quot; = &quot;</span> + <span class="kw1">item</span><span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>; <span class="co1">//The optional second argument for binding isn't used here.</span>
</pre>

<h3>See Also:</h3>

<ul>
<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:forEach">MDC Array:forEach</a></li>
</ul>
<h3>Notes:</h3>

<ul>
<li>This method is only available for browsers without native <a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:forEach">MDC Array:forEach</a> support.</li>
</ul>
<h2 id="Array:every"><a href="#Array:every">Array Method: every</a></h2>

<p class="description">Returns true if every element in the array satisfies the provided testing function.
This method is provided only for browsers without native <a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:every">Array:every</a> support.</p>

<h3>Syntax:</h3>

<pre class="javascript"><span class="kw2">var</span> allPassed = myArray.<span class="me1">every</span><span class="br0">(</span>fn<span class="br0">[</span>, bind<span class="br0">]</span><span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>fn   - (<em>function</em>) The function to test for each element.</li>
<li>bind - (<em>object</em>, optional) The object to use as 'this' in the function. For more information see <a href="Function.htm#Function:bind">Function:bind</a>.</li>
</ol>
<h4>Argument: fn</h4>

<h5>Syntax:</h5>

<pre class="javascript">fn<span class="br0">(</span><span class="kw1">item</span>, index, array<span class="br0">)</span>
</pre>

<h5>Arguments:</h5>

<ol>
<li>item   - (<em>mixed</em>) The current item in the array.</li>
<li>index  - (<em>number</em>) The current item's index in the array.</li>
<li>array  - (<em>array</em>) The actual array.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>boolean</em>) If every element in the array satisfies the provided testing function, returns true. Otherwise, returns false.</li>
</ul>
<h3>Examples:</h3>

<pre class="javascript"><span class="kw2">var</span> areAllBigEnough = <span class="br0">[</span><span class="nu0">10</span>, <span class="nu0">4</span>, <span class="nu0">25</span>, <span class="nu0">100</span><span class="br0">]</span>.<span class="me1">every</span><span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="kw1">item</span>, index<span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">return</span> <span class="kw1">item</span> &gt; <span class="nu0">20</span>;
<span class="br0">}</span><span class="br0">)</span>; <span class="co1">//areAllBigEnough = false</span>
</pre>

<h3>See Also:</h3>

<ul>
<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:every">MDC Array:every</a></li>
</ul>
<h2 id="Array:filter"><a href="#Array:filter">Array Method: filter</a></h2>

<p class="description">Creates a new array with all of the elements of the array for which the provided filtering function returns true.
This method is provided only for browsers without native <a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:filter">Array:filter</a> support.</p>

<h3>Syntax:</h3>

<pre class="javascript"><span class="kw2">var</span> filteredArray = myArray.<span class="me1">filter</span><span class="br0">(</span>fn<span class="br0">[</span>, bind<span class="br0">]</span><span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>fn   - (<em>function</em>) The function to test each element of the array. This function is passed the item and its index in the array.</li>
<li>bind - (<em>object</em>, optional) The object to use as 'this' in the function. For more information see <a href="Function.htm#Function:bind">Function:bind</a>.</li>
</ol>
<h4>Argument: fn</h4>

<h5>Syntax:</h5>

<pre class="javascript">fn<span class="br0">(</span><span class="kw1">item</span>, index, array<span class="br0">)</span>
</pre>

<h5>Arguments:</h5>

<ol>
<li>item   - (<em>mixed</em>) The current item in the array.</li>
<li>index  - (<em>number</em>) The current item's index in the array.</li>
<li>array  - (<em>array</em>) The actual array.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>array</em>) The new filtered array.</li>
</ul>
<h3>Examples:</h3>

<pre class="javascript"><span class="kw2">var</span> biggerThanTwenty = <span class="br0">[</span><span class="nu0">10</span>, <span class="nu0">3</span>, <span class="nu0">25</span>, <span class="nu0">100</span><span class="br0">]</span>.<span class="me1">filter</span><span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="kw1">item</span>, index<span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">return</span> <span class="kw1">item</span> &gt; <span class="nu0">20</span>;
<span class="br0">}</span><span class="br0">)</span>; <span class="co1">//biggerThanTwenty = [25, 100]</span>
</pre>

<h3>See Also:</h3>

<ul>
<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:filter">MDC Array:filter</a></li>
</ul>
<h2 id="Array:clean"><a href="#Array:clean">Array Method: clean</a></h2>

<p class="description">Creates a new array with all of the elements of the array which are defined (i.e. not null or undefined).</p>

<h3>Syntax:</h3>

<pre class="javascript"><span class="kw2">var</span> cleanedArray = myArray.<span class="me1">clean</span><span class="br0">(</span><span class="br0">)</span>;
</pre>

<h3>Returns:</h3>

<ul>
<li>(<em>array</em>) The new filtered array.</li>
</ul>
<h3>Examples:</h3>

<pre class="javascript"><span class="kw2">var</span> myArray = <span class="br0">[</span><span class="kw2">null</span>, <span class="nu0">1</span>, <span class="nu0">0</span>, <span class="kw2">true</span>, <span class="kw2">false</span>, <span class="st0">&quot;foo&quot;</span>, undefined, <span class="st0">&quot;&quot;</span><span class="br0">]</span>;
myArray.<span class="me1">clean</span><span class="br0">(</span><span class="br0">)</span> <span class="co1">// returns [1, 0, true, false, &quot;foo&quot;, &quot;&quot;]</span>
</pre>

<h2 id="Array:indexOf"><a href="#Array:indexOf">Array Method: indexOf</a></h2>

<p class="description">Returns the index of the first element within the array equal to the specified value, or -1 if the value is not found.
This method is provided only for browsers without native <a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:indexOf">Array:indexOf</a> support.</p>

<h3>Syntax:</h3>

<pre class="javascript"><span class="kw2">var</span> index = myArray.<span class="me1">indexOf</span><span class="br0">(</span><span class="kw1">item</span><span class="br0">[</span>, from<span class="br0">]</span><span class="br0">)</span>;
</pre>

<h3>Returns:</h3>

<ul>
<li>(<em>number</em>) The index of the first element within the array equal to the specified value. If not found, returns -1.</li>
</ul>
<h3>Arguments:</h3>

<ol>
<li>item - (<em>object</em>) The item to search for in the array.</li>
<li>from - (<em>number</em>, optional: defaults to 0) The index of the array at which to begin the search.</li>
</ol>
<h3>Examples:</h3>

<pre class="javascript"><span class="br0">[</span><span class="st0">'apple'</span>, <span class="st0">'lemon'</span>, <span class="st0">'banana'</span><span class="br0">]</span>.<span class="me1">indexOf</span><span class="br0">(</span><span class="st0">'lemon'</span><span class="br0">)</span>; <span class="co1">//returns 1</span>
<span class="br0">[</span><span class="st0">'apple'</span>, <span class="st0">'lemon'</span><span class="br0">]</span>.<span class="me1">indexOf</span><span class="br0">(</span><span class="st0">'banana'</span><span class="br0">)</span>; <span class="co1">//returns -1</span>
</pre>

<h3>See Also:</h3>

<ul>
<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:indexOf">MDC Array:indexOf</a></li>
</ul>
<h2 id="Array:map"><a href="#Array:map">Array Method: map</a></h2>

<p class="description">Creates a new array with the results of calling a provided function on every element in the array.
This method is provided only for browsers without native <a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:map">Array:map</a> support.</p>

<h3>Syntax:</h3>

<pre class="javascript"><span class="kw2">var</span> mappedArray = myArray.<span class="me1">map</span><span class="br0">(</span>fn<span class="br0">[</span>, bind<span class="br0">]</span><span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>fn   - (<em>function</em>) The function to produce an element of the new Array from an element of the current one.</li>
<li>bind - (<em>object</em>, optional) The object to use as 'this' in the function. For more information see <a href="Function.htm#Function:bind">Function:bind</a>.</li>
</ol>
<h4>Argument: fn</h4>

<h5>Syntax:</h5>

<pre class="javascript">fn<span class="br0">(</span><span class="kw1">item</span>, index, array<span class="br0">)</span>
</pre>

<h5>Arguments:</h5>

<ol>
<li>item   - (<em>mixed</em>) The current item in the array.</li>
<li>index  - (<em>number</em>) The current item's index in the array.</li>
<li>array  - (<em>array</em>) The actual array.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>array</em>) The new mapped array.</li>
</ul>
<h3>Examples:</h3>

<pre class="javascript"><span class="kw2">var</span> timesTwo = <span class="br0">[</span><span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span><span class="br0">]</span>.<span class="me1">map</span><span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="kw1">item</span>, index<span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">return</span> <span class="kw1">item</span> * <span class="nu0">2</span>;
<span class="br0">}</span><span class="br0">)</span>; <span class="co1">//timesTwo = [2, 4, 6];</span>
</pre>

<h3>See Also:</h3>

<ul>
<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:map">MDC Array:map</a></li>
</ul>
<h2 id="Array:some"><a href="#Array:some">Array Method: some</a></h2>

<p class="description">Returns true if at least one element in the array satisfies the provided testing function.
This method is provided only for browsers without native <a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:some">Array:some</a> support.</p>

<h3>Syntax:</h3>

<pre class="javascript"><span class="kw2">var</span> somePassed = myArray.<span class="me1">some</span><span class="br0">(</span>fn<span class="br0">[</span>, bind<span class="br0">]</span><span class="br0">)</span>;
</pre>

<h3>Returns:</h3>

<ul>
<li>(<em>boolean</em>) If at least one element in the array satisfies the provided testing function returns true. Otherwise, returns false.</li>
</ul>
<h3>Arguments:</h3>

<ol>
<li>fn   - (<em>function</em>) The function to test for each element. This function is passed the item and its index in the array.</li>
<li>bind - (<em>object</em>, optional) The object to use as 'this' in the function. For more information see <a href="Function.htm#Function:bind">Function:bind</a>.</li>
</ol>
<h4>Argument: fn</h4>

<h5>Syntax:</h5>

<pre class="javascript">fn<span class="br0">(</span><span class="kw1">item</span>, index, array<span class="br0">)</span>
</pre>

<h5>Arguments:</h5>

<ol>
<li>item   - (<em>mixed</em>) The current item in the array.</li>
<li>index  - (<em>number</em>) The current item's index in the array.</li>
<li>array  - (<em>array</em>) The actual array.</li>
</ol>
<h3>Examples:</h3>

<pre class="javascript"><span class="kw2">var</span> isAnyBigEnough = <span class="br0">[</span><span class="nu0">10</span>, <span class="nu0">4</span>, <span class="nu0">25</span>, <span class="nu0">100</span><span class="br0">]</span>.<span class="me1">some</span><span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="kw1">item</span>, index<span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">return</span> <span class="kw1">item</span> &gt; <span class="nu0">20</span>;
<span class="br0">}</span><span class="br0">)</span>; <span class="co1">//isAnyBigEnough = true</span>
</pre>

<h3>See Also:</h3>

<ul>
<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:some">MDC Array:some</a></li>
</ul>
<h2 id="Array:associate"><a href="#Array:associate">Array Method: associate</a></h2>

<p class="description">Creates an object with key-value pairs based on the array of keywords passed in and the current content of the array.</p>

<h3>Syntax:</h3>

<pre class="javascript"><span class="kw2">var</span> associated = myArray.<span class="me1">associate</span><span class="br0">(</span>obj<span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>obj - (<em>array</em>) Its items will be used as the keys of the object that will be created.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>object</em>) The new associated object.</li>
</ul>
<h3>Examples:</h3>

<pre class="javascript"><span class="kw2">var</span> animals = <span class="br0">[</span><span class="st0">'Cow'</span>, <span class="st0">'Pig'</span>, <span class="st0">'Dog'</span>, <span class="st0">'Cat'</span><span class="br0">]</span>;
<span class="kw2">var</span> sounds = <span class="br0">[</span><span class="st0">'Moo'</span>, <span class="st0">'Oink'</span>, <span class="st0">'Woof'</span>, <span class="st0">'Miao'</span><span class="br0">]</span>;
sounds.<span class="me1">associate</span><span class="br0">(</span>animals<span class="br0">)</span>;
<span class="co1">//returns {'Cow': 'Moo', 'Pig': 'Oink', 'Dog': 'Woof', 'Cat': 'Miao'}</span>
</pre>

<h2 id="Array:link"><a href="#Array:link">Array Method: link</a></h2>

<p class="description">Accepts an object of key / function pairs to assign values.</p>

<h3>Syntax:</h3>

<pre class="javascript"><span class="kw2">var</span> result = Array.<span class="me1">link</span><span class="br0">(</span>array, object<span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>object - (<em>object</em>) An object containing key / function
pairs must be passed to be used as a template for associating values
with the different keys.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>object</em>) The new associated object.</li>
</ul>
<h3>Examples:</h3>

<pre class="javascript"><span class="kw2">var</span> el = document.<span class="me1">createElement</span><span class="br0">(</span><span class="st0">'div'</span><span class="br0">)</span>;
<span class="kw2">var</span> arr2 = <span class="br0">[</span><span class="nu0">100</span>, <span class="st0">'Hello'</span>, <span class="br0">{</span>foo: <span class="st0">'bar'</span><span class="br0">}</span>, el, <span class="kw2">false</span><span class="br0">]</span>;
arr2.<span class="me1">link</span><span class="br0">(</span><span class="br0">{</span>myNumber: Number.<span class="me1">type</span>, myElement: Element.<span class="me1">type</span>, myObject: Object.<span class="me1">type</span>, myString: String.<span class="me1">type</span>, myBoolean: $defined<span class="br0">}</span><span class="br0">)</span>;
<span class="co1">//returns {myNumber: 100, myElement: el, myObject: {foo: 'bar'}, myString: 'Hello', myBoolean: false}</span>
</pre>

<h2 id="Array:contains"><a href="#Array:contains">Array Method: contains</a></h2>

<p class="description">Tests an array for the presence of an item.</p>

<h3>Syntax:</h3>

<pre class="javascript"><span class="kw2">var</span> inArray = myArray.<span class="me1">contains</span><span class="br0">(</span><span class="kw1">item</span><span class="br0">[</span>, from<span class="br0">]</span><span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>item - (<em>object</em>) The item to search for in the array.</li>
<li>from - (<em>number</em>, optional: defaults to 0) The index of the array at which to begin the search.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>boolean</em>) If the array contains the item specified, returns true. Otherwise, returns false.</li>
</ul>
<h3>Examples:</h3>

<pre class="javascript"><span class="br0">[</span><span class="st0">&quot;a&quot;</span>,<span class="st0">&quot;b&quot;</span>,<span class="st0">&quot;c&quot;</span><span class="br0">]</span>.<span class="me1">contains</span><span class="br0">(</span><span class="st0">&quot;a&quot;</span><span class="br0">)</span>; <span class="co1">//returns true</span>
<span class="br0">[</span><span class="st0">&quot;a&quot;</span>,<span class="st0">&quot;b&quot;</span>,<span class="st0">&quot;c&quot;</span><span class="br0">]</span>.<span class="me1">contains</span><span class="br0">(</span><span class="st0">&quot;d&quot;</span><span class="br0">)</span>; <span class="co1">//returns false</span>
</pre>

<h3>See Also:</h3>

<ul>
<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:indexOf">MDC Array:indexOf</a></li>
</ul>
<h2 id="Array:extend"><a href="#Array:extend">Array Method: extend</a></h2>

<p class="description">Extends an array with all the items of another.</p>

<h3>Syntax:</h3>

<pre class="javascript">myArray.<span class="me1">extend</span><span class="br0">(</span>array<span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>array - (<em>array</em>) The array whose items should be extended into this array.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>array</em>) This array, extended.</li>
</ul>
<h3>Examples:</h3>

<pre class="javascript"><span class="kw2">var</span> animals = <span class="br0">[</span><span class="st0">'Cow'</span>, <span class="st0">'Pig'</span>, <span class="st0">'Dog'</span><span class="br0">]</span>;
animals.<span class="me1">extend</span><span class="br0">(</span><span class="br0">[</span><span class="st0">'Cat'</span>, <span class="st0">'Dog'</span><span class="br0">]</span><span class="br0">)</span>; <span class="co1">//animals = ['Cow', 'Pig', 'Dog', 'Cat', 'Dog'];</span>
</pre>

<h2 id="Array:getLast"><a href="#Array:getLast">Array Method: getLast</a></h2>

<p class="description">Returns the last item from the array.</p>

<h3>Syntax:</h3>

<pre class="javascript">myArray.<span class="me1">getLast</span><span class="br0">(</span><span class="br0">)</span>;
</pre>

<h3>Returns:</h3>

<ul>
<li>(<em>mixed</em>) The last item in this array.</li>
<li>(<em>null</em>) If this array is empty, returns null.</li>
</ul>
<h3>Examples:</h3>

<pre class="javascript"><span class="br0">[</span><span class="st0">'Cow'</span>, <span class="st0">'Pig'</span>, <span class="st0">'Dog'</span>, <span class="st0">'Cat'</span><span class="br0">]</span>.<span class="me1">getLast</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//returns 'Cat'</span>
</pre>

<h2 id="Array:getRandom"><a href="#Array:getRandom">Array Method: getRandom</a></h2>

<p class="description">Returns a random item from the array.</p>

<h3>Syntax:</h3>

<pre class="javascript">myArray.<span class="me1">getRandom</span><span class="br0">(</span><span class="br0">)</span>;
</pre>

<h3>Returns:</h3>

<ul>
<li>(<em>mixed</em>) A random item from this array. If this array is empty, returns null.</li>
</ul>
<h3>Examples:</h3>

<pre class="javascript"><span class="br0">[</span><span class="st0">'Cow'</span>, <span class="st0">'Pig'</span>, <span class="st0">'Dog'</span>, <span class="st0">'Cat'</span><span class="br0">]</span>.<span class="me1">getRandom</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//returns one of the items</span>
</pre>

<h2 id="Array:include"><a href="#Array:include">Array Method: include</a></h2>

<p class="description">Pushes the passed element into the array if it's not already present (case and type sensitive).</p>

<h3>Syntax:</h3>

<pre class="javascript">myArray.<span class="me1">include</span><span class="br0">(</span><span class="kw1">item</span><span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>item - (<em>object</em>) The item that should be added to this array.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>array</em>) This array with the new item included.</li>
</ul>
<h3>Examples:</h3>

<pre class="javascript"><span class="br0">[</span><span class="st0">'Cow'</span>, <span class="st0">'Pig'</span>, <span class="st0">'Dog'</span><span class="br0">]</span>.<span class="me1">include</span><span class="br0">(</span><span class="st0">'Cat'</span><span class="br0">)</span>; <span class="co1">//returns ['Cow', 'Pig', 'Dog', 'Cat']</span>
<span class="br0">[</span><span class="st0">'Cow'</span>, <span class="st0">'Pig'</span>, <span class="st0">'Dog'</span><span class="br0">]</span>.<span class="me1">include</span><span class="br0">(</span><span class="st0">'Dog'</span><span class="br0">)</span>; <span class="co1">//returns ['Cow', 'Pig', 'Dog']</span>
</pre>

<h2 id="Array:combine"><a href="#Array:combine">Array Method: combine</a></h2>

<p class="description">Combines an array with all the items of another. Does not allow duplicates and is case and type sensitive.</p>

<h3>Syntax:</h3>

<pre class="javascript">myArray.<span class="me1">combine</span><span class="br0">(</span>array<span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>array - (<em>array</em>) The array whose items should be combined into this array.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>array</em>) This array combined with the new items.</li>
</ul>
<h3>Examples:</h3>

<pre class="javascript"><span class="kw2">var</span> animals = <span class="br0">[</span><span class="st0">'Cow'</span>, <span class="st0">'Pig'</span>, <span class="st0">'Dog'</span><span class="br0">]</span>;
animals.<span class="me1">combine</span><span class="br0">(</span><span class="br0">[</span><span class="st0">'Cat'</span>, <span class="st0">'Dog'</span><span class="br0">]</span><span class="br0">)</span>; <span class="co1">//animals = ['Cow', 'Pig', 'Dog', 'Cat'];</span>
</pre>

<h2 id="Array:erase"><a href="#Array:erase">Array Method: erase</a></h2>

<p class="description">Removes all occurrences of an item from the array.</p>

<h3>Syntax:</h3>

<pre class="javascript">myArray.<span class="me1">erase</span><span class="br0">(</span><span class="kw1">item</span><span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>item - (<em>object</em>) The item to search for in the array.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>array</em>) This array with all occurrences of the item removed.</li>
</ul>
<h3>Examples:</h3>

<pre class="javascript"><span class="br0">[</span><span class="st0">'Cow'</span>, <span class="st0">'Pig'</span>, <span class="st0">'Dog'</span>, <span class="st0">'Cat'</span>, <span class="st0">'Dog'</span><span class="br0">]</span>.<span class="me1">erase</span><span class="br0">(</span><span class="st0">'Dog'</span><span class="br0">)</span> <span class="co1">//returns ['Cow', 'Pig', 'Cat']</span>
<span class="br0">[</span><span class="st0">'Cow'</span>, <span class="st0">'Pig'</span>, <span class="st0">'Dog'</span><span class="br0">]</span>.<span class="me1">erase</span><span class="br0">(</span><span class="st0">'Cat'</span><span class="br0">)</span> <span class="co1">//returns ['Cow', 'Pig', 'Dog']</span>
</pre>

<h2 id="Array:empty"><a href="#Array:empty">Array Method: empty</a></h2>

<p class="description">Empties an array.</p>

<h3>Syntax:</h3>

<pre class="javascript">myArray.<span class="me1">empty</span><span class="br0">(</span><span class="br0">)</span>;
</pre>

<h3>Returns:</h3>

<ul>
<li>(<em>array</em>) This array, emptied.</li>
</ul>
<h3>Examples:</h3>

<pre class="javascript"><span class="kw2">var</span> myArray = <span class="br0">[</span><span class="st0">'old'</span>, <span class="st0">'data'</span><span class="br0">]</span>;
myArray.<span class="me1">empty</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//myArray is now []</span>
</pre>

<h2 id="Array:flatten"><a href="#Array:flatten">Array Method: flatten</a></h2>

<p class="description">Flattens a multidimensional array into a single array.</p>

<h3>Syntax:</h3>

<pre class="javascript">myArray.<span class="me1">flatten</span><span class="br0">(</span><span class="br0">)</span>;
</pre>

<h3>Returns:</h3>

<ul>
<li>(<em>array</em>) A new flat array.</li>
</ul>
<h3>Examples:</h3>

<pre class="javascript"><span class="kw2">var</span> myArray = <span class="br0">[</span><span class="nu0">1</span>,<span class="nu0">2</span>,<span class="nu0">3</span>,<span class="br0">[</span><span class="nu0">4</span>,<span class="nu0">5</span>, <span class="br0">[</span><span class="nu0">6</span>,<span class="nu0">7</span><span class="br0">]</span><span class="br0">]</span>, <span class="br0">[</span><span class="br0">[</span><span class="br0">[</span><span class="nu0">8</span><span class="br0">]</span><span class="br0">]</span><span class="br0">]</span><span class="br0">]</span>;
<span class="kw2">var</span> newArray = myArray.<span class="me1">flatten</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//newArray is [1,2,3,4,5,6,7,8]</span>
</pre>

<h2 id="Array:hexToRgb"><a href="#Array:hexToRgb">Array Method: hexToRgb</a></h2>

<p class="description">Converts an hexidecimal color value to RGB. Input array must be the following hexidecimal color format.
['FF','FF','FF']</p>

<h3>Syntax:</h3>

<pre class="javascript">myArray.<span class="me1">hexToRgb</span><span class="br0">(</span><span class="br0">[</span>array<span class="br0">]</span><span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>array - (<em>boolean</em>, optional) If true is passed, will output an array (eg. [255, 51, 0]) instead of a string (eg. &quot;rgb(255,51,0)&quot;).</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>string</em>) A string representing the color in RGB.</li>
<li>(<em>array</em>) If the array flag is set, an array will be returned instead.</li>
</ul>
<h3>Examples:</h3>

<pre class="javascript"><span class="br0">[</span><span class="st0">'11'</span>,<span class="st0">'22'</span>,<span class="st0">'33'</span><span class="br0">]</span>.<span class="me1">hexToRgb</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//returns &quot;rgb(17,34,51)&quot;</span>
<span class="br0">[</span><span class="st0">'11'</span>,<span class="st0">'22'</span>,<span class="st0">'33'</span><span class="br0">]</span>.<span class="me1">hexToRgb</span><span class="br0">(</span><span class="kw2">true</span><span class="br0">)</span>; <span class="co1">//returns [17, 34, 51]</span>
</pre>

<h3>See Also:</h3>

<ul>
<li><a href="String.htm#hexToRgb">String:hexToRgb</a></li>
</ul>
<h2 id="Array:rgbToHex"><a href="#Array:rgbToHex">Array Method: rgbToHex</a></h2>

<p class="description">Converts an RGB color value to hexidecimal. Input array must be in one of the following RGB color formats.
[255,255,255], or [255,255,255,1]</p>

<h3>Syntax:</h3>

<pre class="javascript">myArray.<span class="me1">rgbToHex</span><span class="br0">(</span><span class="br0">[</span>array<span class="br0">]</span><span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>array - (<em>boolean</em>, optional) If true is passed, will output an array (eg. ['ff','33','00']) instead of a string (eg. &quot;#ff3300&quot;).</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>string</em>) A string representing the color in hexadecimal,
or 'transparent' string if the fourth value of rgba in the input array
is 0 (rgba).</li>
<li>(<em>array</em>) If the array flag is set, an array will be returned instead.</li>
</ul>
<h3>Examples:</h3>

<pre class="javascript"><span class="br0">[</span><span class="nu0">17</span>,<span class="nu0">34</span>,<span class="nu0">51</span><span class="br0">]</span>.<span class="me1">rgbToHex</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//returns &quot;#112233&quot;</span>
<span class="br0">[</span><span class="nu0">17</span>,<span class="nu0">34</span>,<span class="nu0">51</span><span class="br0">]</span>.<span class="me1">rgbToHex</span><span class="br0">(</span><span class="kw2">true</span><span class="br0">)</span>; <span class="co1">//returns ['11','22','33']</span>
<span class="br0">[</span><span class="nu0">17</span>,<span class="nu0">34</span>,<span class="nu0">51</span>,<span class="nu0">0</span><span class="br0">]</span>.<span class="me1">rgbToHex</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//returns &quot;transparent&quot;</span>
</pre>

<h3>See Also:</h3>

<ul>
<li><a href="String.htm#rgbToHex">String:rgbToHex</a></li>
</ul>
<h1 id="Utility"><a href="#Utility">Utility Functions</a></h1>

<h2 id="A" class="description"><a href="#A">Function: $A</a></h2>

<p class="description">Creates a copy of an Array. Useful for applying
the Array prototypes to iterable objects such as a DOM Node collection
or the arguments object.</p>

<h3>Syntax:</h3>

<pre class="javascript"><span class="kw2">var</span> copiedArray = $A<span class="br0">(</span>iterable<span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>iterable - (array) The iterable to copy.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>array</em>) The new copied array.</li>
</ul>
<h3>Examples:</h3>

<h4>Apply Array to arguments:</h4>

<pre class="javascript"><span class="kw2">function</span> myFunction<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    $A<span class="br0">(</span>arguments<span class="br0">)</span>.<span class="me1">each</span><span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span>argument, index<span class="br0">)</span><span class="br0">{</span>
        <span class="kw3">alert</span><span class="br0">(</span>argument<span class="br0">)</span>;
    <span class="br0">}</span><span class="br0">)</span>;
<span class="br0">}</span>;
myFunction<span class="br0">(</span><span class="st0">&quot;One&quot;</span>, <span class="st0">&quot;Two&quot;</span>, <span class="st0">&quot;Three&quot;</span><span class="br0">)</span>; <span class="co1">//Alerts &quot;One&quot;, then &quot;Two&quot;, then &quot;Three&quot;.</span>
</pre>

<h4>Copy an Array:</h4>

<pre class="javascript"><span class="kw2">var</span> anArray = <span class="br0">[</span><span class="nu0">0</span>, <span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span>, <span class="nu0">4</span><span class="br0">]</span>;
<span class="kw2">var</span> copiedArray = $A<span class="br0">(</span>anArray<span class="br0">)</span>; <span class="co1">//Returns [0, 1, 2, 3, 4].</span>
</pre>

			
			</div>
		
			<div id="menu" class="span-2 last">
			
			<h4 class="menu-item"><a href="#Array">Array</a></h4>
<div class="menu-item"><a href="#Array:each">each</a></div>
<div class="menu-item"><a href="#Array:every">every</a></div>
<div class="menu-item"><a href="#Array:filter">filter</a></div>
<div class="menu-item"><a href="#Array:clean">clean</a></div>
<div class="menu-item"><a href="#Array:indexOf">indexOf</a></div>
<div class="menu-item"><a href="#Array:map">map</a></div>
<div class="menu-item"><a href="#Array:some">some</a></div>
<div class="menu-item"><a href="#Array:associate">associate</a></div>
<div class="menu-item"><a href="#Array:link">link</a></div>
<div class="menu-item"><a href="#Array:contains">contains</a></div>
<div class="menu-item"><a href="#Array:extend">extend</a></div>
<div class="menu-item"><a href="#Array:getLast">getLast</a></div>
<div class="menu-item"><a href="#Array:getRandom">getRandom</a></div>
<div class="menu-item"><a href="#Array:include">include</a></div>
<div class="menu-item"><a href="#Array:combine">combine</a></div>
<div class="menu-item"><a href="#Array:erase">erase</a></div>
<div class="menu-item"><a href="#Array:empty">empty</a></div>
<div class="menu-item"><a href="#Array:flatten">flatten</a></div>
<div class="menu-item"><a href="#Array:hexToRgb">hexToRgb</a></div>
<div class="menu-item"><a href="#Array:rgbToHex">rgbToHex</a></div>
<h4 class="menu-item"><a href="#Utility">Utility</a></h4>
<div class="menu-item"><a href="#A">A</a></div>
</div>
			
			<div id="footy" class="clear span-24">
				<p class="quiet">This documentation is released under a <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">Attribution-NonCommercial-ShareAlike 3.0</a> License.</p>
			</div>
		
		</div>
	
</div>
<div id="footer">
	<div class="container">
		<p class="copy"><a href="http://mad4milk.net/" id="mucca"></a></p>
		<p>copyright ©2006-2008 <a href="http://mad4milk.net/">Valerio Proietti</a></p>
	</div>
</div>

</body></html>