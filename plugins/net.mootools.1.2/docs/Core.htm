<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" lang="en"><head>



	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

	<meta name="author" content="Valerio Proietti, mad4milk" />
	<meta name="copyright" content="copyright 2006 www.mad4milk.net" />
	<meta name="Description" content="mootools, a super lightweight web2.0 javascript framework" />
	<meta name="Keywords" content="mootools,moo.fx,javascript effects,javascript framework,ajax framework,moo.ajax" />
	<meta name="robots" content="all" />

	<!--

               ____        _                      __  __      __   __
   ___   __   / __'\     _\'\      __   ___   __ /\_\/\ \    /\ \ / /  web 2.0 beta
  /\  \_/ '\ /\ \Z\ \   / __ \    /__\ /\  \_/ '\\/_/\ \ \   \ \ \ /__
  \ \  __/\ \\ \  __ \ /\ \Z\ \  / \Z\\\ \  __/\ \  __\ \ \___\ \  _ '\
   \ \_\ \ \_\\ \_\ \ \\ \_____\/\____ \\ \_\ \ \_\/\ \\ \____\\ \_\ \_\
    \/_/  \/_/ \/_/\/_/ \/_____/\/___/\_\\/_/  \/_/\ \_\\/____/ \/_/\/_/
                                     \/_/           \/_/       be happy.

	-->

	<title>MooTools Docs - Plugins/Core</title>
	
	<!-- Shortcut Icons -->
	
	<link href="http://mootools.net/assets/icons/icon.png" rel="shortcut icon" type="image/x-icon" />
	<link href="http://mootools.net/assets/icons/ipod-icon.png" rel="apple-touch-icon" />
	
	<!-- BluePrint -->
	
	<link href="assets/screen.css" rel="stylesheet" type="text/css" media="screen" />
	<link href="assets/print.css" rel="stylesheet" type="text/css" media="print" />
	
	<!-- StyleSheets -->
	
	<link href="assets/layout.css" rel="stylesheet" type="text/css" media="screen" />
	<link href="assets/main.css" rel="stylesheet" type="text/css" media="screen" />
	
	<!-- Scripts -->
	
	<script src="assets/mootools.js" type="text/javascript"></script>
	<script src="assets/mootools_002.js" type="text/javascript"></script>
	
	<!-- Section Specific -->
	
	<link href="assets/docs.css" rel="stylesheet" type="text/css" media="screen" />	
<script type="text/javascript" src="assets/jsapi"></script>	
<script type="text/javascript" src="assets/docs.js"></script><script src="assets/a" type="text/javascript"></script><script src="assets/defaulten.js" type="text/javascript"></script>
	
</head><body>

<div id="header">
	
	<div class="container">
		<a href="http://mediatemple.net/" id="mediatemple"><span>in partnership with mediatemple</span></a>

		<div id="logo">
			<h1><a href="http://mootools.net/"><span>MooTools</span></a></h1>
			<h2><span>a compact javascript framework</span></h2>
		</div>

	</div>
	
</div>

<div id="wrapper">

		<div class="container">
		
			<div id="main-menu" class="span-4">
			
			<h4>Core</h4>
<div><a href="Core.htm">Core</a></div>
<div><a href="Browser.htm">Browser</a></div>
<h4>Native</h4>
<div><a href="Array.htm">Array</a></div>
<div><a href="Function.htm">Function</a></div>
<div><a href="Number.htm">Number</a></div>
<div><a href="String.htm">String</a></div>
<div><a href="Hash.htm">Hash</a></div>
<div><a href="Event.htm">Event</a></div>
<h4>Class</h4>
<div><a href="Class.htm">Class</a></div>
<div><a href="Class.Extras.htm">Class.Extras</a></div>
<h4>Element</h4>
<div><a href="Element.htm">Element</a></div>
<div><a href="Element.Event.htm">Element.Event</a></div>
<div><a href="Element.Style.htm">Element.Style</a></div>
<div><a href="Element.Dimensions.htm">Element.Dimensions</a></div>
<h4>Utilities</h4>
<div><a href="Selectors.htm">Selectors</a></div>
<div><a href="DomReady.htm">DomReady</a></div>
<div><a href="JSON.htm">JSON</a></div>
<div><a href="Cookie.htm">Cookie</a></div>
<div><a href="Swiff.htm">Swiff</a></div>
<h4>Fx</h4>
<div><a href="Fx.htm">Fx</a></div>
<div><a href="Fx.CSS.htm">Fx.CSS</a></div>
<div><a href="Fx.Tween.htm">Fx.Tween</a></div>
<div><a href="Fx.Morph.htm">Fx.Morph</a></div>
<div><a href="Fx.Transitions.htm">Fx.Transitions</a></div>
<h4>Request</h4>
<div><a href="Request.htm">Request</a></div>
<div><a href="Request.HTML.htm">Request.HTML</a></div>
<div><a href="Request.JSON.htm">Request.JSON</a></div>
<h4>Plugins</h4>
<div><a href="Fx.Slide.htm">Fx.Slide</a></div>
<div><a href="Fx.Scroll.htm">Fx.Scroll</a></div>
<div><a href="Fx.Elements.htm">Fx.Elements</a></div>
<div><a href="Drag.htm">Drag</a></div>
<div><a href="Drag.Move.htm">Drag.Move</a></div>
<div><a href="Color.htm">Color</a></div>
<div><a href="Group.htm">Group</a></div>
<div><a href="Hash.Cookie.htm">Hash.Cookie</a></div>
<div><a href="Sortables.htm">Sortables</a></div>
<div><a href="Tips.htm">Tips</a></div>
<div><a href="SmoothScroll.htm">SmoothScroll</a></div>
<div><a href="Slider.htm">Slider</a></div>
<div><a href="Scroller.htm">Scroller</a></div>
<div><a href="Assets.htm">Assets</a></div>
<div><a href="Accordion.htm">Accordion</a></div>
</div>
		
			<div id="main" class="l-border r-border span-15">
			
				<h1 id="Core"><a href="#Core">Core</a></h1>

<p class="description">Core contains an handful of common sense functions used in <a href="http://mootools.net/">MooTools</a>.
It also contains some basic <a href="Hash.htm">Hash</a> and <a href="Array.htm">Array</a> methods.</p>

<h2 id="chk"><a href="#chk">Function: $chk</a></h2>

<p class="description">Checks to see if a value exists or is 0. Useful for allowing 0.</p>

<h3>Syntax:</h3>

<pre class="javascript">$chk<span class="br0">(</span><span class="kw1">item</span><span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>item - (<em>mixed</em>) The item to inspect.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>boolean</em>) If the object passed in exists or is 0, returns true. Otherwise, returns false.</li>
</ul>
<h3>Example:</h3>

<pre class="javascript"><span class="kw2">function</span> myFunction<span class="br0">(</span>arg<span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">if</span><span class="br0">(</span>$chk<span class="br0">(</span>arg<span class="br0">)</span><span class="br0">)</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'The object exists or is 0.'</span><span class="br0">)</span>;
    <span class="kw1">else</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'The object is either null, undefined, false, or &quot;&quot;'</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre>

<h2 id="clear"><a href="#clear">Function: $clear</a></h2>

<p class="description">Clears a Timeout or an Interval. Useful when working with <a href="Function.htm#Function:delay">Function:delay</a> and <a href="Function.htm#Function:periodical">Function:periodical</a>.</p>

<h3>Syntax:</h3>

<pre class="javascript">$clear<span class="br0">(</span>timer<span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>timer - (<em>number</em>) The identifier of the setInterval (periodical) or setTimeout (delay) to clear.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>null</em>) returns null.</li>
</ul>
<h3>Example:</h3>

<pre class="javascript"><span class="kw2">var</span> myTimer = myFunction.<span class="me1">delay</span><span class="br0">(</span><span class="nu0">5000</span><span class="br0">)</span>; <span class="co1">//Waits 5 seconds then executes myFunction.</span>
myTimer = $clear<span class="br0">(</span>myTimer<span class="br0">)</span>; <span class="co1">//Cancels myFunction.</span>
</pre>

<h3>See also:</h3>

<ul>
<li><a href="Function.htm#Function:delay">Function:delay</a></li>
<li><a href="Function.htm#Function:periodical">Function:periodical</a></li>
</ul>
<h2 id="defined"><a href="#defined">Function: $defined</a></h2>

<p class="description">Checks to see if a value is defined.</p>

<h3>Syntax:</h3>

<pre class="javascript">$defined<span class="br0">(</span>obj<span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>obj - (<em>mixed</em>) The object to inspect.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>boolean</em>) If the object passed is not null or undefined, returns true. Otherwise, returns false.</li>
</ul>
<h3>Example:</h3>

<pre class="javascript"><span class="kw2">function</span> myFunction<span class="br0">(</span>arg<span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">if</span><span class="br0">(</span>$defined<span class="br0">(</span>arg<span class="br0">)</span><span class="br0">)</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'The object is defined.'</span><span class="br0">)</span>;
    <span class="kw1">else</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'The object is null or undefined.'</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre>

<h2 id="arguments"><a href="#arguments">Function: $arguments</a></h2>

<p class="description">Creates a function which returns the passed argument according to the index (i) passed.</p>

<h3>Syntax:</h3>

<pre class="javascript"><span class="kw2">var</span> argument = $arguments<span class="br0">(</span>i<span class="br0">)</span>;
</pre>

<h3>Arguments</h3>

<ol>
<li>i - (<em>number</em>) The index of the argument to return.</li>
</ol>
<h3>Returns</h3>

<ul>
<li>(<em>function</em>) The function that returns a certain argument from the function's arguments.</li>
</ul>
<h3>Example:</h3>

<pre class="javascript"><span class="kw2">var</span> secondArgument = $arguments<span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span>;
<span class="kw3">alert</span><span class="br0">(</span>secondArgument<span class="br0">(</span><span class="st0">'a'</span>,<span class="st0">'b'</span>,<span class="st0">'c'</span><span class="br0">)</span><span class="br0">)</span>; <span class="co1">//Alerts &quot;b&quot;.</span>
</pre>

<h2 id="empty"><a href="#empty">Function: $empty</a></h2>

<p class="description">An empty function, that's it. Typically used for as a placeholder inside event methods of classes.</p>

<h3>Syntax:</h3>

<pre class="javascript"><span class="kw2">var</span> emptyFn = $empty;
</pre>

<h3>Example:</h3>

<pre class="javascript"><span class="kw2">var</span> myFunc = $empty;
</pre>

<h2 id="lambda"><a href="#lambda">Function: $lambda</a></h2>

<p class="description">Creates an empty function which does nothing but return the value passed.</p>

<h3>Syntax:</h3>

<pre class="javascript"><span class="kw2">var</span> returnTrue = $lambda<span class="br0">(</span><span class="kw2">true</span><span class="br0">)</span>;
</pre>

<h3>Arguments</h3>

<ol>
<li>value - (<em>mixed</em>) The value for the created function to return.</li>
</ol>
<h3>Returns</h3>

<ul>
<li>(<em>function</em>) A function which returns the desired value.</li>
</ul>
<h3>Example:</h3>

<pre class="javascript">myLink.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'click'</span>, $lambda<span class="br0">(</span><span class="kw2">false</span><span class="br0">)</span><span class="br0">)</span>; <span class="co1">//Prevents a link Element from being clickable.</span>
</pre>

<h2 id="extend"><a href="#extend">Function: $extend</a></h2>

<p class="description">Copies all the properties from the second object passed in to the first object passed in.</p>

<h3>Syntax:</h3>

<pre class="javascript">$extend<span class="br0">(</span>original, extended<span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>original  - (<em>object</em>) The object to be extended.</li>
<li>extension - (<em>object</em>) The object whose properties will be copied to original.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>object</em>) The first object passed in, extended.</li>
</ul>
<h3>Examples:</h3>

<pre class="javascript"><span class="kw2">var</span> firstObj = <span class="br0">{</span>
    <span class="st0">'name'</span>: <span class="st0">'John'</span>,
    <span class="st0">'lastName'</span>: <span class="st0">'Doe'</span>
<span class="br0">}</span>;
<span class="kw2">var</span> secondObj = <span class="br0">{</span>
    <span class="st0">'age'</span>: <span class="st0">'20'</span>,
    <span class="st0">'sex'</span>: <span class="st0">'male'</span>,
    <span class="st0">'lastName'</span>: <span class="st0">'Dorian'</span>
<span class="br0">}</span>;
$extend<span class="br0">(</span>firstObj, secondObj<span class="br0">)</span>;
<span class="co1">//firstObj is now: {'name': 'John', 'lastName': 'Dorian', 'age': '20', 'sex': 'male'};</span>
</pre>

<h2 id="merge"><a href="#merge">Function: $merge</a></h2>

<p class="description">Merges any number of objects recursively without referencing them or their sub-objects.</p>

<h3>Syntax:</h3>

<pre class="javascript"><span class="kw2">var</span> merged = $merge<span class="br0">(</span>obj1, obj2<span class="br0">[</span>, obj3<span class="br0">[</span>, ...<span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>(objects) Any number of objects.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>object</em>) The object that is created as a result of merging all the objects passed in.</li>
</ul>
<h3>Examples:</h3>

<pre class="javascript"><span class="kw2">var</span> obj1 = <span class="br0">{</span>a: <span class="nu0">0</span>, b: <span class="nu0">1</span><span class="br0">}</span>;
<span class="kw2">var</span> obj2 = <span class="br0">{</span>c: <span class="nu0">2</span>, d: <span class="nu0">3</span><span class="br0">}</span>;
<span class="kw2">var</span> obj3 = <span class="br0">{</span>a: <span class="nu0">4</span>, d: <span class="nu0">5</span><span class="br0">}</span>;
<span class="kw2">var</span> merged = $merge<span class="br0">(</span>obj1, obj2, obj3<span class="br0">)</span>; <span class="co1">//returns {a: 4, b: 1, c: 2, d: 5}, (obj1, obj2, and obj3 are unaltered)</span>
&nbsp;
<span class="kw2">var</span> nestedObj1 = <span class="br0">{</span>a: <span class="br0">{</span>b: <span class="nu0">1</span>, c: <span class="nu0">1</span><span class="br0">}</span><span class="br0">}</span>;
<span class="kw2">var</span> nestedObj2 = <span class="br0">{</span>a: <span class="br0">{</span>b: <span class="nu0">2</span><span class="br0">}</span><span class="br0">}</span>;
<span class="kw2">var</span> nested = $merge<span class="br0">(</span>nestedObj1, nestedObj2<span class="br0">)</span>; <span class="co1">//returns: {a: {b: 2, c: 1}}</span>
</pre>

<h2 id="each"><a href="#each">Function: $each</a></h2>

<p class="description">Used to iterate through iterables that are not
regular arrays, such as built in getElementsByTagName calls, arguments
of a function, or an object.</p>

<h3>Syntax:</h3>

<pre class="javascript">$each<span class="br0">(</span>iterable, fn<span class="br0">[</span>, bind<span class="br0">]</span><span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>iterable - (<em>object</em> or <em>array</em>) The object or array to iterate through.</li>
<li>fn       - (<em>function</em>) The function to test for each element.</li>
<li>bind     - (<em>object</em>, optional) The object to use as 'this' within the function. For more information see <a href="Function.htm#Function:bind">Function:bind</a>.</li>
</ol>
<h4>Argument: fn</h4>

<h5>Syntax:</h5>

<pre class="javascript">fn<span class="br0">(</span><span class="kw1">item</span>, index, object<span class="br0">)</span>
</pre>

<h5>Arguments:</h5>

<ol>
<li>item   - (<em>mixed</em>) The current item in the array.</li>
<li>index  - (<em>number</em>) The current item's index in the array. In the case of an object, it is passed the key of that item rather than the index.</li>
<li>object - (<em>mixed</em>) The actual array/object.</li>
</ol>
<h3>Examples:</h3>

<h4>Array Example:</h4>

<pre class="javascript">$each<span class="br0">(</span><span class="br0">[</span><span class="st0">'Sun'</span>,<span class="st0">'Mon'</span>,<span class="st0">'Tue'</span><span class="br0">]</span>, <span class="kw2">function</span><span class="br0">(</span>day, index<span class="br0">)</span><span class="br0">{</span>
    <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'name:'</span> + day + <span class="st0">', index: '</span> + index<span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>; <span class="co1">//Alerts &quot;name: Sun, index: 0&quot;, &quot;name: Mon, index: 1&quot;, etc.</span>
</pre>

<h4>Object Example:</h4>

<pre class="javascript"><span class="co1">//Alerts &quot;The first day of the week is Sunday&quot;, &quot;The second day of the week is Monday&quot;, etc:</span>
$each<span class="br0">(</span><span class="br0">{</span>first: <span class="st0">&quot;Sunday&quot;</span>, second: <span class="st0">&quot;Monday&quot;</span>, third: <span class="st0">&quot;Tuesday&quot;</span><span class="br0">}</span>, <span class="kw2">function</span><span class="br0">(</span>value, key<span class="br0">)</span><span class="br0">{</span>
    <span class="kw3">alert</span><span class="br0">(</span><span class="st0">&quot;The &quot;</span> + key + <span class="st0">&quot; day of the week is &quot;</span> + value<span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>;
</pre>

<h2 id="pick"><a href="#pick">Function: $pick</a></h2>

<p class="description">Returns the first defined argument passed in, or null.</p>

<h3>Syntax:</h3>

<pre class="javascript"><span class="kw2">var</span> picked = $pick<span class="br0">(</span>var1<span class="br0">[</span>, var2<span class="br0">[</span>, var3<span class="br0">[</span>, ...<span class="br0">]</span><span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ul>
<li>(<em>mixed</em>) Any number of variables.</li>
</ul>
<h3>Returns:</h3>

<ul>
<li>(<em>mixed</em>) The first variable that is defined.</li>
<li>(<em>null</em>) If all variables passed in are <code>null</code> or <code>undefined</code>, returns <code>null</code>.</li>
</ul>
<h3>Example:</h3>

<pre class="javascript"><span class="kw2">function</span> say<span class="br0">(</span>infoMessage, errorMessage<span class="br0">)</span><span class="br0">{</span>
    <span class="kw3">alert</span><span class="br0">(</span>$pick<span class="br0">(</span>errorMessage, infoMessage, <span class="st0">'There was no message supplied.'</span><span class="br0">)</span><span class="br0">)</span>;
<span class="br0">}</span>
say<span class="br0">(</span><span class="br0">)</span>; <span class="co1">//Alerts &quot;There was no message supplied.&quot;</span>
say<span class="br0">(</span><span class="st0">&quot;This is an info message.&quot;</span><span class="br0">)</span>; <span class="co1">//Alerts &quot;This is an info message.&quot;</span>
say<span class="br0">(</span><span class="st0">&quot;This message will be ignored.&quot;</span>, <span class="st0">&quot;This is the error message.&quot;</span><span class="br0">)</span>; <span class="co1">//Alerts &quot;This is the error message.&quot;</span>
</pre>

<h2 id="random"><a href="#random">Function: $random</a></h2>

<p class="description">Returns a random integer between the two passed in values.</p>

<h3>Syntax:</h3>

<pre class="javascript"><span class="kw2">var</span> random = $random<span class="br0">(</span>min, max<span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>min - (<em>number</em>) The minimum value (inclusive).</li>
<li>max - (<em>number</em>) The maximum value (inclusive).</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>number</em>) A random number between min and max.</li>
</ul>
<h3>Example:</h3>

<pre class="javascript"><span class="kw3">alert</span><span class="br0">(</span>$random<span class="br0">(</span><span class="nu0">5</span>, <span class="nu0">20</span><span class="br0">)</span><span class="br0">)</span>; <span class="co1">//Alerts a random number between 5 and 20.</span>
</pre>

<h2 id="splat"><a href="#splat">Function: $splat</a></h2>

<p class="description">Converts the argument passed in to an array if it is defined and not already an array.</p>

<h3>Syntax:</h3>

<pre class="javascript"><span class="kw2">var</span> splatted = $splat<span class="br0">(</span>obj<span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>obj - (<em>mixed</em>) Any type of variable.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>(<em>array</em>) If the variable passed in is an array, returns the
array. Otherwise, returns an array with the only element being the
variable passed in.</li>
</ul>
<h3>Example:</h3>

<pre class="javascript">$splat<span class="br0">(</span><span class="st0">'hello'</span><span class="br0">)</span>; <span class="co1">//Returns ['hello'].</span>
$splat<span class="br0">(</span><span class="br0">[</span><span class="st0">'a'</span>, <span class="st0">'b'</span>, <span class="st0">'c'</span><span class="br0">]</span><span class="br0">)</span>; <span class="co1">//Returns ['a', 'b', 'c'].</span>
</pre>

<h2 id="time"><a href="#time">Function: $time</a></h2>

<p class="description">Returns the current time as a timestamp.</p>

<h3>Syntax:</h3>

<pre class="javascript"><span class="kw2">var</span> time = $time<span class="br0">(</span><span class="br0">)</span>;
</pre>

<h3>Returns:</h3>

<ul>
<li>(<em>number</em>) - The current timestamp.</li>
</ul>
<h2 id="try"><a href="#try">Function: $try</a></h2>

<p class="description">Tries to execute a number of functions. Returns
immediately the return value of the first non-failed function without
executing successive functions, or null.</p>

<h3>Syntax:</h3>

<pre class="javascript">$try<span class="br0">(</span>fn<span class="br0">[</span>, fn, fn, fn, ...<span class="br0">]</span><span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ul>
<li>fn   - (<em>function</em>) The function to execute.</li>
</ul>
<h3>Returns:</h3>

<ul>
<li>(<em>mixed</em>) Standard return of the called function.</li>
<li>(<em>null</em>) <code>null</code> if all the passed functions fail.</li>
</ul>
<h3>Examples:</h3>

<pre class="javascript"><span class="kw2">var</span> result = $try<span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">return</span> some.<span class="me1">made</span>.<span class="me1">up</span>.<span class="me1">object</span>;
<span class="br0">}</span>, <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">return</span> jibberish.<span class="me1">that</span>.<span class="me1">doesnt</span>.<span class="me1">exists</span>;
<span class="br0">}</span>, <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">return</span> <span class="kw2">false</span>;
<span class="br0">}</span><span class="br0">)</span>;
&nbsp;
<span class="co1">//result is false</span>
&nbsp;
<span class="kw2">var</span> failure, success;
&nbsp;
$try<span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    some.<span class="me1">made</span>.<span class="me1">up</span>.<span class="me1">object</span> = <span class="st0">'something'</span>;
    success = <span class="kw2">true</span>;
<span class="br0">}</span>, <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    failure = <span class="kw2">true</span>;
<span class="br0">}</span><span class="br0">)</span>;
&nbsp;
<span class="kw1">if</span> <span class="br0">(</span>success<span class="br0">)</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'yey!'</span><span class="br0">)</span>;
</pre>

<h2 id="type"><a href="#type">Function: $type</a></h2>

<p class="description">Returns the type of object that matches the element passed in.</p>

<h3>Syntax:</h3>

<pre class="javascript">$type<span class="br0">(</span>obj<span class="br0">)</span>;
</pre>

<h3>Arguments:</h3>

<ol>
<li>obj - (<em>object</em>) The object to inspect.</li>
</ol>
<h3>Returns:</h3>

<ul>
<li>'element'    - (<em>string</em>) If object is a DOM element node.</li>
<li>'textnode'   - (<em>string</em>) If object is a DOM text node.</li>
<li>'whitespace' - (<em>string</em>) If object is a DOM whitespace node.</li>
<li>'arguments'  - (<em>string</em>) If object is an arguments object.</li>
<li>'array'      - (<em>string</em>) If object is an array.</li>
<li>'object'     - (<em>string</em>) If object is an object.</li>
<li>'string'     - (<em>string</em>) If object is a string.</li>
<li>'number'     - (<em>string</em>) If object is a number.</li>
<li>'date'       - (<em>string</em>) If object is a date.</li>
<li>'boolean'    - (<em>string</em>) If object is a boolean.</li>
<li>'function'   - (<em>string</em>) If object is a function.</li>
<li>'regexp'     - (<em>string</em>) If object is a regular expression.</li>
<li>'class'      - (<em>string</em>) If object is a Class (created with new Class, or the extend of another class).</li>
<li>'collection' - (<em>string</em>) If object is a native htmlelements collection, such as childNodes, getElementsByTagName, etc.</li>
<li>'window'     - (<em>string</em>) If object is the window object.</li>
<li>'document'   - (<em>string</em>) If object is the document object.</li>
<li>false        - (<em>boolean</em>) If object is undefined, null, NaN or none of the above.</li>
</ul>
<h3>Example:</h3>

<pre class="javascript"><span class="kw2">var</span> myString = <span class="st0">'hello'</span>;
$type<span class="br0">(</span>myString<span class="br0">)</span>; <span class="co1">//Returns &quot;string&quot;.</span>
</pre>

			
			</div>
		
			<div id="menu" class="span-2 last">
			
			<h4 class="menu-item"><a href="#Core">Core</a></h4>
<div class="menu-item"><a href="#chk">chk</a></div>
<div class="menu-item"><a href="#clear">clear</a></div>
<div class="menu-item"><a href="#defined">defined</a></div>
<div class="menu-item"><a href="#arguments">arguments</a></div>
<div class="menu-item"><a href="#empty">empty</a></div>
<div class="menu-item"><a href="#lambda">lambda</a></div>
<div class="menu-item"><a href="#extend">extend</a></div>
<div class="menu-item"><a href="#merge">merge</a></div>
<div class="menu-item"><a href="#each">each</a></div>
<div class="menu-item"><a href="#pick">pick</a></div>
<div class="menu-item"><a href="#random">random</a></div>
<div class="menu-item"><a href="#splat">splat</a></div>
<div class="menu-item"><a href="#time">time</a></div>
<div class="menu-item"><a href="#try">try</a></div>
<div class="menu-item"><a href="#type">type</a></div>
</div>
			
			<div id="footy" class="clear span-24">
				<p class="quiet">This documentation is released under a <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">Attribution-NonCommercial-ShareAlike 3.0</a> License.</p>
			</div>
		
		</div>
	
</div>
<div id="footer">
	<div class="container">
		<p class="copy"><a href="http://mad4milk.net/" id="mucca"></a></p>
		<p>copyright ©2006-2008 <a href="http://mad4milk.net/">Valerio Proietti</a></p>
	</div>
</div>

</body></html>