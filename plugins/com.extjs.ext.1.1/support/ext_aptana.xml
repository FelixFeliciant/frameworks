<?xml version="1.0" encoding="UTF-8"?>
<javascript><class type="Date" superclass="Object"><description>The date parsing and format syntax is a subset of
&lt;a href=&quot;http://www.php.net/date&quot;&gt;PHP's date() function&lt;/a&gt;, and the formats that are
supported will provide results equivalent to their PHP versions.
Following is the list of all currently supported formats:
&lt;pre&gt;Sample date:&#13;
'Wed Jan 10 2007 15:05:01 GMT-0600 (Central Standard Time)'&#13;
&#13;
Format  Output      Description&#13;
------  ----------  --------------------------------------------------------------&#13;
  d      10         Day of the month, 2 digits with leading zeros&#13;
  D      Wed        A textual representation of a day, three letters&#13;
  j      10         Day of the month without leading zeros&#13;
  l      Wednesday  A full textual representation of the day of the week&#13;
  S      th         English ordinal day of month suffix, 2 chars (use with j)&#13;
  w      3          Numeric representation of the day of the week&#13;
  z      9          The julian date, or day of the year (0-365)&#13;
  W      01         ISO-8601 2-digit week number of year, weeks starting on Monday (00-52)&#13;
  F      January    A full textual representation of the month&#13;
  m      01         Numeric representation of a month, with leading zeros&#13;
  M      Jan        Month name abbreviation, three letters&#13;
  n      1          Numeric representation of a month, without leading zeros&#13;
  t      31         Number of days in the given month&#13;
  L      0          Whether it's a leap year (1 if it is a leap year, else 0)&#13;
  Y      2007       A full numeric representation of a year, 4 digits&#13;
  y      07         A two digit representation of a year&#13;
  a      pm         Lowercase Ante meridiem and Post meridiem&#13;
  A      PM         Uppercase Ante meridiem and Post meridiem&#13;
  g      3          12-hour format of an hour without leading zeros&#13;
  G      15         24-hour format of an hour without leading zeros&#13;
  h      03         12-hour format of an hour with leading zeros&#13;
  H      15         24-hour format of an hour with leading zeros&#13;
  i      05         Minutes with leading zeros&#13;
  s      01         Seconds, with leading zeros&#13;
  O      -0600      Difference to Greenwich time (GMT) in hours&#13;
  T      CST        Timezone setting of the machine running the code&#13;
  Z      -21600     Timezone offset in seconds (negative if west of UTC, positive if east)&lt;/pre&gt;
Example usage (note that you must escape format specifiers with '\\' to render them as character literals):
&lt;pre&gt;&lt;code&gt;var dt = new Date('1/10/2007 03:05:01 PM GMT-0600');
document.write(dt.format('Y-m-d'));                         //2007-01-10
document.write(dt.format('F j, Y, g:i a'));                 //January 10, 2007, 3:05 pm
document.write(dt.format('l, \\t\\he dS of F Y h:i:s A'));  //Wednesday, the 10th of January 2007 03:05:01 PM&lt;/code&gt;&lt;/pre&gt;
Here are some standard date/time patterns that you might find helpful.  They
are not part of the source of Date.js, but to use them you can simply copy this
block of code into any script that is included after Date.js and they will also become
globally available on the Date object.  Feel free to add or remove patterns as needed in your code.
&lt;pre&gt;&lt;code&gt;Date.patterns = {
    ISO8601Long:&quot;Y-m-d H:i:s&quot;,
    ISO8601Short:&quot;Y-m-d&quot;,
    ShortDate: &quot;n/j/Y&quot;,
    LongDate: &quot;l, F d, Y&quot;,
    FullDateTime: &quot;l, F d, Y g:i:s A&quot;,
    MonthDay: &quot;F d&quot;,
    ShortTime: &quot;g:i A&quot;,
    LongTime: &quot;g:i:s A&quot;,
    SortableDateTime: &quot;Y-m-d\\TH:i:s&quot;,
    UniversalSortableDateTime: &quot;Y-m-d H:i:sO&quot;,
    YearMonth: &quot;F, Y&quot;
};&lt;/code&gt;&lt;/pre&gt;
Example usage:
&lt;pre&gt;&lt;code&gt;var dt = new Date();
document.write(dt.format(Date.patterns.ShortDate));&lt;/code&gt;&lt;/pre&gt;</description><properties><property name="Date.monthNames" type="Array" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; An array of textual month names.
Override these values for international dates, for example...
Date.monthNames = ['JanInYourLang', 'FebInYourLang', ...];</description></property><property name="Date.dayNames" type="Array" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; An array of textual day names.
Override these values for international dates, for example...
Date.dayNames = ['SundayInYourLang', 'MondayInYourLang', ...];</description></property><property name="Date.MILLI" type="String" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; Date interval constant</description></property><property name="Date.SECOND" type="String" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; Date interval constant</description></property><property name="Date.MINUTE" type="String" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; Date interval constant</description></property><property name="Date.HOUR" type="String" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; Date interval constant</description></property><property name="Date.DAY" type="String" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; Date interval constant</description></property><property name="Date.MONTH" type="String" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; Date interval constant</description></property><property name="Date.YEAR" type="String" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; Date interval constant</description></property></properties><methods><method name="format" scope="instance"><description>Formats a date given the supplied format string</description><parameters><parameter name="format" type="String" usage="required"><description>The format string</description></parameter></parameters></method><method name="Date.parseDate" scope="static"><description>&amp;lt;static&amp;gt; Parses the passed string using the specified format. Note that this function expects dates in normal calendar
format, meaning that months are 1-based (1 = January) and not zero-based like in JavaScript dates.  Any part of
the date format that is not specified will default to the current date value for that part.  Time parts can also
be specified, but default to 0.  Keep in mind that the input date string must precisely match the specified format
string or the parse operation will fail.
Example Usage:&#13;
&lt;pre&gt;&lt;code&gt;//dt = Fri May 25 2007 (current date)
var dt = new Date();

//dt = Thu May 25 2006 (today's month/day in 2006)
dt = Date.parseDate(&quot;2006&quot;, &quot;Y&quot;);

//dt = Sun Jan 15 2006 (all date parts specified)
dt = Date.parseDate(&quot;2006-1-15&quot;, &quot;Y-m-d&quot;);

//dt = Sun Jan 15 2006 15:20:01 GMT-0600 (CST)
dt = Date.parseDate(&quot;2006-1-15 3:20:01 PM&quot;, &quot;Y-m-d h:i:s A&quot; );&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="input" type="String" usage="required"><description>The unparsed date as a string</description></parameter><parameter name="format" type="String" usage="required"><description>The format the date is in</description></parameter></parameters></method><method name="getTimezone" scope="instance"><description>Get the timezone abbreviation of the current date (equivalent to the format specifier 'T').</description><parameters/></method><method name="getGMTOffset" scope="instance"><description>Get the offset from GMT of the current date (equivalent to the format specifier 'O').</description><parameters/></method><method name="getDayOfYear" scope="instance"><description>Get the numeric day number of the year, adjusted for leap year.</description><parameters/></method><method name="getWeekOfYear" scope="instance"><description>Get the string representation of the numeric week number of the year
(equivalent to the format specifier 'W').</description><parameters/></method><method name="isLeapYear" scope="instance"><description>Whether or not the current date is in a leap year.</description><parameters/></method><method name="getFirstDayOfMonth" scope="instance"><description>Get the first day of the current month, adjusted for leap year.  The returned value
is the numeric day index within the week (0-6) which can be used in conjunction with
the &lt;a ext:cls=&quot;Date&quot; ext:member=&quot;monthNames&quot; href=&quot;output/Date.html#monthNames&quot;&gt;monthNames&lt;/a&gt; array to retrieve the textual day name.
Example:
&lt;pre&gt;&lt;code&gt;var dt = new Date('1/10/2007');
document.write(Date.dayNames[dt.getFirstDayOfMonth()]); //output: 'Monday'&lt;/code&gt;&lt;/pre&gt;</description><parameters/></method><method name="getLastDayOfMonth" scope="instance"><description>Get the last day of the current month, adjusted for leap year.  The returned value
is the numeric day index within the week (0-6) which can be used in conjunction with
the &lt;a ext:cls=&quot;Date&quot; ext:member=&quot;monthNames&quot; href=&quot;output/Date.html#monthNames&quot;&gt;monthNames&lt;/a&gt; array to retrieve the textual day name.
Example:
&lt;pre&gt;&lt;code&gt;var dt = new Date('1/10/2007');
document.write(Date.dayNames[dt.getLastDayOfMonth()]); //output: 'Wednesday'&lt;/code&gt;&lt;/pre&gt;</description><parameters/></method><method name="getFirstDateOfMonth" scope="instance"><description>Get a Date of the first day of this date's month</description><parameters/></method><method name="getLastDateOfMonth" scope="instance"><description>Get a Date of the late day of this date's month</description><parameters/></method><method name="getDaysInMonth" scope="instance"><description>Get the number of days in the current month, adjusted for leap year.</description><parameters/></method><method name="getSuffix" scope="instance"><description>Get the English ordinal suffix of the current day (equivalent to the format specifier 'S').</description><parameters/></method><method name="clone" scope="instance"><description>Creates and returns a new Date instance with the exact same date value as the called instance.
Dates are copied and passed by reference, so if a copied date variable is modified later, the original
variable will also be changed.  When the intention is to create a new variable that will not
modify the original instance, you should create a clone.
Example of correctly cloning a date:
&lt;pre&gt;&lt;code&gt;//wrong way:
var orig = new Date('10/1/2006');
var copy = orig;
copy.setDate(5);
document.write(orig);  //returns 'Thu Oct 05 2006'!

//correct way:
var orig = new Date('10/1/2006');
var copy = orig.clone();
copy.setDate(5);
document.write(orig);  //returns 'Thu Oct 01 2006'&lt;/code&gt;&lt;/pre&gt;</description><parameters/></method><method name="clearTime" scope="instance"><description>Clears any time information from this date</description><parameters><parameter name="clone" type="Boolean" usage="required"><description>true to create a clone of this date, clear the time and return it</description></parameter></parameters></method><method name="add" scope="instance"><description>Provides a convenient method of performing basic date arithmetic.  This method
does not modify the Date instance being called - it creates and returns
a new Date instance containing the resulting date value.
Examples:
&lt;pre&gt;&lt;code&gt;//Basic usage:
var dt = new Date('10/29/2006').add(Date.DAY, 5);
document.write(dt); //returns 'Fri Oct 06 2006 00:00:00'

//Negative values will subtract correctly:
var dt2 = new Date('10/1/2006').add(Date.DAY, -5);
document.write(dt2); //returns 'Tue Sep 26 2006 00:00:00'

//You can even chain several calls together in one line!
var dt3 = new Date('10/1/2006').add(Date.DAY, 5).add(Date.HOUR, 8).add(Date.MINUTE, -30);
document.write(dt3); //returns 'Fri Oct 06 2006 07:30:00'&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="interval" type="String" usage="required"><description>A valid date interval enum value</description></parameter><parameter name="value" type="Number" usage="required"><description>The amount to add to the current date</description></parameter></parameters></method><method name="getElapsed" scope="instance"><description>Returns the number of milliseconds between this date and date</description><parameters><parameter name="date" type="Date" usage="optional"><description>(optional) Defaults to now</description></parameter></parameters></method></methods></class><class type="Ext" superclass="Object"><description>Ext core utilities and functions.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description><properties><property name="isStrict" type="Boolean" scope="instance" access="read-write"><description>True if the browser is in strict mode</description></property><property name="isSecure" type="Boolean" scope="instance" access="read-write"><description>True if the page is running over SSL</description></property><property name="isReady" type="Boolean" scope="instance" access="read-write"><description>True when the document is fully initialized and ready for action</description></property><property name="enableGarbageCollector" type="Boolean" scope="instance" access="read-write"><description>True to automatically uncache orphaned Ext.Elements periodically (defaults to true)</description></property><property name="enableListenerCollection" type="Boolean" scope="instance" access="read-write"><description>True to automatically purge event listeners after uncaching an element (defaults to false).
Note: this only happens if enableGarbageCollector is true.</description></property><property name="SSL_SECURE_URL" type="String" scope="instance" access="read-write"><description>URL to a blank file used by Ext when in secure mode for iframe src and onReady src to prevent
the IE insecure content warning (defaults to javascript:false).</description></property><property name="BLANK_IMAGE_URL" type="String" scope="instance" access="read-write"><description>URL to a 1x1 transparent gif image used by Ext to create inline icons with CSS background images. (Defaults to
&quot;http://extjs.com/s.gif&quot; and you should change this to a URL on your server).</description></property><property name="isOpera" type="Boolean" scope="instance" access="read-write"><description></description></property><property name="isSafari" type="Boolean" scope="instance" access="read-write"><description></description></property><property name="isIE" type="Boolean" scope="instance" access="read-write"><description></description></property><property name="isIE7" type="Boolean" scope="instance" access="read-write"><description></description></property><property name="isGecko" type="Boolean" scope="instance" access="read-write"><description></description></property><property name="isBorderBox" type="Boolean" scope="instance" access="read-write"><description></description></property><property name="isWindows" type="Boolean" scope="instance" access="read-write"><description></description></property><property name="isLinux" type="Boolean" scope="instance" access="read-write"><description></description></property><property name="isMac" type="Boolean" scope="instance" access="read-write"><description></description></property><property name="useShims" type="Boolean" scope="instance" access="read-write"><description>By default, Ext intelligently decides whether floating elements should be shimmed. If you are using flash,&#13;
     you may want to set this to true.</description></property></properties><methods><method name="applyIf" scope="instance"><description>Copies all the properties of config to obj if they don't already exist.</description><parameters><parameter name="obj" type="Object" usage="required"><description>The receiver of the properties</description></parameter><parameter name="config" type="Object" usage="required"><description>The source of the properties</description></parameter></parameters></method><method name="addBehaviors" scope="instance"><description>Applies event listeners to elements by selectors when the document is ready.
The event name is specified with an @ suffix.&#13;
&lt;pre&gt;&lt;code&gt;Ext.addBehaviors({
   // add a listener for click on all anchors in element with id foo
   '#foo a@click' : function(e, t){
       // do something
   },

   // add the same listener to multiple selectors (separated by comma BEFORE the @)
   '#foo a, #bar span.some-class@mouseover' : function(){
       // do something
   }
});&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="obj" type="Object" usage="required"><description>The list of behaviors to apply</description></parameter></parameters></method><method name="id" scope="instance"><description>Generates unique ids. If the element already has an id, it is unchanged</description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="optional"><description>(optional) The element to generate an id for</description></parameter><parameter name="prefix" type="String" usage="optional"><description>(optional) Id prefix (defaults &quot;ext-gen&quot;)</description></parameter></parameters></method><method name="extend" scope="instance"><description>Extends one class with another class and optionally overrides members with the passed literal. This class
also adds the function &quot;override()&quot; to the class that can be used to override
members on an instance.</description><parameters><parameter name="subclass" type="Object" usage="required"><description>The class inheriting the functionality</description></parameter><parameter name="superclass" type="Object" usage="required"><description>The class being extended</description></parameter><parameter name="overrides" type="Object" usage="optional"><description>(optional) A literal with members</description></parameter></parameters></method><method name="override" scope="instance"><description>Adds a list of functions to the prototype of an existing class, overwriting any existing methods with the same name.
Usage:&lt;pre&gt;&lt;code&gt;Ext.override(MyClass, {
    newMethod1: function(){
        // etc.
    },
    newMethod2: function(foo){
        // etc.
    }
});&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="origclass" type="Object" usage="required"><description>The class to override</description></parameter><parameter name="overrides" type="Object" usage="required"><description>The list of functions to add to origClass. This should be specified as an object literal
containing one or more methods.</description></parameter></parameters></method><method name="namespace" scope="instance"><description>Creates namespaces but does not assume YAHOO is the root.</description><parameters><parameter name="namespace1" type="String" usage="required"><description></description></parameter><parameter name="namespace2" type="String" usage="required"><description></description></parameter><parameter name="etc" type="String" usage="required"><description></description></parameter></parameters></method><method name="urlEncode" scope="instance"><description>Takes an object and converts it to an encoded URL. e.g. Ext.urlEncode({foo: 1, bar: 2}); would return &quot;foo=1&amp;bar=2&quot;.  Optionally, property values can be arrays, instead of keys and the resulting string that's returned will contain a name/value pair for each array value.</description><parameters><parameter name="o" type="Object" usage="required"><description></description></parameter></parameters></method><method name="urlDecode" scope="instance"><description>Takes an encoded URL and and converts it to an object. e.g. Ext.urlDecode(&quot;foo=1&amp;bar=2&quot;); would return {foo: 1, bar: 2} or Ext.urlDecode(&quot;foo=1&amp;bar=2&amp;bar=3&amp;bar=4&quot;, true); would return {foo: 1, bar: [2, 3, 4]}.</description><parameters><parameter name="string" type="String" usage="required"><description></description></parameter><parameter name="overwrite" type="Boolean" usage="optional"><description>(optional) Items of the same name will overwrite previous values instead of creating an an array (Defaults to false).</description></parameter></parameters></method><method name="each" scope="instance"><description>Iterates an array calling the passed function with each item, stopping if your function returns false. If the
passed array is not really an array, your function is called once with it.
The supplied function is called with (Object item, Number index, Array allItems).</description><parameters><parameter name="array" type="Array/NodeList/Mixed" usage="required"><description></description></parameter><parameter name="fn" type="Function" usage="required"><description></description></parameter><parameter name="scope" type="Object" usage="required"><description></description></parameter></parameters></method><method name="escapeRe" scope="instance"><description>Escapes the passed string for use in a regular expression</description><parameters><parameter name="str" type="String" usage="required"><description></description></parameter></parameters></method><method name="getDom" scope="instance"><description>Return the dom node for the passed string (id), dom node, or Ext.Element</description><parameters><parameter name="el" type="String/HTMLElement/Ext.Element" usage="required"><description></description></parameter></parameters></method><method name="getCmp" scope="instance"><description>Shorthand for &lt;a ext:cls=&quot;Ext.ComponentMgr&quot; ext:member=&quot;get&quot; href=&quot;output/Ext.ComponentMgr.html#get&quot;&gt;Ext.ComponentMgr.get&lt;/a&gt;</description><parameters><parameter name="id" type="String" usage="required"><description></description></parameter></parameters></method><method name="type" scope="instance"><description>Returns the type of object that is passed in. If the object passed in is null or undefined it
return false otherwise it returns one of the following values:&lt;ul&gt;
&lt;li&gt;&lt;b&gt;string&lt;/b&gt;: If the object passed is a string&lt;/li&gt;
&lt;li&gt;&lt;b&gt;number&lt;/b&gt;: If the object passed is a number&lt;/li&gt;
&lt;li&gt;&lt;b&gt;boolean&lt;/b&gt;: If the object passed is a boolean value&lt;/li&gt;
&lt;li&gt;&lt;b&gt;function&lt;/b&gt;: If the object passed is a function reference&lt;/li&gt;
&lt;li&gt;&lt;b&gt;object&lt;/b&gt;: If the object passed is an object&lt;/li&gt;
&lt;li&gt;&lt;b&gt;array&lt;/b&gt;: If the object passed is an array&lt;/li&gt;
&lt;li&gt;&lt;b&gt;regexp&lt;/b&gt;: If the object passed is a regular expression&lt;/li&gt;
&lt;li&gt;&lt;b&gt;element&lt;/b&gt;: If the object passed is a DOM Element&lt;/li&gt;
&lt;li&gt;&lt;b&gt;nodelist&lt;/b&gt;: If the object passed is a DOM NodeList&lt;/li&gt;
&lt;li&gt;&lt;b&gt;textnode&lt;/b&gt;: If the object passed is a DOM text node and contains something other than whitespace&lt;/li&gt;
&lt;li&gt;&lt;b&gt;whitespace&lt;/b&gt;: If the object passed is a DOM text node and contains only whitespace&lt;/li&gt;</description><parameters><parameter name="object" type="Mixed" usage="required"><description></description></parameter></parameters></method><method name="isEmpty" scope="instance"><description>Returns true if the passed value is null, undefined or an empty string (optional).</description><parameters><parameter name="value" type="Mixed" usage="required"><description>The value to test</description></parameter><parameter name="allowBlank" type="Boolean" usage="optional"><description>(optional) Pass true if an empty string is not considered empty</description></parameter></parameters></method><method name="select" scope="instance"><description>Selects elements based on the passed CSS selector to enable working on them as 1.</description><parameters><parameter name="selector" type="String/Array" usage="required"><description>The CSS selector or an array of elements</description></parameter><parameter name="unique" type="Boolean" usage="optional"><description>(optional) true to create a unique Ext.Element for each element (defaults to a shared flyweight object)</description></parameter><parameter name="root" type="HTMLElement/String" usage="optional"><description>(optional) The root element of the query or id of the root</description></parameter></parameters></method><method name="query" scope="instance"><description>Selects an array of DOM nodes by CSS/XPath selector. Shorthand of &lt;a ext:cls=&quot;Ext.DomQuery&quot; ext:member=&quot;select&quot; href=&quot;output/Ext.DomQuery.html#select&quot;&gt;Ext.DomQuery.select&lt;/a&gt;</description><parameters><parameter name="path" type="String" usage="required"><description>The selector/xpath query</description></parameter><parameter name="root" type="Node" usage="optional"><description>(optional) The start of the query (defaults to document).</description></parameter></parameters></method><method name="get" scope="instance"><description>Static method to retrieve Element objects. Uses simple caching to consistently return the same object.
Automatically fixes if an object was recreated with the same id via AJAX or DOM.
Shorthand of &lt;a ext:cls=&quot;Ext.Element&quot; ext:member=&quot;get&quot; href=&quot;output/Ext.Element.html#get&quot;&gt;Ext.Element.get&lt;/a&gt;</description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description>The id of the node, a DOM Node or an existing Element.</description></parameter></parameters></method><method name="fly" scope="static"><description>&amp;lt;static&amp;gt; Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -
the dom node can be overwritten by other code.
Shorthand of &lt;a ext:cls=&quot;Ext.Element&quot; ext:member=&quot;fly&quot; href=&quot;output/Ext.Element.html#fly&quot;&gt;Ext.Element.fly&lt;/a&gt;</description><parameters><parameter name="el" type="String/HTMLElement" usage="required"><description>The dom node or id</description></parameter><parameter name="named" type="String" usage="optional"><description>(optional) Allows for creation of named reusable flyweights to
prevent conflicts (e.g. internally Ext uses &quot;_internal&quot;)</description></parameter></parameters></method><method name="onReady" scope="instance"><description>Fires when the document is ready (before onload and before images are loaded).  Shorthand of &lt;a ext:cls=&quot;Ext.EventManager&quot; ext:member=&quot;onDocumentReady&quot; href=&quot;output/Ext.EventManager.html#onDocumentReady&quot;&gt;Ext.EventManager.onDocumentReady&lt;/a&gt;.</description><parameters><parameter name="fn" type="Function" usage="required"><description>The method the event invokes</description></parameter><parameter name="scope" type="Object" usage="required"><description>An object that becomes the scope of the handler</description></parameter><parameter name="override" type="boolean" usage="required"><description>If true, the obj passed in becomes
the execution scope of the listener</description></parameter></parameters></method><method name="apply" scope="instance"><description>
Copies all the properties of config to obj.</description><parameters><parameter name="obj" type="Object" usage="required"><description>The receiver of the properties</description></parameter><parameter name="config" type="Object" usage="required"><description>The source of the properties</description></parameter><parameter name="defaults" type="Object" usage="required"><description>A different object that will also be applied for default values</description></parameter></parameters></method><method name="encode" scope="instance"><description>Shorthand for &lt;a ext:cls=&quot;Ext.util.JSON&quot; ext:member=&quot;encode&quot; href=&quot;output/Ext.util.JSON.html#encode&quot;&gt;Ext.util.JSON.encode&lt;/a&gt;</description><parameters/></method><method name="decode" scope="instance"><description>Shorthand for &lt;a ext:cls=&quot;Ext.util.JSON&quot; ext:member=&quot;decode&quot; href=&quot;output/Ext.util.JSON.html#decode&quot;&gt;Ext.util.JSON.decode&lt;/a&gt;</description><parameters/></method></methods></class><class type="Ext.Ajax" superclass="Ext.data.Connection"><description>Global Ajax request class.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description><properties><property name="disableCaching" type="Boolean" scope="instance" access="read-write"><description>
True to add a unique cache-buster param to GET requests. (defaults to true)</description></property><property name="url" type="String" scope="instance" access="read-write"><description>
The default URL to be used for requests to the server. (defaults to undefined)</description></property><property name="extraParams" type="Object" scope="instance" access="read-write"><description>
An object containing properties which are used as
extra parameters to each request made by this object. (defaults to undefined)</description></property><property name="defaultHeaders" type="Object" scope="instance" access="read-write"><description>
An object containing request headers which are added to each request made by this object. (defaults to undefined)</description></property><property name="method" type="String" scope="instance" access="read-write"><description>
The default HTTP method to be used for requests. (defaults to undefined; if not set but parms are present will use POST, otherwise GET)</description></property><property name="timeout" type="Number" scope="instance" access="read-write"><description>
The timeout in milliseconds to be used for requests. (defaults to 30000)</description></property><property name="autoAbort" type="Boolean" scope="instance" access="read-write"><description>
Whether a new request should abort any pending requests. (defaults to false)</description></property></properties><methods><method name="serializeForm" scope="instance"><description>Serialize the passed form into a url encoded string</description><parameters><parameter name="form" type="String/HTMLElement" usage="required"><description></description></parameter></parameters></method></methods></class><class type="Ext.BasicDialog" superclass="Ext.util.Observable"><description>Lightweight Dialog Class.  The code below shows the creation of a typical dialog using existing HTML markup:
&lt;pre&gt;&lt;code&gt;var dlg = new Ext.BasicDialog(&quot;my-dlg&quot;, {
    height: 200,
    width: 300,
    minHeight: 100,
    minWidth: 150,
    modal: true,
    proxyDrag: true,
    shadow: true
});
dlg.addKeyListener(27, dlg.hide, dlg); // ESC can also close the dialog
dlg.addButton('OK', dlg.hide, dlg);    // Could call a save function instead of hiding
dlg.addButton('Cancel', dlg.hide, dlg);
dlg.show();&lt;/code&gt;&lt;/pre&gt;&#13;
  &lt;b&gt;A Dialog should always be a direct child of the body element.&lt;/b&gt;</description><constructors><constructor scope="instance"><description>Create a new BasicDialog.</description><parameters><parameter name="el" type="String/HTMLElement/Ext.Element" usage="required"><description>The container element or DOM node, or its id</description></parameter><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties><property name="header" type="Ext.Element" scope="instance" access="read-write"><description>The header element</description></property><property name="body" type="Ext.Element" scope="instance" access="read-write"><description>The body element</description></property><property name="footer" type="Ext.Element" scope="instance" access="read-write"><description>The footer element</description></property><property name="buttons" type="Array" scope="instance" access="read-write"><description>Array of all the buttons that have been added to this dialog via addButton</description></property></properties><methods><method name="setTitle" scope="instance"><description>Sets the dialog title text</description><parameters><parameter name="text" type="String" usage="required"><description>The title text to display</description></parameter></parameters></method><method name="collapse" scope="instance"><description>Collapses the dialog to its minimized state (only the title bar is visible).
Equivalent to the user clicking the collapse dialog button.</description><parameters/></method><method name="expand" scope="instance"><description>Expands a collapsed dialog back to its normal state.  Equivalent to the user
clicking the expand dialog button.</description><parameters/></method><method name="initTabs" scope="instance"><description>Reinitializes the tabs component, clearing out old tabs and finding new ones.</description><parameters/></method><method name="resizeTo" scope="instance"><description>Resizes the dialog.</description><parameters><parameter name="width" type="Number" usage="required"><description></description></parameter><parameter name="height" type="Number" usage="required"><description></description></parameter></parameters></method><method name="setContentSize" scope="instance"><description>Resizes the dialog to fit the specified content size.</description><parameters><parameter name="width" type="Number" usage="required"><description></description></parameter><parameter name="height" type="Number" usage="required"><description></description></parameter></parameters></method><method name="addKeyListener" scope="instance"><description>Adds a key listener for when this dialog is displayed.  This allows you to hook in a function that will be
executed in response to a particular key being pressed while the dialog is active.</description><parameters><parameter name="key" type="Number/Array/Object" usage="required"><description>Either the numeric key code, array of key codes or an object with the following options:
{key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}</description></parameter><parameter name="fn" type="Function" usage="required"><description>The function to call</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope of the function</description></parameter></parameters></method><method name="getTabs" scope="instance"><description>Returns the TabPanel component (creates it if it doesn't exist).
Note: If you wish to simply check for the existence of tabs without creating them,
check for a null 'tabs' property.</description><parameters/></method><method name="addButton" scope="instance"><description>Adds a button to the footer section of the dialog.</description><parameters><parameter name="config" type="String/Object" usage="required"><description>A string becomes the button text, an object can either be a Button config
object or a valid Ext.DomHelper element config</description></parameter><parameter name="handler" type="Function" usage="required"><description>The function called when the button is clicked</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope of the handler function</description></parameter></parameters></method><method name="setDefaultButton" scope="instance"><description>Sets the default button to be focused when the dialog is displayed.</description><parameters><parameter name="btn" type="Ext.BasicDialog.Button" usage="required"><description>The button object returned by &lt;a ext:cls=&quot;Ext.BasicDialog&quot; ext:member=&quot;addButton&quot; href=&quot;output/Ext.BasicDialog.html#addButton&quot;&gt;addButton&lt;/a&gt;</description></parameter></parameters></method><method name="restoreState" scope="instance"><description>Restores the previous state of the dialog if Ext.state is configured.</description><parameters/></method><method name="show" scope="instance"><description>Shows the dialog.</description><parameters><parameter name="animateTarget" type="String/HTMLElement/Ext.Element" usage="optional"><description>(optional) Reset the animation target</description></parameter></parameters></method><method name="focus" scope="instance"><description>Focuses the dialog.  If a defaultButton is set, it will receive focus, otherwise the
dialog itself will receive focus.</description><parameters/></method><method name="destroy" scope="instance"><description>Destroys this dialog and all its supporting elements (including any tabs, shim,
shadow, proxy, mask, etc.)  Also removes all event listeners.</description><parameters><parameter name="removeEl" type="Boolean" usage="optional"><description>(optional) true to remove the element from the DOM</description></parameter></parameters></method><method name="toFront" scope="instance"><description>Brings this dialog to the front of any other visible dialogs</description><parameters/></method><method name="toBack" scope="instance"><description>Sends this dialog to the back (under) of any other visible dialogs</description><parameters/></method><method name="center" scope="instance"><description>Centers this dialog in the viewport</description><parameters/></method><method name="moveTo" scope="instance"><description>Moves the dialog's top-left corner to the specified point</description><parameters><parameter name="x" type="Number" usage="required"><description></description></parameter><parameter name="y" type="Number" usage="required"><description></description></parameter></parameters></method><method name="alignTo" scope="instance"><description>Aligns the dialog to the specified element</description><parameters><parameter name="element" type="String/HTMLElement/Ext.Element" usage="required"><description>The element to align to.</description></parameter><parameter name="position" type="String" usage="required"><description>The position to align to (see &lt;a ext:cls=&quot;Ext.Element&quot; ext:member=&quot;alignTo&quot; href=&quot;output/Ext.Element.html#alignTo&quot;&gt;Ext.Element.alignTo&lt;/a&gt; for more details).</description></parameter><parameter name="offsets" type="Array" usage="optional"><description>(optional) Offset the positioning by [x, y]</description></parameter></parameters></method><method name="anchorTo" scope="instance"><description>Anchors an element to another element and realigns it when the window is resized.</description><parameters><parameter name="element" type="String/HTMLElement/Ext.Element" usage="required"><description>The element to align to.</description></parameter><parameter name="position" type="String" usage="required"><description>The position to align to (see &lt;a ext:cls=&quot;Ext.Element&quot; ext:member=&quot;alignTo&quot; href=&quot;output/Ext.Element.html#alignTo&quot;&gt;Ext.Element.alignTo&lt;/a&gt; for more details)</description></parameter><parameter name="offsets" type="Array" usage="optional"><description>(optional) Offset the positioning by [x, y]</description></parameter><parameter name="monitorScroll" type="Boolean/Number" usage="optional"><description>(optional) true to monitor body scroll and reposition. If this parameter
is a number, it is used as the buffer delay (defaults to 50ms).</description></parameter></parameters></method><method name="isVisible" scope="instance"><description>Returns true if the dialog is visible</description><parameters/></method><method name="hide" scope="instance"><description>Hides the dialog.</description><parameters><parameter name="callback" type="Function" usage="optional"><description>(optional) Function to call when the dialog is hidden</description></parameter></parameters></method><method name="getEl" scope="instance"><description>Returns the element for this dialog</description><parameters/></method></methods></class><class type="Ext.BasicLayoutRegion" superclass="Ext.util.Observable"><description>This class represents a lightweight region in a layout manager. This region does not move dom nodes
and does not have a titlebar, tabs or any other features. All it does is size and position 
panels. To create a BasicLayoutRegion, add lightweight:true or basic:true to your regions config.</description><properties><property name="panels" type="Ext.util.MixedCollection" scope="instance" access="read-write"><description>A collection of panels in this region.</description></property></properties><methods><method name="resizeTo" scope="instance"><description>Resizes the region to the specified size. For vertical regions (west, east) this adjusts 
the width, for horizontal (north, south) the height.</description><parameters><parameter name="newSize" type="Number" usage="required"><description>The new width or height</description></parameter></parameters></method><method name="getEl" scope="instance"><description>Returns the container element for this region.</description><parameters/></method><method name="isVisible" scope="instance"><description>Returns true if this region is currently visible.</description><parameters/></method><method name="showPanel" scope="instance"><description>Show the specified panel.</description><parameters><parameter name="panelId" type="Number/String/ContentPanel" usage="required"><description>The panels index, id or the panel itself</description></parameter></parameters></method><method name="getActivePanel" scope="instance"><description>Get the active panel for this region.</description><parameters/></method><method name="add" scope="instance"><description>Add the passed ContentPanel(s)</description><parameters><parameter name="panel" type="ContentPanel..." usage="required"><description>The ContentPanel(s) to add (you can pass more than one)</description></parameter></parameters></method><method name="hasPanel" scope="instance"><description>Returns true if the panel is in this region.</description><parameters><parameter name="panel" type="Number/String/ContentPanel" usage="required"><description>The panels index, id or the panel itself</description></parameter></parameters></method><method name="remove" scope="instance"><description>Removes the specified panel. If preservePanel is not true (either here or in the config), the panel is destroyed.</description><parameters><parameter name="panel" type="Number/String/ContentPanel" usage="required"><description>The panels index, id or the panel itself</description></parameter><parameter name="preservePanel" type="Boolean" usage="required"><description>Overrides the config preservePanel option</description></parameter></parameters></method><method name="getPanel" scope="instance"><description>Returns the panel specified or null if it's not in this region.</description><parameters><parameter name="panel" type="Number/String/ContentPanel" usage="required"><description>The panels index, id or the panel itself</description></parameter></parameters></method><method name="getPosition" scope="instance"><description>Returns this regions position (north/south/east/west/center).</description><parameters/></method></methods></class><class type="Ext.BorderLayout" superclass="Ext.LayoutManager"><description>This class represents a common layout manager used in desktop applications. For screenshots and more details,
please see: &lt;br&gt;&lt;br&gt;
&lt;a href=&quot;http://www.jackslocum.com/yui/2006/10/19/cross-browser-web-20-layouts-with-yahoo-ui/&quot;&gt;Cross Browser Layouts - Part 1&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.jackslocum.com/yui/2006/10/28/cross-browser-web-20-layouts-part-2-ajax-feed-viewer-20/&quot;&gt;Cross Browser Layouts - Part 2&lt;/a&gt;&lt;br&gt;&lt;br&gt;
Example:&#13;
 &lt;pre&gt;&lt;code&gt;var layout = new Ext.BorderLayout(document.body, {
    north: {
        initialSize: 25,
        titlebar: false
    },
    west: {
        split:true,
        initialSize: 200,
        minSize: 175,
        maxSize: 400,
        titlebar: true,
        collapsible: true
    },
    east: {
        split:true,
        initialSize: 202,
        minSize: 175,
        maxSize: 400,
        titlebar: true,
        collapsible: true
    },
    south: {
        split:true,
        initialSize: 100,
        minSize: 100,
        maxSize: 200,
        titlebar: true,
        collapsible: true
    },
    center: {
        titlebar: true,
        autoScroll:true,
        resizeTabs: true,
        minTabWidth: 50,
        preferredTabWidth: 150
    }
});

// shorthand
var CP = Ext.ContentPanel;

layout.beginUpdate();
layout.add(&quot;north&quot;, new CP(&quot;north&quot;, &quot;North&quot;));
layout.add(&quot;south&quot;, new CP(&quot;south&quot;, {title: &quot;South&quot;, closable: true}));
layout.add(&quot;west&quot;, new CP(&quot;west&quot;, {title: &quot;West&quot;}));
layout.add(&quot;east&quot;, new CP(&quot;autoTabs&quot;, {title: &quot;Auto Tabs&quot;, closable: true}));
layout.add(&quot;center&quot;, new CP(&quot;center1&quot;, {title: &quot;Close Me&quot;, closable: true}));
layout.add(&quot;center&quot;, new CP(&quot;center2&quot;, {title: &quot;Center Panel&quot;, closable: false}));
layout.getRegion(&quot;center&quot;).showPanel(&quot;center1&quot;);
layout.endUpdate();&lt;/code&gt;&lt;/pre&gt;&#13;
&#13;
&lt;b&gt;The container the layout is rendered into can be either the body element or any other element.&#13;
If it is not the body element, the container needs to either be an absolute positioned element,&#13;
or you will need to add &quot;position:relative&quot; to the css of the container.  You will also need to specify&#13;
the container size if it is not the body element.&lt;/b&gt;</description><constructors><constructor scope="instance"><description>Create a new BorderLayout</description><parameters><parameter name="container" type="String/HTMLElement/Element" usage="required"><description>The container this layout is bound to</description></parameter><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties/><methods><method name="addRegion" scope="instance"><description>Creates and adds a new region if it doesn't already exist.</description><parameters><parameter name="target" type="String" usage="required"><description>The target region key (north, south, east, west or center).</description></parameter><parameter name="config" type="Object" usage="required"><description>The regions config object</description></parameter></parameters></method><method name="layout" scope="instance"><description>Performs a layout update.</description><parameters/></method><method name="add" scope="instance"><description>Adds a ContentPanel (or subclass) to this layout.</description><parameters><parameter name="target" type="String" usage="required"><description>The target region key (north, south, east, west or center).</description></parameter><parameter name="panel" type="Ext.ContentPanel" usage="required"><description>The panel to add</description></parameter></parameters></method><method name="remove" scope="instance"><description>Remove a ContentPanel (or subclass) to this layout.</description><parameters><parameter name="target" type="String" usage="required"><description>The target region key (north, south, east, west or center).</description></parameter><parameter name="panel" type="Number/String/Ext.ContentPanel" usage="required"><description>The index, id or panel to remove</description></parameter></parameters></method><method name="findPanel" scope="instance"><description>Searches all regions for a panel with the specified id</description><parameters><parameter name="panelId" type="String" usage="required"><description></description></parameter></parameters></method><method name="showPanel" scope="instance"><description>Searches all regions for a panel with the specified id and activates (shows) it.</description><parameters><parameter name="panelId" type="String/ContentPanel" usage="required"><description>The panels id or the panel itself</description></parameter></parameters></method><method name="restoreState" scope="instance"><description>Restores this layouts state using Ext.state.Manager or the state provided by the passed provider.</description><parameters><parameter name="provider" type="Ext.state.Provider" usage="optional"><description>(optional) An alternate state provider</description></parameter></parameters></method></methods></class><class type="Ext.BoxComponent" superclass="Ext.Component"><description>Base class for any visual &lt;a ext:cls=&quot;Ext.Component&quot; href=&quot;output/Ext.Component.html&quot;&gt;Ext.Component&lt;/a&gt; that uses a box container.  BoxComponent provides automatic box
model adjustments for sizing and positioning and will work correctly withnin the Component rendering model.  All
container classes should subclass BoxComponent so that they will work consistently when nested within other Ext
layout containers.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="config" type="Ext.Element/String/Object" usage="required"><description>The configuration options.</description></parameter></parameters></constructor></constructors><properties/><methods><method name="setSize" scope="instance"><description>Sets the width and height of the component.  This method fires the resize event.  This method can accept
either width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.</description><parameters><parameter name="width" type="Number/Object" usage="required"><description>The new width to set, or a size object in the format {width, height}</description></parameter><parameter name="height" type="Number" usage="required"><description>The new height to set (not required if a size object is passed as the first arg)</description></parameter></parameters></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description><parameters/></method><method name="getPosition" scope="instance"><description>Gets the current XY position of the component's underlying element.</description><parameters><parameter name="local" type="Boolean" usage="optional"><description>(optional) If true the element's left and top are returned instead of page XY (defaults to false)</description></parameter></parameters></method><method name="getBox" scope="instance"><description>Gets the current box measurements of the component's underlying element.</description><parameters><parameter name="local" type="Boolean" usage="optional"><description>(optional) If true the element's left and top are returned instead of page XY (defaults to false)</description></parameter></parameters></method><method name="updateBox" scope="instance"><description>Sets the current box measurements of the component's underlying element.</description><parameters><parameter name="box" type="Object" usage="required"><description>An object in the format {x, y, width, height}</description></parameter></parameters></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use &lt;a ext:cls=&quot;Ext.BoxComponent&quot; ext:member=&quot;setPagePosition&quot; href=&quot;output/Ext.BoxComponent.html#setPagePosition&quot;&gt;setPagePosition&lt;/a&gt;.
This method fires the move event.</description><parameters><parameter name="left" type="Number" usage="required"><description>The new left</description></parameter><parameter name="top" type="Number" usage="required"><description>The new top</description></parameter></parameters></method><method name="setPagePosition" scope="instance"><description>Sets the page XY position of the component.  To set the left and top instead, use &lt;a ext:cls=&quot;Ext.BoxComponent&quot; ext:member=&quot;setPosition&quot; href=&quot;output/Ext.BoxComponent.html#setPosition&quot;&gt;setPosition&lt;/a&gt;.
This method fires the move event.</description><parameters><parameter name="x" type="Number" usage="required"><description>The new x position</description></parameter><parameter name="y" type="Number" usage="required"><description>The new y position</description></parameter></parameters></method><method name="syncSize" scope="instance"><description>Force the component's size to recalculate based on the underlying element's current height and width.</description><parameters/></method><method name="onResize" scope="instance"><description>Called after the component is resized, this method is empty by default but can be implemented by any
subclass that needs to perform custom logic after a resize occurs.</description><parameters><parameter name="adjWidth" type="Number" usage="required"><description>The box-adjusted width that was set</description></parameter><parameter name="adjHeight" type="Number" usage="required"><description>The box-adjusted height that was set</description></parameter><parameter name="rawWidth" type="Number" usage="required"><description>The width that was originally specified</description></parameter><parameter name="rawHeight" type="Number" usage="required"><description>The height that was originally specified</description></parameter></parameters></method><method name="onPosition" scope="instance"><description>Called after the component is moved, this method is empty by default but can be implemented by any
subclass that needs to perform custom logic after a move occurs.</description><parameters><parameter name="x" type="Number" usage="required"><description>The new x position</description></parameter><parameter name="y" type="Number" usage="required"><description>The new y position</description></parameter></parameters></method></methods></class><class type="Ext.Button" superclass="Ext.util.Observable"><description>Simple Button class</description><constructors><constructor scope="instance"><description>Create a new button</description><parameters><parameter name="renderTo" type="String/HTMLElement/Element" usage="required"><description>The element to append the button to</description></parameter><parameter name="config" type="Object" usage="required"><description>The config object</description></parameter></parameters></constructor></constructors><properties><property name="hidden" type="Boolean" scope="instance" access="read-write"><description>Read-only. True if this button is hidden</description></property><property name="disabled" type="Boolean" scope="instance" access="read-write"><description>Read-only. True if this button is disabled</description></property><property name="pressed" type="Boolean" scope="instance" access="read-write"><description>Read-only. True if this button is pressed (only if enableToggle = true)</description></property></properties><methods><method name="getEl" scope="instance"><description>Returns the button's underlying element</description><parameters/></method><method name="destroy" scope="instance"><description>Destroys this Button and removes any listeners.</description><parameters/></method><method name="setHandler" scope="instance"><description>Assigns this button's click handler</description><parameters><parameter name="handler" type="Function" usage="required"><description>The function to call when the button is clicked</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) Scope for the function passed in</description></parameter></parameters></method><method name="setText" scope="instance"><description>Sets this button's text</description><parameters><parameter name="text" type="String" usage="required"><description>The button text</description></parameter></parameters></method><method name="getText" scope="instance"><description>Gets the text for this button</description><parameters/></method><method name="show" scope="instance"><description>Show this button</description><parameters/></method><method name="hide" scope="instance"><description>Hide this button</description><parameters/></method><method name="setVisible" scope="instance"><description>Convenience function for boolean show/hide</description><parameters><parameter name="visible" type="Boolean" usage="required"><description>True to show, false to hide</description></parameter></parameters></method><method name="toggle" scope="instance"><description>If a state it passed, it becomes the pressed state otherwise the current state is toggled.</description><parameters><parameter name="state" type="Boolean" usage="optional"><description>(optional) Force a particular state</description></parameter></parameters></method><method name="focus" scope="instance"><description>Focus the button</description><parameters/></method><method name="disable" scope="instance"><description>Disable this button</description><parameters/></method><method name="enable" scope="instance"><description>Enable this button</description><parameters/></method><method name="setDisabled" scope="instance"><description>Convenience function for boolean enable/disable</description><parameters><parameter name="enabled" type="Boolean" usage="required"><description>True to enable, false to disable</description></parameter></parameters></method></methods></class><class type="Ext.ColorPalette" superclass="Ext.Component"><description>Simple color palette class for choosing colors.  The palette can be rendered to any container.&lt;br /&gt;
Here's an example of typical usage:
&lt;pre&gt;&lt;code&gt;var cp = new Ext.ColorPalette({value:'993300'});  // initial selected color
cp.render('my-div');

cp.on('select', function(palette, selColor){
    // do something with selColor
});&lt;/code&gt;&lt;/pre&gt;</description><constructors><constructor scope="instance"><description>Create a new ColorPalette</description><parameters><parameter name="config" type="Object" usage="required"><description>The config object</description></parameter></parameters></constructor></constructors><properties><property name="colors" type="Array" scope="instance" access="read-write"><description>&lt;p&gt;An array of 6-digit color hex code strings (without the # symbol).  This array can contain any number
of colors, and each hex code should be unique.  The width of the palette is controlled via CSS by adjusting
the width property of the 'x-color-palette' class (or assigning a custom class), so you can balance the number
of colors with the width setting until the box is symmetrical.&lt;/p&gt;
&lt;p&gt;You can override individual colors if needed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var cp = new Ext.ColorPalette();
cp.colors[0] = &quot;FF0000&quot;;  // change the first box to red&lt;/code&gt;&lt;/pre&gt;

Or you can provide a custom array of your own for complete control:
&lt;pre&gt;&lt;code&gt;var cp = new Ext.ColorPalette();
cp.colors = [&quot;000000&quot;, &quot;993300&quot;, &quot;333300&quot;];&lt;/code&gt;&lt;/pre&gt;</description></property></properties><methods><method name="select" scope="instance"><description>Selects the specified color in the palette (fires the select event)</description><parameters><parameter name="color" type="String" usage="required"><description>A valid 6-digit color hex code (# will be stripped if included)</description></parameter></parameters></method></methods></class><class type="Ext.Component" superclass="Ext.util.Observable"><description>Base class for all major Ext components.  All subclasses of Component can automatically participate in the standard
Ext component lifecycle of creation, rendering and destruction.  They also have automatic support for basic hide/show
and enable/disable behavior.  Component allows any subclass to be lazy-rendered into any &lt;a ext:cls=&quot;Ext.Container&quot; href=&quot;output/Ext.Container.html&quot;&gt;Ext.Container&lt;/a&gt; and
to be automatically registered with the &lt;a ext:cls=&quot;Ext.ComponentMgr&quot; href=&quot;output/Ext.ComponentMgr.html&quot;&gt;Ext.ComponentMgr&lt;/a&gt; so that it can be referenced at any time via &lt;a ext:cls=&quot;Ext.getCmp&quot; href=&quot;output/Ext.getCmp.html&quot;&gt;Ext.getCmp&lt;/a&gt;.
All visual components (widgets) that require rendering into a layout should subclass Component.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="config" type="Ext.Element/String/Object" usage="required"><description>The configuration options. If an element is passed, it is set as the internal
element and its id used as the component id. If a string is passed, it is assumed to be the id of an existing element
and is used as the component id. Otherwise, it is assumed to be a standard config object and is applied to the component.</description></parameter></parameters></constructor></constructors><properties><property name="hidden" type="Object" scope="instance" access="read-write"><description>true if this component is hidden. Read-only.</description></property><property name="disabled" type="Object" scope="instance" access="read-write"><description>true if this component is disabled. Read-only.</description></property><property name="rendered" type="Object" scope="instance" access="read-write"><description>true if this component has been rendered. Read-only.</description></property></properties><methods><method name="render" scope="instance"><description>If this is a lazy rendering component, render it to its container element.</description><parameters><parameter name="container" type="String/HTMLElement/Element" usage="optional"><description>(optional) The element this component should be rendered into. If it is being applied to existing markup, this should be left off.</description></parameter></parameters></method><method name="destroy" scope="instance"><description>Destroys this component by purging any event listeners, removing the component's element from the DOM,
removing the component from its &lt;a ext:cls=&quot;Ext.Container&quot; href=&quot;output/Ext.Container.html&quot;&gt;Ext.Container&lt;/a&gt; (if applicable) and unregistering it from &lt;a ext:cls=&quot;Ext.ComponentMgr&quot; href=&quot;output/Ext.ComponentMgr.html&quot;&gt;Ext.ComponentMgr&lt;/a&gt;.</description><parameters/></method><method name="getEl" scope="instance"><description>Returns the underlying &lt;a ext:cls=&quot;Ext.Element&quot; href=&quot;output/Ext.Element.html&quot;&gt;Ext.Element&lt;/a&gt;.</description><parameters/></method><method name="getId" scope="instance"><description>Returns the id of this component.</description><parameters/></method><method name="focus" scope="instance"><description>Try to focus this component.</description><parameters><parameter name="selectText" type="Boolean" usage="required"><description>True to also select the text in this component (if applicable)</description></parameter></parameters></method><method name="disable" scope="instance"><description>Disable this component.</description><parameters/></method><method name="enable" scope="instance"><description>Enable this component.</description><parameters/></method><method name="setDisabled" scope="instance"><description>Convenience function for setting disabled/enabled by boolean.</description><parameters><parameter name="disabled" type="Boolean" usage="required"><description></description></parameter></parameters></method><method name="show" scope="instance"><description>Show this component.</description><parameters/></method><method name="hide" scope="instance"><description>Hide this component.</description><parameters/></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description><parameters><parameter name="visible" type="Boolean" usage="required"><description>True to show, false to hide</description></parameter></parameters></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description><parameters/></method></methods></class><class type="Ext.ComponentMgr" superclass="Object"><description>Provides a common registry of all components on a page so that they can be easily accessed by component id (see &lt;a ext:cls=&quot;Ext.getCmp&quot; href=&quot;output/Ext.getCmp.html&quot;&gt;Ext.getCmp&lt;/a&gt;).&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description><properties/><methods><method name="register" scope="instance"><description>Registers a component.</description><parameters><parameter name="c" type="Ext.Component" usage="required"><description>The component</description></parameter></parameters></method><method name="unregister" scope="instance"><description>Unregisters a component.</description><parameters><parameter name="c" type="Ext.Component" usage="required"><description>The component</description></parameter></parameters></method><method name="get" scope="instance"><description>Returns a component by id</description><parameters><parameter name="id" type="String" usage="required"><description>The component id</description></parameter></parameters></method><method name="onAvailable" scope="instance"><description>Registers a function that will be called when a specified component is added to ComponentMgr</description><parameters><parameter name="id" type="String" usage="required"><description>The component id</description></parameter><parameter name="fn" type="Funtction" usage="required"><description>The callback function</description></parameter><parameter name="scope" type="Object" usage="required"><description>The scope of the callback</description></parameter></parameters></method></methods></class><class type="Ext.CompositeElement" superclass="Object"><description>Standard composite class. Creates a Ext.Element for every element in the collection.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;NOTE: Although they are not listed, this class supports all of the set/update methods of Ext.Element. All Ext.Element
actions will be performed on all the elements in this collection.&lt;/b&gt;
&lt;br&gt;&lt;br&gt;
All methods return &lt;i&gt;this&lt;/i&gt; and can be chained.&#13;
 &lt;pre&gt;&lt;code&gt;var els = Ext.select(&quot;#some-el div.some-class&quot;, true);
 // or select directly from an existing element
 var el = Ext.get('some-el');
 el.select('div.some-class', true);

 els.setWidth(100); // all elements become 100 width
 els.hide(true); // all elements fade out and hide
 // or
 els.setWidth(100).hide(true);&lt;/code&gt;&lt;/pre&gt;</description><properties/><methods><method name="fill" scope="instance"><description>Clears this composite and adds the elements returned by the passed selector.</description><parameters><parameter name="els" type="String/Array" usage="required"><description>A string CSS selector, an array of elements or an element</description></parameter></parameters></method><method name="filter" scope="instance"><description>Filters this composite to only elements that match the passed selector.</description><parameters><parameter name="selector" type="String" usage="required"><description>A string CSS selector</description></parameter></parameters></method><method name="add" scope="instance"><description>Adds elements to this composite.</description><parameters><parameter name="els" type="String/Array" usage="required"><description>A string CSS selector, an array of elements or an element</description></parameter></parameters></method><method name="each" scope="instance"><description>Calls the passed function passing (el, this, index) for each element in this composite.</description><parameters><parameter name="fn" type="Function" usage="required"><description>The function to call</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The &lt;i&gt;this&lt;/i&gt; object (defaults to the element)</description></parameter></parameters></method><method name="item" scope="instance"><description>Returns the Element object at the specified index</description><parameters><parameter name="index" type="Number" usage="required"><description></description></parameter></parameters></method><method name="first" scope="instance"><description>Returns the first Element</description><parameters/></method><method name="last" scope="instance"><description>Returns the last Element</description><parameters/></method><method name="getCount" scope="instance"><description>Returns the number of elements in this composite</description><parameters/></method><method name="contains" scope="instance"><description>Returns true if this composite contains the passed element</description><parameters/></method><method name="indexOf" scope="instance"><description>Returns true if this composite contains the passed element</description><parameters/></method><method name="removeElement" scope="instance"><description>Removes the specified element(s).</description><parameters><parameter name="el" type="Mixed" usage="required"><description>The id of an element, the Element itself, the index of the element in this composite
or an array of any of those.</description></parameter><parameter name="removeDom" type="Boolean" usage="optional"><description>(optional) True to also remove the element from the document</description></parameter></parameters></method><method name="replaceElement" scope="instance"><description>Replaces the specified element with the passed element.</description><parameters><parameter name="el" type="String/HTMLElement/Element/Number" usage="required"><description>The id of an element, the Element itself, the index of the element in this composite
to replace.</description></parameter><parameter name="replacement" type="String/HTMLElement/Element" usage="required"><description>The id of an element or the Element itself.</description></parameter><parameter name="domReplace" type="Boolean" usage="optional"><description>(Optional) True to remove and replace the element in the document too.</description></parameter></parameters></method><method name="clear" scope="instance"><description>Removes all elements.</description><parameters/></method></methods></class><class type="Ext.CompositeElementLite" superclass="Ext.CompositeElement"><description>Flyweight composite class. Reuses the same Ext.Element for element operations.&#13;
 &lt;pre&gt;&lt;code&gt;var els = Ext.select(&quot;#some-el div.some-class&quot;);
 // or select directly from an existing element
 var el = Ext.get('some-el');
 el.select('div.some-class');

 els.setWidth(100); // all elements become 100 width
 els.hide(true); // all elements fade out and hide
 // or
 els.setWidth(100).hide(true);&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;
&lt;b&gt;NOTE: Although they are not listed, this class supports all of the set/update methods of Ext.Element. All Ext.Element
actions will be performed on all the elements in this collection.&lt;/b&gt;</description><properties/><methods><method name="item" scope="instance"><description>Returns a flyweight Element of the dom element object at the specified index</description><parameters><parameter name="index" type="Number" usage="required"><description></description></parameter></parameters></method><method name="each" scope="instance"><description>Calls the passed function passing (el, this, index) for each element in this composite. &lt;b&gt;The element
passed is the flyweight (shared) Ext.Element instance, so if you require a
a reference to the dom node, use el.dom.&lt;/b&gt;</description><parameters><parameter name="fn" type="Function" usage="required"><description>The function to call</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The &lt;i&gt;this&lt;/i&gt; object (defaults to the element)</description></parameter></parameters></method></methods></class><class type="Ext.ContentPanel" superclass="Ext.util.Observable"><description>A basic ContentPanel element.</description><constructors><constructor scope="instance"><description>Create a new ContentPanel.</description><parameters><parameter name="el" type="String/HTMLElement/Ext.Element" usage="required"><description>The container element for this panel</description></parameter><parameter name="config" type="String/Object" usage="required"><description>A string to set only the title or a config object</description></parameter><parameter name="content" type="String" usage="optional"><description>(optional) Set the HTML content for this panel</description></parameter></parameters></constructor></constructors><properties/><methods><method name="getToolbar" scope="instance"><description>Returns the toolbar for this Panel if one was configured.</description><parameters/></method><method name="setContent" scope="instance"><description>Updates this panel's element</description><parameters><parameter name="content" type="String" usage="required"><description>The new content</description></parameter><parameter name="loadScripts" type="Boolean" usage="optional"><description>(optional) true to look for and process scripts</description></parameter></parameters></method><method name="getUpdateManager" scope="instance"><description>Get the &lt;a ext:cls=&quot;Ext.UpdateManager&quot; href=&quot;output/Ext.UpdateManager.html&quot;&gt;Ext.UpdateManager&lt;/a&gt; for this panel. Enables you to perform Ajax updates.</description><parameters/></method><method name="load" scope="instance"><description>Loads this content panel immediately with content from XHR. Note: to delay loading until the panel is activated, use &lt;a ext:cls=&quot;Ext.ContentPanel&quot; ext:member=&quot;setUrl&quot; href=&quot;output/Ext.ContentPanel.html#setUrl&quot;&gt;setUrl&lt;/a&gt;.</description><parameters><parameter name="url" type="Object/String/Function" usage="required"><description>The url for this request or a function to call to get the url or a config object containing any of the following options:&#13;
&lt;pre&gt;&lt;code&gt;panel.load({
    url: &quot;your-url.php&quot;,
    params: {param1: &quot;foo&quot;, param2: &quot;bar&quot;}, // or a URL encoded string
    callback: yourFunction,
    scope: yourObject, //(optional scope)
    discardUrl: false,
    nocache: false,
    text: &quot;Loading...&quot;,
    timeout: 30,
    scripts: false
});&lt;/code&gt;&lt;/pre&gt;
The only required property is &lt;i&gt;url&lt;/i&gt;. The optional properties &lt;i&gt;nocache&lt;/i&gt;, &lt;i&gt;text&lt;/i&gt; and &lt;i&gt;scripts&lt;/i&gt;
are shorthand for &lt;i&gt;disableCaching&lt;/i&gt;, &lt;i&gt;indicatorText&lt;/i&gt; and &lt;i&gt;loadScripts&lt;/i&gt; and are used to set their associated property on this panel UpdateManager instance.</description></parameter><parameter name="params" type="String/Object" usage="optional"><description>(optional) The parameters to pass as either a URL encoded string &quot;param1=1&amp;amp;param2=2&quot; or an object {param1: 1, param2: 2}</description></parameter><parameter name="callback" type="Function" usage="optional"><description>(optional) Callback when transaction is complete -- called with signature (oElement, bSuccess, oResponse)</description></parameter><parameter name="discardUrl" type="Boolean" usage="optional"><description>(optional) By default when you execute an update the defaultUrl is changed to the last used URL. If true, it will not store the URL.</description></parameter></parameters></method><method name="setUrl" scope="instance"><description>Set a URL to be used to load the content for this panel. When this panel is activated, the content will be loaded from that URL.</description><parameters><parameter name="url" type="String/Function" usage="required"><description>The URL to load the content from or a function to call to get the URL</description></parameter><parameter name="params" type="String/Object" usage="optional"><description>(optional) The string params for the update call or an object of the params. See &lt;a ext:cls=&quot;Ext.UpdateManager&quot; ext:member=&quot;update&quot; href=&quot;output/Ext.UpdateManager.html#update&quot;&gt;Ext.UpdateManager.update&lt;/a&gt; for more details. (Defaults to null)</description></parameter><parameter name="loadOnce" type="Boolean" usage="optional"><description>(optional) Whether to only load the content once. If this is false it makes the Ajax call every time this panel is activated. (Defaults to false)</description></parameter></parameters></method><method name="getId" scope="instance"><description>Returns this panel's id</description><parameters/></method><method name="getEl" scope="instance"><description>Returns this panel's element</description><parameters/></method><method name="getTitle" scope="instance"><description>Returns this panel's title</description><parameters/></method><method name="setTitle" scope="instance"><description>Set this panel's title</description><parameters><parameter name="title" type="String" usage="required"><description></description></parameter></parameters></method><method name="isClosable" scope="instance"><description>Returns true is this panel was configured to be closable</description><parameters/></method><method name="refresh" scope="instance"><description>Force a content refresh from the URL specified in the &lt;a ext:cls=&quot;Ext.ContentPanel&quot; ext:member=&quot;setUrl&quot; href=&quot;output/Ext.ContentPanel.html#setUrl&quot;&gt;setUrl&lt;/a&gt; method.
Will fail silently if the &lt;a ext:cls=&quot;Ext.ContentPanel&quot; ext:member=&quot;setUrl&quot; href=&quot;output/Ext.ContentPanel.html#setUrl&quot;&gt;setUrl&lt;/a&gt; method has not been called.
This does not activate the panel, just updates its content.</description><parameters/></method><method name="destroy" scope="instance"><description>Destroys this panel</description><parameters/></method></methods></class><class type="Ext.DatePicker" superclass="Ext.Component"><description>Simple date picker class.</description><constructors><constructor scope="instance"><description>Create a new DatePicker</description><parameters><parameter name="config" type="Object" usage="required"><description>The config object</description></parameter></parameters></constructor></constructors><properties/><methods><method name="setValue" scope="instance"><description>Sets the value of the date field</description><parameters><parameter name="value" type="Date" usage="required"><description>The date to set</description></parameter></parameters></method><method name="getValue" scope="instance"><description>Gets the current selected value of the date field</description><parameters/></method></methods></class><class type="Ext.DialogManager" superclass="Object"><description>Provides global access to BasicDialogs that have been created and
support for z-indexing (layering) multiple open dialogs.</description><properties><property name="zseed" type="Number" scope="instance" access="read-write"><description>The starting z-index for BasicDialogs (defaults to 9000)</description></property></properties><methods><method name="get" scope="instance"><description>Gets a registered dialog by id</description><parameters><parameter name="id" type="String/Object" usage="required"><description>The id of the dialog or a dialog</description></parameter></parameters></method><method name="bringToFront" scope="instance"><description>Brings the specified dialog to the front</description><parameters><parameter name="dlg" type="String/Object" usage="required"><description>The id of the dialog or a dialog</description></parameter></parameters></method><method name="sendToBack" scope="instance"><description>Sends the specified dialog to the back</description><parameters><parameter name="dlg" type="String/Object" usage="required"><description>The id of the dialog or a dialog</description></parameter></parameters></method><method name="hideAll" scope="instance"><description>Hides all dialogs</description><parameters/></method></methods></class><class type="Ext.DomHelper" superclass="Object"><description>Utility class for working with DOM and/or Templates. It transparently supports using HTML fragments or DOM.
For more information see &lt;a href=&quot;http://www.jackslocum.com/yui/2006/10/06/domhelper-create-elements-using-dom-html-fragments-or-templates/&quot;&gt;this blog post with examples&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description><properties><property name="useDom" type="Boolean" scope="instance" access="read-write"><description>True to force the use of DOM instead of html fragments</description></property></properties><methods><method name="markup" scope="instance"><description>Returns the markup for the passed Element(s) config</description><parameters><parameter name="o" type="Object" usage="required"><description>The Dom object spec (and children)</description></parameter></parameters></method><method name="applyStyles" scope="instance"><description>Applies a style specification to an element</description><parameters><parameter name="el" type="String/HTMLElement" usage="required"><description>The element to apply styles to</description></parameter><parameter name="styles" type="String/Object/Function" usage="required"><description>A style specification string eg &quot;width:100px&quot;, or object in the form {width:&quot;100px&quot;}, or
a function which returns such a specification.</description></parameter></parameters></method><method name="insertHtml" scope="instance"><description>Inserts an HTML fragment into the Dom</description><parameters><parameter name="where" type="String" usage="required"><description>Where to insert the html in relation to el - beforeBegin, afterBegin, beforeEnd, afterEnd.</description></parameter><parameter name="el" type="HTMLElement" usage="required"><description>The context element</description></parameter><parameter name="html" type="String" usage="required"><description>The HTML fragmenet</description></parameter></parameters></method><method name="insertBefore" scope="instance"><description>Creates new Dom element(s) and inserts them before el</description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description>The context element</description></parameter><parameter name="o" type="Object/String" usage="required"><description>The Dom object spec (and children) or raw HTML blob</description></parameter><parameter name="returnElement" type="Boolean" usage="optional"><description>(optional) true to return a Ext.Element</description></parameter></parameters></method><method name="insertAfter" scope="instance"><description>Creates new Dom element(s) and inserts them after el</description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description>The context element</description></parameter><parameter name="o" type="Object" usage="required"><description>The Dom object spec (and children)</description></parameter><parameter name="returnElement" type="Boolean" usage="optional"><description>(optional) true to return a Ext.Element</description></parameter></parameters></method><method name="insertFirst" scope="instance"><description>Creates new Dom element(s) and inserts them as the first child of el</description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description>The context element</description></parameter><parameter name="o" type="Object/String" usage="required"><description>The Dom object spec (and children) or raw HTML blob</description></parameter><parameter name="returnElement" type="Boolean" usage="optional"><description>(optional) true to return a Ext.Element</description></parameter></parameters></method><method name="append" scope="instance"><description>Creates new Dom element(s) and appends them to el</description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description>The context element</description></parameter><parameter name="o" type="Object/String" usage="required"><description>The Dom object spec (and children) or raw HTML blob</description></parameter><parameter name="returnElement" type="Boolean" usage="optional"><description>(optional) true to return a Ext.Element</description></parameter></parameters></method><method name="overwrite" scope="instance"><description>Creates new Dom element(s) and overwrites the contents of el with them</description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description>The context element</description></parameter><parameter name="o" type="Object/String" usage="required"><description>The Dom object spec (and children) or raw HTML blob</description></parameter><parameter name="returnElement" type="Boolean" usage="optional"><description>(optional) true to return a Ext.Element</description></parameter></parameters></method><method name="createTemplate" scope="instance"><description>Creates a new Ext.DomHelper.Template from the Dom object spec</description><parameters><parameter name="o" type="Object" usage="required"><description>The Dom object spec (and children)</description></parameter></parameters></method></methods></class><class type="Ext.DomQuery" superclass="Object"><description>*
Provides high performance selector/xpath processing by compiling queries into reusable functions. New pseudo classes and matchers can be plugged. It works on HTML and XML documents (if a content node is passed in).&#13;
&lt;p&gt;&#13;
DomQuery supports most of the &lt;a href=&quot;http://www.w3.org/TR/2005/WD-css3-selectors-20051215/&quot;&gt;CSS3 selectors spec&lt;/a&gt;, along with some custom selectors and basic XPath.&lt;/p&gt;&#13;
&#13;
&lt;p&gt;&#13;
All selectors, attribute filters and pseudos below can be combined infinitely in any order. For example &quot;div.foo:nth-child(odd)[@foo=bar].bar:first&quot; would be a perfectly valid selector. Node filters are processed in the order in which they appear, which allows you to optimize your queries for your document structure.&#13;
&lt;/p&gt;&#13;
&lt;h4&gt;Element Selectors:&lt;/h4&gt;&#13;
&lt;ul class=&quot;list&quot;&gt;&#13;
    &lt;li&gt; &lt;b&gt;*&lt;/b&gt; any element&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E&lt;/b&gt; an element with the tag E&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E F&lt;/b&gt; All descendent elements of E that have the tag F&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E &gt; F&lt;/b&gt; or &lt;b&gt;E/F&lt;/b&gt; all direct children elements of E that have the tag F&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E + F&lt;/b&gt; all elements with the tag F that are immediately preceded by an element with the tag E&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E ~ F&lt;/b&gt; all elements with the tag F that are preceded by a sibling element with the tag E&lt;/li&gt;&#13;
&lt;/ul&gt;&#13;
&lt;h4&gt;Attribute Selectors:&lt;/h4&gt;&#13;
&lt;p&gt;The use of @ and quotes are optional. For example, div[@foo='bar'] is also a valid attribute selector.&lt;/p&gt;&#13;
&lt;ul class=&quot;list&quot;&gt;&#13;
    &lt;li&gt; &lt;b&gt;E[foo]&lt;/b&gt; has an attribute &quot;foo&quot;&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E[foo=bar]&lt;/b&gt; has an attribute &quot;foo&quot; that equals &quot;bar&quot;&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E[foo^=bar]&lt;/b&gt; has an attribute &quot;foo&quot; that starts with &quot;bar&quot;&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E[foo$=bar]&lt;/b&gt; has an attribute &quot;foo&quot; that ends with &quot;bar&quot;&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E[foo*=bar]&lt;/b&gt; has an attribute &quot;foo&quot; that contains the substring &quot;bar&quot;&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E[foo%=2]&lt;/b&gt; has an attribute &quot;foo&quot; that is evenly divisible by 2&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E[foo!=bar]&lt;/b&gt; has an attribute &quot;foo&quot; that does not equal &quot;bar&quot;&lt;/li&gt;&#13;
&lt;/ul&gt;&#13;
&lt;h4&gt;Pseudo Classes:&lt;/h4&gt;&#13;
&lt;ul class=&quot;list&quot;&gt;&#13;
    &lt;li&gt; &lt;b&gt;E:first-child&lt;/b&gt; E is the first child of its parent&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E:last-child&lt;/b&gt; E is the last child of its parent&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E:nth-child(&lt;i&gt;n&lt;/i&gt;)&lt;/b&gt; E is the &lt;i&gt;n&lt;/i&gt;th child of its parent (1 based as per the spec)&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E:nth-child(odd)&lt;/b&gt; E is an odd child of its parent&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E:nth-child(even)&lt;/b&gt; E is an even child of its parent&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E:only-child&lt;/b&gt; E is the only child of its parent&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E:checked&lt;/b&gt; E is an element that is has a checked attribute that is true (e.g. a radio or checkbox) &lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E:first&lt;/b&gt; the first E in the resultset&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E:last&lt;/b&gt; the last E in the resultset&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E:nth(&lt;i&gt;n&lt;/i&gt;)&lt;/b&gt; the &lt;i&gt;n&lt;/i&gt;th E in the resultset (1 based)&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E:odd&lt;/b&gt; shortcut for :nth-child(odd)&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E:even&lt;/b&gt; shortcut for :nth-child(even)&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E:contains(foo)&lt;/b&gt; E's innerHTML contains the substring &quot;foo&quot;&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E:nodeValue(foo)&lt;/b&gt; E contains a textNode with a nodeValue that equals &quot;foo&quot;&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E:not(S)&lt;/b&gt; an E element that does not match simple selector S&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E:has(S)&lt;/b&gt; an E element that has a descendent that matches simple selector S&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E:next(S)&lt;/b&gt; an E element whose next sibling matches simple selector S&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E:prev(S)&lt;/b&gt; an E element whose previous sibling matches simple selector S&lt;/li&gt;&#13;
&lt;/ul&gt;&#13;
&lt;h4&gt;CSS Value Selectors:&lt;/h4&gt;&#13;
&lt;ul class=&quot;list&quot;&gt;&#13;
    &lt;li&gt; &lt;b&gt;E{display=none}&lt;/b&gt; css value &quot;display&quot; that equals &quot;none&quot;&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E{display^=none}&lt;/b&gt; css value &quot;display&quot; that starts with &quot;none&quot;&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E{display$=none}&lt;/b&gt; css value &quot;display&quot; that ends with &quot;none&quot;&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E{display*=none}&lt;/b&gt; css value &quot;display&quot; that contains the substring &quot;none&quot;&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E{display%=2}&lt;/b&gt; css value &quot;display&quot; that is evenly divisible by 2&lt;/li&gt;&#13;
    &lt;li&gt; &lt;b&gt;E{display!=none}&lt;/b&gt; css value &quot;display&quot; that does not equal &quot;none&quot;&lt;/li&gt;&#13;
&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description><properties><property name="matchers" type="Object" scope="instance" access="read-write"><description>Collection of matching regular expressions and code snippets.</description></property><property name="operators" type="Object" scope="instance" access="read-write"><description>Collection of operator comparison functions. The default operators are =, !=, ^=, $=, *= and %=.
New operators can be added as long as the match the format &lt;i&gt;c&lt;/i&gt;= where &lt;i&gt;c&lt;/i&gt; is any character other than space, &amp;gt; &amp;lt;.</description></property><property name="pseudos" type="Object" scope="instance" access="read-write"><description>Collection of &quot;pseudo class&quot; processors. Each processor is passed the current nodeset (array)
and the argument (if any) supplied in the selector.</description></property></properties><methods><method name="compile" scope="instance"><description>Compiles a selector/xpath query into a reusable function. The returned function
takes one parameter &quot;root&quot; (optional), which is the context node from where the query should start.</description><parameters><parameter name="selector" type="String" usage="required"><description>The selector/xpath query</description></parameter><parameter name="type" type="String" usage="optional"><description>(optional) Either &quot;select&quot; (the default) or &quot;simple&quot; for a simple selector match</description></parameter></parameters></method><method name="select" scope="instance"><description>Selects a group of elements.</description><parameters><parameter name="selector" type="String" usage="required"><description>The selector/xpath query (can be a comma separated list of selectors)</description></parameter><parameter name="root" type="Node" usage="optional"><description>(optional) The start of the query (defaults to document).</description></parameter></parameters></method><method name="selectNode" scope="instance"><description>Selects a single element.</description><parameters><parameter name="selector" type="String" usage="required"><description>The selector/xpath query</description></parameter><parameter name="root" type="Node" usage="optional"><description>(optional) The start of the query (defaults to document).</description></parameter></parameters></method><method name="selectValue" scope="instance"><description>Selects the value of a node, optionally replacing null with the defaultValue.</description><parameters><parameter name="selector" type="String" usage="required"><description>The selector/xpath query</description></parameter><parameter name="root" type="Node" usage="optional"><description>(optional) The start of the query (defaults to document).</description></parameter><parameter name="defaultValue" type="String" usage="required"><description></description></parameter></parameters></method><method name="selectNumber" scope="instance"><description>Selects the value of a node, parsing integers and floats.</description><parameters><parameter name="selector" type="String" usage="required"><description>The selector/xpath query</description></parameter><parameter name="root" type="Node" usage="optional"><description>(optional) The start of the query (defaults to document).</description></parameter><parameter name="defaultValue" type="Number" usage="required"><description></description></parameter></parameters></method><method name="is" scope="instance"><description>Returns true if the passed element(s) match the passed simple selector (e.g. div.some-class or span:first-child)</description><parameters><parameter name="el" type="String/HTMLElement/Array" usage="required"><description>An element id, element or array of elements</description></parameter><parameter name="selector" type="String" usage="required"><description>The simple selector to test</description></parameter></parameters></method><method name="filter" scope="instance"><description>Filters an array of elements to only include matches of a simple selector (e.g. div.some-class or span:first-child)</description><parameters><parameter name="el" type="Array" usage="required"><description>An array of elements to filter</description></parameter><parameter name="selector" type="String" usage="required"><description>The simple selector to test</description></parameter><parameter name="nonMatches" type="Boolean" usage="required"><description>If true, it returns the elements that DON'T match
the selector instead of the ones that match</description></parameter></parameters></method></methods></class><class type="Ext.Editor" superclass="Ext.Component"><description>A base editor field that handles displaying/hiding on demand and has some built-in sizing and event handling logic.</description><constructors><constructor scope="instance"><description>Create a new Editor</description><parameters><parameter name="Ext.form.Field}" type="@link" usage="required"><description>field The Field object (or descendant)</description></parameter><parameter name="config" type="Object" usage="required"><description>The config object</description></parameter></parameters></constructor></constructors><properties/><methods><method name="startEdit" scope="instance"><description>Starts the editing process and shows the editor.</description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description>The element to edit</description></parameter><parameter name="value" type="String" usage="optional"><description>(optional) A value to initialize the editor with. If a value is not provided, it defaults
to the innerHTML of el.</description></parameter></parameters></method><method name="setSize" scope="instance"><description>Sets the height and width of this editor.</description><parameters><parameter name="width" type="Number" usage="required"><description>The new width</description></parameter><parameter name="height" type="Number" usage="required"><description>The new height</description></parameter></parameters></method><method name="realign" scope="instance"><description>Realigns the editor to the bound field based on the current alignment config value.</description><parameters/></method><method name="completeEdit" scope="instance"><description>Ends the editing process, persists the changed value to the underlying field, and hides the editor.</description><parameters><parameter name="remainVisible" type="Boolean" usage="required"><description>Override the default behavior and keep the editor visible after edit (defaults to false)</description></parameter></parameters></method><method name="cancelEdit" scope="instance"><description>Cancels the editing process and hides the editor without persisting any changes.  The field value will be
reverted to the original starting value.</description><parameters><parameter name="remainVisible" type="Boolean" usage="required"><description>Override the default behavior and keep the editor visible after
cancel (defaults to false)</description></parameter></parameters></method><method name="setValue" scope="instance"><description>Sets the data value of the editor</description><parameters><parameter name="value" type="Mixed" usage="required"><description>Any valid value supported by the underlying field</description></parameter></parameters></method><method name="getValue" scope="instance"><description>Gets the data value of the editor</description><parameters/></method></methods></class><class type="Ext.Element" superclass="Object"><description>Represents an Element in the DOM.&lt;br&gt;&lt;br&gt;
Usage:&lt;br&gt;&#13;
&lt;pre&gt;&lt;code&gt;var el = Ext.get(&quot;my-div&quot;);

// or with getEl
var el = getEl(&quot;my-div&quot;);

// or with a DOM element
var el = Ext.get(myDivElement);&lt;/code&gt;&lt;/pre&gt;
Using Ext.get() or getEl() instead of calling the constructor directly ensures you get the same object
each call instead of constructing a new one.&lt;br&gt;&lt;br&gt;
&lt;b&gt;Animations&lt;/b&gt;&lt;br /&gt;
Many of the functions for manipulating an element have an optional &quot;animate&quot; parameter. The animate parameter
should either be a boolean (true) or an object literal with animation options. The animation options are:&#13;
&lt;pre&gt;Option    Default   Description&#13;
--------- --------  ---------------------------------------------&#13;
duration  .35       The duration of the animation in seconds&#13;
easing    easeOut   The YUI easing method&#13;
callback  none      A function to execute when the anim completes&#13;
scope     this      The scope (this) of the callback function&lt;/pre&gt;
Also, the Anim object being used for the animation will be set on your options object as &quot;anim&quot;, which allows you to stop or
manipulate the animation. Here's an example:&#13;
&lt;pre&gt;&lt;code&gt;var el = Ext.get(&quot;my-div&quot;);

// no animation
el.setWidth(100);

// default animation
el.setWidth(100, true);

// animation with some options set
el.setWidth(100, {
    duration: 1,
    callback: this.foo,
    scope: this
});

// using the &quot;anim&quot; property to get the Anim object
var opt = {
    duration: 1,
    callback: this.foo,
    scope: this
};
el.setWidth(100, opt);
...
if(opt.anim.isAnimated()){
    opt.anim.stop();
}&lt;/code&gt;&lt;/pre&gt;
&lt;b&gt; Composite (Collections of) Elements&lt;/b&gt;&lt;br /&gt;
For working with collections of Elements, see &lt;a href=&quot;Ext.CompositeElement.html&quot;&gt;Ext.CompositeElement&lt;/a&gt;</description><constructors><constructor scope="instance"><description>Create a new Element directly.</description><parameters><parameter name="element" type="String/HTMLElement" usage="required"><description></description></parameter><parameter name="forceNew" type="Boolean" usage="optional"><description>(optional) By default the constructor checks to see if there is already an instance of this element in the cache and if there is it returns the same instance. This will skip that check (useful for extending this class).</description></parameter></parameters></constructor></constructors><properties><property name="dom" type="HTMLElement" scope="instance" access="read-write"><description>The DOM element</description></property><property name="id" type="String" scope="instance" access="read-write"><description>The DOM element ID</description></property><property name="originalDisplay" type="String" scope="instance" access="read-write"><description>The element's default display mode  (defaults to &quot;&quot;)</description></property><property name="defaultUnit" type="String" scope="instance" access="read-write"><description>The default unit to append to CSS values where a unit isn't provided (defaults to px).</description></property><property name="Element.VISIBILITY" type="Number" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; Visibility mode constant - Use visibility to hide element</description></property><property name="Element.DISPLAY" type="Number" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; Visibility mode constant - Use display to hide element</description></property></properties><methods><method name="setVisibilityMode" scope="instance"><description>Sets the element's visibility mode. When setVisible() is called it
will use this to determine whether to set the visibility or the display property.</description><parameters><parameter name="Element.VISIBILITY" type="visMode" usage="required"><description>or Element.DISPLAY</description></parameter></parameters></method><method name="enableDisplayMode" scope="instance"><description>Convenience method for setVisibilityMode(Element.DISPLAY)</description><parameters><parameter name="display" type="String" usage="optional"><description>(optional) What to set display to when visible</description></parameter></parameters></method><method name="findParent" scope="instance"><description>Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)</description><parameters><parameter name="selector" type="String" usage="required"><description>The simple selector to test</description></parameter><parameter name="maxDepth" type="Number/String/HTMLElement/Element" usage="optional"><description>(optional) The max depth to&#13;
 search as a number or element (defaults to 10 || document.body)</description></parameter><parameter name="returnEl" type="Boolean" usage="optional"><description>(optional) True to return a Ext.Element object instead of DOM node</description></parameter></parameters></method><method name="findParentNode" scope="instance"><description>Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)</description><parameters><parameter name="selector" type="String" usage="required"><description>The simple selector to test</description></parameter><parameter name="maxDepth" type="Number/String/HTMLElement/Element" usage="optional"><description>(optional) The max depth to&#13;
 search as a number or element (defaults to 10 || document.body)</description></parameter><parameter name="returnEl" type="Boolean" usage="optional"><description>(optional) True to return a Ext.Element object instead of DOM node</description></parameter></parameters></method><method name="up" scope="instance"><description>Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child).
This is a shortcut for findParentNode() that always returns an Ext.Element.</description><parameters><parameter name="selector" type="String" usage="required"><description>The simple selector to test</description></parameter><parameter name="maxDepth" type="Number/String/HTMLElement/Element" usage="optional"><description>(optional) The max depth to&#13;
 search as a number or element (defaults to 10 || document.body)</description></parameter></parameters></method><method name="is" scope="instance"><description>Returns true if this element matches the passed simple selector (e.g. div.some-class or span:first-child)</description><parameters><parameter name="selector" type="String" usage="required"><description>The simple selector to test</description></parameter></parameters></method><method name="animate" scope="instance"><description>Perform animation on this element.</description><parameters><parameter name="args" type="Object" usage="required"><description>The YUI animation control args</description></parameter><parameter name="duration" type="Float" usage="optional"><description>(optional) How long the animation lasts in seconds (defaults to .35)</description></parameter><parameter name="onComplete" type="Function" usage="optional"><description>(optional) Function to call when animation completes</description></parameter><parameter name="easing" type="String" usage="optional"><description>(optional) Easing method to use (defaults to 'easeOut')</description></parameter><parameter name="animType" type="String" usage="optional"><description>(optional) 'run' is the default. Can also be 'color', 'motion', or 'scroll'</description></parameter></parameters></method><method name="clean" scope="instance"><description>Removes worthless text nodes</description><parameters><parameter name="forceReclean" type="Boolean" usage="optional"><description>(optional) By default the element
keeps track if it has been cleaned already so
you can call this over and over. However, if you update the element and
need to force a reclean, you can pass true.</description></parameter></parameters></method><method name="scrollIntoView" scope="instance"><description>Scrolls this element into view within the passed container.</description><parameters><parameter name="container" type="String/HTMLElement/Element" usage="optional"><description>(optional) The container element to scroll (defaults to document.body)</description></parameter><parameter name="hscroll" type="Boolean" usage="optional"><description>(optional) False to disable horizontal scroll (defaults to true)</description></parameter></parameters></method><method name="autoHeight" scope="instance"><description>Measures the element's content height and updates height to match. Note: this function uses setTimeout so
the new height may not be available immediately.</description><parameters><parameter name="animate" type="Boolean" usage="optional"><description>(optional) Animate the transition (defaults to false)</description></parameter><parameter name="duration" type="Float" usage="optional"><description>(optional) Length of the animation in seconds (defaults to .35)</description></parameter><parameter name="onComplete" type="Function" usage="optional"><description>(optional) Function to call when animation completes</description></parameter><parameter name="easing" type="String" usage="optional"><description>(optional) Easing method to use (defaults to easeOut)</description></parameter></parameters></method><method name="contains" scope="instance"><description>Returns true if this element is an ancestor of the passed element</description><parameters><parameter name="el" type="HTMLElement/String" usage="required"><description>The element to check</description></parameter></parameters></method><method name="isVisible" scope="instance"><description>Checks whether the element is currently visible using both visibility and display properties.</description><parameters><parameter name="deep" type="Boolean" usage="optional"><description>(optional) True to walk the dom and see if parent elements are hidden (defaults to false)</description></parameter></parameters></method><method name="select" scope="instance"><description>Creates a &lt;a ext:cls=&quot;Ext.CompositeElement&quot; href=&quot;output/Ext.CompositeElement.html&quot;&gt;Ext.CompositeElement&lt;/a&gt; for child nodes based on the passed CSS selector (the selector should not contain an id).</description><parameters><parameter name="selector" type="String" usage="required"><description>The CSS selector</description></parameter><parameter name="unique" type="Boolean" usage="optional"><description>(optional) True to create a unique Ext.Element for each child (defaults to false, which creates a single shared flyweight object)</description></parameter></parameters></method><method name="query" scope="instance"><description>Selects child nodes based on the passed CSS selector (the selector should not contain an id).</description><parameters><parameter name="selector" type="String" usage="required"><description>The CSS selector</description></parameter></parameters></method><method name="child" scope="instance"><description>Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).</description><parameters><parameter name="selector" type="String" usage="required"><description>The CSS selector</description></parameter><parameter name="returnDom" type="Boolean" usage="optional"><description>(optional) True to return the DOM node instead of Ext.Element (defaults to false)</description></parameter></parameters></method><method name="down" scope="instance"><description>Selects a single *direct* child based on the passed CSS selector (the selector should not contain an id).</description><parameters><parameter name="selector" type="String" usage="required"><description>The CSS selector</description></parameter><parameter name="returnDom" type="Boolean" usage="optional"><description>(optional) True to return the DOM node instead of Ext.Element (defaults to false)</description></parameter></parameters></method><method name="initDD" scope="instance"><description>Initializes a &lt;a ext:cls=&quot;Ext.dd.DD&quot; href=&quot;output/Ext.dd.DD.html&quot;&gt;Ext.dd.DD&lt;/a&gt; drag drop object for this element.</description><parameters><parameter name="group" type="String" usage="required"><description>The group the DD object is member of</description></parameter><parameter name="config" type="Object" usage="required"><description>The DD config object</description></parameter><parameter name="overrides" type="Object" usage="required"><description>An object containing methods to override/implement on the DD object</description></parameter></parameters></method><method name="initDDProxy" scope="instance"><description>Initializes a &lt;a ext:cls=&quot;Ext.dd.DDProxy&quot; href=&quot;output/Ext.dd.DDProxy.html&quot;&gt;Ext.dd.DDProxy&lt;/a&gt; object for this element.</description><parameters><parameter name="group" type="String" usage="required"><description>The group the DDProxy object is member of</description></parameter><parameter name="config" type="Object" usage="required"><description>The DDProxy config object</description></parameter><parameter name="overrides" type="Object" usage="required"><description>An object containing methods to override/implement on the DDProxy object</description></parameter></parameters></method><method name="initDDTarget" scope="instance"><description>Initializes a &lt;a ext:cls=&quot;Ext.dd.DDTarget&quot; href=&quot;output/Ext.dd.DDTarget.html&quot;&gt;Ext.dd.DDTarget&lt;/a&gt; object for this element.</description><parameters><parameter name="group" type="String" usage="required"><description>The group the DDTarget object is member of</description></parameter><parameter name="config" type="Object" usage="required"><description>The DDTarget config object</description></parameter><parameter name="overrides" type="Object" usage="required"><description>An object containing methods to override/implement on the DDTarget object</description></parameter></parameters></method><method name="setVisible" scope="instance"><description>Sets the visibility of the element (see details). If the visibilityMode is set to Element.DISPLAY, it will use
the display property to hide the element, otherwise it uses visibility. The default is to hide and show using the visibility property.</description><parameters><parameter name="visible" type="Boolean" usage="required"><description>Whether the element is visible</description></parameter><parameter name="animate" type="Boolean/Object" usage="optional"><description>(optional) True for the default animation, or a standard Element animation config object</description></parameter></parameters></method><method name="isDisplayed" scope="instance"><description>Returns true if display is not &quot;none&quot;</description><parameters/></method><method name="toggle" scope="instance"><description>Toggles the element's visibility or display, depending on visibility mode.</description><parameters><parameter name="animate" type="Boolean/Object" usage="optional"><description>(optional) True for the default animation, or a standard Element animation config object</description></parameter></parameters></method><method name="setDisplayed" scope="instance"><description>Sets the CSS display property. Uses originalDisplay if the specified value is a boolean true.</description><parameters><parameter name="value" type="Boolean" usage="required"><description>Boolean value to display the element using its default display, or a string to set the display directly</description></parameter></parameters></method><method name="focus" scope="instance"><description>Tries to focus the element. Any exceptions are caught and ignored.</description><parameters/></method><method name="blur" scope="instance"><description>Tries to blur the element. Any exceptions are caught and ignored.</description><parameters/></method><method name="addClass" scope="instance"><description>Adds one or more CSS classes to the element. Duplicate classes are automatically filtered out.</description><parameters><parameter name="className" type="String/Array" usage="required"><description>The CSS class to add, or an array of classes</description></parameter></parameters></method><method name="radioClass" scope="instance"><description>Adds one or more CSS classes to this element and removes the same class(es) from all siblings.</description><parameters><parameter name="className" type="String/Array" usage="required"><description>The CSS class to add, or an array of classes</description></parameter></parameters></method><method name="removeClass" scope="instance"><description>Removes one or more CSS classes from the element.</description><parameters><parameter name="className" type="String/Array" usage="required"><description>The CSS class to remove, or an array of classes</description></parameter></parameters></method><method name="toggleClass" scope="instance"><description>Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it).</description><parameters><parameter name="className" type="String" usage="required"><description>The CSS class to toggle</description></parameter></parameters></method><method name="hasClass" scope="instance"><description>Checks if the specified CSS class exists on this element's DOM node.</description><parameters><parameter name="className" type="String" usage="required"><description>The CSS class to check for</description></parameter></parameters></method><method name="replaceClass" scope="instance"><description>Replaces a CSS class on the element with another.  If the old name does not exist, the new name will simply be added.</description><parameters><parameter name="oldClassName" type="String" usage="required"><description>The CSS class to replace</description></parameter><parameter name="newClassName" type="String" usage="required"><description>The replacement CSS class</description></parameter></parameters></method><method name="getStyles" scope="instance"><description>Returns an object with properties matching the styles requested.
For example, el.getStyles('color', 'font-size', 'width') might return
{'color': '#FFFFFF', 'font-size': '13px', 'width': '100px'}.</description><parameters><parameter name="style1" type="String" usage="required"><description>A style name</description></parameter><parameter name="style2" type="String" usage="required"><description>A style name</description></parameter><parameter name="etc." type="String" usage="required"><description></description></parameter></parameters></method><method name="getStyle" scope="instance"><description>Normalizes currentStyle and computedStyle. This is not YUI getStyle, it is an optimised version.</description><parameters><parameter name="property" type="String" usage="required"><description>The style property whose value is returned.</description></parameter></parameters></method><method name="setStyle" scope="instance"><description>Wrapper for setting style properties, also takes single object parameter of multiple styles.</description><parameters><parameter name="property" type="String/Object" usage="required"><description>The style property to be set, or an object of multiple styles.</description></parameter><parameter name="value" type="String" usage="optional"><description>(optional) The value to apply to the given property, or null if an object was passed.</description></parameter></parameters></method><method name="applyStyles" scope="instance"><description>More flexible version of &lt;a ext:cls=&quot;Ext.Element&quot; ext:member=&quot;setStyle&quot; href=&quot;output/Ext.Element.html#setStyle&quot;&gt;setStyle&lt;/a&gt; for setting style properties.</description><parameters><parameter name="styles" type="String/Object/Function" usage="required"><description>A style specification string, e.g. &quot;width:100px&quot;, or object in the form {width:&quot;100px&quot;}, or
a function which returns such a specification.</description></parameter></parameters></method><method name="getX" scope="instance"><description>Gets the current X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description><parameters/></method><method name="getY" scope="instance"><description>Gets the current Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description><parameters/></method><method name="getXY" scope="instance"><description>Gets the current position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description><parameters/></method><method name="setX" scope="instance"><description>Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description><parameters><parameter name="The" type="Number" usage="required"><description>X position of the element</description></parameter><parameter name="animate" type="Boolean/Object" usage="optional"><description>(optional) True for the default animation, or a standard Element animation config object</description></parameter></parameters></method><method name="setY" scope="instance"><description>Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description><parameters><parameter name="The" type="Number" usage="required"><description>Y position of the element</description></parameter><parameter name="animate" type="Boolean/Object" usage="optional"><description>(optional) True for the default animation, or a standard Element animation config object</description></parameter></parameters></method><method name="setLeft" scope="instance"><description>Sets the element's left position directly using CSS style (instead of &lt;a ext:cls=&quot;Ext.Element&quot; ext:member=&quot;setX&quot; href=&quot;output/Ext.Element.html#setX&quot;&gt;setX&lt;/a&gt;).</description><parameters><parameter name="left" type="String" usage="required"><description>The left CSS property value</description></parameter></parameters></method><method name="setTop" scope="instance"><description>Sets the element's top position directly using CSS style (instead of &lt;a ext:cls=&quot;Ext.Element&quot; ext:member=&quot;setY&quot; href=&quot;output/Ext.Element.html#setY&quot;&gt;setY&lt;/a&gt;).</description><parameters><parameter name="top" type="String" usage="required"><description>The top CSS property value</description></parameter></parameters></method><method name="setRight" scope="instance"><description>Sets the element's CSS right style.</description><parameters><parameter name="right" type="String" usage="required"><description>The right CSS property value</description></parameter></parameters></method><method name="setBottom" scope="instance"><description>Sets the element's CSS bottom style.</description><parameters><parameter name="bottom" type="String" usage="required"><description>The bottom CSS property value</description></parameter></parameters></method><method name="setXY" scope="instance"><description>Sets the position of the element in page coordinates, regardless of how the element is positioned.
The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description><parameters><parameter name="pos" type="Array" usage="required"><description>Contains X &amp; Y [x, y] values for new position (coordinates are page-based)</description></parameter><parameter name="animate" type="Boolean/Object" usage="optional"><description>(optional) True for the default animation, or a standard Element animation config object</description></parameter></parameters></method><method name="setLocation" scope="instance"><description>Sets the position of the element in page coordinates, regardless of how the element is positioned.
The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description><parameters><parameter name="x" type="Number" usage="required"><description>X value for new position (coordinates are page-based)</description></parameter><parameter name="y" type="Number" usage="required"><description>Y value for new position (coordinates are page-based)</description></parameter><parameter name="animate" type="Boolean/Object" usage="optional"><description>(optional) True for the default animation, or a standard Element animation config object</description></parameter></parameters></method><method name="moveTo" scope="instance"><description>Sets the position of the element in page coordinates, regardless of how the element is positioned.
The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description><parameters><parameter name="x" type="Number" usage="required"><description>X value for new position (coordinates are page-based)</description></parameter><parameter name="y" type="Number" usage="required"><description>Y value for new position (coordinates are page-based)</description></parameter><parameter name="animate" type="Boolean/Object" usage="optional"><description>(optional) True for the default animation, or a standard Element animation config object</description></parameter></parameters></method><method name="getRegion" scope="instance"><description>Returns the region of the given element.
The element must be part of the DOM tree to have a region (display:none or elements not appended return false).</description><parameters/></method><method name="getHeight" scope="instance"><description>Returns the offset height of the element</description><parameters><parameter name="contentHeight" type="Boolean" usage="optional"><description>(optional) true to get the height minus borders and padding</description></parameter></parameters></method><method name="getWidth" scope="instance"><description>Returns the offset width of the element</description><parameters><parameter name="contentWidth" type="Boolean" usage="optional"><description>(optional) true to get the width minus borders and padding</description></parameter></parameters></method><method name="getComputedHeight" scope="instance"><description>Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders
when needed to simulate offsetHeight when offsets aren't available. This may not work on display:none elements
if a height has not been set using CSS.</description><parameters/></method><method name="getComputedWidth" scope="instance"><description>Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders
when needed to simulate offsetWidth when offsets aren't available. This may not work on display:none elements
if a width has not been set using CSS.</description><parameters/></method><method name="getSize" scope="instance"><description>Returns the size of the element.</description><parameters><parameter name="contentSize" type="Boolean" usage="optional"><description>(optional) true to get the width/size minus borders and padding</description></parameter></parameters></method><method name="getViewSize" scope="instance"><description>Returns the width and height of the viewport.</description><parameters/></method><method name="getValue" scope="instance"><description>Returns the value of the &quot;value&quot; attribute</description><parameters><parameter name="asNumber" type="Boolean" usage="required"><description>true to parse the value as a number</description></parameter></parameters></method><method name="setWidth" scope="instance"><description>Set the width of the element</description><parameters><parameter name="width" type="Number" usage="required"><description>The new width</description></parameter><parameter name="animate" type="Boolean/Object" usage="optional"><description>(optional) true for the default animation or a standard Element animation config object</description></parameter></parameters></method><method name="setHeight" scope="instance"><description>Set the height of the element</description><parameters><parameter name="height" type="Number" usage="required"><description>The new height</description></parameter><parameter name="animate" type="Boolean/Object" usage="optional"><description>(optional) true for the default animation or a standard Element animation config object</description></parameter></parameters></method><method name="setSize" scope="instance"><description>Set the size of the element. If animation is true, both width an height will be animated concurrently.</description><parameters><parameter name="width" type="Number" usage="required"><description>The new width</description></parameter><parameter name="height" type="Number" usage="required"><description>The new height</description></parameter><parameter name="animate" type="Boolean/Object" usage="optional"><description>(optional) true for the default animation or a standard Element animation config object</description></parameter></parameters></method><method name="setBounds" scope="instance"><description>Sets the element's position and size in one shot. If animation is true then width, height, x and y will be animated concurrently.</description><parameters><parameter name="x" type="Number" usage="required"><description>X value for new position (coordinates are page-based)</description></parameter><parameter name="y" type="Number" usage="required"><description>Y value for new position (coordinates are page-based)</description></parameter><parameter name="width" type="Number" usage="required"><description>The new width</description></parameter><parameter name="height" type="Number" usage="required"><description>The new height</description></parameter><parameter name="animate" type="Boolean/Object" usage="optional"><description>(optional) true for the default animation or a standard Element animation config object</description></parameter></parameters></method><method name="setRegion" scope="instance"><description>Sets the element's position and size the the specified region. If animation is true then width, height, x and y will be animated concurrently.</description><parameters><parameter name="region" type="Ext.lib.Region" usage="required"><description>The region to fill</description></parameter><parameter name="animate" type="Boolean/Object" usage="optional"><description>(optional) true for the default animation or a standard Element animation config object</description></parameter></parameters></method><method name="addListener" scope="instance"><description>Appends an event handler</description><parameters><parameter name="eventName" type="String" usage="required"><description>The type of event to append</description></parameter><parameter name="fn" type="Function" usage="required"><description>The method the event invokes</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope (this object) of the fn</description></parameter><parameter name="options" type="Object" usage="optional"><description>(optional)An object with standard &lt;a ext:cls=&quot;Ext.EventManager&quot; ext:member=&quot;addListener&quot; href=&quot;output/Ext.EventManager.html#addListener&quot;&gt;Ext.EventManager.addListener&lt;/a&gt; options</description></parameter></parameters></method><method name="removeListener" scope="instance"><description>Removes an event handler from this element</description><parameters><parameter name="eventName" type="String" usage="required"><description>the type of event to remove</description></parameter><parameter name="fn" type="Function" usage="required"><description>the method the event invokes</description></parameter></parameters></method><method name="removeAllListeners" scope="instance"><description>Removes all previous added listeners from this element</description><parameters/></method><method name="setOpacity" scope="instance"><description>Set the opacity of the element</description><parameters><parameter name="opacity" type="Float" usage="required"><description>The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc</description></parameter><parameter name="animate" type="Boolean/Object" usage="optional"><description>(optional) true for the default animation or a standard Element animation config object</description></parameter></parameters></method><method name="getLeft" scope="instance"><description>Gets the left X coordinate</description><parameters><parameter name="local" type="Boolean" usage="required"><description>True to get the local css position instead of page coordinate</description></parameter></parameters></method><method name="getRight" scope="instance"><description>Gets the right X coordinate of the element (element X position + element width)</description><parameters><parameter name="local" type="Boolean" usage="required"><description>True to get the local css position instead of page coordinate</description></parameter></parameters></method><method name="getTop" scope="instance"><description>Gets the top Y coordinate</description><parameters><parameter name="local" type="Boolean" usage="required"><description>True to get the local css position instead of page coordinate</description></parameter></parameters></method><method name="getBottom" scope="instance"><description>Gets the bottom Y coordinate of the element (element Y position + element height)</description><parameters><parameter name="local" type="Boolean" usage="required"><description>True to get the local css position instead of page coordinate</description></parameter></parameters></method><method name="position" scope="instance"><description>Initializes positioning on this element. If a desired position is not passed, it will make the
the element positioned relative IF it is not already positioned.</description><parameters><parameter name="pos" type="String" usage="optional"><description>(optional) Positioning to use &quot;relative&quot;, &quot;absolute&quot; or &quot;fixed&quot;</description></parameter><parameter name="zIndex" type="Number" usage="optional"><description>(optional) The zIndex to apply</description></parameter><parameter name="x" type="Number" usage="optional"><description>(optional) Set the page X position</description></parameter><parameter name="y" type="Number" usage="optional"><description>(optional) Set the page Y position</description></parameter></parameters></method><method name="clearPositioning" scope="instance"><description>Clear positioning back to the default when the document was loaded</description><parameters><parameter name="value" type="String" usage="optional"><description>(optional) The value to use for the left,right,top,bottom, defaults to '' (empty string). You could use 'auto'.</description></parameter></parameters></method><method name="getPositioning" scope="instance"><description>Gets an object with all CSS positioning properties. Useful along with setPostioning to get
snapshot before performing an update and then restoring the element.</description><parameters/></method><method name="getBorderWidth" scope="instance"><description>Gets the width of the border(s) for the specified side(s)</description><parameters><parameter name="side" type="String" usage="required"><description>Can be t, l, r, b or any combination of those to add multiple values. For example,
passing lr would get the border (l)eft width + the border (r)ight width.</description></parameter></parameters></method><method name="getPadding" scope="instance"><description>Gets the width of the padding(s) for the specified side(s)</description><parameters><parameter name="side" type="String" usage="required"><description>Can be t, l, r, b or any combination of those to add multiple values. For example,
passing lr would get the padding (l)eft + the padding (r)ight.</description></parameter></parameters></method><method name="setPositioning" scope="instance"><description>Set positioning with an object returned by getPositioning().</description><parameters><parameter name="posCfg" type="Object" usage="required"><description></description></parameter></parameters></method><method name="setLeftTop" scope="instance"><description>Quick set left and top adding default units</description><parameters/></method><method name="move" scope="instance"><description>Move this element relative to its current position.</description><parameters><parameter name="direction" type="String" usage="required"><description>Possible values are: &quot;l&quot;,&quot;left&quot; - &quot;r&quot;,&quot;right&quot; - &quot;t&quot;,&quot;top&quot;,&quot;up&quot; - &quot;b&quot;,&quot;bottom&quot;,&quot;down&quot;.</description></parameter><parameter name="distance" type="Number" usage="required"><description>How far to move the element in pixels</description></parameter><parameter name="animate" type="Boolean/Object" usage="optional"><description>(optional) true for the default animation or a standard Element animation config object</description></parameter></parameters></method><method name="clip" scope="instance"><description>Store the current overflow setting and clip overflow on the element - use &lt;a ext:cls=&quot;Ext.Element&quot; ext:member=&quot;unclip&quot; href=&quot;output/Ext.Element.html#unclip&quot;&gt;unclip&lt;/a&gt; to remove</description><parameters/></method><method name="unclip" scope="instance"><description>Return clipping (overflow) to original clipping before clip() was called</description><parameters/></method><method name="getAnchorXY" scope="instance"><description>Gets the x,y coordinates specified by the anchor position on the element.</description><parameters><parameter name="anchor" type="String" usage="optional"><description>(optional) The specified anchor position (defaults to &quot;c&quot;). See &lt;a ext:cls=&quot;Ext.Element&quot; ext:member=&quot;alignTo&quot; href=&quot;output/Ext.Element.html#alignTo&quot;&gt;alignTo&lt;/a&gt; for details on supported anchor positions.</description></parameter><parameter name="size" type="Object" usage="optional"><description>(optional) An object containing the size to use for calculating anchor position
{width: (target width), height: (target height)} (defaults to the element's current size)</description></parameter><parameter name="local" type="Boolean" usage="optional"><description>(optional) True to get the local (element top/left-relative) anchor position instead of page coordinates</description></parameter></parameters></method><method name="getAlignToXY" scope="instance"><description>Gets the x,y coordinates to align this element with another element. See &lt;a ext:cls=&quot;Ext.Element&quot; ext:member=&quot;alignTo&quot; href=&quot;output/Ext.Element.html#alignTo&quot;&gt;alignTo&lt;/a&gt; for more info on the
supported position values.</description><parameters><parameter name="element" type="String/HTMLElement/Ext.Element" usage="required"><description>The element to align to.</description></parameter><parameter name="position" type="String" usage="required"><description>The position to align to.</description></parameter><parameter name="offsets" type="Array" usage="optional"><description>(optional) Offset the positioning by [x, y]</description></parameter></parameters></method><method name="alignTo" scope="instance"><description>Aligns this element with another element relative to the specified anchor points. If the other element is the
document it aligns it to the viewport.
The position parameter is optional, and can be specified in any one of the following formats:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Blank&lt;/b&gt;: Defaults to aligning the element's top-left corner to the target's bottom-left corner (&quot;tl-bl&quot;).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;One anchor (deprecated)&lt;/b&gt;: The passed anchor position is used as the target element's anchor point.
The element being aligned will position its top-left corner (tl) to that point.  &lt;i&gt;This method has been
deprecated in favor of the newer two anchor syntax below&lt;/i&gt;.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Two anchors&lt;/b&gt;: If two values from the table below are passed separated by a dash, the first value is used as the
element's anchor point, and the second value is used as the target's anchor point.&lt;/li&gt;
&lt;/ul&gt;
In addition to the anchor points, the position parameter also supports the &quot;?&quot; character.  If &quot;?&quot; is passed at the end of
the position string, the element will attempt to align as specified, but the position will be adjusted to constrain to
the viewport if necessary.  Note that the element being aligned might be swapped to align to a different position than
that specified in order to enforce the viewport constraints.
Following are all of the supported anchor positions:&#13;
&lt;pre&gt;Value  Description&#13;
-----  -----------------------------&#13;
tl     The top left corner (default)&#13;
t      The center of the top edge&#13;
tr     The top right corner&#13;
l      The center of the left edge&#13;
c      In the center of the element&#13;
r      The center of the right edge&#13;
bl     The bottom left corner&#13;
b      The center of the bottom edge&#13;
br     The bottom right corner&lt;/pre&gt;&#13;
Example Usage:&#13;
&lt;pre&gt;&lt;code&gt;// align el to other-el using the default positioning (&quot;tl-bl&quot;, non-constrained)
el.alignTo(&quot;other-el&quot;);

// align the top left corner of el with the top right corner of other-el (constrained to viewport)
el.alignTo(&quot;other-el&quot;, &quot;tr?&quot;);

// align the bottom right corner of el with the center left edge of other-el
el.alignTo(&quot;other-el&quot;, &quot;br-l?&quot;);

// align the center of el with the bottom left corner of other-el and
// adjust the x position by -6 pixels (and the y position by 0)
el.alignTo(&quot;other-el&quot;, &quot;c-bl&quot;, [-6, 0]);&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="element" type="String/HTMLElement/Ext.Element" usage="required"><description>The element to align to.</description></parameter><parameter name="position" type="String" usage="required"><description>The position to align to.</description></parameter><parameter name="offsets" type="Array" usage="optional"><description>(optional) Offset the positioning by [x, y]</description></parameter><parameter name="animate" type="Boolean/Object" usage="optional"><description>(optional) true for the default animation or a standard Element animation config object</description></parameter></parameters></method><method name="anchorTo" scope="instance"><description>Anchors an element to another element and realigns it when the window is resized.</description><parameters><parameter name="element" type="String/HTMLElement/Ext.Element" usage="required"><description>The element to align to.</description></parameter><parameter name="position" type="String" usage="required"><description>The position to align to.</description></parameter><parameter name="offsets" type="Array" usage="optional"><description>(optional) Offset the positioning by [x, y]</description></parameter><parameter name="animate" type="Boolean/Object" usage="optional"><description>(optional) True for the default animation or a standard Element animation config object</description></parameter><parameter name="monitorScroll" type="Boolean/Number" usage="optional"><description>(optional) True to monitor body scroll and reposition. If this parameter
is a number, it is used as the buffer delay (defaults to 50ms).</description></parameter><parameter name="callback" type="Function" usage="required"><description>The function to call after the animation finishes</description></parameter></parameters></method><method name="clearOpacity" scope="instance"><description>Clears any opacity settings from this element. Required in some cases for IE.</description><parameters/></method><method name="hide" scope="instance"><description>Hide this element - Uses display mode to determine whether to use &quot;display&quot; or &quot;visibility&quot;. See &lt;a ext:cls=&quot;Ext.Element&quot; ext:member=&quot;setVisible&quot; href=&quot;output/Ext.Element.html#setVisible&quot;&gt;setVisible&lt;/a&gt;.</description><parameters><parameter name="animate" type="Boolean/Object" usage="optional"><description>(optional) true for the default animation or a standard Element animation config object</description></parameter></parameters></method><method name="show" scope="instance"><description>Show this element - Uses display mode to determine whether to use &quot;display&quot; or &quot;visibility&quot;. See &lt;a ext:cls=&quot;Ext.Element&quot; ext:member=&quot;setVisible&quot; href=&quot;output/Ext.Element.html#setVisible&quot;&gt;setVisible&lt;/a&gt;.</description><parameters><parameter name="animate" type="Boolean/Object" usage="optional"><description>(optional) true for the default animation or a standard Element animation config object</description></parameter></parameters></method><method name="beginMeasure" scope="instance"><description>Temporarily enables offsets (width,height,x,y) for an element with display:none, use endMeasure() when done.</description><parameters/></method><method name="endMeasure" scope="instance"><description>Restores displays to before beginMeasure was called</description><parameters/></method><method name="update" scope="instance"><description>Update the innerHTML of this element, optionally searching for and processing scripts</description><parameters><parameter name="html" type="String" usage="required"><description>The new HTML</description></parameter><parameter name="loadScripts" type="Boolean" usage="optional"><description>(optional) true to look for and process scripts</description></parameter><parameter name="callback" type="Function" usage="required"><description>For async script loading you can be noticed when the update completes</description></parameter></parameters></method><method name="load" scope="instance"><description>Direct access to the UpdateManager update() method (takes the same parameters).</description><parameters><parameter name="url" type="String/Function" usage="required"><description>The url for this request or a function to call to get the url</description></parameter><parameter name="params" type="String/Object" usage="optional"><description>(optional) The parameters to pass as either a url encoded string &quot;param1=1&amp;amp;param2=2&quot; or an object {param1: 1, param2: 2}</description></parameter><parameter name="callback" type="Function" usage="optional"><description>(optional) Callback when transaction is complete - called with signature (oElement, bSuccess)</description></parameter><parameter name="discardUrl" type="Boolean" usage="optional"><description>(optional) By default when you execute an update the defaultUrl is changed to the last used url. If true, it will not store the url.</description></parameter></parameters></method><method name="getUpdateManager" scope="instance"><description>Gets this element's UpdateManager</description><parameters/></method><method name="unselectable" scope="instance"><description>Disables text selection for this element (normalized across browsers)</description><parameters/></method><method name="getCenterXY" scope="instance"><description>Calculates the x, y to center this element on the screen</description><parameters/></method><method name="center" scope="instance"><description>Centers the Element in either the viewport, or another Element.</description><parameters><parameter name="centerIn" type="String/HTMLElement/Ext.Element" usage="optional"><description>(optional) The element in which to center the element.</description></parameter></parameters></method><method name="isBorderBox" scope="instance"><description>Tests various css rules/browsers to determine if this element uses a border box</description><parameters/></method><method name="getBox" scope="instance"><description>Return a box {x, y, width, height} that can be used to set another elements
size/location to match this element.</description><parameters><parameter name="contentBox" type="Boolean" usage="optional"><description>(optional) If true a box for the content of the element is returned.</description></parameter><parameter name="local" type="Boolean" usage="optional"><description>(optional) If true the element's left and top are returned instead of page x/y.</description></parameter></parameters></method><method name="getFrameWidth" scope="instance"><description>Returns the sum width of the padding and borders for the passed &quot;sides&quot;. See getBorderWidth()&#13;
     for more information about the sides.</description><parameters><parameter name="sides" type="String" usage="required"><description></description></parameter></parameters></method><method name="setBox" scope="instance"><description>Sets the element's box. Use getBox() on another element to get a box obj. If animate is true then width, height, x and y will be animated concurrently.</description><parameters><parameter name="box" type="Object" usage="required"><description>The box to fill {x, y, width, height}</description></parameter><parameter name="adjust" type="Boolean" usage="optional"><description>(optional) Whether to adjust for box-model issues automatically</description></parameter><parameter name="animate" type="Boolean/Object" usage="optional"><description>(optional) true for the default animation or a standard Element animation config object</description></parameter></parameters></method><method name="repaint" scope="instance"><description>Forces the browser to repaint this element</description><parameters/></method><method name="getMargins" scope="instance"><description>Returns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,
then it returns the calculated width of the sides (see getPadding)</description><parameters><parameter name="sides" type="String" usage="optional"><description>(optional) Any combination of l, r, t, b to get the sum of those sides</description></parameter></parameters></method><method name="createProxy" scope="instance"><description>Creates a proxy element of this element</description><parameters><parameter name="config" type="String/Object" usage="required"><description>The class name of the proxy element or a DomHelper config object</description></parameter><parameter name="renderTo" type="String/HTMLElement" usage="optional"><description>(optional) The element or element id to render the proxy to (defaults to document.body)</description></parameter><parameter name="matchBox" type="Boolean" usage="optional"><description>(optional) True to align and size the proxy to this element now (defaults to false)</description></parameter></parameters></method><method name="mask" scope="instance"><description>Puts a mask over this element to disable user interaction. Requires core.css.
This method can only be applied to elements which accept child nodes.</description><parameters><parameter name="msg" type="String" usage="optional"><description>(optional) A message to display in the mask</description></parameter><parameter name="msgCls" type="String" usage="optional"><description>(optional) A css class to apply to the msg element</description></parameter></parameters></method><method name="unmask" scope="instance"><description>Removes a previously applied mask. If removeEl is true the mask overlay is destroyed, otherwise
it is cached for reuse.</description><parameters/></method><method name="isMasked" scope="instance"><description>Returns true if this element is masked</description><parameters/></method><method name="createShim" scope="instance"><description>Creates an iframe shim for this element to keep selects and other windowed objects from
showing through.</description><parameters/></method><method name="remove" scope="instance"><description>Removes this element from the DOM and deletes it from the cache</description><parameters/></method><method name="addClassOnOver" scope="instance"><description>Sets up event handlers to add and remove a css class when the mouse is over this element</description><parameters><parameter name="className" type="String" usage="required"><description></description></parameter><parameter name="preventFlicker" type="Boolean" usage="optional"><description>(optional) If set to true, it prevents flickering by filtering
mouseout events for children elements</description></parameter></parameters></method><method name="addClassOnFocus" scope="instance"><description>Sets up event handlers to add and remove a css class when this element has the focus</description><parameters><parameter name="className" type="String" usage="required"><description></description></parameter></parameters></method><method name="addClassOnClick" scope="instance"><description>Sets up event handlers to add and remove a css class when the mouse is down and then up on this element (a click effect)</description><parameters><parameter name="className" type="String" usage="required"><description></description></parameter></parameters></method><method name="swallowEvent" scope="instance"><description>Stops the specified event from bubbling and optionally prevents the default action</description><parameters><parameter name="eventName" type="String" usage="required"><description></description></parameter><parameter name="preventDefault" type="Boolean" usage="optional"><description>(optional) true to prevent the default action too</description></parameter></parameters></method><method name="fitToParent" scope="instance"><description>Sizes this element to its parent element's dimensions performing
neccessary box adjustments.</description><parameters><parameter name="monitorResize" type="Boolean" usage="optional"><description>(optional) If true maintains the fit when the browser window is resized.</description></parameter><parameter name="targetParent" type="String/HTMLElment/Element" usage="optional"><description>(optional) The target parent, default to the parentNode.</description></parameter></parameters></method><method name="getNextSibling" scope="instance"><description>Gets the next sibling, skipping text nodes</description><parameters/></method><method name="getPrevSibling" scope="instance"><description>Gets the previous sibling, skipping text nodes</description><parameters/></method><method name="appendChild" scope="instance"><description>Appends the passed element(s) to this element</description><parameters><parameter name="el" type="String/HTMLElement/Array/Element/CompositeElement" usage="required"><description></description></parameter></parameters></method><method name="createChild" scope="instance"><description>Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element.</description><parameters><parameter name="config" type="Object" usage="required"><description>DomHelper element config object. If no tag is specified (e.g., {tag:'input'}) then a div will be
automatically generated with the specified attributes.</description></parameter><parameter name="insertBefore" type="HTMLElement" usage="optional"><description>(optional) a child element of this element</description></parameter><parameter name="returnDom" type="Boolean" usage="optional"><description>(optional) true to return the dom node instead of creating an Element</description></parameter></parameters></method><method name="appendTo" scope="instance"><description>Appends this element to the passed element</description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description>The new parent element</description></parameter></parameters></method><method name="insertBefore" scope="instance"><description>Inserts this element before the passed element in the DOM</description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description>The element to insert before</description></parameter></parameters></method><method name="insertAfter" scope="instance"><description>Inserts this element after the passed element in the DOM</description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description>The element to insert after</description></parameter></parameters></method><method name="insertFirst" scope="instance"><description>Inserts (or creates) an element (or DomHelper config) as the first child of the this element</description><parameters><parameter name="el" type="String/HTMLElement/Element/Object" usage="required"><description>The id or element to insert or a DomHelper config to create and insert</description></parameter></parameters></method><method name="insertSibling" scope="instance"><description>Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element</description><parameters><parameter name="el" type="String/HTMLElement/Element/Object" usage="required"><description>The id or element to insert or a DomHelper config to create and insert</description></parameter><parameter name="where" type="String" usage="optional"><description>(optional) 'before' or 'after' defaults to before</description></parameter><parameter name="returnDom" type="Boolean" usage="optional"><description>(optional) True to return the raw DOM element instead of Ext.Element</description></parameter></parameters></method><method name="wrap" scope="instance"><description>Creates and wraps this element with another element</description><parameters><parameter name="config" type="Object" usage="optional"><description>(optional) DomHelper element config object for the wrapper element or null for an empty div</description></parameter><parameter name="returnDom" type="Boolean" usage="optional"><description>(optional) True to return the raw DOM element instead of Ext.Element</description></parameter></parameters></method><method name="replace" scope="instance"><description>Replaces the passed element with this element</description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description>The element to replace</description></parameter></parameters></method><method name="insertHtml" scope="instance"><description>Inserts an html fragment into this element</description><parameters><parameter name="where" type="String" usage="required"><description>Where to insert the html in relation to the this element - beforeBegin, afterBegin, beforeEnd, afterEnd.</description></parameter><parameter name="html" type="String" usage="required"><description>The HTML fragment</description></parameter><parameter name="returnEl" type="Boolean" usage="required"><description>True to return an Ext.Element</description></parameter></parameters></method><method name="set" scope="instance"><description>Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function)</description><parameters><parameter name="o" type="Object" usage="required"><description>The object with the attributes</description></parameter><parameter name="useSet" type="Boolean" usage="optional"><description>(optional) false to override the default setAttribute to use expandos.</description></parameter></parameters></method><method name="addKeyListener" scope="instance"><description>Convenience method for constructing a KeyMap</description><parameters><parameter name="key" type="Number/Array/Object/String" usage="required"><description>Either a string with the keys to listen for, the numeric key code, array of key codes or an object with the following options:
{key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}</description></parameter><parameter name="fn" type="Function" usage="required"><description>The function to call</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope of the function</description></parameter></parameters></method><method name="addKeyMap" scope="instance"><description>Creates a KeyMap for this element</description><parameters><parameter name="config" type="Object" usage="required"><description>The KeyMap config. See &lt;a ext:cls=&quot;Ext.KeyMap&quot; href=&quot;output/Ext.KeyMap.html&quot;&gt;Ext.KeyMap&lt;/a&gt; for more details</description></parameter></parameters></method><method name="isScrollable" scope="instance"><description>Returns true if this element is scrollable.</description><parameters/></method><method name="scrollTo" scope="instance"><description>Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll().</description><parameters><parameter name="side" type="String" usage="required"><description>Either &quot;left&quot; for scrollLeft values or &quot;top&quot; for scrollTop values.</description></parameter><parameter name="value" type="Number" usage="required"><description>The new scroll value</description></parameter><parameter name="animate" type="Boolean/Object" usage="optional"><description>(optional) true for the default animation or a standard Element animation config object</description></parameter></parameters></method><method name="scroll" scope="instance"><description>Scrolls this element the specified direction. Does bounds checking to make sure the scroll is
within this element's scrollable range.</description><parameters><parameter name="direction" type="String" usage="required"><description>Possible values are: &quot;l&quot;,&quot;left&quot; - &quot;r&quot;,&quot;right&quot; - &quot;t&quot;,&quot;top&quot;,&quot;up&quot; - &quot;b&quot;,&quot;bottom&quot;,&quot;down&quot;.</description></parameter><parameter name="distance" type="Number" usage="required"><description>How far to scroll the element in pixels</description></parameter><parameter name="animate" type="Boolean/Object" usage="optional"><description>(optional) true for the default animation or a standard Element animation config object</description></parameter></parameters></method><method name="translatePoints" scope="instance"><description>Translates the passed page coordinates into left/top css values for this element</description><parameters><parameter name="x" type="Number/Array" usage="required"><description>The page x or an array containing [x, y]</description></parameter><parameter name="y" type="Number" usage="required"><description>The page y</description></parameter><parameter name="An" type="Object" usage="required"><description>object with left and top properties. e.g. {left: (value), top: (value)}</description></parameter></parameters></method><method name="getScroll" scope="instance"><description>Returns the current scroll position of the element.</description><parameters/></method><method name="getColor" scope="instance"><description>Return the CSS color for the specified CSS attribute. rgb, 3 digit (like #fff) and valid values
are convert to standard 6 digit hex color.</description><parameters><parameter name="attr" type="String" usage="required"><description>The css attribute</description></parameter><parameter name="defaultValue" type="String" usage="required"><description>The default value to use when a valid color isn't found</description></parameter><parameter name="prefix" type="String" usage="optional"><description>(optional) defaults to #. Use an empty string when working with
YUI color anims.</description></parameter></parameters></method><method name="boxWrap" scope="instance"><description>Wraps the specified element with a special markup/CSS block that renders by default as a gray container with a
gradient background, rounded corners and a 4-way shadow.</description><parameters><parameter name="class" type="String" usage="optional"><description>(optional) A base CSS class to apply to the containing wrapper element (defaults to 'x-box').
Note that there are a number of CSS rules that are dependent on this name to make the overall effect work,
so if you supply an alternate base class, make sure you also supply all of the necessary rules.</description></parameter></parameters></method><method name="getAttributeNS" scope="instance"><description>Returns the value of a namespaced attribute from the element's underlying DOM node.</description><parameters><parameter name="namespace" type="String" usage="required"><description>The namespace in which to look for the attribute</description></parameter><parameter name="name" type="String" usage="required"><description>The attribute name</description></parameter></parameters></method><method name="Element.get" scope="static"><description>&amp;lt;static&amp;gt; Static method to retrieve Element objects. Uses simple caching to consistently return the same object.
Automatically fixes if an object was recreated with the same id via AJAX or DOM.</description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description>The id of the node, a DOM Node or an existing Element.</description></parameter></parameters></method><method name="Element.fly" scope="static"><description>&amp;lt;static&amp;gt; Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -
the dom node can be overwritten by other code.</description><parameters><parameter name="el" type="String/HTMLElement" usage="required"><description>The dom node or id</description></parameter><parameter name="named" type="String" usage="optional"><description>(optional) Allows for creation of named reusable flyweights to
prevent conflicts (e.g. internally Ext uses &quot;_internal&quot;)</description></parameter></parameters></method></methods></class><class type="Ext.EventManager" superclass="Object"><description>Registers event handlers that want to receive a normalized EventObject instead of the standard browser event and provides 
several useful events directly.
See &lt;a ext:cls=&quot;Ext.EventObject&quot; href=&quot;output/Ext.EventObject.html&quot;&gt;Ext.EventObject&lt;/a&gt; for more details on normalized event objects.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description><properties><property name="ieDeferSrc" type="Object" scope="instance" access="read-write"><description>Url used for onDocumentReady with using SSL (defaults to Ext.SSL_SECURE_URL)</description></property></properties><methods><method name="wrap" scope="instance"><description>&lt;b&gt;Deprecated.&lt;/b&gt; This is no longer needed and is deprecated. Places a simple wrapper around an event handler to override the browser event
object with a Ext.EventObject</description><parameters><parameter name="fn" type="Function" usage="required"><description>The method the event invokes</description></parameter><parameter name="scope" type="Object" usage="required"><description>An object that becomes the scope of the handler</description></parameter><parameter name="override" type="boolean" usage="required"><description>If true, the obj passed in becomes
the execution scope of the listener</description></parameter></parameters></method><method name="addListener" scope="instance"><description>Appends an event handler to an element (shorthand for addListener)</description><parameters><parameter name="element" type="String/HTMLElement" usage="required"><description>The html element or id to assign the</description></parameter><parameter name="eventName" type="String" usage="required"><description>The type of event to listen for</description></parameter><parameter name="handler" type="Function" usage="required"><description>The method the event invokes</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope in which to execute the handler
function. The handler function's &quot;this&quot; context.</description></parameter><parameter name="options" type="Object" usage="optional"><description>(optional) An object containing handler configuration
properties. This may contain any of the following properties:&lt;ul&gt;
&lt;li&gt;scope {Object} The scope in which to execute the handler function. The handler function's &quot;this&quot; context.&lt;/li&gt;
&lt;li&gt;delegate {String} A simple selector to filter the target or look for a descendant of the target&lt;/li&gt;
&lt;li&gt;stopEvent {Boolean} True to stop the event. That is stop propagation, and prevent the default action.&lt;/li&gt;
&lt;li&gt;preventDefault {Boolean} True to prevent the default action&lt;/li&gt;
&lt;li&gt;stopPropagation {Boolean} True to prevent event propagation&lt;/li&gt;
&lt;li&gt;normalized {Boolean} False to pass a browser event to the handler function instead of an Ext.EventObject&lt;/li&gt;
&lt;li&gt;delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.&lt;/li&gt;
&lt;li&gt;single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.&lt;/li&gt;
&lt;li&gt;buffer {Number} Causes the handler to be scheduled to run in an &lt;a ext:cls=&quot;Ext.util.DelayedTask&quot; href=&quot;output/Ext.util.DelayedTask.html&quot;&gt;Ext.util.DelayedTask&lt;/a&gt; delayed
by the specified number of milliseconds. If the event fires again within that time, the original
handler is &lt;em&gt;not&lt;/em&gt; invoked, but the new handler is scheduled in its place.&lt;/li&gt;
&lt;/ul&gt;&lt;br&gt;
&lt;p&gt;
&lt;b&gt;Combining Options&lt;/b&gt;&lt;br&gt;
Using the options argument, it is possible to combine different types of listeners:&lt;br&gt;
&lt;br&gt;
A normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)&lt;div style=&quot;margin: 5px 20px 20px;&quot;&gt;
Code:&lt;pre&gt;&lt;code&gt;el.on('click', this.onClick, this, {
    single: true,
    delay: 100,
    stopEvent : true,
    forumId: 4
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;b&gt;Attaching multiple handlers in 1 call&lt;/b&gt;&lt;br&gt;
The method also allows for a single argument to be passed which is a config object containing properties
which specify multiple handlers.
&lt;p&gt;
Code:&lt;pre&gt;&lt;code&gt;el.on({
    'click' : {
        fn: this.onClick
        scope: this,
        delay: 100
    },
    'mouseover' : {
        fn: this.onMouseOver
        scope: this
    },
    'mouseout' : {
        fn: this.onMouseOut
        scope: this
    }
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Or a shorthand syntax:&lt;br&gt;
Code:&lt;pre&gt;&lt;code&gt;el.on({
    'click' : this.onClick,
    'mouseover' : this.onMouseOver,
    'mouseout' : this.onMouseOut
    scope: this
});&lt;/code&gt;&lt;/pre&gt;</description></parameter></parameters></method><method name="removeListener" scope="instance"><description>Removes an event handler</description><parameters><parameter name="element" type="String/HTMLElement" usage="required"><description>The id or html element to remove the 
event from</description></parameter><parameter name="eventName" type="String" usage="required"><description>The type of event</description></parameter><parameter name="fn" type="Function" usage="required"><description></description></parameter></parameters></method><method name="onDocumentReady" scope="instance"><description>Fires when the document is ready (before onload and before images are loaded). Can be 
accessed shorthanded Ext.onReady().</description><parameters><parameter name="fn" type="Function" usage="required"><description>The method the event invokes</description></parameter><parameter name="scope" type="Object" usage="required"><description>An object that becomes the scope of the handler</description></parameter><parameter name="options" type="boolean" usage="required"><description></description></parameter></parameters></method><method name="onWindowResize" scope="instance"><description>Fires when the window is resized and provides resize event buffering (50 milliseconds), passes new viewport width and height to handlers.</description><parameters><parameter name="fn" type="Function" usage="required"><description>The method the event invokes</description></parameter><parameter name="scope" type="Object" usage="required"><description>An object that becomes the scope of the handler</description></parameter><parameter name="options" type="boolean" usage="required"><description></description></parameter></parameters></method><method name="onTextResize" scope="instance"><description>Fires when the user changes the active text size. Handler gets called with 2 params, the old size and the new size.</description><parameters><parameter name="fn" type="Function" usage="required"><description>The method the event invokes</description></parameter><parameter name="scope" type="Object" usage="required"><description>An object that becomes the scope of the handler</description></parameter><parameter name="options" type="boolean" usage="required"><description></description></parameter></parameters></method><method name="removeResizeListener" scope="instance"><description>Removes the passed window resize listener.</description><parameters><parameter name="fn" type="Function" usage="required"><description>The method the event invokes</description></parameter><parameter name="scope" type="Object" usage="required"><description>The scope of handler</description></parameter></parameters></method></methods></class><class type="Ext.EventObject" superclass="Object"><description>EventObject exposes the Yahoo! UI Event functionality directly on the object
passed to your event handler. It exists mostly for convenience. It also fixes the annoying null checks automatically to cleanup your code 
Example:
&lt;pre&gt;&lt;code&gt;function handleClick(e){ // e is not a standard event object, it is a Ext.EventObject
    e.preventDefault();
    var target = e.getTarget();
    ...
 }
 var myDiv = Ext.get(&quot;myDiv&quot;);
 myDiv.on(&quot;click&quot;, handleClick);
 //or
 Ext.EventManager.on(&quot;myDiv&quot;, 'click', handleClick);
 Ext.EventManager.addListener(&quot;myDiv&quot;, 'click', handleClick);&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description><properties><property name="browserEvent" type="Object" scope="instance" access="read-write"><description>The normal browser event</description></property><property name="button" type="Object" scope="instance" access="read-write"><description>The button pressed in a mouse event</description></property><property name="shiftKey" type="Object" scope="instance" access="read-write"><description>True if the shift key was down during the event</description></property><property name="ctrlKey" type="Object" scope="instance" access="read-write"><description>True if the control key was down during the event</description></property><property name="altKey" type="Object" scope="instance" access="read-write"><description>True if the alt key was down during the event</description></property><property name="BACKSPACE" type="Number" scope="instance" access="read-write"><description>Key constant</description></property><property name="TAB" type="Number" scope="instance" access="read-write"><description>Key constant</description></property><property name="RETURN" type="Number" scope="instance" access="read-write"><description>Key constant</description></property><property name="ENTER" type="Number" scope="instance" access="read-write"><description>Key constant</description></property><property name="SHIFT" type="Number" scope="instance" access="read-write"><description>Key constant</description></property><property name="CONTROL" type="Number" scope="instance" access="read-write"><description>Key constant</description></property><property name="ESC" type="Number" scope="instance" access="read-write"><description>Key constant</description></property><property name="SPACE" type="Number" scope="instance" access="read-write"><description>Key constant</description></property><property name="PAGEUP" type="Number" scope="instance" access="read-write"><description>Key constant</description></property><property name="PAGEDOWN" type="Number" scope="instance" access="read-write"><description>Key constant</description></property><property name="END" type="Number" scope="instance" access="read-write"><description>Key constant</description></property><property name="HOME" type="Number" scope="instance" access="read-write"><description>Key constant</description></property><property name="LEFT" type="Number" scope="instance" access="read-write"><description>Key constant</description></property><property name="UP" type="Number" scope="instance" access="read-write"><description>Key constant</description></property><property name="RIGHT" type="Number" scope="instance" access="read-write"><description>Key constant</description></property><property name="DOWN" type="Number" scope="instance" access="read-write"><description>Key constant</description></property><property name="DELETE" type="Number" scope="instance" access="read-write"><description>Key constant</description></property><property name="F5" type="Number" scope="instance" access="read-write"><description>Key constant</description></property></properties><methods><method name="stopEvent" scope="instance"><description>Stop the event (preventDefault and stopPropagation)</description><parameters/></method><method name="preventDefault" scope="instance"><description>Prevents the browsers default handling of the event.</description><parameters/></method><method name="stopPropagation" scope="instance"><description>Cancels bubbling of the event.</description><parameters/></method><method name="getCharCode" scope="instance"><description>Gets the key code for the event.</description><parameters/></method><method name="getKey" scope="instance"><description>Returns a normalized keyCode for the event.</description><parameters/></method><method name="getPageX" scope="instance"><description>Gets the x coordinate of the event.</description><parameters/></method><method name="getPageY" scope="instance"><description>Gets the y coordinate of the event.</description><parameters/></method><method name="getTime" scope="instance"><description>Gets the time of the event.</description><parameters/></method><method name="getXY" scope="instance"><description>Gets the page coordinates of the event.</description><parameters/></method><method name="getTarget" scope="instance"><description>Gets the target for the event.</description><parameters><parameter name="selector" type="String" usage="optional"><description>(optional) A simple selector to filter the target or look for an ancestor of the target</description></parameter><parameter name="maxDepth" type="Number/String/HTMLElement/Element" usage="optional"><description>(optional) The max depth to&#13;
 search as a number or element (defaults to 10 || document.body)</description></parameter><parameter name="returnEl" type="Boolean" usage="optional"><description>(optional) True to return a Ext.Element object instead of DOM node</description></parameter></parameters></method><method name="getRelatedTarget" scope="instance"><description>Gets the related target.</description><parameters/></method><method name="getWheelDelta" scope="instance"><description>Normalizes mouse wheel delta across browsers</description><parameters/></method><method name="hasModifier" scope="instance"><description>Returns true if the control, meta, shift or alt key was pressed during this event.</description><parameters/></method><method name="within" scope="instance"><description>Returns true if the target of this event equals el or is a child of el</description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description></description></parameter><parameter name="related" type="Boolean" usage="optional"><description>(optional) true to test if the related target is within el instead of the target</description></parameter></parameters></method></methods></class><class type="Ext.Fx" superclass="Object"><description>&lt;p&gt;A class to provide basic animation and visual effects support.  &lt;b&gt;Note:&lt;/b&gt; This class is automatically applied
to the &lt;a ext:cls=&quot;Ext.Element&quot; href=&quot;output/Ext.Element.html&quot;&gt;Ext.Element&lt;/a&gt; interface when included, so all effects calls should be performed via Element.
Conversely, since the effects are not actually defined in Element, Ext.Fx &lt;b&gt;must&lt;/b&gt; be included in order for the 
Element effects to work.&lt;/p&gt;&lt;br/&gt;
&lt;p&gt;It is important to note that although the Fx methods and many non-Fx Element methods support &quot;method chaining&quot; in that
they return the Element object itself as the method return value, it is not always possible to mix the two in a single
method chain.  The Fx methods use an internal effects queue so that each effect can be properly timed and sequenced.
Non-Fx methods, on the other hand, have no such internal queueing and will always execute immediately.  For this reason,
while it may be possible to mix certain Fx and non-Fx method calls in a single chain, it may not always provide the
expected results and should be done with care.&lt;/p&gt;&lt;br/&gt;
&lt;p&gt;Motion effects support 8-way anchoring, meaning that you can choose one of 8 different anchor points on the Element
that will serve as either the start or end point of the animation.  Following are all of the supported anchor positions:&lt;/p&gt;
&lt;pre&gt;Value  Description
-----  -----------------------------
tl     The top left corner
t      The center of the top edge
tr     The top right corner
l      The center of the left edge
r      The center of the right edge
bl     The bottom left corner
b      The center of the bottom edge
br     The bottom right corner&lt;/pre&gt;
&lt;b&gt;Although some Fx methods accept specific custom config parameters, the ones shown in the Config Options section
below are common options that can be passed to any Fx method.&lt;/b&gt;</description><properties/><methods><method name="slideIn" scope="instance"><description>Slides the element into view.  An anchor point can be optionally passed to set the point of
origin for the slide effect.  This function automatically handles wrapping the element with
a fixed-size container if needed.  See the Fx class overview for valid anchor point options.
Usage:
&lt;pre&gt;&lt;code&gt;// default: slide the element in from the top
el.slideIn();

// custom: slide the element in from the right with a 2-second duration
el.slideIn('r', { duration: 2 });

// common config options shown with default values
el.slideIn('t', {
    easing: 'easeOut',
    duration: .5
});&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="anchor" type="String" usage="optional"><description>(optional) One of the valid Fx anchor positions (defaults to top: 't')</description></parameter><parameter name="options" type="Object" usage="optional"><description>(optional) Object literal with any of the Fx config options</description></parameter></parameters></method><method name="slideOut" scope="instance"><description>Slides the element out of view.  An anchor point can be optionally passed to set the end point
for the slide effect.  When the effect is completed, the element will be hidden (visibility = 
'hidden') but block elements will still take up space in the document.  The element must be removed
from the DOM using the 'remove' config option if desired.  This function automatically handles 
wrapping the element with a fixed-size container if needed.  See the Fx class overview for valid anchor point options.
Usage:
&lt;pre&gt;&lt;code&gt;// default: slide the element out to the top
el.slideOut();

// custom: slide the element out to the right with a 2-second duration
el.slideOut('r', { duration: 2 });

// common config options shown with default values
el.slideOut('t', {
    easing: 'easeOut',
    duration: .5,
    remove: false,
    useDisplay: false
});&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="anchor" type="String" usage="optional"><description>(optional) One of the valid Fx anchor positions (defaults to top: 't')</description></parameter><parameter name="options" type="Object" usage="optional"><description>(optional) Object literal with any of the Fx config options</description></parameter></parameters></method><method name="puff" scope="instance"><description>Fades the element out while slowly expanding it in all directions.  When the effect is completed, the 
element will be hidden (visibility = 'hidden') but block elements will still take up space in the document. 
The element must be removed from the DOM using the 'remove' config option if desired.
Usage:
&lt;pre&gt;&lt;code&gt;// default
el.puff();

// common config options shown with default values
el.puff({
    easing: 'easeOut',
    duration: .5,
    remove: false,
    useDisplay: false
});&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="options" type="Object" usage="optional"><description>(optional) Object literal with any of the Fx config options</description></parameter></parameters></method><method name="switchOff" scope="instance"><description>Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television).
When the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still 
take up space in the document. The element must be removed from the DOM using the 'remove' config option if desired.
Usage:
&lt;pre&gt;&lt;code&gt;// default
el.switchOff();

// all config options shown with default values
el.switchOff({
    easing: 'easeIn',
    duration: .3,
    remove: false,
    useDisplay: false
});&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="options" type="Object" usage="optional"><description>(optional) Object literal with any of the Fx config options</description></parameter></parameters></method><method name="highlight" scope="instance"><description>Highlights the Element by setting a color (applies to the background-color by default, but can be
changed using the &quot;attr&quot; config option) and then fading back to the original color. If no original
color is available, you should provide the &quot;endColor&quot; config option which will be cleared after the animation.
Usage:
&lt;pre&gt;&lt;code&gt;// default: highlight background to yellow
el.highlight();

// custom: highlight foreground text to blue for 2 seconds
el.highlight(&quot;0000ff&quot;, { attr: 'color', duration: 2 });

// common config options shown with default values
el.highlight(&quot;ffff9c&quot;, {
    attr: &quot;background-color&quot;, //can be any valid CSS property (attribute) that supports a color value
    endColor: (current color) or &quot;ffffff&quot;,
    easing: 'easeIn',
    duration: 1
});&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="color" type="String" usage="optional"><description>(optional) The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: 'ffff9c')</description></parameter><parameter name="options" type="Object" usage="optional"><description>(optional) Object literal with any of the Fx config options</description></parameter></parameters></method><method name="frame" scope="instance"><description>Shows a ripple of exploding, attenuating borders to draw attention to an Element.
Usage:
&lt;pre&gt;&lt;code&gt;// default: a single light blue ripple
el.frame();

// custom: 3 red ripples lasting 3 seconds total
el.frame(&quot;ff0000&quot;, 3, { duration: 3 });

// common config options shown with default values
el.frame(&quot;C3DAF9&quot;, 1, {
    duration: 1 //duration of entire animation (not each individual ripple)
    // Note: Easing is not configurable and will be ignored if included
});&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="color" type="String" usage="optional"><description>(optional) The color of the border. Should be a 6 char hex color without the leading # (defaults to light blue: 'C3DAF9').</description></parameter><parameter name="count" type="Number" usage="optional"><description>(optional) The number of ripples to display (defaults to 1)</description></parameter><parameter name="options" type="Object" usage="optional"><description>(optional) Object literal with any of the Fx config options</description></parameter></parameters></method><method name="pause" scope="instance"><description>Creates a pause before any subsequent queued effects begin.  If there are
no effects queued after the pause it will have no effect.
Usage:
&lt;pre&gt;&lt;code&gt;el.pause(1);&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="seconds" type="Number" usage="required"><description>The length of time to pause (in seconds)</description></parameter></parameters></method><method name="fadeIn" scope="instance"><description>Fade an element in (from transparent to opaque).  The ending opacity can be specified
using the &quot;endOpacity&quot; config option.
Usage:
&lt;pre&gt;&lt;code&gt;// default: fade in from opacity 0 to 100%
el.fadeIn();

// custom: fade in from opacity 0 to 75% over 2 seconds
el.fadeIn({ endOpacity: .75, duration: 2});

// common config options shown with default values
el.fadeIn({
    endOpacity: 1, //can be any value between 0 and 1 (e.g. .5)
    easing: 'easeOut',
    duration: .5
});&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="options" type="Object" usage="optional"><description>(optional) Object literal with any of the Fx config options</description></parameter></parameters></method><method name="fadeOut" scope="instance"><description>Fade an element out (from opaque to transparent).  The ending opacity can be specified
using the &quot;endOpacity&quot; config option.
Usage:
&lt;pre&gt;&lt;code&gt;// default: fade out from the element's current opacity to 0
el.fadeOut();

// custom: fade out from the element's current opacity to 25% over 2 seconds
el.fadeOut({ endOpacity: .25, duration: 2});

// common config options shown with default values
el.fadeOut({
    endOpacity: 0, //can be any value between 0 and 1 (e.g. .5)
    easing: 'easeOut',
    duration: .5
    remove: false,
    useDisplay: false
});&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="options" type="Object" usage="optional"><description>(optional) Object literal with any of the Fx config options</description></parameter></parameters></method><method name="scale" scope="instance"><description>Animates the transition of an element's dimensions from a starting height/width
to an ending height/width.
Usage:
&lt;pre&gt;&lt;code&gt;// change height and width to 100x100 pixels
el.scale(100, 100);

// common config options shown with default values.  The height and width will default to
// the element's existing values if passed as null.
el.scale(
    [element's width],
    [element's height], {
    easing: 'easeOut',
    duration: .35
});&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="width" type="Number" usage="required"><description>The new width (pass undefined to keep the original width)</description></parameter><parameter name="height" type="Number" usage="required"><description>The new height (pass undefined to keep the original height)</description></parameter><parameter name="options" type="Object" usage="optional"><description>(optional) Object literal with any of the Fx config options</description></parameter></parameters></method><method name="shift" scope="instance"><description>Animates the transition of any combination of an element's dimensions, xy position and/or opacity.
Any of these properties not specified in the config object will not be changed.  This effect 
requires that at least one new dimension, position or opacity setting must be passed in on
the config object in order for the function to have any effect.
Usage:
&lt;pre&gt;&lt;code&gt;// slide the element horizontally to x position 200 while changing the height and opacity
el.shift({ x: 200, height: 50, opacity: .8 });

// common config options shown with default values.
el.shift({
    width: [element's width],
    height: [element's height],
    x: [element's x position],
    y: [element's y position],
    opacity: [element's opacity],
    easing: 'easeOut',
    duration: .35
});&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="options" type="Object" usage="required"><description>Object literal with any of the Fx config options</description></parameter></parameters></method><method name="ghost" scope="instance"><description>Slides the element while fading it out of view.  An anchor point can be optionally passed to set the 
ending point of the effect.
Usage:
&lt;pre&gt;&lt;code&gt;// default: slide the element downward while fading out
el.ghost();

// custom: slide the element out to the right with a 2-second duration
el.ghost('r', { duration: 2 });

// common config options shown with default values
el.ghost('b', {
    easing: 'easeOut',
    duration: .5
    remove: false,
    useDisplay: false
});&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="anchor" type="String" usage="optional"><description>(optional) One of the valid Fx anchor positions (defaults to bottom: 'b')</description></parameter><parameter name="options" type="Object" usage="optional"><description>(optional) Object literal with any of the Fx config options</description></parameter></parameters></method><method name="syncFx" scope="instance"><description>Ensures that all effects queued after syncFx is called on the element are
run concurrently.  This is the opposite of &lt;a ext:cls=&quot;Ext.Fx&quot; ext:member=&quot;sequenceFx&quot; href=&quot;output/Ext.Fx.html#sequenceFx&quot;&gt;sequenceFx&lt;/a&gt;.</description><parameters/></method><method name="sequenceFx" scope="instance"><description>Ensures that all effects queued after sequenceFx is called on the element are
run in sequence.  This is the opposite of &lt;a ext:cls=&quot;Ext.Fx&quot; ext:member=&quot;syncFx&quot; href=&quot;output/Ext.Fx.html#syncFx&quot;&gt;syncFx&lt;/a&gt;.</description><parameters/></method><method name="hasActiveFx" scope="instance"><description>Returns true if the element has any effects actively running or queued, else returns false.</description><parameters/></method><method name="stopFx" scope="instance"><description>Stops any running effects and clears the element's internal effects queue if it contains
any additional effects that haven't started yet.</description><parameters/></method><method name="hasFxBlock" scope="instance"><description>Returns true if the element is currently blocking so that no other effect can be queued
until this effect is finished, else returns false if blocking is not set.  This is commonly
used to ensure that an effect initiated by a user action runs to completion prior to the
same effect being restarted (e.g., firing only one effect even if the user clicks several times).</description><parameters/></method></methods></class><class type="Ext.GridPanel" superclass="Ext.ContentPanel"><description></description><constructors><constructor scope="instance"><description>Create a new GridPanel.</description><parameters><parameter name="grid" type="Ext.grid.Grid" usage="required"><description>The grid for this panel</description></parameter><parameter name="config" type="String/Object" usage="required"><description>A string to set only the panel's title, or a config object</description></parameter></parameters></constructor></constructors><properties/><methods><method name="getGrid" scope="instance"><description>Returns the grid for this panel</description><parameters/></method></methods></class><class type="Ext.JsonView" superclass="Ext.View"><description>Shortcut class to create a JSON + &lt;a ext:cls=&quot;Ext.UpdateManager&quot; href=&quot;output/Ext.UpdateManager.html&quot;&gt;Ext.UpdateManager&lt;/a&gt; template view. Usage:&#13;
&lt;pre&gt;&lt;code&gt;var view = new Ext.JsonView(&quot;my-element&quot;,
    '&amp;lt;div id=&quot;{id}&quot;&amp;gt;{foo} - {bar}&amp;lt;/div&amp;gt;', // auto create template
    { multiSelect: true, jsonRoot: &quot;data&quot; }
);

// listen for node click?
view.on(&quot;click&quot;, function(vw, index, node, e){
    alert('Node &quot;' + node.id + '&quot; at index: ' + index + &quot; was clicked.&quot;);
});

// direct load of JSON data
view.load(&quot;foobar.php&quot;);

// Example from my blog list
var tpl = new Ext.Template(
    '&amp;lt;div class=&quot;entry&quot;&amp;gt;' +
    '&amp;lt;a class=&quot;entry-title&quot; href=&quot;{link}&quot;&amp;gt;{title}&amp;lt;/a&amp;gt;' +
    &quot;&amp;lt;h4&amp;gt;{date} by {author} | {comments} Comments&amp;lt;/h4&amp;gt;{description}&quot; +
    &quot;&amp;lt;/div&amp;gt;&amp;lt;hr /&amp;gt;&quot;
);

var moreView = new Ext.JsonView(&quot;entry-list&quot;, tpl, {
    jsonRoot: &quot;posts&quot;
});
moreView.on(&quot;beforerender&quot;, this.sortEntries, this);
moreView.load({
    url: &quot;/blog/get-posts.php&quot;,
    params: &quot;allposts=true&quot;,
    text: &quot;Loading Blog Entries...&quot;
});&lt;/code&gt;&lt;/pre&gt;</description><constructors><constructor scope="instance"><description>Create a new JsonView</description><parameters><parameter name="container" type="String/HTMLElement/Element" usage="required"><description>The container element where the view is to be rendered.</description></parameter><parameter name="tpl" type="Template" usage="required"><description>The rendering template</description></parameter><parameter name="config" type="Object" usage="required"><description>The config object</description></parameter></parameters></constructor></constructors><properties><property name="jsonRoot" type="String" scope="instance" access="read-write"><description>The root property in the loaded JSON object that contains the data</description></property><property name="jsonData" type="Object" scope="instance" access="read-write"><description>The current JSON data or null</description></property></properties><methods><method name="refresh" scope="instance"><description>Refreshes the view.</description><parameters/></method><method name="load" scope="instance"><description>Performs an async HTTP request, and loads the JSON from the response. If &lt;i&gt;params&lt;/i&gt; are specified it uses POST, otherwise it uses GET.</description><parameters><parameter name="url" type="Object/String/Function" usage="required"><description>The URL for this request, or a function to call to get the URL, or a config object containing any of the following options:&#13;
 &lt;pre&gt;&lt;code&gt;view.load({
         url: &quot;your-url.php&quot;,
         params: {param1: &quot;foo&quot;, param2: &quot;bar&quot;}, // or a URL encoded string
         callback: yourFunction,
         scope: yourObject, //(optional scope)
         discardUrl: false,
         nocache: false,
         text: &quot;Loading...&quot;,
         timeout: 30,
         scripts: false
     });&lt;/code&gt;&lt;/pre&gt;
The only required property is &lt;i&gt;url&lt;/i&gt;. The optional properties &lt;i&gt;nocache&lt;/i&gt;, &lt;i&gt;text&lt;/i&gt; and &lt;i&gt;scripts&lt;/i&gt;
are respectively shorthand for &lt;i&gt;disableCaching&lt;/i&gt;, &lt;i&gt;indicatorText&lt;/i&gt;, and &lt;i&gt;loadScripts&lt;/i&gt; and are used to set their associated property on this UpdateManager instance.</description></parameter><parameter name="params" type="String/Object" usage="optional"><description>(optional) The parameters to pass, as either a URL encoded string &quot;param1=1&amp;amp;param2=2&quot; or an object {param1: 1, param2: 2}</description></parameter><parameter name="callback" type="Function" usage="optional"><description>(optional) Callback when transaction is complete - called with signature (oElement, bSuccess)</description></parameter><parameter name="discardUrl" type="Boolean" usage="optional"><description>(optional) By default when you execute an update the defaultUrl is changed to the last used URL. If true, it will not store the URL.</description></parameter></parameters></method><method name="getCount" scope="instance"><description>Get the number of records in the current JSON dataset</description><parameters/></method><method name="getNodeData" scope="instance"><description>Returns the JSON object for the specified node(s)</description><parameters><parameter name="node" type="HTMLElement/Array" usage="required"><description>The node or an array of nodes</description></parameter></parameters></method><method name="filter" scope="instance"><description>Filter the data by a specific property.</description><parameters><parameter name="property" type="String" usage="required"><description>A property on your JSON objects</description></parameter><parameter name="value" type="String/RegExp" usage="required"><description>Either string that the property values
should start with, or a RegExp to test against the property</description></parameter></parameters></method><method name="filterBy" scope="instance"><description>Filter by a function. The passed function will be called with each
object in the current dataset. If the function returns true the value is kept,
otherwise it is filtered.</description><parameters><parameter name="fn" type="Function" usage="required"><description></description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope of the function (defaults to this JsonView)</description></parameter></parameters></method><method name="clearFilter" scope="instance"><description>Clears the current filter.</description><parameters/></method><method name="sort" scope="instance"><description>Sorts the data for this view and refreshes it.</description><parameters><parameter name="property" type="String" usage="required"><description>A property on your JSON objects to sort on</description></parameter><parameter name="direction" type="String" usage="optional"><description>(optional) &quot;desc&quot; or &quot;asc&quot; (defaults to &quot;asc&quot;)</description></parameter><parameter name="sortType" type="Function" usage="optional"><description>(optional) A function to call to convert the data to a sortable value.</description></parameter></parameters></method></methods></class><class type="Ext.KeyMap" superclass="Object"><description>Handles mapping keys to actions for an element. One key map can be used for multiple actions.
The constructor accepts the same config object as defined by &lt;a ext:cls=&quot;Ext.KeyMap&quot; ext:member=&quot;addBinding&quot; href=&quot;output/Ext.KeyMap.html#addBinding&quot;&gt;addBinding&lt;/a&gt;.
If you bind a callback function to a KeyMap, anytime the KeyMap handles an expected key
combination it will call the function with this signature (if the match is a multi-key
combination the callback will still be called only once): (String key, Ext.EventObject e)
A KeyMap can also handle a string representation of keys.&lt;br /&gt;
Usage:&#13;
 &lt;pre&gt;&lt;code&gt;// map one key by key code
var map = new Ext.KeyMap(&quot;my-element&quot;, {
    key: 13, // or Ext.EventObject.ENTER
    fn: myHandler,
    scope: myObject
});

// map multiple keys to one action by string
var map = new Ext.KeyMap(&quot;my-element&quot;, {
    key: &quot;a\r\n\t&quot;,
    fn: myHandler,
    scope: myObject
});

// map multiple keys to multiple actions by strings and array of codes
var map = new Ext.KeyMap(&quot;my-element&quot;, [
    {
        key: [10,13],
        fn: function(){ alert(&quot;Return was pressed&quot;); }
    }, {
        key: &quot;abc&quot;,
        fn: function(){ alert('a, b or c was pressed'); }
    }, {
        key: &quot;\t&quot;,
        ctrl:true,
        shift:true,
        fn: function(){ alert('Control + shift + tab was pressed.'); }
    }
]);&lt;/code&gt;&lt;/pre&gt;
&lt;b&gt;Note: A KeyMap starts enabled&lt;/b&gt;</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="el" type="String/HTMLElement/Ext.Element" usage="required"><description>The element to bind to</description></parameter><parameter name="config" type="Object" usage="required"><description>The config (see &lt;a ext:cls=&quot;Ext.KeyMap&quot; ext:member=&quot;addBinding&quot; href=&quot;output/Ext.KeyMap.html#addBinding&quot;&gt;addBinding&lt;/a&gt;)</description></parameter><parameter name="eventName" type="String" usage="optional"><description>(optional) The event to bind to (defaults to &quot;keydown&quot;)</description></parameter></parameters></constructor></constructors><properties><property name="stopEvent" type="Boolean" scope="instance" access="read-write"><description>True to stop the event from bubbling and prevent the default browser action if the
key was handled by the KeyMap (defaults to false)</description></property></properties><methods><method name="addBinding" scope="instance"><description>Add a new binding to this KeyMap. The following config object properties are supported:
&lt;pre&gt;Property    Type             Description&#13;
----------  ---------------  ----------------------------------------------------------------------&#13;
key         String/Array     A single keycode or an array of keycodes to handle&#13;
shift       Boolean          True to handle key only when shift is pressed (defaults to false)&#13;
ctrl        Boolean          True to handle key only when ctrl is pressed (defaults to false)&#13;
alt         Boolean          True to handle key only when alt is pressed (defaults to false)&#13;
fn          Function         The function to call when KeyMap finds the expected key combination&#13;
scope       Object           The scope of the callback function&lt;/pre&gt;
Usage:
&lt;pre&gt;&lt;code&gt;// Create a KeyMap
var map = new Ext.KeyMap(document, {
    key: Ext.EventObject.ENTER,
    fn: handleKey,
    scope: this
});

//Add a new binding to the existing KeyMap later
map.addBinding({
    key: 'abc',
    shift: true,
    fn: handleKey,
    scope: this
});&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="config" type="Object/Array" usage="required"><description>A single KeyMap config or an array of configs</description></parameter></parameters></method><method name="on" scope="instance"><description>Shorthand for adding a single key listener</description><parameters><parameter name="key" type="Number/Array/Object" usage="required"><description>Either the numeric key code, array of key codes or an object with the
following options:
{key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}</description></parameter><parameter name="fn" type="Function" usage="required"><description>The function to call</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope of the function</description></parameter></parameters></method><method name="isEnabled" scope="instance"><description>Returns true if this KeyMap is enabled</description><parameters/></method><method name="enable" scope="instance"><description>Enables this KeyMap</description><parameters/></method><method name="disable" scope="instance"><description>Disable this KeyMap</description><parameters/></method></methods></class><class type="Ext.KeyNav" superclass="Object"><description>Provides a convenient wrapper for normalized keyboard navigation.  KeyNav allows you to bind
navigation keys to function calls that will get called when the keys are pressed.
&lt;br /&gt;Usage:
 &lt;pre&gt;&lt;code&gt;var nav = new Ext.KeyNav(&quot;my-element&quot;, {
    &quot;left&quot; : function(e){
        this.moveLeft(e.ctrlKey);
    },
    &quot;right&quot; : function(e){
        this.moveRight(e.ctrlKey);
    },
    &quot;enter&quot; : function(e){
        this.save();
    },
    scope : this
});&lt;/code&gt;&lt;/pre&gt;</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="el" type="String/HTMLElement/Ext.Element" usage="required"><description>The element to bind to</description></parameter><parameter name="config" type="Object" usage="required"><description>The config</description></parameter></parameters></constructor></constructors><properties/><methods><method name="enable" scope="instance"><description>Enable this KeyNav</description><parameters/></method><method name="disable" scope="instance"><description>Disable this KeyNav</description><parameters/></method></methods></class><class type="Ext.Layer" superclass="Ext.Element"><description>An extended &lt;a ext:cls=&quot;Ext.Element&quot; href=&quot;output/Ext.Element.html&quot;&gt;Ext.Element&lt;/a&gt; object that supports a shadow and shim, constrain to viewport and
automatic maintaining of shadow/shim positions.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="config" type="Object" usage="required"><description>An object with config options.</description></parameter><parameter name="existingEl" type="String/HTMLElement" usage="optional"><description>(optional) Uses an existing DOM element. If the element is not found it creates it.</description></parameter></parameters></constructor></constructors><properties/><methods><method name="setZIndex" scope="instance"><description>Sets the z-index of this layer and adjusts any shadow and shim z-indexes. The layer z-index is automatically
incremented by two more than the value passed in so that it always shows above any shadow or shim (the shadow
element, if any, will be assigned z-index + 1, and the shim element, if any, will be assigned the unmodified z-index).</description><parameters><parameter name="zindex" type="Number" usage="required"><description>The new z-index to set</description></parameter></parameters></method></methods></class><class type="Ext.LayoutDialog" superclass="Ext.BasicDialog"><description>Dialog which provides adjustments for working with a layout in a Dialog.
Add your necessary layout config options to the dialog's config.&lt;br&gt;
Example usage (including a nested layout):
&lt;pre&gt;&lt;code&gt;if(!dialog){
    dialog = new Ext.LayoutDialog(&quot;download-dlg&quot;, {
        modal: true,
        width:600,
        height:450,
        shadow:true,
        minWidth:500,
        minHeight:350,
        autoTabs:true,
        proxyDrag:true,
        // layout config merges with the dialog config
        center:{
            tabPosition: &quot;top&quot;,
            alwaysShowTabs: true
        }
    });
    dialog.addKeyListener(27, dialog.hide, dialog);
    dialog.setDefaultButton(dialog.addButton(&quot;Close&quot;, dialog.hide, dialog));
    dialog.addButton(&quot;Build It!&quot;, this.getDownload, this);

    // we can even add nested layouts
    var innerLayout = new Ext.BorderLayout(&quot;dl-inner&quot;, {
        east: {
            initialSize: 200,
            autoScroll:true,
            split:true
        },
        center: {
            autoScroll:true
        }
    });
    innerLayout.beginUpdate();
    innerLayout.add(&quot;east&quot;, new Ext.ContentPanel(&quot;dl-details&quot;));
    innerLayout.add(&quot;center&quot;, new Ext.ContentPanel(&quot;selection-panel&quot;));
    innerLayout.endUpdate(true);

    var layout = dialog.getLayout();
    layout.beginUpdate();
    layout.add(&quot;center&quot;, new Ext.ContentPanel(&quot;standard-panel&quot;,
                        {title: &quot;Download the Source&quot;, fitToFrame:true}));
    layout.add(&quot;center&quot;, new Ext.NestedLayoutPanel(innerLayout,
               {title: &quot;Build your own ext.js&quot;}));
    layout.getRegion(&quot;center&quot;).showPanel(sp);
    layout.endUpdate();
}&lt;/code&gt;&lt;/pre&gt;</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="el" type="String/HTMLElement/Ext.Element" usage="required"><description>The id of or container element</description></parameter><parameter name="config" type="Object" usage="required"><description>configuration options</description></parameter></parameters></constructor></constructors><properties/><methods><method name="endUpdate" scope="instance"><description>&lt;b&gt;Deprecated.&lt;/b&gt; Ends update of the layout &lt;strike&gt;and resets display to none&lt;/strike&gt;. Use standard beginUpdate/endUpdate on the layout.</description><parameters/></method><method name="beginUpdate" scope="instance"><description>&lt;b&gt;Deprecated.&lt;/b&gt; Begins an update of the layout &lt;strike&gt;and sets display to block and visibility to hidden&lt;/strike&gt;. Use standard beginUpdate/endUpdate on the layout.</description><parameters/></method><method name="getLayout" scope="instance"><description>Get the BorderLayout for this dialog</description><parameters/></method></methods></class><class type="Ext.LayoutManager" superclass="Ext.util.Observable"><description>Base class for layout managers.</description><properties><property name="monitorWindowResize" type="Boolean" scope="instance" access="read-write"><description>false to disable window resize monitoring</description></property></properties><methods><method name="isUpdating" scope="instance"><description>Returns true if this layout is currently being updated</description><parameters/></method><method name="beginUpdate" scope="instance"><description>Suspend the LayoutManager from doing auto-layouts while
making multiple add or remove calls</description><parameters/></method><method name="endUpdate" scope="instance"><description>Restore auto-layouts and optionally disable the manager from performing a layout</description><parameters><parameter name="noLayout" type="Boolean" usage="required"><description>true to disable a layout update</description></parameter></parameters></method><method name="getViewSize" scope="instance"><description>Returns the size of the current view. This method normalizes document.body and element embedded layouts and
performs box-model adjustments.</description><parameters/></method><method name="getEl" scope="instance"><description>Returns the Element this layout is bound to.</description><parameters/></method><method name="getRegion" scope="instance"><description>Returns the specified region.</description><parameters><parameter name="target" type="String" usage="required"><description>The region key ('center', 'north', 'south', 'east' or 'west')</description></parameter></parameters></method></methods></class><class type="Ext.LayoutRegion" superclass="Ext.BasicLayoutRegion"><description>This class represents a region in a layout manager.</description><properties><property name="el" type="Ext.Element" scope="instance" access="read-write"><description>This region's container element</description></property><property name="titleEl" type="Ext.Element" scope="instance" access="read-write"><description>This region's title element</description></property><property name="titleTextEl" type="HTMLElement" scope="instance" access="read-write"><description>This region's title text element</description></property><property name="bodyEl" type="Ext.Element" scope="instance" access="read-write"><description>This region's body element</description></property><property name="collapsedEl" type="Ext.Element" scope="instance" access="read-write"><description>This region's collapsed element</description></property></properties><methods><method name="isVisible" scope="instance"><description>Returns true if this region is currently visible.</description><parameters/></method><method name="setCollapsedTitle" scope="instance"><description>Updates the title for collapsed north/south regions (used with &lt;a ext:cls=&quot;Ext.LayoutRegion&quot; ext:member=&quot;collapsedTitle&quot; href=&quot;output/Ext.LayoutRegion.html#collapsedTitle&quot;&gt;collapsedTitle&lt;/a&gt; config option)</description><parameters><parameter name="title" type="String" usage="optional"><description>(optional) The title text (accepts HTML markup, defaults to the numeric character reference for a non-breaking space, &quot;&amp;amp;#160;&quot;)</description></parameter></parameters></method><method name="getEl" scope="instance"><description>Returns the container element for this region.</description><parameters/></method><method name="hide" scope="instance"><description>Hides this region.</description><parameters/></method><method name="show" scope="instance"><description>Shows this region if it was previously hidden.</description><parameters/></method><method name="collapse" scope="instance"><description>Collapses this region.</description><parameters><parameter name="skipAnim" type="Boolean" usage="optional"><description>(optional) true to collapse the element without animation (if animate is true)</description></parameter></parameters></method><method name="expand" scope="instance"><description>Expands this region if it was previously collapsed.</description><parameters><parameter name="e" type="Ext.EventObject" usage="required"><description>The event that triggered the expand (or null if calling manually)</description></parameter><parameter name="skipAnim" type="Boolean" usage="optional"><description>(optional) true to expand the element without animation (if animate is true)</description></parameter></parameters></method><method name="showPanel" scope="instance"><description>Shows the specified panel.</description><parameters><parameter name="panelId" type="Number/String/ContentPanel" usage="required"><description>The panel's index, id or the panel itself</description></parameter></parameters></method><method name="getActivePanel" scope="instance"><description>Get the active panel for this region.</description><parameters/></method><method name="add" scope="instance"><description>Adds the passed ContentPanel(s) to this region.</description><parameters><parameter name="panel" type="ContentPanel..." usage="required"><description>The ContentPanel(s) to add (you can pass more than one)</description></parameter></parameters></method><method name="hidePanel" scope="instance"><description>Hides the tab for the specified panel.</description><parameters><parameter name="panel" type="Number/String/ContentPanel" usage="required"><description>The panel's index, id or the panel itself</description></parameter></parameters></method><method name="unhidePanel" scope="instance"><description>Unhides the tab for a previously hidden panel.</description><parameters><parameter name="panel" type="Number/String/ContentPanel" usage="required"><description>The panel's index, id or the panel itself</description></parameter></parameters></method><method name="remove" scope="instance"><description>Removes the specified panel. If preservePanel is not true (either here or in the config), the panel is destroyed.</description><parameters><parameter name="panel" type="Number/String/ContentPanel" usage="required"><description>The panel's index, id or the panel itself</description></parameter><parameter name="preservePanel" type="Boolean" usage="required"><description>Overrides the config preservePanel option</description></parameter></parameters></method><method name="getTabs" scope="instance"><description>Returns the TabPanel component used by this region</description><parameters/></method></methods></class><class type="Ext.LoadMask" superclass="Object"><description>A simple utility class for generically masking elements while loading data.  If the element being masked has
an underlying &lt;a ext:cls=&quot;Ext.data.Store&quot; href=&quot;output/Ext.data.Store.html&quot;&gt;Ext.data.Store&lt;/a&gt;, the masking will be automatically synchronized with the store's loading
process and the mask element will be cached for reuse.  For all other elements, this mask will replace the
element's UpdateManager load indicator and will be destroyed after the initial load.</description><constructors><constructor scope="instance"><description>Create a new LoadMask</description><parameters><parameter name="el" type="String/HTMLElement/Ext.Element" usage="required"><description>The element or DOM node, or its id</description></parameter><parameter name="config" type="Object" usage="required"><description>The config object</description></parameter></parameters></constructor></constructors><properties><property name="disabled" type="Boolean" scope="instance" access="read-write"><description>Read-only. True if the mask is currently disabled so that it will not be displayed (defaults to false)</description></property></properties><methods><method name="disable" scope="instance"><description>Disables the mask to prevent it from being displayed</description><parameters/></method><method name="enable" scope="instance"><description>Enables the mask so that it can be displayed</description><parameters/></method></methods></class><class type="Ext.MasterTemplate" superclass="Ext.Template"><description>Provides a template that can have child templates. The syntax is:&#13;
&lt;pre&gt;&lt;code&gt;var t = new Ext.MasterTemplate(
	'&amp;lt;select name=&quot;{name}&quot;&amp;gt;',
		'&amp;lt;tpl name=&quot;options&quot;&amp;gt;&amp;lt;option value=&quot;{value:trim}&quot;&amp;gt;{text:ellipsis(10)}&amp;lt;/option&amp;gt;&amp;lt;/tpl&amp;gt;',
	'&amp;lt;/select&amp;gt;'
);
t.add('options', {value: 'foo', text: 'bar'});
// or you can add multiple child elements in one shot
t.addAll('options', [
    {value: 'foo', text: 'bar'},
    {value: 'foo2', text: 'bar2'},
    {value: 'foo3', text: 'bar3'}
]);
// then append, applying the master template values
t.append('my-form', {name: 'my-select'});&lt;/code&gt;&lt;/pre&gt;
A name attribute for the child template is not required if you have only one child
template or you want to refer to them by index.</description><properties><property name="subTemplateRe" type="RegExp" scope="instance" access="read-write"><description>The regular expression used to match sub templates</description></property></properties><methods><method name="add" scope="instance"><description>Applies the passed values to a child template.</description><parameters><parameter name="name" type="String/Number" usage="optional"><description>(optional) The name or index of the child template</description></parameter><parameter name="values" type="Array/Object" usage="required"><description>The values to be applied to the template</description></parameter></parameters></method><method name="fill" scope="instance"><description>Applies all the passed values to a child template.</description><parameters><parameter name="name" type="String/Number" usage="optional"><description>(optional) The name or index of the child template</description></parameter><parameter name="values" type="Array" usage="required"><description>The values to be applied to the template, this should be an array of objects.</description></parameter><parameter name="reset" type="Boolean" usage="optional"><description>(optional) True to reset the template first</description></parameter></parameters></method><method name="reset" scope="instance"><description>Resets the template for reuse</description><parameters/></method><method name="addAll" scope="instance"><description>Alias for fill().</description><parameters/></method><method name="MasterTemplate.from" scope="static"><description>&amp;lt;static&amp;gt; Creates a template from the passed element's value (display:none textarea, preferred) or innerHTML. e.g.
var tpl = Ext.MasterTemplate.from('element-id');</description><parameters><parameter name="el" type="String/HTMLElement" usage="required"><description></description></parameter><parameter name="config" type="Object" usage="required"><description></description></parameter></parameters></method></methods></class><class type="Ext.MessageBox" superclass="Object"><description>Utility class for generating different styles of message boxes.  The alias Ext.Msg can also be used.
Example usage:
&lt;pre&gt;&lt;code&gt;// Basic alert:
Ext.Msg.alert('Status', 'Changes saved successfully.');

// Prompt for user data:
Ext.Msg.prompt('Name', 'Please enter your name:', function(btn, text){
    if (btn == 'ok'){
        // process text value...
    }
});

// Show a dialog using config options:
Ext.Msg.show({
   title:'Save Changes?',
   msg: 'Your are closing a tab that has unsaved changes. Would you like to save your changes?',
   buttons: Ext.Msg.YESNOCANCEL,
   fn: processResult,
   animEl: 'elId'
});&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description><properties><property name="OK" type="Object" scope="instance" access="read-write"><description>Button config that displays a single OK button</description></property><property name="YESNO" type="Object" scope="instance" access="read-write"><description>Button config that displays Yes and No buttons</description></property><property name="OKCANCEL" type="Object" scope="instance" access="read-write"><description>Button config that displays OK and Cancel buttons</description></property><property name="YESNOCANCEL" type="Object" scope="instance" access="read-write"><description>Button config that displays Yes, No and Cancel buttons</description></property><property name="defaultTextHeight" type="Number" scope="instance" access="read-write"><description>The default height in pixels of the message box's multiline textarea if displayed (defaults to 75)</description></property><property name="maxWidth" type="Number" scope="instance" access="read-write"><description>The maximum width in pixels of the message box (defaults to 600)</description></property><property name="minWidth" type="Number" scope="instance" access="read-write"><description>The minimum width in pixels of the message box (defaults to 100)</description></property><property name="minProgressWidth" type="Number" scope="instance" access="read-write"><description>The minimum width in pixels of the message box progress bar if displayed (defaults to 250)</description></property><property name="buttonText" type="Object" scope="instance" access="read-write"><description>An object containing the default button text strings that can be overriden for localized language support.
Supported properties are: ok, cancel, yes and no.
Customize the default text like so: Ext.MessageBox.buttonText.yes = &quot;Roger&quot;</description></property></properties><methods><method name="getDialog" scope="instance"><description>Returns a reference to the underlying &lt;a ext:cls=&quot;Ext.BasicDialog&quot; href=&quot;output/Ext.BasicDialog.html&quot;&gt;Ext.BasicDialog&lt;/a&gt; element</description><parameters/></method><method name="updateText" scope="instance"><description>Updates the message box body text</description><parameters><parameter name="text" type="String" usage="optional"><description>(optional) Replaces the message box element's innerHTML with the specified string (defaults to
the XHTML-compliant non-breaking space character '&amp;amp;#160;')</description></parameter></parameters></method><method name="updateProgress" scope="instance"><description>Updates a progress-style message box's text and progress bar.  Only relevant on message boxes
initiated via &lt;a ext:cls=&quot;Ext.MessageBox&quot; ext:member=&quot;progress&quot; href=&quot;output/Ext.MessageBox.html#progress&quot;&gt;Ext.MessageBox.progress&lt;/a&gt; or by calling &lt;a ext:cls=&quot;Ext.MessageBox&quot; ext:member=&quot;show&quot; href=&quot;output/Ext.MessageBox.html#show&quot;&gt;Ext.MessageBox.show&lt;/a&gt; with progress: true.</description><parameters><parameter name="value" type="Number" usage="required"><description>Any number between 0 and 1 (e.g., .5)</description></parameter><parameter name="text" type="String" usage="optional"><description>(optional) If defined, the message box's body text is replaced with the specified string (defaults to undefined)</description></parameter></parameters></method><method name="isVisible" scope="instance"><description>Returns true if the message box is currently displayed</description><parameters/></method><method name="hide" scope="instance"><description>Hides the message box if it is displayed</description><parameters/></method><method name="show" scope="instance"><description>Displays a new message box, or reinitializes an existing message box, based on the config options
passed in. All functions (e.g. prompt, alert, etc) on MessageBox call this function internally.
The following config object properties are supported:
&lt;pre&gt;Property    Type             Description&#13;
----------  ---------------  ----------------------------------------------------------------------&#13;
title       String           The title text&#13;
closable    Boolean          False to hide the top-right close box (defaults to true)&#13;
prompt      Boolean          True to prompt the user to enter single-line text (defaults to false)&#13;
multiline   Boolean          True to prompt the user to enter multi-line text (defaults to false)&#13;
progress    Boolean          True to display a progress bar (defaults to false)&#13;
value       String           The string value to set into the active textbox element if displayed&#13;
buttons     Object/Boolean   A button config object (e.g., Ext.MessageBox.OKCANCEL or {ok:'Foo',&#13;
                             cancel:'Bar'}), or false to not show any buttons (defaults to false)&#13;
msg         String           A string that will replace the existing message box body text (defaults&#13;
                             to the XHTML-compliant non-breaking space character &amp;#160;)&#13;
cls         String           A custom CSS class to apply to the message box element&#13;
proxyDrag   Boolean          True to display a lightweight proxy while dragging (defaults to false)&#13;
modal       Boolean          False to allow user interaction with the page while the message box is&#13;
                             displayed (defaults to true)&lt;/pre&gt;
Example usage:
&lt;pre&gt;&lt;code&gt;Ext.Msg.show({
   title: 'Address',
   msg: 'Please enter your address:',
   width: 300,
   buttons: Ext.MessageBox.OKCANCEL,
   multiline: true,
   fn: saveAddress,
   animEl: 'addAddressBtn'
});&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></method><method name="progress" scope="instance"><description>Displays a message box with a progress bar.  This message box has no buttons and is not closeable by
the user.  You are responsible for updating the progress bar as needed via &lt;a ext:cls=&quot;Ext.MessageBox&quot; ext:member=&quot;updateProgress&quot; href=&quot;output/Ext.MessageBox.html#updateProgress&quot;&gt;Ext.MessageBox.updateProgress&lt;/a&gt;
and closing the message box when the process is complete.</description><parameters><parameter name="title" type="String" usage="required"><description>The title bar text</description></parameter><parameter name="msg" type="String" usage="required"><description>The message box body text</description></parameter></parameters></method><method name="alert" scope="instance"><description>Displays a standard read-only message box with an OK button (comparable to the basic JavaScript Window.alert).
If a callback function is passed it will be called after the user clicks the button, and the
id of the button that was clicked will be passed as the only parameter to the callback
(could also be the top-right close button).</description><parameters><parameter name="title" type="String" usage="required"><description>The title bar text</description></parameter><parameter name="msg" type="String" usage="required"><description>The message box body text</description></parameter><parameter name="fn" type="Function" usage="optional"><description>(optional) The callback function invoked after the message box is closed</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope of the callback function</description></parameter></parameters></method><method name="wait" scope="instance"><description>Displays a message box with an infinitely auto-updating progress bar.  This can be used to block user
interaction while waiting for a long-running process to complete that does not have defined intervals.
You are responsible for closing the message box when the process is complete.</description><parameters><parameter name="msg" type="String" usage="required"><description>The message box body text</description></parameter><parameter name="title" type="String" usage="optional"><description>(optional) The title bar text</description></parameter></parameters></method><method name="confirm" scope="instance"><description>Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's Window.confirm).
If a callback function is passed it will be called after the user clicks either button, and the id of the
button that was clicked will be passed as the only parameter to the callback (could also be the top-right close button).</description><parameters><parameter name="title" type="String" usage="required"><description>The title bar text</description></parameter><parameter name="msg" type="String" usage="required"><description>The message box body text</description></parameter><parameter name="fn" type="Function" usage="optional"><description>(optional) The callback function invoked after the message box is closed</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope of the callback function</description></parameter></parameters></method><method name="prompt" scope="instance"><description>Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to
JavaScript's Window.prompt).  The prompt can be a single-line or multi-line textbox.  If a callback function
is passed it will be called after the user clicks either button, and the id of the button that was clicked
(could also be the top-right close button) and the text that was entered will be passed as the two
parameters to the callback.</description><parameters><parameter name="title" type="String" usage="required"><description>The title bar text</description></parameter><parameter name="msg" type="String" usage="required"><description>The message box body text</description></parameter><parameter name="fn" type="Function" usage="optional"><description>(optional) The callback function invoked after the message box is closed</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope of the callback function</description></parameter><parameter name="multiline" type="Boolean/Number" usage="optional"><description>(optional) True to create a multiline textbox using the defaultTextHeight
property, or the height in pixels to create the textbox (defaults to false / single-line)</description></parameter></parameters></method></methods></class><class type="Ext.NestedLayoutPanel" superclass="Ext.ContentPanel"><description></description><constructors><constructor scope="instance"><description>Create a new NestedLayoutPanel.</description><parameters><parameter name="layout" type="Ext.BorderLayout" usage="required"><description>The layout for this panel</description></parameter><parameter name="config" type="String/Object" usage="required"><description>A string to set only the title or a config object</description></parameter></parameters></constructor></constructors><properties/><methods><method name="getLayout" scope="instance"><description>Returns the nested BorderLayout for this panel</description><parameters/></method></methods></class><class type="Ext.PagingToolbar" superclass="Ext.Toolbar"><description>A specialized toolbar that is bound to a &lt;a ext:cls=&quot;Ext.data.Store&quot; href=&quot;output/Ext.data.Store.html&quot;&gt;Ext.data.Store&lt;/a&gt; and provides automatic paging controls.</description><constructors><constructor scope="instance"><description>Create a new PagingToolbar</description><parameters><parameter name="container" type="String/HTMLElement/Element" usage="required"><description>The id or element that will contain the toolbar</description></parameter><parameter name="store" type="Ext.data.Store" usage="required"><description>The underlying data store providing the paged data</description></parameter><parameter name="config" type="Object" usage="required"><description>The config object</description></parameter></parameters></constructor></constructors><properties><property name="beforePageText" type="String" scope="instance" access="read-write"><description>Customizable piece of the default paging text (defaults to &quot;Page&quot;)</description></property><property name="afterPageText" type="String" scope="instance" access="read-write"><description>Customizable piece of the default paging text (defaults to &quot;of %0&quot;)</description></property><property name="firstText" type="String" scope="instance" access="read-write"><description>Customizable piece of the default paging text (defaults to &quot;First Page&quot;)</description></property><property name="prevText" type="String" scope="instance" access="read-write"><description>Customizable piece of the default paging text (defaults to &quot;Previous Page&quot;)</description></property><property name="nextText" type="String" scope="instance" access="read-write"><description>Customizable piece of the default paging text (defaults to &quot;Next Page&quot;)</description></property><property name="lastText" type="String" scope="instance" access="read-write"><description>Customizable piece of the default paging text (defaults to &quot;Last Page&quot;)</description></property><property name="refreshText" type="String" scope="instance" access="read-write"><description>Customizable piece of the default paging text (defaults to &quot;Refresh&quot;)</description></property></properties><methods><method name="unbind" scope="instance"><description>Unbinds the paging toolbar from the specified &lt;a ext:cls=&quot;Ext.data.Store&quot; href=&quot;output/Ext.data.Store.html&quot;&gt;Ext.data.Store&lt;/a&gt;</description><parameters><parameter name="store" type="Ext.data.Store" usage="required"><description>The data store to unbind</description></parameter></parameters></method><method name="bind" scope="instance"><description>Binds the paging toolbar to the specified &lt;a ext:cls=&quot;Ext.data.Store&quot; href=&quot;output/Ext.data.Store.html&quot;&gt;Ext.data.Store&lt;/a&gt;</description><parameters><parameter name="store" type="Ext.data.Store" usage="required"><description>The data store to bind</description></parameter></parameters></method></methods></class><class type="Ext.QuickTips" superclass="Object"><description>Provides attractive and customizable tooltips for any element.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description><properties/><methods><method name="init" scope="instance"><description>
Initialize and enable QuickTips for first use.  This should be called once before the first attempt to access
or display QuickTips in a page.</description><parameters/></method><method name="register" scope="instance"><description>Configures a new quick tip instance and assigns it to a target element (should be passed as config.target).</description><parameters><parameter name="config" type="Object" usage="required"><description>The config object</description></parameter></parameters></method><method name="unregister" scope="instance"><description>Removes this quick tip from its element and destroys it.</description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description>The element from which the quick tip is to be removed.</description></parameter></parameters></method><method name="enable" scope="instance"><description>Enable this quick tip.</description><parameters/></method><method name="disable" scope="instance"><description>Disable this quick tip.</description><parameters/></method><method name="isEnabled" scope="instance"><description>Returns true if the quick tip is enabled, else false.</description><parameters/></method></methods></class><class type="Ext.ReaderLayout" superclass="Ext.BorderLayout"><description>This is a pre-built layout that represents a classic, 5-pane application.  It consists of a header, a primary
center region containing two nested regions (a top one for a list view and one for item preview below),
and regions on either side that can be used for navigation, application commands, informational displays, etc.
The setup and configuration work exactly the same as it does for a &lt;a ext:cls=&quot;Ext.BorderLayout&quot; href=&quot;output/Ext.BorderLayout.html&quot;&gt;Ext.BorderLayout&lt;/a&gt; - this class simply
expedites the setup of the overall layout and regions for this common application style.
Example:
 &lt;pre&gt;&lt;code&gt;var reader = new Ext.ReaderLayout();
var CP = Ext.ContentPanel;  // shortcut for adding

reader.beginUpdate();
reader.add(&quot;north&quot;, new CP(&quot;north&quot;, &quot;North&quot;));
reader.add(&quot;west&quot;, new CP(&quot;west&quot;, {title: &quot;West&quot;}));
reader.add(&quot;east&quot;, new CP(&quot;east&quot;, {title: &quot;East&quot;}));

reader.regions.listView.add(new CP(&quot;listView&quot;, &quot;List&quot;));
reader.regions.preview.add(new CP(&quot;preview&quot;, &quot;Preview&quot;));
reader.endUpdate();&lt;/code&gt;&lt;/pre&gt;</description><constructors><constructor scope="instance"><description>Create a new ReaderLayout</description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter><parameter name="container" type="String/HTMLElement/Element" usage="optional"><description>(optional) The container this layout is bound to (defaults to
document.body if omitted)</description></parameter></parameters></constructor></constructors><properties/><methods/></class><class type="Ext.Resizable" superclass="Ext.util.Observable"><description>&lt;p&gt;Applies drag handles to an element to make it resizable. The drag handles are inserted into the element
and positioned absolute. Some elements, such as a textarea or image, don't support this. To overcome that, you can wrap
the textarea in a div and set &quot;resizeChild&quot; to true (or to the id of the element), &lt;b&gt;or&lt;/b&gt; set wrap:true in your config and
the element will be wrapped for you automatically.&lt;/p&gt;
&lt;p&gt;Here is the list of valid resize handles:&lt;/p&gt;
&lt;pre&gt;Value   Description&#13;------  -------------------&#13; 'n'     north&#13; 's'     south&#13; 'e'     east&#13; 'w'     west&#13; 'nw'    northwest&#13; 'sw'    southwest&#13; 'se'    southeast&#13; 'ne'    northeast&#13; 'all'   all&lt;/pre&gt;
&lt;p&gt;Here's an example showing the creation of a typical Resizable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var resizer = new Ext.Resizable(&quot;element-id&quot;, {&#13;    handles: 'all',&#13;    minWidth: 200,&#13;    minHeight: 100,&#13;    maxWidth: 500,&#13;    maxHeight: 400,&#13;    pinned: true&#13;});&#13;resizer.on(&quot;resize&quot;, myHandler);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To hide a particular handle, set its display to none in CSS, or through script:&lt;br&gt;
resizer.east.setDisplayed(false);&lt;/p&gt;</description><constructors><constructor scope="instance"><description>Create a new resizable component</description><parameters><parameter name="el" type="String/HTMLElement/Ext.Element" usage="required"><description>The id or element to resize</description></parameter><parameter name="config" type="Object" usage="required"><description>configuration options</description></parameter></parameters></constructor></constructors><properties/><methods/></class><class type="Ext.Shadow" superclass="Object"><description>Simple class that can provide a shadow effect for any element.  Note that the element MUST be absolutely positioned,
and the shadow does not provide any shimming.  This should be used only in simple cases -- for more advanced
functionality that can also provide the same shadow effect, see the &lt;a ext:cls=&quot;Ext.Layer&quot; href=&quot;output/Ext.Layer.html&quot;&gt;Ext.Layer&lt;/a&gt; class.</description><constructors><constructor scope="instance"><description>Create a new Shadow</description><parameters><parameter name="config" type="Object" usage="required"><description>The config object</description></parameter></parameters></constructor></constructors><properties/><methods><method name="show" scope="instance"><description>Displays the shadow under the target element</description><parameters><parameter name="targetEl" type="String/HTMLElement/Element" usage="required"><description>The id or element under which the shadow should display</description></parameter></parameters></method><method name="isVisible" scope="instance"><description>Returns true if the shadow is visible, else false</description><parameters/></method><method name="realign" scope="instance"><description>Direct alignment when values are already available. Show must be called at least once before
calling this method to ensure it is initialized.</description><parameters><parameter name="left" type="Number" usage="required"><description>The target element left position</description></parameter><parameter name="top" type="Number" usage="required"><description>The target element top position</description></parameter><parameter name="width" type="Number" usage="required"><description>The target element width</description></parameter><parameter name="height" type="Number" usage="required"><description>The target element height</description></parameter></parameters></method><method name="hide" scope="instance"><description>Hides this shadow</description><parameters/></method><method name="setZIndex" scope="instance"><description>Adjust the z-index of this shadow</description><parameters><parameter name="zindex" type="Number" usage="required"><description>The new z-index</description></parameter></parameters></method></methods></class><class type="Ext.SplitBar" superclass="Ext.util.Observable"><description>Creates draggable splitter bar functionality from two elements (element to be dragged and element to be resized).
&lt;br&gt;&lt;br&gt;
Usage:
&lt;pre&gt;&lt;code&gt;var split = new Ext.SplitBar(&quot;elementToDrag&quot;, &quot;elementToSize&quot;,
                   Ext.SplitBar.HORIZONTAL, Ext.SplitBar.LEFT);
split.setAdapter(new Ext.SplitBar.AbsoluteLayoutAdapter(&quot;container&quot;));
split.minSize = 100;
split.maxSize = 600;
split.animate = true;
split.on('moved', splitterMoved);&lt;/code&gt;&lt;/pre&gt;</description><constructors><constructor scope="instance"><description>Create a new SplitBar</description><parameters><parameter name="dragElement" type="String/HTMLElement/Ext.Element" usage="required"><description>The element to be dragged and act as the SplitBar.</description></parameter><parameter name="resizingElement" type="String/HTMLElement/Ext.Element" usage="required"><description>The element to be resized based on where the SplitBar element is dragged</description></parameter><parameter name="orientation" type="Number" usage="optional"><description>(optional) Either Ext.SplitBar.HORIZONTAL or Ext.SplitBar.VERTICAL. (Defaults to HORIZONTAL)</description></parameter><parameter name="placement" type="Number" usage="optional"><description>(optional) Either Ext.SplitBar.LEFT or Ext.SplitBar.RIGHT for horizontal or &#13;
 Ext.SplitBar.TOP or Ext.SplitBar.BOTTOM for vertical. (By default, this is determined automatically by the initial&#13;
 position of the SplitBar).</description></parameter></parameters></constructor></constructors><properties><property name="minSize" type="Number" scope="instance" access="read-write"><description>The minimum size of the resizing element. (Defaults to 0)</description></property><property name="maxSize" type="Number" scope="instance" access="read-write"><description>The maximum size of the resizing element. (Defaults to 2000)</description></property><property name="animate" type="Boolean" scope="instance" access="read-write"><description>Whether to animate the transition to the new size</description></property><property name="useShim" type="Boolean" scope="instance" access="read-write"><description>Whether to create a transparent shim that overlays the page when dragging, enables dragging across iframes.</description></property></properties><methods><method name="getAdapter" scope="instance"><description>Get the adapter this SplitBar uses</description><parameters/></method><method name="setAdapter" scope="instance"><description>Set the adapter this SplitBar uses</description><parameters><parameter name="adapter" type="Object" usage="required"><description>A SplitBar adapter object</description></parameter></parameters></method><method name="getMinimumSize" scope="instance"><description>Gets the minimum size for the resizing element</description><parameters/></method><method name="setMinimumSize" scope="instance"><description>Sets the minimum size for the resizing element</description><parameters><parameter name="minSize" type="Number" usage="required"><description>The minimum size</description></parameter></parameters></method><method name="getMaximumSize" scope="instance"><description>Gets the maximum size for the resizing element</description><parameters/></method><method name="setMaximumSize" scope="instance"><description>Sets the maximum size for the resizing element</description><parameters><parameter name="maxSize" type="Number" usage="required"><description>The maximum size</description></parameter></parameters></method><method name="setCurrentSize" scope="instance"><description>Sets the initialize size for the resizing element</description><parameters><parameter name="size" type="Number" usage="required"><description>The initial size</description></parameter></parameters></method><method name="destroy" scope="instance"><description>Destroy this splitbar.</description><parameters><parameter name="removeEl" type="Boolean" usage="required"><description>True to remove the element</description></parameter></parameters></method></methods></class><class type="Ext.SplitBar.AbsoluteLayoutAdapter" superclass="Ext.SplitBar.BasicLayoutAdapter"><description>Adapter that  moves the splitter element to align with the resized sizing element. 
Used with an absolute positioned SplitBar.</description><properties><property name="SplitBar.AbsoluteLayoutAdapter.VERTICAL" type="Number" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; Orientation constant - Create a vertical SplitBar</description></property><property name="SplitBar.AbsoluteLayoutAdapter.HORIZONTAL" type="Number" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; Orientation constant - Create a horizontal SplitBar</description></property><property name="SplitBar.AbsoluteLayoutAdapter.LEFT" type="Number" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; Placement constant - The resizing element is to the left of the splitter element</description></property><property name="SplitBar.AbsoluteLayoutAdapter.RIGHT" type="Number" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; Placement constant - The resizing element is to the right of the splitter element</description></property><property name="SplitBar.AbsoluteLayoutAdapter.TOP" type="Number" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; Placement constant - The resizing element is positioned above the splitter element</description></property><property name="SplitBar.AbsoluteLayoutAdapter.BOTTOM" type="Number" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; Placement constant - The resizing element is positioned under splitter element</description></property></properties><methods/></class><class type="Ext.SplitBar.BasicLayoutAdapter" superclass="Object"><description>Default Adapter. It assumes the splitter and resizing element are not positioned
elements and only gets/sets the width of the element. Generally used for table based layouts.</description><properties/><methods><method name="getElementSize" scope="instance"><description>Called before drag operations to get the current size of the resizing element.</description><parameters><parameter name="s" type="Ext.SplitBar" usage="required"><description>The SplitBar using this adapter</description></parameter></parameters></method><method name="setElementSize" scope="instance"><description>Called after drag operations to set the size of the resizing element.</description><parameters><parameter name="s" type="Ext.SplitBar" usage="required"><description>The SplitBar using this adapter</description></parameter><parameter name="newSize" type="Number" usage="required"><description>The new size to set</description></parameter><parameter name="onComplete" type="Function" usage="required"><description>A function to be invoked when resizing is complete</description></parameter></parameters></method></methods></class><class type="Ext.SplitButton" superclass="Ext.Button"><description>A split button that provides a built-in dropdown arrow that can fire an event separately from the default
click event of the button.  Typically this would be used to display a dropdown menu that provides additional
options to the primary button action, but any custom handler can provide the arrowclick implementation.</description><constructors><constructor scope="instance"><description>Create a new menu button</description><parameters><parameter name="renderTo" type="String/HTMLElement/Element" usage="required"><description>The element to append the button to</description></parameter><parameter name="config" type="Object" usage="required"><description>The config object</description></parameter></parameters></constructor></constructors><properties/><methods><method name="setHandler" scope="instance"><description>Sets this button's click handler</description><parameters><parameter name="handler" type="Function" usage="required"><description>The function to call when the button is clicked</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) Scope for the function passed above</description></parameter></parameters></method><method name="setArrowHandler" scope="instance"><description>Sets this button's arrow click handler</description><parameters><parameter name="handler" type="Function" usage="required"><description>The function to call when the arrow is clicked</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) Scope for the function passed above</description></parameter></parameters></method><method name="focus" scope="instance"><description>Focus the button</description><parameters/></method></methods></class><class type="Ext.SplitLayoutRegion" superclass="Ext.LayoutRegion"><description>Adds a splitbar and other (private) useful functionality to a &lt;a ext:cls=&quot;Ext.LayoutRegion&quot; href=&quot;output/Ext.LayoutRegion.html&quot;&gt;Ext.LayoutRegion&lt;/a&gt;.</description><properties><property name="split" type="Ext.SplitBar" scope="instance" access="read-write"><description>The SplitBar for this region</description></property></properties><methods><method name="getSplitBar" scope="instance"><description>Returns the &lt;a ext:cls=&quot;Ext.SplitBar&quot; href=&quot;output/Ext.SplitBar.html&quot;&gt;Ext.SplitBar&lt;/a&gt; for this region.</description><parameters/></method></methods></class><class type="Ext.TabPanel" superclass="Ext.util.Observable"><description>Creates a lightweight TabPanel component using Yahoo! UI.
&lt;br&gt;&lt;br&gt;
Usage:
&lt;pre&gt;&lt;code&gt;&lt;font color=&quot;#008000&quot;&gt;// basic tabs 1, built from existing content&lt;/font&gt;
var tabs = new Ext.TabPanel(&quot;tabs1&quot;);
tabs.addTab(&quot;script&quot;, &quot;View Script&quot;);
tabs.addTab(&quot;markup&quot;, &quot;View Markup&quot;);
tabs.activate(&quot;script&quot;);

&lt;font color=&quot;#008000&quot;&gt;// more advanced tabs, built from javascript&lt;/font&gt;
var jtabs = new Ext.TabPanel(&quot;jtabs&quot;);
jtabs.addTab(&quot;jtabs-1&quot;, &quot;Normal Tab&quot;, &quot;My content was added during construction.&quot;);

&lt;font color=&quot;#008000&quot;&gt;// set up the UpdateManager&lt;/font&gt;
var tab2 = jtabs.addTab(&quot;jtabs-2&quot;, &quot;Ajax Tab 1&quot;);
var updater = tab2.getUpdateManager();
updater.setDefaultUrl(&quot;ajax1.htm&quot;);
tab2.on('activate', updater.refresh, updater, true);

&lt;font color=&quot;#008000&quot;&gt;// Use setUrl for Ajax loading&lt;/font&gt;
var tab3 = jtabs.addTab(&quot;jtabs-3&quot;, &quot;Ajax Tab 2&quot;);
tab3.setUrl(&quot;ajax2.htm&quot;, null, true);

&lt;font color=&quot;#008000&quot;&gt;// Disabled tab&lt;/font&gt;
var tab4 = jtabs.addTab(&quot;tabs1-5&quot;, &quot;Disabled Tab&quot;, &quot;Can't see me cause I'm disabled&quot;);
tab4.disable();

jtabs.activate(&quot;jtabs-1&quot;);&lt;/code&gt;&lt;/pre&gt;</description><constructors><constructor scope="instance"><description>Create a new TabPanel.</description><parameters><parameter name="container" type="String/HTMLElement/Ext.Element" usage="required"><description>The id, DOM element or Ext.Element container where this TabPanel is to be rendered.</description></parameter><parameter name="config" type="Object/Boolean" usage="required"><description>Config object to set any properties for this TabPanel, or true to render the tabs on the bottom.</description></parameter></parameters></constructor></constructors><properties><property name="el" type="Ext.Element" scope="instance" access="read-write"><description>The container element for this TabPanel.</description></property><property name="bodyEl" type="Ext.Element" scope="instance" access="read-write"><description>The body element that contains &lt;a ext:cls=&quot;Ext.TabPanelItem&quot; href=&quot;output/Ext.TabPanelItem.html&quot;&gt;Ext.TabPanelItem&lt;/a&gt; bodies.</description></property></properties><methods><method name="addTab" scope="instance"><description>Creates a new &lt;a ext:cls=&quot;Ext.TabPanelItem&quot; href=&quot;output/Ext.TabPanelItem.html&quot;&gt;Ext.TabPanelItem&lt;/a&gt; by looking for an existing element with the provided id -- if it's not found it creates one.</description><parameters><parameter name="id" type="String" usage="required"><description>The id of the div to use &lt;b&gt;or create&lt;/b&gt;</description></parameter><parameter name="text" type="String" usage="required"><description>The text for the tab</description></parameter><parameter name="content" type="String" usage="optional"><description>(optional) Content to put in the TabPanelItem body</description></parameter><parameter name="closable" type="Boolean" usage="optional"><description>(optional) True to create a close icon on the tab</description></parameter></parameters></method><method name="getTab" scope="instance"><description>Returns the &lt;a ext:cls=&quot;Ext.TabPanelItem&quot; href=&quot;output/Ext.TabPanelItem.html&quot;&gt;Ext.TabPanelItem&lt;/a&gt; with the specified id/index</description><parameters><parameter name="id" type="String/Number" usage="required"><description>The id or index of the TabPanelItem to fetch.</description></parameter></parameters></method><method name="hideTab" scope="instance"><description>Hides the &lt;a ext:cls=&quot;Ext.TabPanelItem&quot; href=&quot;output/Ext.TabPanelItem.html&quot;&gt;Ext.TabPanelItem&lt;/a&gt; with the specified id/index</description><parameters><parameter name="id" type="String/Number" usage="required"><description>The id or index of the TabPanelItem to hide.</description></parameter></parameters></method><method name="unhideTab" scope="instance"><description>&quot;Unhides&quot; the &lt;a ext:cls=&quot;Ext.TabPanelItem&quot; href=&quot;output/Ext.TabPanelItem.html&quot;&gt;Ext.TabPanelItem&lt;/a&gt; with the specified id/index.</description><parameters><parameter name="id" type="String/Number" usage="required"><description>The id or index of the TabPanelItem to unhide.</description></parameter></parameters></method><method name="addTabItem" scope="instance"><description>Adds an existing &lt;a ext:cls=&quot;Ext.TabPanelItem&quot; href=&quot;output/Ext.TabPanelItem.html&quot;&gt;Ext.TabPanelItem&lt;/a&gt;.</description><parameters><parameter name="item" type="Ext.TabPanelItem" usage="required"><description>The TabPanelItem to add</description></parameter></parameters></method><method name="removeTab" scope="instance"><description>Removes a &lt;a ext:cls=&quot;Ext.TabPanelItem&quot; href=&quot;output/Ext.TabPanelItem.html&quot;&gt;Ext.TabPanelItem&lt;/a&gt;.</description><parameters><parameter name="id" type="String/Number" usage="required"><description>The id or index of the TabPanelItem to remove.</description></parameter></parameters></method><method name="disableTab" scope="instance"><description>Disables a &lt;a ext:cls=&quot;Ext.TabPanelItem&quot; href=&quot;output/Ext.TabPanelItem.html&quot;&gt;Ext.TabPanelItem&lt;/a&gt;. It cannot be the active tab, if it is this call is ignored.</description><parameters><parameter name="id" type="String/Number" usage="required"><description>The id or index of the TabPanelItem to disable.</description></parameter></parameters></method><method name="enableTab" scope="instance"><description>Enables a &lt;a ext:cls=&quot;Ext.TabPanelItem&quot; href=&quot;output/Ext.TabPanelItem.html&quot;&gt;Ext.TabPanelItem&lt;/a&gt; that is disabled.</description><parameters><parameter name="id" type="String/Number" usage="required"><description>The id or index of the TabPanelItem to enable.</description></parameter></parameters></method><method name="activate" scope="instance"><description>Activates a &lt;a ext:cls=&quot;Ext.TabPanelItem&quot; href=&quot;output/Ext.TabPanelItem.html&quot;&gt;Ext.TabPanelItem&lt;/a&gt;. The currently active one will be deactivated.</description><parameters><parameter name="id" type="String/Number" usage="required"><description>The id or index of the TabPanelItem to activate.</description></parameter></parameters></method><method name="getActiveTab" scope="instance"><description>Gets the active &lt;a ext:cls=&quot;Ext.TabPanelItem&quot; href=&quot;output/Ext.TabPanelItem.html&quot;&gt;Ext.TabPanelItem&lt;/a&gt;.</description><parameters/></method><method name="syncHeight" scope="instance"><description>Updates the tab body element to fit the height of the container element
for overflow scrolling</description><parameters><parameter name="targetHeight" type="Number" usage="optional"><description>(optional) Override the starting height from the elements height</description></parameter></parameters></method><method name="beginUpdate" scope="instance"><description>Disables tab resizing while tabs are being added (if &lt;a ext:cls=&quot;Ext.TabPanel&quot; ext:member=&quot;resizeTabs&quot; href=&quot;output/Ext.TabPanel.html#resizeTabs&quot;&gt;resizeTabs&lt;/a&gt; is false this does nothing)</description><parameters/></method><method name="endUpdate" scope="instance"><description>Stops an update and resizes the tabs (if &lt;a ext:cls=&quot;Ext.TabPanel&quot; ext:member=&quot;resizeTabs&quot; href=&quot;output/Ext.TabPanel.html#resizeTabs&quot;&gt;resizeTabs&lt;/a&gt; is false this does nothing)</description><parameters/></method><method name="autoSizeTabs" scope="instance"><description>Manual call to resize the tabs (if &lt;a ext:cls=&quot;Ext.TabPanel&quot; ext:member=&quot;resizeTabs&quot; href=&quot;output/Ext.TabPanel.html#resizeTabs&quot;&gt;resizeTabs&lt;/a&gt; is false this does nothing)</description><parameters/></method><method name="getCount" scope="instance"><description>Returns the number of tabs in this TabPanel.</description><parameters/></method><method name="setTabWidth" scope="instance"><description>Resizes all the tabs to the passed width</description><parameters><parameter name="The" type="Number" usage="required"><description>new width</description></parameter></parameters></method><method name="destroy" scope="instance"><description>Destroys this TabPanel</description><parameters><parameter name="removeEl" type="Boolean" usage="optional"><description>(optional) True to remove the element from the DOM as well (defaults to undefined)</description></parameter></parameters></method></methods></class><class type="Ext.TabPanelItem" superclass="Ext.util.Observable"><description>Represents an individual item (tab plus body) in a TabPanel.</description><properties><property name="tabPanel" type="Ext.TabPanel" scope="instance" access="read-write"><description>The &lt;a ext:cls=&quot;Ext.TabPanel&quot; href=&quot;output/Ext.TabPanel.html&quot;&gt;Ext.TabPanel&lt;/a&gt; this TabPanelItem belongs to</description></property><property name="id" type="String" scope="instance" access="read-write"><description>The id for this TabPanelItem</description></property><property name="bodyEl" type="Ext.Element" scope="instance" access="read-write"><description>The body element for this TabPanelItem.</description></property><property name="closeText" type="String" scope="instance" access="read-write"><description>The text displayed in the tooltip for the close icon.</description></property></properties><methods><method name="show" scope="instance"><description>Shows this TabPanelItem -- this &lt;b&gt;does not&lt;/b&gt; deactivate the currently active TabPanelItem.</description><parameters/></method><method name="isActive" scope="instance"><description>Returns true if this tab is the active tab.</description><parameters/></method><method name="hide" scope="instance"><description>Hides this TabPanelItem -- if you don't activate another TabPanelItem this could look odd.</description><parameters/></method><method name="setTooltip" scope="instance"><description>Set the tooltip for the tab.</description><parameters><parameter name="tooltip" type="String" usage="required"><description>The tab's tooltip</description></parameter></parameters></method><method name="setHidden" scope="instance"><description>Show or hide the tab</description><parameters><parameter name="hidden" type="Boolean" usage="required"><description>True to hide or false to show.</description></parameter></parameters></method><method name="isHidden" scope="instance"><description>Returns true if this tab is &quot;hidden&quot;</description><parameters/></method><method name="getText" scope="instance"><description>Returns the text for this tab</description><parameters/></method><method name="setText" scope="instance"><description>Sets the text for the tab (Note: this also sets the tooltip text)</description><parameters><parameter name="text" type="String" usage="required"><description>The tab's text and tooltip</description></parameter></parameters></method><method name="activate" scope="instance"><description>Activates this TabPanelItem -- this &lt;b&gt;does&lt;/b&gt; deactivate the currently active TabPanelItem.</description><parameters/></method><method name="disable" scope="instance"><description>Disables this TabPanelItem -- this does nothing if this is the active TabPanelItem.</description><parameters/></method><method name="enable" scope="instance"><description>Enables this TabPanelItem if it was previously disabled.</description><parameters/></method><method name="setContent" scope="instance"><description>Sets the content for this TabPanelItem.</description><parameters><parameter name="content" type="String" usage="required"><description>The content</description></parameter><parameter name="loadScripts" type="Boolean" usage="required"><description>true to look for and load scripts</description></parameter></parameters></method><method name="getUpdateManager" scope="instance"><description>Gets the &lt;a ext:cls=&quot;Ext.UpdateManager&quot; href=&quot;output/Ext.UpdateManager.html&quot;&gt;Ext.UpdateManager&lt;/a&gt; for the body of this TabPanelItem. Enables you to perform Ajax updates.</description><parameters/></method><method name="setUrl" scope="instance"><description>Set a URL to be used to load the content for this TabPanelItem.</description><parameters><parameter name="url" type="String/Function" usage="required"><description>The URL to load the content from, or a function to call to get the URL</description></parameter><parameter name="params" type="String/Object" usage="optional"><description>(optional) The string params for the update call or an object of the params. See &lt;a ext:cls=&quot;Ext.UpdateManager&quot; ext:member=&quot;update&quot; href=&quot;output/Ext.UpdateManager.html#update&quot;&gt;Ext.UpdateManager.update&lt;/a&gt; for more details. (Defaults to null)</description></parameter><parameter name="loadOnce" type="Boolean" usage="optional"><description>(optional) Whether to only load the content once. If this is false it makes the Ajax call every time this TabPanelItem is activated. (Defaults to false)</description></parameter></parameters></method><method name="refresh" scope="instance"><description>Forces a content refresh from the URL specified in the &lt;a ext:cls=&quot;Ext.TabPanelItem&quot; ext:member=&quot;setUrl&quot; href=&quot;output/Ext.TabPanelItem.html#setUrl&quot;&gt;setUrl&lt;/a&gt; method.
Will fail silently if the setUrl method has not been called.
This does not activate the panel, just updates its content.</description><parameters/></method></methods></class><class type="Ext.Template" superclass="Object"><description>Represents an HTML fragment template. Templates can be precompiled for greater performance.
For a list of available format functions, see &lt;a ext:cls=&quot;Ext.util.Format&quot; href=&quot;output/Ext.util.Format.html&quot;&gt;Ext.util.Format&lt;/a&gt;.&lt;br /&gt;
Usage:&#13;
&lt;pre&gt;&lt;code&gt;var t = new Ext.Template(
    '&amp;lt;div name=&quot;{id}&quot;&amp;gt;',
        '&amp;lt;span class=&quot;{cls}&quot;&amp;gt;{name:trim} {value:ellipsis(10)}&amp;lt;/span&amp;gt;',
    '&amp;lt;/div&amp;gt;'
);
t.append('some-element', {id: 'myid', cls: 'myclass', name: 'foo', value: 'bar'});&lt;/code&gt;&lt;/pre&gt;
For more information see this blog post with examples: &lt;a href=&quot;http://www.jackslocum.com/yui/2006/10/06/domhelper-create-elements-using-dom-html-fragments-or-templates/&quot;&gt;DomHelper - Create Elements using DOM, HTML fragments and Templates&lt;/a&gt;.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="html" type="String/Array" usage="required"><description>The HTML fragment or an array of fragments to join(&quot;&quot;) or multiple arguments to join(&quot;&quot;)</description></parameter></parameters></constructor></constructors><properties><property name="disableFormats" type="Boolean" scope="instance" access="read-write"><description>True to disable format functions (defaults to false)</description></property><property name="re" type="RegExp" scope="instance" access="read-write"><description>The regular expression used to match template variables</description></property></properties><methods><method name="applyTemplate" scope="instance"><description>Returns an HTML fragment of this template with the specified values applied.</description><parameters><parameter name="values" type="Object" usage="required"><description>The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</description></parameter></parameters></method><method name="set" scope="instance"><description>Sets the HTML used as the template and optionally compiles it.</description><parameters><parameter name="html" type="String" usage="required"><description></description></parameter><parameter name="compile" type="Boolean" usage="optional"><description>(optional) True to compile the template (defaults to undefined)</description></parameter></parameters></method><method name="compile" scope="instance"><description>Compiles the template into an internal function, eliminating the RegEx overhead.</description><parameters/></method><method name="insertFirst" scope="instance"><description>Applies the supplied values to the template and inserts the new node(s) as the first child of el.</description><parameters><parameter name="el" type="String/HTMLElement/Ext.Element" usage="required"><description>The context element</description></parameter><parameter name="values" type="Object" usage="required"><description>The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</description></parameter><parameter name="returnElement" type="Boolean" usage="optional"><description>(optional) true to return a Ext.Element (defaults to undefined)</description></parameter></parameters></method><method name="insertBefore" scope="instance"><description>Applies the supplied values to the template and inserts the new node(s) before el.</description><parameters><parameter name="el" type="String/HTMLElement/Ext.Element" usage="required"><description>The context element</description></parameter><parameter name="values" type="Object" usage="required"><description>The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</description></parameter><parameter name="returnElement" type="Boolean" usage="optional"><description>(optional) true to return a Ext.Element (defaults to undefined)</description></parameter></parameters></method><method name="insertAfter" scope="instance"><description>Applies the supplied values to the template and inserts the new node(s) after el.</description><parameters><parameter name="el" type="String/HTMLElement/Ext.Element" usage="required"><description>The context element</description></parameter><parameter name="values" type="Object" usage="required"><description>The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</description></parameter><parameter name="returnElement" type="Boolean" usage="optional"><description>(optional) true to return a Ext.Element (defaults to undefined)</description></parameter></parameters></method><method name="append" scope="instance"><description>Applies the supplied values to the template and appends the new node(s) to el.</description><parameters><parameter name="el" type="String/HTMLElement/Ext.Element" usage="required"><description>The context element</description></parameter><parameter name="values" type="Object" usage="required"><description>The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</description></parameter><parameter name="returnElement" type="Boolean" usage="optional"><description>(optional) true to return a Ext.Element (defaults to undefined)</description></parameter></parameters></method><method name="overwrite" scope="instance"><description>Applies the supplied values to the template and overwrites the content of el with the new node(s).</description><parameters><parameter name="el" type="String/HTMLElement/Ext.Element" usage="required"><description>The context element</description></parameter><parameter name="values" type="Object" usage="required"><description>The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})</description></parameter><parameter name="returnElement" type="Boolean" usage="optional"><description>(optional) true to return a Ext.Element (defaults to undefined)</description></parameter></parameters></method><method name="apply" scope="instance"><description>Alias for &lt;a ext:cls=&quot;Ext.Template&quot; ext:member=&quot;applyTemplate&quot; href=&quot;output/Ext.Template.html#applyTemplate&quot;&gt;applyTemplate&lt;/a&gt;</description><parameters/></method><method name="Template.from" scope="static"><description>&amp;lt;static&amp;gt; Creates a template from the passed element's value (&lt;i&gt;display:none&lt;/i&gt; textarea, preferred) or innerHTML.</description><parameters><parameter name="el" type="String/HTMLElement" usage="required"><description>A DOM element or its id</description></parameter></parameters></method></methods></class><class type="Ext.Toolbar" superclass="Object"><description>Basic Toolbar class.</description><constructors><constructor scope="instance"><description>Creates a new Toolbar</description><parameters><parameter name="container" type="String/HTMLElement/Element" usage="required"><description>The id or element that will contain the toolbar</description></parameter><parameter name="buttons" type="Array" usage="optional"><description>(optional) array of button configs or elements to add</description></parameter><parameter name="config" type="Object" usage="required"><description>The config object</description></parameter></parameters></constructor></constructors><properties/><methods><method name="add" scope="instance"><description>Adds element(s) to the toolbar -- this function takes a variable number of 
arguments of mixed type and adds them to the toolbar.</description><parameters><parameter name="arg1" type="Mixed" usage="required"><description>If arg is a Toolbar.Button, it is added. If arg is a string, it is wrapped 
in a ytb-text element and added unless the text is &quot;separator&quot; in which case a separator
is added. Otherwise, it is assumed the element is an HTMLElement and it is added directly.</description></parameter><parameter name="arg2" type="Mixed" usage="required"><description></description></parameter><parameter name="etc" type="Mixed" usage="required"><description></description></parameter></parameters></method><method name="getEl" scope="instance"><description>Returns the Element for this toolbar.</description><parameters/></method><method name="addSeparator" scope="instance"><description>Adds a separator</description><parameters/></method><method name="addSpacer" scope="instance"><description>Adds a spacer element</description><parameters/></method><method name="addFill" scope="instance"><description>Adds a fill element that forces subsequent additions to the right side of the toolbar</description><parameters/></method><method name="addElement" scope="instance"><description>Adds any standard HTML element to the toolbar</description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description>The element or id of the element to add</description></parameter></parameters></method><method name="addItem" scope="instance"><description>Adds any Toolbar.Item or subclass</description><parameters><parameter name="item" type="Toolbar.Item" usage="required"><description></description></parameter></parameters></method><method name="addButton" scope="instance"><description>Adds a button (or buttons). See &lt;a ext:cls=&quot;Ext.Toolbar.Button&quot; href=&quot;output/Ext.Toolbar.Button.html&quot;&gt;Ext.Toolbar.Button&lt;/a&gt; for more info on the config.</description><parameters><parameter name="config" type="Object/Array" usage="required"><description>A button config or array of configs</description></parameter></parameters></method><method name="addText" scope="instance"><description>Adds text to the toolbar</description><parameters><parameter name="text" type="String" usage="required"><description>The text to add</description></parameter></parameters></method><method name="insertButton" scope="instance"><description>Inserts any &lt;a ext:cls=&quot;Ext.Toolbar.Item&quot; href=&quot;output/Ext.Toolbar.Item.html&quot;&gt;Ext.Toolbar.Item&lt;/a&gt;/&lt;a ext:cls=&quot;Ext.Toolbar.Button&quot; href=&quot;output/Ext.Toolbar.Button.html&quot;&gt;Ext.Toolbar.Button&lt;/a&gt; at the specified index.</description><parameters><parameter name="index" type="Number" usage="required"><description>The index where the item is to be inserted</description></parameter><parameter name="(may" type="Object/Ext.Toolbar.Item/Ext.Toolbar.Button" usage="required"><description>be Array)} item The button, or button config object to be inserted.</description></parameter></parameters></method><method name="addDom" scope="instance"><description>Adds a new element to the toolbar from the passed &lt;a ext:cls=&quot;Ext.DomHelper&quot; href=&quot;output/Ext.DomHelper.html&quot;&gt;Ext.DomHelper&lt;/a&gt; config.</description><parameters><parameter name="config" type="Object" usage="required"><description></description></parameter></parameters></method><method name="addField" scope="instance"><description>Adds a dynamically rendered Ext.form field (TextField, ComboBox, etc). Note: the field should not have
been rendered yet. For a field that has already been rendered, use &lt;a ext:cls=&quot;Ext.Toolbar&quot; ext:member=&quot;addElement&quot; href=&quot;output/Ext.Toolbar.html#addElement&quot;&gt;addElement&lt;/a&gt;.</description><parameters><parameter name="field" type="Ext.form.Field" usage="required"><description></description></parameter></parameters></method></methods></class><class type="Ext.Toolbar.Button" superclass="Ext.Button"><description>A button that renders into a toolbar.</description><constructors><constructor scope="instance"><description>Creates a new Button</description><parameters><parameter name="config" type="Object" usage="required"><description>A standard &lt;a ext:cls=&quot;Ext.Button&quot; href=&quot;output/Ext.Button.html&quot;&gt;Ext.Button&lt;/a&gt; config object</description></parameter></parameters></constructor></constructors><properties/><methods><method name="destroy" scope="instance"><description>Removes and destroys this button</description><parameters/></method><method name="show" scope="instance"><description>Shows this button</description><parameters/></method><method name="hide" scope="instance"><description>Hides this button</description><parameters/></method><method name="disable" scope="instance"><description>Disables this item</description><parameters/></method><method name="enable" scope="instance"><description>Enables this item</description><parameters/></method></methods></class><class type="Ext.Toolbar.Item" superclass="Object"><description>The base class that other classes should extend in order to get some basic common toolbar item functionality.</description><constructors><constructor scope="instance"><description>Creates a new Item</description><parameters><parameter name="el" type="HTMLElement" usage="required"><description></description></parameter></parameters></constructor></constructors><properties/><methods><method name="getEl" scope="instance"><description>Get this item's HTML Element</description><parameters/></method><method name="destroy" scope="instance"><description>Removes and destroys this item.</description><parameters/></method><method name="show" scope="instance"><description>Shows this item.</description><parameters/></method><method name="hide" scope="instance"><description>Hides this item.</description><parameters/></method><method name="setVisible" scope="instance"><description>Convenience function for boolean show/hide.</description><parameters><parameter name="visible" type="Boolean" usage="required"><description>true to show/false to hide</description></parameter></parameters></method><method name="focus" scope="instance"><description>Try to focus this item.</description><parameters/></method><method name="disable" scope="instance"><description>Disables this item.</description><parameters/></method><method name="enable" scope="instance"><description>Enables this item.</description><parameters/></method></methods></class><class type="Ext.Toolbar.Separator" superclass="Ext.Toolbar.Item"><description>A simple toolbar separator class</description><constructors><constructor scope="instance"><description>Creates a new Separator</description><parameters/></constructor></constructors><properties/><methods/></class><class type="Ext.Toolbar.Spacer" superclass="Ext.Toolbar.Item"><description>A simple element that adds extra horizontal space to a toolbar.</description><constructors><constructor scope="instance"><description>Creates a new Spacer</description><parameters/></constructor></constructors><properties/><methods/></class><class type="Ext.Toolbar.SplitButton" superclass="Ext.SplitButton"><description>A menu button that renders into a toolbar.</description><constructors><constructor scope="instance"><description>Creates a new SplitButton</description><parameters><parameter name="config" type="Object" usage="required"><description>A standard &lt;a ext:cls=&quot;Ext.SplitButton&quot; href=&quot;output/Ext.SplitButton.html&quot;&gt;Ext.SplitButton&lt;/a&gt; config object</description></parameter></parameters></constructor></constructors><properties/><methods><method name="destroy" scope="instance"><description>Removes and destroys this button</description><parameters/></method><method name="show" scope="instance"><description>Shows this button</description><parameters/></method><method name="hide" scope="instance"><description>Hides this button</description><parameters/></method></methods></class><class type="Ext.Toolbar.TextItem" superclass="Ext.Toolbar.Item"><description>A simple class that renders text directly into a toolbar.</description><constructors><constructor scope="instance"><description>Creates a new TextItem</description><parameters><parameter name="text" type="String" usage="required"><description></description></parameter></parameters></constructor></constructors><properties/><methods/></class><class type="Ext.UpdateManager" superclass="Ext.util.Observable"><description>Provides AJAX-style update for Element object.&lt;br&gt;&lt;br&gt;
Usage:&lt;br&gt;
&lt;pre&gt;&lt;code&gt;// Get it from a Ext.Element object
var el = Ext.get(&quot;foo&quot;);
var mgr = el.getUpdateManager();
mgr.update(&quot;http://myserver.com/index.php&quot;, &quot;param1=1&amp;amp;param2=2&quot;);
...
mgr.formUpdate(&quot;myFormId&quot;, &quot;http://myserver.com/index.php&quot;);
&lt;br&gt;
// or directly (returns the same UpdateManager instance)
var mgr = new Ext.UpdateManager(&quot;myElementId&quot;);
mgr.startAutoRefresh(60, &quot;http://myserver.com/index.php&quot;);
mgr.on(&quot;update&quot;, myFcnNeedsToKnow);
&lt;br&gt;
   // short handed call directly from the element object
   Ext.get(&quot;foo&quot;).load({
        url: &quot;bar.php&quot;,
        scripts:true,
        params: &quot;for=bar&quot;,
        text: &quot;Loading Foo...&quot;
   });&lt;/code&gt;&lt;/pre&gt;</description><constructors><constructor scope="instance"><description>Create new UpdateManager directly.</description><parameters><parameter name="el" type="String/HTMLElement/Ext.Element" usage="required"><description>The element to update</description></parameter><parameter name="forceNew" type="Boolean" usage="optional"><description>(optional) By default the constructor checks to see if the passed element already has an UpdateManager and if it does it returns the same instance. This will skip that check (useful for extending this class).</description></parameter></parameters></constructor></constructors><properties><property name="el" type="Ext.Element" scope="instance" access="read-write"><description>The Element object</description></property><property name="defaultUrl" type="String" scope="instance" access="read-write"><description>Cached url to use for refreshes. Overwritten every time update() is called unless &quot;discardUrl&quot; param is set to true.</description></property><property name="sslBlankUrl" type="String" scope="instance" access="read-write"><description>Blank page URL to use with SSL file uploads (Defaults to Ext.UpdateManager.defaults.sslBlankUrl or &quot;about:blank&quot;).</description></property><property name="disableCaching" type="Boolean" scope="instance" access="read-write"><description>Whether to append unique parameter on get request to disable caching (Defaults to Ext.UpdateManager.defaults.disableCaching or false).</description></property><property name="indicatorText" type="String" scope="instance" access="read-write"><description>Text for loading indicator (Defaults to Ext.UpdateManager.defaults.indicatorText or '&amp;lt;div class=&quot;loading-indicator&quot;&amp;gt;Loading...&amp;lt;/div&amp;gt;').</description></property><property name="showLoadIndicator" type="String" scope="instance" access="read-write"><description>Whether to show indicatorText when loading (Defaults to Ext.UpdateManager.defaults.showLoadIndicator or true).</description></property><property name="timeout" type="Number" scope="instance" access="read-write"><description>Timeout for requests or form posts in seconds (Defaults to Ext.UpdateManager.defaults.timeout or 30 seconds).</description></property><property name="loadScripts" type="Boolean" scope="instance" access="read-write"><description>True to process scripts in the output (Defaults to Ext.UpdateManager.defaults.loadScripts (false)).</description></property><property name="transaction" type="Object" scope="instance" access="read-write"><description>Transaction object of current executing transaction</description></property><property name="refreshDelegate" type="Function" scope="instance" access="read-write"><description>Delegate for refresh() prebound to &quot;this&quot;, use myUpdater.refreshDelegate.createCallback(arg1, arg2) to bind arguments</description></property><property name="updateDelegate" type="Function" scope="instance" access="read-write"><description>Delegate for update() prebound to &quot;this&quot;, use myUpdater.updateDelegate.createCallback(arg1, arg2) to bind arguments</description></property><property name="formUpdateDelegate" type="Function" scope="instance" access="read-write"><description>Delegate for formUpdate() prebound to &quot;this&quot;, use myUpdater.formUpdateDelegate.createCallback(arg1, arg2) to bind arguments</description></property><property name="renderer" type="Object" scope="instance" access="read-write"><description>The renderer for this UpdateManager. Defaults to &lt;a ext:cls=&quot;Ext.UpdateManager.BasicRenderer&quot; href=&quot;output/Ext.UpdateManager.BasicRenderer.html&quot;&gt;Ext.UpdateManager.BasicRenderer&lt;/a&gt;.</description></property></properties><methods><method name="getEl" scope="instance"><description>Get the Element this UpdateManager is bound to</description><parameters/></method><method name="update" scope="instance"><description>Performs an async request, updating this element with the response. If params are specified it uses POST, otherwise it uses GET.</description><parameters><parameter name="url" type="Object/String/Function" usage="required"><description>The url for this request or a function to call to get the url or a config object containing any of the following options:&#13;
&lt;pre&gt;&lt;code&gt;um.update({&lt;br/&gt;
    url: &quot;your-url.php&quot;,&lt;br/&gt;
    params: {param1: &quot;foo&quot;, param2: &quot;bar&quot;}, // or a URL encoded string&lt;br/&gt;
    callback: yourFunction,&lt;br/&gt;
    scope: yourObject, //(optional scope)  &lt;br/&gt;
    discardUrl: false, &lt;br/&gt;
    nocache: false,&lt;br/&gt;
    text: &quot;Loading...&quot;,&lt;br/&gt;
    timeout: 30,&lt;br/&gt;
    scripts: false&lt;br/&gt;
});&lt;/code&gt;&lt;/pre&gt;
The only required property is url. The optional properties nocache, text and scripts
are shorthand for disableCaching, indicatorText and loadScripts and are used to set their associated property on this UpdateManager instance.</description></parameter><parameter name="params" type="String/Object" usage="optional"><description>(optional) The parameters to pass as either a url encoded string &quot;param1=1&amp;amp;param2=2&quot; or an object {param1: 1, param2: 2}</description></parameter><parameter name="callback" type="Function" usage="optional"><description>(optional) Callback when transaction is complete - called with signature (oElement, bSuccess, oResponse)</description></parameter><parameter name="discardUrl" type="Boolean" usage="optional"><description>(optional) By default when you execute an update the defaultUrl is changed to the last used url. If true, it will not store the url.</description></parameter></parameters></method><method name="formUpdate" scope="instance"><description>Performs an async form post, updating this element with the response. If the form has the attribute enctype=&quot;multipart/form-data&quot;, it assumes it's a file upload.
Uses this.sslBlankUrl for SSL file uploads to prevent IE security warning. See YUI docs for more info.</description><parameters><parameter name="form" type="String/HTMLElement" usage="required"><description>The form Id or form element</description></parameter><parameter name="url" type="String" usage="optional"><description>(optional) The url to pass the form to. If omitted the action attribute on the form will be used.</description></parameter><parameter name="reset" type="Boolean" usage="optional"><description>(optional) Whether to try to reset the form after the update</description></parameter><parameter name="callback" type="Function" usage="optional"><description>(optional) Callback when transaction is complete - called with signature (oElement, bSuccess, oResponse)</description></parameter></parameters></method><method name="refresh" scope="instance"><description>Refresh the element with the last used url or defaultUrl. If there is no url, it returns immediately</description><parameters><parameter name="callback" type="Function" usage="optional"><description>(optional) Callback when transaction is complete - called with signature (oElement, bSuccess)</description></parameter></parameters></method><method name="startAutoRefresh" scope="instance"><description>Set this element to auto refresh.</description><parameters><parameter name="interval" type="Number" usage="required"><description>How often to update (in seconds).</description></parameter><parameter name="url" type="String/Function" usage="optional"><description>(optional) The url for this request or a function to call to get the url (Defaults to the last used url)</description></parameter><parameter name="params" type="String/Object" usage="optional"><description>(optional) The parameters to pass as either a url encoded string &quot;&amp;param1=1&amp;param2=2&quot; or as an object {param1: 1, param2: 2}</description></parameter><parameter name="callback" type="Function" usage="optional"><description>(optional) Callback when transaction is complete - called with signature (oElement, bSuccess)</description></parameter><parameter name="refreshNow" type="Boolean" usage="optional"><description>(optional) Whether to execute the refresh now, or wait the interval</description></parameter></parameters></method><method name="stopAutoRefresh" scope="instance"><description>Stop auto refresh on this element.</description><parameters/></method><method name="showLoading" scope="instance"><description>Called to update the element to &quot;Loading&quot; state. Override to perform custom action.</description><parameters/></method><method name="setRenderer" scope="instance"><description>Set the content renderer for this UpdateManager. See &lt;a ext:cls=&quot;Ext.UpdateManager.BasicRenderer&quot; ext:member=&quot;render&quot; href=&quot;output/Ext.UpdateManager.BasicRenderer.html#render&quot;&gt;Ext.UpdateManager.BasicRenderer.render&lt;/a&gt; for more details.</description><parameters><parameter name="renderer" type="Object" usage="required"><description>The object implementing the render() method</description></parameter></parameters></method><method name="setDefaultUrl" scope="instance"><description>Set the defaultUrl used for updates</description><parameters><parameter name="defaultUrl" type="String/Function" usage="required"><description>The url or a function to call to get the url</description></parameter></parameters></method><method name="abort" scope="instance"><description>Aborts the executing transaction</description><parameters/></method><method name="isUpdating" scope="instance"><description>Returns true if an update is in progress</description><parameters/></method><method name="UpdateManager.updateElement" scope="static"><description>&lt;b&gt;Deprecated.&lt;/b&gt; &amp;lt;static&amp;gt; Static convenience method. This method is deprecated in favor of el.load({url:'foo.php', ...}).
Usage:
&lt;pre&gt;&lt;code&gt;Ext.UpdateManager.updateElement(&quot;my-div&quot;, &quot;stuff.php&quot;);&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="el" type="String/HTMLElement/Ext.Element" usage="required"><description>The element to update</description></parameter><parameter name="url" type="String" usage="required"><description>The url</description></parameter><parameter name="params" type="String/Object" usage="optional"><description>(optional) Url encoded param string or an object of name/value pairs</description></parameter><parameter name="options" type="Object" usage="optional"><description>(optional) A config object with any of the UpdateManager properties you want to set - for example: {disableCaching:true, indicatorText: &quot;Loading data...&quot;}</description></parameter></parameters></method></methods></class><class type="Ext.UpdateManager.BasicRenderer" superclass="Object"><description>Default Content renderer. Updates the elements innerHTML with the responseText.</description><properties/><methods><method name="render" scope="instance"><description>This is called when the transaction is completed and it's time to update the element - The BasicRenderer
updates the elements innerHTML with the responseText - To perform a custom render (i.e. XML or JSON processing),
create an object with a &quot;render(el, response)&quot; method and pass it to setRenderer on the UpdateManager.</description><parameters><parameter name="el" type="Ext.Element" usage="required"><description>The element being rendered</description></parameter><parameter name="response" type="Object" usage="required"><description>The YUI Connect response object</description></parameter><parameter name="updateManager" type="UpdateManager" usage="required"><description>The calling update manager</description></parameter><parameter name="callback" type="Function" usage="required"><description>A callback that will need to be called if loadScripts is true on the UpdateManager</description></parameter></parameters></method></methods></class><class type="Ext.UpdateManager.defaults" superclass="Object"><description>The defaults collection enables customizing the default properties of UpdateManager</description><properties><property name="timeout" type="Number" scope="instance" access="read-write"><description>Timeout for requests or form posts in seconds (Defaults 30 seconds).</description></property><property name="loadScripts" type="Boolean" scope="instance" access="read-write"><description>True to process scripts by default (Defaults to false).</description></property><property name="sslBlankUrl" type="String" scope="instance" access="read-write"><description>Blank page URL to use with SSL file uploads (Defaults to &quot;javascript:false&quot;).</description></property><property name="disableCaching" type="Boolean" scope="instance" access="read-write"><description>Whether to append unique parameter on get request to disable caching (Defaults to false).</description></property><property name="showLoadIndicator" type="Boolean" scope="instance" access="read-write"><description>Whether to show indicatorText when loading (Defaults to true).</description></property><property name="indicatorText" type="String" scope="instance" access="read-write"><description>Text for loading indicator (Defaults to '&amp;lt;div class=&quot;loading-indicator&quot;&amp;gt;Loading...&amp;lt;/div&amp;gt;').</description></property></properties><methods/></class><class type="Ext.View" superclass="Ext.util.Observable"><description>Create a &quot;View&quot; for an element based on a data model or UpdateManager and the supplied DomHelper template. 
This class also supports single and multi selection modes. &lt;br&gt;
Create a data model bound view:&#13;
 &lt;pre&gt;&lt;code&gt;var store = new Ext.data.Store(...);

 var view = new Ext.View(&quot;my-element&quot;,
 '&amp;lt;div id=&quot;{0}&quot;&amp;gt;{2} - {1}&amp;lt;/div&amp;gt;', // auto create template
 {
 singleSelect: true,
 selectedClass: &quot;ydataview-selected&quot;,
 store: store
 });

 // listen for node click?
 view.on(&quot;click&quot;, function(vw, index, node, e){
 alert('Node &quot;' + node.id + '&quot; at index: ' + index + &quot; was clicked.&quot;);
 });

 // load XML data
 dataModel.load(&quot;foobar.xml&quot;);&lt;/code&gt;&lt;/pre&gt;&#13;
 For an example of creating a JSON/UpdateManager view, see &lt;a ext:cls=&quot;Ext.JsonView&quot; href=&quot;output/Ext.JsonView.html&quot;&gt;Ext.JsonView&lt;/a&gt;.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Note: The root of your template must be a single node. Table/row implementations may work but are not supported due to
IE&quot;s limited insertion support with tables and Opera&quot;s faulty event bubbling.&lt;/b&gt;</description><constructors><constructor scope="instance"><description>Create a new View</description><parameters><parameter name="container" type="String/HTMLElement/Element" usage="required"><description>The container element where the view is to be rendered.</description></parameter><parameter name="tpl" type="String/DomHelper.Template" usage="required"><description>The rendering template or a string to create a template with</description></parameter><parameter name="config" type="Object" usage="required"><description>The config object</description></parameter></parameters></constructor></constructors><properties><property name="tpl" type="Ext.DomHelper.Template" scope="instance" access="read-write"><description>The template used by this View</description></property><property name="selectedClass" type="Ext.DomHelper.Template" scope="instance" access="read-write"><description>The css class to add to selected nodes</description></property></properties><methods><method name="getEl" scope="instance"><description>Returns the element this view is bound to.</description><parameters/></method><method name="refresh" scope="instance"><description>Refreshes the view.</description><parameters/></method><method name="prepareData" scope="instance"><description>Function to override to reformat the data that is sent to
the template for each node.</description><parameters><parameter name="data" type="Array/Object" usage="required"><description>The raw data (array of colData for a data model bound view or
a JSON object for an UpdateManager bound view).</description></parameter></parameters></method><method name="refreshNode" scope="instance"><description>Refresh an individual node.</description><parameters><parameter name="index" type="Number" usage="required"><description></description></parameter></parameters></method><method name="setStore" scope="instance"><description>Changes the data store this view uses and refresh the view.</description><parameters><parameter name="store" type="Store" usage="required"><description></description></parameter></parameters></method><method name="findItemFromChild" scope="instance"><description>Returns the template node the passed child belongs to or null if it doesn't belong to one.</description><parameters><parameter name="node" type="HTMLElement" usage="required"><description></description></parameter></parameters></method><method name="getSelectionCount" scope="instance"><description>Get the number of selected nodes.</description><parameters/></method><method name="getSelectedNodes" scope="instance"><description>Get the currently selected nodes.</description><parameters/></method><method name="getSelectedIndexes" scope="instance"><description>Get the indexes of the selected nodes.</description><parameters/></method><method name="clearSelections" scope="instance"><description>Clear all selections</description><parameters><parameter name="suppressEvent" type="Boolean" usage="optional"><description>(optional) true to skip firing of the selectionchange event</description></parameter></parameters></method><method name="isSelected" scope="instance"><description>Returns true if the passed node is selected</description><parameters><parameter name="node" type="HTMLElement/Number" usage="required"><description>The node or node index</description></parameter></parameters></method><method name="select" scope="instance"><description>Selects nodes.</description><parameters><parameter name="nodeInfo" type="Array/HTMLElement/String/Number" usage="required"><description>An HTMLElement template node, index of a template node, id of a template node or an array of any of those to select</description></parameter><parameter name="keepExisting" type="Boolean" usage="optional"><description>(optional) true to keep existing selections</description></parameter><parameter name="suppressEvent" type="Boolean" usage="optional"><description>(optional) true to skip firing of the selectionchange vent</description></parameter></parameters></method><method name="getNode" scope="instance"><description>Gets a template node.</description><parameters><parameter name="nodeInfo" type="HTMLElement/String/Number" usage="required"><description>An HTMLElement template node, index of a template node or the id of a template node</description></parameter></parameters></method><method name="getNodes" scope="instance"><description>Gets a range template nodes.</description><parameters><parameter name="startIndex" type="Number" usage="required"><description></description></parameter><parameter name="endIndex" type="Number" usage="required"><description></description></parameter></parameters></method><method name="indexOf" scope="instance"><description>Finds the index of the passed node</description><parameters><parameter name="nodeInfo" type="HTMLElement/String/Number" usage="required"><description>An HTMLElement template node, index of a template node or the id of a template node</description></parameter></parameters></method></methods></class><class type="Ext.data.ArrayReader" superclass="Ext.data.DataReader"><description>Data reader class to create an Array of Ext.data.Record objects from an Array.
Each element of that Array represents a row of data fields. The
fields are pulled into a Record object using as a subscript, the &lt;em&gt;mapping&lt;/em&gt; property
of the field definition if it exists, or the field's ordinal position in the definition.&lt;br&gt;
&lt;p&gt;
Example code:.
&lt;pre&gt;&lt;code&gt;var RecordDef = Ext.data.Record.create([
    {name: 'name', mapping: 1},         // &quot;mapping&quot; only needed if an &quot;id&quot; field is present which
    {name: 'occupation', mapping: 2}    // precludes using the ordinal position as the index.
]);
var myReader = new Ext.data.ArrayReader({
    id: 0                     // The subscript within row Array that provides an ID for the Record (optional)
}, RecordDef);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This would consume an Array like this:
&lt;pre&gt;&lt;code&gt;[ [1, 'Bill', 'Gardener'], [2, 'Ben', 'Horticulturalist'] ]&lt;/code&gt;&lt;/pre&gt;</description><constructors><constructor scope="instance"><description>Create a new JsonReader</description><parameters><parameter name="meta" type="Object" usage="required"><description>Metadata configuration options.</description></parameter><parameter name="recordType" type="Object" usage="required"><description>Either an Array of field definition objects
as specified to &lt;a ext:cls=&quot;Ext.data.Record&quot; ext:member=&quot;create&quot; href=&quot;output/Ext.data.Record.html#create&quot;&gt;Ext.data.Record.create&lt;/a&gt;,
or an &lt;a ext:cls=&quot;Ext.data.Record&quot; href=&quot;output/Ext.data.Record.html&quot;&gt;Ext.data.Record&lt;/a&gt; object
created using &lt;a ext:cls=&quot;Ext.data.Record&quot; ext:member=&quot;create&quot; href=&quot;output/Ext.data.Record.html#create&quot;&gt;Ext.data.Record.create&lt;/a&gt;.</description></parameter></parameters></constructor></constructors><properties/><methods><method name="readRecords" scope="instance"><description>Create a data block containing Ext.data.Records from an XML document.</description><parameters><parameter name="o" type="Object" usage="required"><description>An Array of row objects which represents the dataset.</description></parameter></parameters></method></methods></class><class type="Ext.data.Connection" superclass="Ext.util.Observable"><description>The class encapsulates a connection to the page's originating domain, allowing requests to be made
either to a configured URL, or to a URL specified at request time.&lt;br&gt;&lt;br&gt;
&lt;p&gt;
Requests made by this class are asynchronous, and will return immediately. No data from
the server will be available to the statement immediately following the &lt;a ext:cls=&quot;Ext.data.Connection&quot; ext:member=&quot;request&quot; href=&quot;output/Ext.data.Connection.html#request&quot;&gt;request&lt;/a&gt; call.
To process returned data, use a callback in the request options object, or an event listener.&lt;/p&gt;&lt;br&gt;
&lt;p&gt;
Note: If you are doing a file upload, you will not get a normal response object sent back to
your callback or event handler.  Since the upload is handled via in IFRAME, there is no XMLHttpRequest.
The response object is created using the innerHTML of the IFRAME's document as the responseText
property and, if present, the IFRAME's XML document as the responseXML property.&lt;/p&gt;&lt;br&gt;
This means that a valid XML or HTML document must be returned. If JSON data is required, it is suggested
that it be placed either inside a &amp;lt;textarea&gt; in an HTML document and retrieved from the responseText
using a regex, or inside a CDATA section in an XML document and retrieved from the responseXML using
standard DOM methods.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="config" type="Object" usage="required"><description>a configuration object.</description></parameter></parameters></constructor></constructors><properties/><methods><method name="request" scope="instance"><description>Sends an HTTP request to a remote server.</description><parameters><parameter name="options" type="Object" usage="optional"><description>An object which may contain the following properties:&lt;ul&gt;
&lt;li&gt;&lt;b&gt;url&lt;/b&gt; {String} (Optional) The URL to which to send the request. Defaults to configured URL&lt;/li&gt;
&lt;li&gt;&lt;b&gt;params&lt;/b&gt; {Object/String/Function} (Optional) An object containing properties which are used as parameters to the
request, a url encoded string or a function to call to get either.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;method&lt;/b&gt; {String} (Optional) The HTTP method to use for the request. Defaults to the configured method, or
if no method was configured, &quot;GET&quot; if no parameters are being sent, and &quot;POST&quot; if parameters are being sent.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;callback&lt;/b&gt; {Function} (Optional) The function to be called upon receipt of the HTTP response.
The callback is called regardless of success or failure and is passed the following parameters:&lt;ul&gt;
&lt;li&gt;options {Object} The parameter to the request call.&lt;/li&gt;
&lt;li&gt;success {Boolean} True if the request succeeded.&lt;/li&gt;
&lt;li&gt;response {Object} The XMLHttpRequest object containing the response data.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;success&lt;/b&gt; {Function} (Optional) The function to be called upon success of the request.
The callback is passed the following parameters:&lt;ul&gt;
&lt;li&gt;response {Object} The XMLHttpRequest object containing the response data.&lt;/li&gt;
&lt;li&gt;options {Object} The parameter to the request call.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;failure&lt;/b&gt; {Function} (Optional) The function to be called upon failure of the request.
The callback is passed the following parameters:&lt;ul&gt;
&lt;li&gt;response {Object} The XMLHttpRequest object containing the response data.&lt;/li&gt;
&lt;li&gt;options {Object} The parameter to the request call.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;scope&lt;/b&gt; {Object} (Optional) The scope in which to execute the callbacks: The &quot;this&quot; object
for the callback function. Defaults to the browser window.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;form&lt;/b&gt; {Object/String} (Optional) A form object or id to pull parameters from.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;isUpload&lt;/b&gt; {Boolean} (Optional) True if the form object is a file upload (will usually be automatically detected).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;headers&lt;/b&gt; {Object} (Optional) Request headers to set for the request.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;xmlData&lt;/b&gt; {Object} (Optional) XML document to use for the post. Note: This will be used instead of
params for the post data. Any params will be appended to the URL.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;disableCaching&lt;/b&gt; {Boolean} (Optional) True to add a unique cache-buster param to GET requests.&lt;/li&gt;
&lt;/ul&gt;</description></parameter></parameters></method><method name="isLoading" scope="instance"><description>Determine whether this object has a request outstanding.</description><parameters><parameter name="transactionId" type="Number" usage="optional"><description>(Optional) defaults to the last transaction</description></parameter></parameters></method><method name="abort" scope="instance"><description>Aborts any outstanding request.</description><parameters><parameter name="transactionId" type="Number" usage="optional"><description>(Optional) defaults to the last transaction</description></parameter></parameters></method></methods></class><class type="Ext.data.DataProxy" superclass="Object"><description>This class is an abstract base class for implementations which provide retrieval of
unformatted data objects.&lt;br&gt;
&lt;p&gt;
DataProxy implementations are usually used in conjunction with an implementation of Ext.data.DataReader
(of the appropriate type which knows how to parse the data object) to provide a block of
&lt;a ext:cls=&quot;Ext.data.Records&quot; href=&quot;output/Ext.data.Records.html&quot;&gt;Ext.data.Records&lt;/a&gt; to an &lt;a ext:cls=&quot;Ext.data.Store&quot; href=&quot;output/Ext.data.Store.html&quot;&gt;Ext.data.Store&lt;/a&gt;.&lt;br&gt;
&lt;p&gt;
Custom implementations must implement the load method as described in
&lt;a ext:cls=&quot;Ext.data.HttpProxy&quot; ext:member=&quot;load&quot; href=&quot;output/Ext.data.HttpProxy.html#load&quot;&gt;Ext.data.HttpProxy.load&lt;/a&gt;.</description><properties/><methods/></class><class type="Ext.data.HttpProxy" superclass="Object"><description>An implementation of &lt;a ext:cls=&quot;Ext.data.DataProxy&quot; href=&quot;output/Ext.data.DataProxy.html&quot;&gt;Ext.data.DataProxy&lt;/a&gt; that reads a data object from an &lt;a ext:cls=&quot;Ext.data.Connection&quot; href=&quot;output/Ext.data.Connection.html&quot;&gt;Ext.data.Connection&lt;/a&gt; object
configured to reference a certain URL.&lt;br&gt;&lt;br&gt;
&lt;p&gt;
&lt;em&gt;Note that this class cannot be used to retrieve data from a domain other than the domain
from which the running page was served.&lt;br&gt;&lt;br&gt;
&lt;p&gt;
For cross-domain access to remote data, use an &lt;a ext:cls=&quot;Ext.data.ScriptTagProxy&quot; href=&quot;output/Ext.data.ScriptTagProxy.html&quot;&gt;Ext.data.ScriptTagProxy&lt;/a&gt;.&lt;/em&gt;&lt;br&gt;&lt;br&gt;
&lt;p&gt;
Be aware that to enable the browser to parse an XML document, the server must set
the Content-Type header in the HTTP response to &quot;text/xml&quot;.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="conn" type="Object" usage="required"><description>Connection config options to add to each request (e.g. {url: 'foo.php'} or
an &lt;a ext:cls=&quot;Ext.data.Connection&quot; href=&quot;output/Ext.data.Connection.html&quot;&gt;Ext.data.Connection&lt;/a&gt; object. If a Connection config is passed, the singleton &lt;a ext:cls=&quot;Ext.Ajax&quot; href=&quot;output/Ext.Ajax.html&quot;&gt;Ext.Ajax&lt;/a&gt; object
will be used to make the request.</description></parameter></parameters></constructor></constructors><properties/><methods><method name="getConnection" scope="instance"><description>Return the &lt;a ext:cls=&quot;Ext.data.Connection&quot; href=&quot;output/Ext.data.Connection.html&quot;&gt;Ext.data.Connection&lt;/a&gt; object being used by this Proxy.</description><parameters/></method><method name="load" scope="instance"><description>Load data from the configured &lt;a ext:cls=&quot;Ext.data.Connection&quot; href=&quot;output/Ext.data.Connection.html&quot;&gt;Ext.data.Connection&lt;/a&gt;, read the data object into
a block of Ext.data.Records using the passed &lt;a ext:cls=&quot;Ext.data.DataReader&quot; href=&quot;output/Ext.data.DataReader.html&quot;&gt;Ext.data.DataReader&lt;/a&gt; implementation, and
process that block using the passed callback.</description><parameters><parameter name="params" type="Object" usage="required"><description>An object containing properties which are to be used as HTTP parameters
for the request to the remote server.</description></parameter><parameter name="reader" type="Ext.data.DataReader" usage="required"><description>The Reader object which converts the data
object into a block of Ext.data.Records.</description></parameter><parameter name="callback" type="Function" usage="required"><description>The function into which to pass the block of Ext.data.Records.
The function must be passed &lt;ul&gt;
&lt;li&gt;The Record block object&lt;/li&gt;
&lt;li&gt;The &quot;arg&quot; argument from the load function&lt;/li&gt;
&lt;li&gt;A boolean success indicator&lt;/li&gt;
&lt;/ul&gt;</description></parameter><parameter name="scope" type="Object" usage="required"><description>The scope in which to call the callback</description></parameter><parameter name="arg" type="Object" usage="required"><description>An optional argument which is passed to the callback as its second parameter.</description></parameter></parameters></method></methods></class><class type="Ext.data.JsonReader" superclass="Ext.data.DataReader"><description>Data reader class to create an Array of Ext.data.Record objects from a JSON response
based on mappings in a provided Ext.data.Record constructor.
&lt;p&gt;
Example code:
&lt;pre&gt;&lt;code&gt;var RecordDef = Ext.data.Record.create([
    {name: 'name', mapping: 'name'},     // &quot;mapping&quot; property not needed if it's the same as &quot;name&quot;
    {name: 'occupation'}                 // This field will use &quot;occupation&quot; as the mapping.
]);
var myReader = new Ext.data.JsonReader({
    totalProperty: &quot;results&quot;,    // The property which contains the total dataset size (optional)
    root: &quot;rows&quot;,                // The property which contains an Array of row objects
    id: &quot;id&quot;                     // The property within each row object that provides an ID for the record (optional)
}, RecordDef);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This would consume a JSON file like this:
&lt;pre&gt;&lt;code&gt;{ 'results': 2, 'rows': [
    { 'id': 1, 'name': 'Bill', occupation: 'Gardener' },
    { 'id': 2, 'name': 'Ben', occupation: 'Horticulturalist' } ]
}&lt;/code&gt;&lt;/pre&gt;</description><constructors><constructor scope="instance"><description>Create a new JsonReader</description><parameters><parameter name="meta" type="Object" usage="required"><description>Metadata configuration options</description></parameter><parameter name="recordType" type="Object" usage="required"><description>Either an Array of field definition objects,
or an &lt;a ext:cls=&quot;Ext.data.Record&quot; href=&quot;output/Ext.data.Record.html&quot;&gt;Ext.data.Record&lt;/a&gt; object created using &lt;a ext:cls=&quot;Ext.data.Record&quot; ext:member=&quot;create&quot; href=&quot;output/Ext.data.Record.html#create&quot;&gt;Ext.data.Record.create&lt;/a&gt;.</description></parameter></parameters></constructor></constructors><properties><property name="jsonData" type="Object" scope="instance" access="read-write"><description>After any data loads, the raw JSON data is available for further custom processing.</description></property></properties><methods><method name="read" scope="instance"><description>This method is only used by a DataProxy which has retrieved data from a remote server.</description><parameters><parameter name="response" type="Object" usage="required"><description>The XHR object which contains the JSON data in its responseText.</description></parameter></parameters></method><method name="readRecords" scope="instance"><description>Create a data block containing Ext.data.Records from an XML document.</description><parameters><parameter name="o" type="Object" usage="required"><description>An object which contains an Array of row objects in the property specified
in the config as 'root, and optionally a property, specified in the config as 'totalProperty'
which contains the total size of the dataset.</description></parameter></parameters></method></methods></class><class type="Ext.data.JsonStore" superclass="Ext.data.Store"><description>Small helper class to make creating Stores for JSON data easier. &lt;br/&gt;&#13;
&lt;pre&gt;&lt;code&gt;var store = new Ext.data.JsonStore({
    url: 'get-images.php',
    root: 'images',
    fields: ['name', 'url', {name:'size', type: 'float'}, {name:'lastmod', type:'date'}]
});&lt;/code&gt;&lt;/pre&gt;
&lt;b&gt;Note: Although they are not listed, this class inherits all of the config options of Store,
JsonReader and HttpProxy (unless inline data is provided).&lt;/b&gt;</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="config" type="Object" usage="required"><description></description></parameter></parameters></constructor></constructors><properties/><methods/></class><class type="Ext.data.MemoryProxy" superclass="Object"><description>An implementation of Ext.data.DataProxy that simply passes the data specified in its constructor
to the Reader when its load method is called.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="data" type="Object" usage="required"><description>The data object which the Reader uses to construct a block of Ext.data.Records.</description></parameter></parameters></constructor></constructors><properties/><methods><method name="load" scope="instance"><description>Load data from the requested source (in this case an in-memory
data object passed to the constructor), read the data object into
a block of Ext.data.Records using the passed Ext.data.DataReader implementation, and
process that block using the passed callback.</description><parameters><parameter name="params" type="Object" usage="required"><description>This parameter is not used by the MemoryProxy class.</description></parameter><parameter name="reader" type="Ext.data.DataReader)" usage="required"><description>The Reader object which converts the data
object into a block of Ext.data.Records.</description></parameter><parameter name="callback" type="Function" usage="required"><description>The function into which to pass the block of Ext.data.records.
The function must be passed &lt;ul&gt;
&lt;li&gt;The Record block object&lt;/li&gt;
&lt;li&gt;The &quot;arg&quot; argument from the load function&lt;/li&gt;
&lt;li&gt;A boolean success indicator&lt;/li&gt;
&lt;/ul&gt;</description></parameter><parameter name="scope" type="Object" usage="required"><description>The scope in which to call the callback</description></parameter><parameter name="arg" type="Object" usage="required"><description>An optional argument which is passed to the callback as its second parameter.</description></parameter></parameters></method></methods></class><class type="Ext.data.Node" superclass="Ext.util.Observable"><description></description><constructors><constructor scope="instance"><description></description><parameters><parameter name="attributes" type="Object" usage="required"><description>The attributes/config for the node</description></parameter></parameters></constructor></constructors><properties><property name="attributes" type="Object" scope="instance" access="read-write"><description>The attributes supplied for the node. You can use this property to access any custom attributes you supplied.</description></property><property name="id" type="String" scope="instance" access="read-write"><description>The node id.</description></property><property name="childNodes" type="Array" scope="instance" access="read-write"><description>All child nodes of this node.</description></property><property name="parentNode" type="Node" scope="instance" access="read-write"><description>The parent node for this node.</description></property><property name="firstChild" type="Node" scope="instance" access="read-write"><description>The first direct child node of this node, or null if this node has no child nodes.</description></property><property name="lastChild" type="Node" scope="instance" access="read-write"><description>The last direct child node of this node, or null if this node has no child nodes.</description></property><property name="previousSibling" type="Node" scope="instance" access="read-write"><description>The node immediately preceding this node in the tree, or null if there is no sibling node.</description></property><property name="nextSibling" type="Node" scope="instance" access="read-write"><description>The node immediately following this node in the tree, or null if there is no sibling node.</description></property></properties><methods><method name="isLeaf" scope="instance"><description>Returns true if this node is a leaf</description><parameters/></method><method name="isLast" scope="instance"><description>Returns true if this node is the last child of its parent</description><parameters/></method><method name="isFirst" scope="instance"><description>Returns true if this node is the first child of its parent</description><parameters/></method><method name="appendChild" scope="instance"><description>Insert node(s) as the last child node of this node.</description><parameters><parameter name="node" type="Node/Array" usage="required"><description>The node or Array of nodes to append</description></parameter></parameters></method><method name="removeChild" scope="instance"><description>Removes a child node from this node.</description><parameters><parameter name="node" type="Node" usage="required"><description>The node to remove</description></parameter></parameters></method><method name="insertBefore" scope="instance"><description>Inserts the first node before the second node in this nodes childNodes collection.</description><parameters><parameter name="node" type="Node" usage="required"><description>The node to insert</description></parameter><parameter name="refNode" type="Node" usage="required"><description>The node to insert before (if null the node is appended)</description></parameter></parameters></method><method name="item" scope="instance"><description>Returns the child node at the specified index.</description><parameters><parameter name="index" type="Number" usage="required"><description></description></parameter></parameters></method><method name="replaceChild" scope="instance"><description>Replaces one child node in this node with another.</description><parameters><parameter name="newChild" type="Node" usage="required"><description>The replacement node</description></parameter><parameter name="oldChild" type="Node" usage="required"><description>The node to replace</description></parameter></parameters></method><method name="indexOf" scope="instance"><description>Returns the index of a child node</description><parameters><parameter name="node" type="Node" usage="required"><description></description></parameter></parameters></method><method name="getOwnerTree" scope="instance"><description>Returns the tree this node is in.</description><parameters/></method><method name="getDepth" scope="instance"><description>Returns depth of this node (the root node has a depth of 0)</description><parameters/></method><method name="getPath" scope="instance"><description>Returns the path for this node. The path can be used to expand or select this node programmatically.</description><parameters><parameter name="attr" type="String" usage="optional"><description>(optional) The attr to use for the path (defaults to the node's id)</description></parameter></parameters></method><method name="bubble" scope="instance"><description>Bubbles up the tree from this node, calling the specified function with each node. The scope (&lt;i&gt;this&lt;/i&gt;) of
function call will be the scope provided or the current node. The arguments to the function
will be the args provided or the current node. If the function returns false at any point,
the bubble is stopped.</description><parameters><parameter name="fn" type="Function" usage="required"><description>The function to call</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope of the function (defaults to current node)</description></parameter><parameter name="args" type="Array" usage="optional"><description>(optional) The args to call the function with (default to passing the current node)</description></parameter></parameters></method><method name="cascade" scope="instance"><description>Cascades down the tree from this node, calling the specified function with each node. The scope (&lt;i&gt;this&lt;/i&gt;) of
function call will be the scope provided or the current node. The arguments to the function
will be the args provided or the current node. If the function returns false at any point,
the cascade is stopped on that branch.</description><parameters><parameter name="fn" type="Function" usage="required"><description>The function to call</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope of the function (defaults to current node)</description></parameter><parameter name="args" type="Array" usage="optional"><description>(optional) The args to call the function with (default to passing the current node)</description></parameter></parameters></method><method name="eachChild" scope="instance"><description>Interates the child nodes of this node, calling the specified function with each node. The scope (&lt;i&gt;this&lt;/i&gt;) of
function call will be the scope provided or the current node. The arguments to the function
will be the args provided or the current node. If the function returns false at any point,
the iteration stops.</description><parameters><parameter name="fn" type="Function" usage="required"><description>The function to call</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope of the function (defaults to current node)</description></parameter><parameter name="args" type="Array" usage="optional"><description>(optional) The args to call the function with (default to passing the current node)</description></parameter></parameters></method><method name="findChild" scope="instance"><description>Finds the first child that has the attribute with the specified value.</description><parameters><parameter name="attribute" type="String" usage="required"><description>The attribute name</description></parameter><parameter name="value" type="Mixed" usage="required"><description>The value to search for</description></parameter></parameters></method><method name="findChildBy" scope="instance"><description>Finds the first child by a custom function. The child matches if the function passed
returns true.</description><parameters><parameter name="fn" type="Function" usage="required"><description></description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional)</description></parameter></parameters></method><method name="sort" scope="instance"><description>Sorts this nodes children using the supplied sort function</description><parameters><parameter name="fn" type="Function" usage="required"><description></description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional)</description></parameter></parameters></method><method name="contains" scope="instance"><description>Returns true if this node is an ancestor (at any point) of the passed node.</description><parameters><parameter name="node" type="Node" usage="required"><description></description></parameter></parameters></method><method name="isAncestor" scope="instance"><description>Returns true if the passed node is an ancestor (at any point) of this node.</description><parameters><parameter name="node" type="Node" usage="required"><description></description></parameter></parameters></method></methods></class><class type="Ext.data.Record" superclass="Object"><description>Instances of this class encapsulate both record &lt;em&gt;definition&lt;/em&gt; information, and record
&lt;em&gt;value&lt;/em&gt; information for use in &lt;a ext:cls=&quot;Ext.data.Store&quot; href=&quot;output/Ext.data.Store.html&quot;&gt;Ext.data.Store&lt;/a&gt; objects, or any code which needs
to access Records cached in an &lt;a ext:cls=&quot;Ext.data.Store&quot; href=&quot;output/Ext.data.Store.html&quot;&gt;Ext.data.Store&lt;/a&gt; object.&lt;br&gt;
&lt;p&gt;
Constructors for this class are generated by passing an Array of field definition objects to &lt;a ext:cls=&quot;Ext.data.Record&quot; ext:member=&quot;create&quot; href=&quot;output/Ext.data.Record.html#create&quot;&gt;create&lt;/a&gt;.
Instances are usually only created by &lt;a ext:cls=&quot;Ext.data.Reader&quot; href=&quot;output/Ext.data.Reader.html&quot;&gt;Ext.data.Reader&lt;/a&gt; implementations when processing unformatted data
objects.&lt;br&gt;
&lt;p&gt;
Record objects generated by this constructor inherit all the methods of Ext.data.Record listed below.</description><constructors><constructor scope="instance"><description>This constructor should not be used to create Record objects. Instead, use the constructor generated by
&lt;a ext:cls=&quot;Ext.data.Record&quot; ext:member=&quot;create&quot; href=&quot;output/Ext.data.Record.html#create&quot;&gt;create&lt;/a&gt;. The parameters are the same.</description><parameters><parameter name="data" type="Array" usage="required"><description>An associative Array of data values keyed by the field name.</description></parameter><parameter name="id" type="Object" usage="optional"><description>(Optional) The id of the record. This id should be unique, and is used by the
&lt;a ext:cls=&quot;Ext.data.Store&quot; href=&quot;output/Ext.data.Store.html&quot;&gt;Ext.data.Store&lt;/a&gt; object which owns the Record to index its collection of Records. If
not specified an integer id is generated.</description></parameter></parameters></constructor></constructors><properties><property name="dirty" type="Boolean" scope="instance" access="read-write"><description>Readonly flag - true if this record has been modified.</description></property></properties><methods><method name="create" scope="static"><description>&amp;lt;static&amp;gt; Generate a constructor for a specific record layout.</description><parameters><parameter name="o" type="Array" usage="optional"><description>An Array of field definition objects which specify field names, and optionally,
data types, and a mapping for an &lt;a ext:cls=&quot;Ext.data.Reader&quot; href=&quot;output/Ext.data.Reader.html&quot;&gt;Ext.data.Reader&lt;/a&gt; to extract the field's value from a data object.
Each field definition object may contain the following properties: &lt;ul&gt;
&lt;li&gt;&lt;b&gt;name&lt;/b&gt; : String&lt;p style=&quot;margin-left:1em&quot;&gt;The name by which the field is referenced within the Record. This is referenced by,
for example the &lt;em&gt;dataIndex&lt;/em&gt; property in column definition objects passed to &lt;a ext:cls=&quot;Ext.grid.ColumnModel&quot; href=&quot;output/Ext.grid.ColumnModel.html&quot;&gt;Ext.grid.ColumnModel&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;mapping&lt;/b&gt; : String&lt;p style=&quot;margin-left:1em&quot;&gt;(Optional) A path specification for use by the &lt;a ext:cls=&quot;Ext.data.Reader&quot; href=&quot;output/Ext.data.Reader.html&quot;&gt;Ext.data.Reader&lt;/a&gt; implementation
that is creating the Record to access the data value from the data object. If an &lt;a ext:cls=&quot;Ext.data.JsonReader&quot; href=&quot;output/Ext.data.JsonReader.html&quot;&gt;Ext.data.JsonReader&lt;/a&gt;
is being used, then this is a string containing the javascript expression to reference the data relative to 
the record item's root. If an &lt;a ext:cls=&quot;Ext.data.XmlReader&quot; href=&quot;output/Ext.data.XmlReader.html&quot;&gt;Ext.data.XmlReader&lt;/a&gt; is being used, this is an &lt;a ext:cls=&quot;Ext.DomQuery&quot; href=&quot;output/Ext.DomQuery.html&quot;&gt;Ext.DomQuery&lt;/a&gt; path
to the data item relative to the record element. If the mapping expression is the same as the field name,
this may be omitted.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;type&lt;/b&gt; : String&lt;p style=&quot;margin-left:1em&quot;&gt;(Optional) The data type for conversion to displayable value. Possible values are
&lt;ul&gt;&lt;li&gt;auto (Default, implies no conversion)&lt;/li&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;int&lt;/li&gt;
&lt;li&gt;float&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;date&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;sortType&lt;/b&gt; : Mixed&lt;p style=&quot;margin-left:1em&quot;&gt;(Optional) A member of &lt;a ext:cls=&quot;Ext.data.SortTypes&quot; href=&quot;output/Ext.data.SortTypes.html&quot;&gt;Ext.data.SortTypes&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;sortDir&lt;/b&gt; : String&lt;p style=&quot;margin-left:1em&quot;&gt;(Optional) Initial direction to sort. &quot;ASC&quot; or &quot;DESC&quot;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;convert&lt;/b&gt; : Function&lt;p style=&quot;margin-left:1em&quot;&gt;(Optional) A function which converts the value provided
by the Reader into an object that will be stored in the Record. It is passed the
following parameters:&lt;ul&gt;
&lt;li&gt;&lt;b&gt;v&lt;/b&gt; : Mixed&lt;p style=&quot;margin-left:1em&quot;&gt;The data value as read by the Reader.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;dateFormat&lt;/b&gt; : String&lt;p style=&quot;margin-left:1em&quot;&gt;(Optional) A format String for the {@link Date#Date.parseDate} function.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;usage:&lt;br&gt;&lt;pre&gt;&lt;code&gt;var TopicRecord = Ext.data.Record.create(
    {name: 'title', mapping: 'topic_title'},
    {name: 'author', mapping: 'username'},
    {name: 'totalPosts', mapping: 'topic_replies', type: 'int'},
    {name: 'lastPost', mapping: 'post_time', type: 'date'},
    {name: 'lastPoster', mapping: 'user2'},
    {name: 'excerpt', mapping: 'post_text'}
);

var myNewRecord = new TopicRecord({
    title: 'Do my job please',
    author: 'noobie',
    totalPosts: 1,
    lastPost: new Date(),
    lastPoster: 'Animal',
    excerpt: 'No way dude!'
});
myStore.add(myNewRecord);&lt;/code&gt;&lt;/pre&gt;</description></parameter></parameters></method><method name="set" scope="instance"><description>Set the named field to the specified value.</description><parameters><parameter name="name" type="String" usage="required"><description>The name of the field to set.</description></parameter><parameter name="value" type="Object" usage="required"><description>The value to set the field to.</description></parameter></parameters></method><method name="get" scope="instance"><description>Get the value of the named field.</description><parameters><parameter name="name" type="String" usage="required"><description>The name of the field to get the value of.</description></parameter></parameters></method><method name="reject" scope="instance"><description>Usually called by the &lt;a ext:cls=&quot;Ext.data.Store&quot; href=&quot;output/Ext.data.Store.html&quot;&gt;Ext.data.Store&lt;/a&gt; which owns the Record.
Rejects all changes made to the Record since either creation, or the last commit operation.
Modified fields are reverted to their original values.
&lt;p&gt;
Developers should subscribe to the &lt;a ext:cls=&quot;Ext.data.Store&quot; ext:member=&quot;update&quot; href=&quot;output/Ext.data.Store.html#update&quot;&gt;Ext.data.Store.update&lt;/a&gt; event to have their code notified
of reject operations.</description><parameters/></method><method name="commit" scope="instance"><description>Usually called by the &lt;a ext:cls=&quot;Ext.data.Store&quot; href=&quot;output/Ext.data.Store.html&quot;&gt;Ext.data.Store&lt;/a&gt; which owns the Record.
Commits all changes made to the Record since either creation, or the last commit operation.
&lt;p&gt;
Developers should subscribe to the &lt;a ext:cls=&quot;Ext.data.Store&quot; ext:member=&quot;update&quot; href=&quot;output/Ext.data.Store.html#update&quot;&gt;Ext.data.Store.update&lt;/a&gt; event to have their code notified
of commit operations.</description><parameters/></method><method name="copy" scope="instance"><description>Creates a copy of this record.</description><parameters><parameter name="id" type="String" usage="optional"><description>(optional) A new record id if you don't want to use this record's id</description></parameter></parameters></method></methods></class><class type="Ext.data.ScriptTagProxy" superclass="Object"><description>An implementation of Ext.data.DataProxy that reads a data object from a URL which may be in a domain
other than the originating domain of the running page.&lt;br&gt;&lt;br&gt;
&lt;p&gt;
&lt;em&gt;Note that if you are retrieving data from a page that is in a domain that is NOT the same as the originating domain
of the running page, you must use this class, rather than DataProxy.&lt;/em&gt;&lt;br&gt;&lt;br&gt;
&lt;p&gt;
The content passed back from a server resource requested by a ScriptTagProxy is executable JavaScript
source code that is used as the source inside a &amp;lt;script&gt; tag.&lt;br&gt;&lt;br&gt;
&lt;p&gt;
In order for the browser to process the returned data, the server must wrap the data object
with a call to a callback function, the name of which is passed as a parameter by the ScriptTagProxy.
Below is a Java example for a servlet which returns data for either a ScriptTagProxy, or an HttpProxy
depending on whether the callback name was passed:
&lt;p&gt;
&lt;pre&gt;&lt;code&gt;&#13;
boolean scriptTag = false;&#13;
String cb = request.getParameter(&quot;callback&quot;);&#13;
if (cb != null) {&#13;
    scriptTag = true;&#13;
    response.setContentType(&quot;text/javascript&quot;);&#13;
} else {&#13;
    response.setContentType(&quot;application/x-json&quot;);&#13;
}&#13;
Writer out = response.getWriter();&#13;
if (scriptTag) {&#13;
    out.write(cb + &quot;(&quot;);&#13;
}&#13;
out.print(dataBlock.toJsonString());&#13;
if (scriptTag) {&#13;
    out.write(&quot;);&quot;);&#13;
}&lt;/pre&gt;&lt;/code&gt;</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="config" type="Object" usage="required"><description>A configuration object.</description></parameter></parameters></constructor></constructors><properties/><methods><method name="load" scope="instance"><description>Load data from the configured URL, read the data object into
a block of Ext.data.Records using the passed Ext.data.DataReader implementation, and
process that block using the passed callback.</description><parameters><parameter name="params" type="Object" usage="required"><description>An object containing properties which are to be used as HTTP parameters
for the request to the remote server.</description></parameter><parameter name="reader" type="Ext.data.DataReader" usage="required"><description>The Reader object which converts the data
object into a block of Ext.data.Records.</description></parameter><parameter name="callback" type="Function" usage="required"><description>The function into which to pass the block of Ext.data.Records.
The function must be passed &lt;ul&gt;
&lt;li&gt;The Record block object&lt;/li&gt;
&lt;li&gt;The &quot;arg&quot; argument from the load function&lt;/li&gt;
&lt;li&gt;A boolean success indicator&lt;/li&gt;
&lt;/ul&gt;</description></parameter><parameter name="scope" type="Object" usage="required"><description>The scope in which to call the callback</description></parameter><parameter name="arg" type="Object" usage="required"><description>An optional argument which is passed to the callback as its second parameter.</description></parameter></parameters></method><method name="abort" scope="instance"><description>Abort the current server request.</description><parameters/></method></methods></class><class type="Ext.data.SimpleStore" superclass="Ext.data.Store"><description>Small helper class to make creating Stores from Array data easier.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="config" type="Object" usage="required"><description></description></parameter></parameters></constructor></constructors><properties/><methods/></class><class type="Ext.data.SortTypes" superclass="Object"><description>&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description><properties><property name="stripTagsRE" type="RegExp" scope="instance" access="read-write"><description>The regular expression used to strip tags</description></property></properties><methods><method name="none" scope="instance"><description>Default sort that does nothing</description><parameters><parameter name="s" type="Mixed" usage="required"><description>The value being converted</description></parameter></parameters></method><method name="asText" scope="instance"><description>Strips all HTML tags to sort on text only</description><parameters><parameter name="s" type="Mixed" usage="required"><description>The value being converted</description></parameter></parameters></method><method name="asUCText" scope="instance"><description>Strips all HTML tags to sort on text only - Case insensitive</description><parameters><parameter name="s" type="Mixed" usage="required"><description>The value being converted</description></parameter></parameters></method><method name="asUCString" scope="instance"><description>Case insensitive string</description><parameters><parameter name="s" type="Mixed" usage="required"><description>The value being converted</description></parameter></parameters></method><method name="asDate" scope="instance"><description>Date sorting</description><parameters><parameter name="s" type="Mixed" usage="required"><description>The value being converted</description></parameter></parameters></method><method name="asFloat" scope="instance"><description>Float sorting</description><parameters><parameter name="s" type="Mixed" usage="required"><description>The value being converted</description></parameter></parameters></method><method name="asInt" scope="instance"><description>Integer sorting</description><parameters><parameter name="s" type="Mixed" usage="required"><description>The value being converted</description></parameter></parameters></method></methods></class><class type="Ext.data.Store" superclass="Ext.util.Observable"><description>The Store class encapsulates a client side cache of &lt;a ext:cls=&quot;Ext.data.Record&quot; href=&quot;output/Ext.data.Record.html&quot;&gt;Ext.data.Record&lt;/a&gt; objects which provide input data
for widgets such as the Ext.grid.Grid, or the Ext.form.ComboBox.&lt;br&gt;
&lt;p&gt;
A Store object uses an implementation of &lt;a ext:cls=&quot;Ext.data.DataProxy&quot; href=&quot;output/Ext.data.DataProxy.html&quot;&gt;Ext.data.DataProxy&lt;/a&gt; to access a data object unless you call loadData() directly and pass in your data. The Store object
has no knowledge of the format of the data returned by the Proxy.&lt;br&gt;
&lt;p&gt;
A Store object uses its configured implementation of &lt;a ext:cls=&quot;Ext.data.DataReader&quot; href=&quot;output/Ext.data.DataReader.html&quot;&gt;Ext.data.DataReader&lt;/a&gt; to create &lt;a ext:cls=&quot;Ext.data.Record&quot; href=&quot;output/Ext.data.Record.html&quot;&gt;Ext.data.Record&lt;/a&gt;
instances from the data object. These records are cached and made available through accessor functions.</description><constructors><constructor scope="instance"><description>Creates a new Store.</description><parameters><parameter name="config" type="Object" usage="required"><description>A config object containing the objects needed for the Store to access data,
and read the data into Records.</description></parameter></parameters></constructor></constructors><properties/><methods><method name="add" scope="instance"><description>Add Records to the Store and fires the add event.</description><parameters><parameter name="records" type="Ext.data.Record[]" usage="required"><description>An Array of Ext.data.Record objects to add to the cache.</description></parameter></parameters></method><method name="remove" scope="instance"><description>Remove a Record from the Store and fires the remove event.</description><parameters><parameter name="record" type="Ext.data.Record" usage="required"><description>Th Ext.data.Record object to remove from the cache.</description></parameter></parameters></method><method name="removeAll" scope="instance"><description>Remove all Records from the Store and fires the clear event.</description><parameters/></method><method name="insert" scope="instance"><description>Inserts Records to the Store at the given index and fires the add event.</description><parameters><parameter name="index" type="Number" usage="required"><description>The start index at which to insert the passed Records.</description></parameter><parameter name="records" type="Ext.data.Record[]" usage="required"><description>An Array of Ext.data.Record objects to add to the cache.</description></parameter></parameters></method><method name="indexOf" scope="instance"><description>Get the index within the cache of the passed Record.</description><parameters><parameter name="record" type="Ext.data.Record" usage="required"><description>The Ext.data.Record object to to find.</description></parameter></parameters></method><method name="indexOfId" scope="instance"><description>Get the index within the cache of the Record with the passed id.</description><parameters><parameter name="id" type="String" usage="required"><description>The id of the Record to find.</description></parameter></parameters></method><method name="getById" scope="instance"><description>Get the Record with the specified id.</description><parameters><parameter name="id" type="String" usage="required"><description>The id of the Record to find.</description></parameter></parameters></method><method name="getAt" scope="instance"><description>Get the Record at the specified index.</description><parameters><parameter name="index" type="Number" usage="required"><description>The index of the Record to find.</description></parameter></parameters></method><method name="getRange" scope="instance"><description>Returns a range of Records between specified indices.</description><parameters><parameter name="startIndex" type="Number" usage="optional"><description>(optional) The starting index (defaults to 0)</description></parameter><parameter name="endIndex" type="Number" usage="optional"><description>(optional) The ending index (defaults to the last Record in the Store)</description></parameter></parameters></method><method name="load" scope="instance"><description>Loads the Record cache from the configured Proxy using the configured Reader.
&lt;p&gt;
If using remote paging, then the first load call must specify the &lt;em&gt;start&lt;/em&gt;
and &lt;em&gt;limit&lt;/em&gt; properties in the options.params property to establish the initial
position within the dataset, and the number of Records to cache on each read from the Proxy.
&lt;p&gt;
&lt;strong&gt;It is important to note that for remote data sources, loading is asynchronous,
and this call will return before the new data has been loaded. Perform any post-processing
in a callback function, or in a &quot;load&quot; event handler.&lt;/strong&gt;
&lt;p&gt;</description><parameters><parameter name="options" type="Object" usage="required"><description>An object containing properties which control loading options:&lt;ul&gt;
&lt;li&gt;params {Object} An object containing properties to pass as HTTP parameters to a remote data source.&lt;/li&gt;
&lt;li&gt;callback {Function} A function to be called after the Records have been loaded. The callback is
passed the following arguments:&lt;ul&gt;
&lt;li&gt;r : Ext.data.Record[]&lt;/li&gt;
&lt;li&gt;options: Options object from the load call&lt;/li&gt;
&lt;li&gt;success: Boolean success indicator&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;scope {Object} Scope with which to call the callback (defaults to the Store object)&lt;/li&gt;
&lt;li&gt;add {Boolean} indicator to append loaded records rather than replace the current cache.&lt;/li&gt;
&lt;/ul&gt;</description></parameter></parameters></method><method name="reload" scope="instance"><description>Reloads the Record cache from the configured Proxy using the configured Reader and
the options from the last load operation performed.</description><parameters><parameter name="options" type="Object" usage="optional"><description>(optional) An object containing properties which may override the options
used in the last load operation. See &lt;a ext:cls=&quot;Ext.data.Store&quot; ext:member=&quot;load&quot; href=&quot;output/Ext.data.Store.html#load&quot;&gt;load&lt;/a&gt; for details (defaults to null, in which case
the most recently used options are reused).</description></parameter></parameters></method><method name="loadData" scope="instance"><description>Loads data from a passed data block. A Reader which understands the format of the data
must have been configured in the constructor.</description><parameters><parameter name="data" type="Object" usage="required"><description>The data block from which to read the Records. The format of the data expected
is dependent on the type of Reader that is configured and should correspond to that Reader's readRecords parameter.</description></parameter><parameter name="append" type="Boolean" usage="optional"><description>(Optional) True to append the new Records rather than replace the existing cache.</description></parameter></parameters></method><method name="getCount" scope="instance"><description>Gets the number of cached records.
&lt;p&gt;
&lt;em&gt;If using paging, this may not be the total size of the dataset. If the data object
used by the Reader contains the dataset size, then the getTotalCount() function returns
the data set size&lt;/em&gt;</description><parameters/></method><method name="getTotalCount" scope="instance"><description>Gets the total number of records in the dataset.
&lt;p&gt;
&lt;em&gt;If using paging, for this to be accurate, the data object used by the Reader must contain
the dataset size&lt;/em&gt;</description><parameters/></method><method name="getSortState" scope="instance"><description>Returns the sort state of the Store as an object with two properties:
&lt;pre&gt;&lt;code&gt;field {String} The name of the field by which the Records are sorted
 direction {String} The sort order, &quot;ASC&quot; or &quot;DESC&quot;&lt;/code&gt;&lt;/pre&gt;</description><parameters/></method><method name="setDefaultSort" scope="instance"><description>Sets the default sort column and order to be used by the next load operation.</description><parameters><parameter name="fieldName" type="String" usage="required"><description>The name of the field to sort by.</description></parameter><parameter name="dir" type="String" usage="optional"><description>(optional) The sort order, &quot;ASC&quot; or &quot;DESC&quot; (defaults to &quot;ASC&quot;)</description></parameter></parameters></method><method name="sort" scope="instance"><description>Sort the Records.
If remote sorting is used, the sort is performed on the server, and the cache is
reloaded. If local sorting is used, the cache is sorted internally.</description><parameters><parameter name="fieldName" type="String" usage="required"><description>The name of the field to sort by.</description></parameter><parameter name="dir" type="String" usage="optional"><description>(optional) The sort order, &quot;ASC&quot; or &quot;DESC&quot; (defaults to &quot;ASC&quot;)</description></parameter></parameters></method><method name="each" scope="instance"><description>Calls the specified function for each of the Records in the cache.</description><parameters><parameter name="fn" type="Function" usage="required"><description>The function to call. The Record is passed as the first parameter.
Returning &lt;em&gt;false&lt;/em&gt; aborts and exits the iteration.</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope in which to call the function (defaults to the Record).</description></parameter></parameters></method><method name="getModifiedRecords" scope="instance"><description>Get all records modified since the last load, or since the last commit.</description><parameters/></method><method name="sum" scope="instance"><description>Sums the value of &lt;i&gt;property&lt;/i&gt; for each record between start and end and returns the result.</description><parameters><parameter name="property" type="String" usage="required"><description>A field on your records</description></parameter><parameter name="start" type="Number" usage="required"><description>The record index to start at (defaults to 0)</description></parameter><parameter name="end" type="Number" usage="required"><description>The last record index to include (defaults to length - 1)</description></parameter></parameters></method><method name="filter" scope="instance"><description>Filter the records by a specified property.</description><parameters><parameter name="field" type="String" usage="required"><description>A field on your records</description></parameter><parameter name="value" type="String/RegExp" usage="required"><description>Either a string that the field
should start with or a RegExp to test against the field</description></parameter><parameter name="anyMatch" type="Boolean" usage="required"><description>True to match any part not just the beginning</description></parameter></parameters></method><method name="filterBy" scope="instance"><description>Filter by a function. The specified function will be called with each
record in this data source. If the function returns true the record is included,
otherwise it is filtered.</description><parameters><parameter name="fn" type="Function" usage="required"><description>The function to be called, it will receive 2 args (record, id)</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope of the function (defaults to this)</description></parameter></parameters></method><method name="query" scope="instance"><description>Query the records by a specified property.</description><parameters><parameter name="field" type="String" usage="required"><description>A field on your records</description></parameter><parameter name="value" type="String/RegExp" usage="required"><description>Either a string that the field
should start with or a RegExp to test against the field</description></parameter><parameter name="anyMatch" type="Boolean" usage="required"><description>True to match any part not just the beginning</description></parameter></parameters></method><method name="queryBy" scope="instance"><description>Query by a function. The specified function will be called with each
record in this data source. If the function returns true the record is included
in the results.</description><parameters><parameter name="fn" type="Function" usage="required"><description>The function to be called, it will receive 2 args (record, id)</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope of the function (defaults to this)</description></parameter></parameters></method><method name="collect" scope="instance"><description>Collects unique values for a particular dataIndex from this store.</description><parameters><parameter name="dataIndex" type="String" usage="required"><description>The property to collect</description></parameter><parameter name="allowNull" type="Boolean" usage="optional"><description>(optional) Pass true to allow null, undefined or empty string values</description></parameter><parameter name="bypassFilter" type="Boolean" usage="optional"><description>(optional) Pass true to collect from all records, even ones which are filtered</description></parameter></parameters></method><method name="clearFilter" scope="instance"><description>Revert to a view of the Record cache with no filtering applied.</description><parameters><parameter name="suppressEvent" type="Boolean" usage="required"><description>If true the filter is cleared silently without notifying listeners</description></parameter></parameters></method><method name="commitChanges" scope="instance"><description>Commit all Records with outstanding changes. To handle updates for changes, subscribe to the
Store's &quot;update&quot; event, and perform updating when the third parameter is Ext.data.Record.COMMIT.</description><parameters/></method><method name="rejectChanges" scope="instance"><description>Cancel outstanding changes on all changed records.</description><parameters/></method></methods></class><class type="Ext.data.Tree" superclass="Ext.util.Observable"><description>Represents a tree data structure and bubbles all the events for its nodes. The nodes
in the tree have most standard DOM functionality.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="root" type="Node" usage="optional"><description>(optional) The root node</description></parameter></parameters></constructor></constructors><properties><property name="root" type="Node" scope="instance" access="read-write"><description>The root node for this tree</description></property></properties><methods><method name="getRootNode" scope="instance"><description>Returns the root node for this tree.</description><parameters/></method><method name="setRootNode" scope="instance"><description>Sets the root node for this tree.</description><parameters><parameter name="node" type="Node" usage="required"><description></description></parameter></parameters></method><method name="getNodeById" scope="instance"><description>Gets a node in this tree by its id.</description><parameters><parameter name="id" type="String" usage="required"><description></description></parameter></parameters></method></methods></class><class type="Ext.data.XmlReader" superclass="Ext.data.DataReader"><description>Data reader class to create an Array of &lt;a ext:cls=&quot;Ext.data.Record&quot; href=&quot;output/Ext.data.Record.html&quot;&gt;Ext.data.Record&lt;/a&gt; objects from an XML document
based on mappings in a provided Ext.data.Record constructor.&lt;br&gt;&lt;br&gt;
&lt;p&gt;
&lt;em&gt;Note that in order for the browser to parse a returned XML document, the Content-Type
header in the HTTP response must be set to &quot;text/xml&quot;.&lt;/em&gt;
&lt;p&gt;
Example code:
&lt;pre&gt;&lt;code&gt;var RecordDef = Ext.data.Record.create([
   {name: 'name', mapping: 'name'},     // &quot;mapping&quot; property not needed if it's the same as &quot;name&quot;
   {name: 'occupation'}                 // This field will use &quot;occupation&quot; as the mapping.
]);
var myReader = new Ext.data.XmlReader({
   totalRecords: &quot;results&quot;, // The element which contains the total dataset size (optional)
   record: &quot;row&quot;,           // The repeated element which contains row information
   id: &quot;id&quot;                 // The element within the row that provides an ID for the record (optional)
}, RecordDef);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This would consume an XML file like this:
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml?&gt;
&amp;lt;dataset&gt;
 &amp;lt;results&gt;2&amp;lt;/results&gt;
 &amp;lt;row&gt;
   &amp;lt;id&gt;1&amp;lt;/id&gt;
   &amp;lt;name&gt;Bill&amp;lt;/name&gt;
   &amp;lt;occupation&gt;Gardener&amp;lt;/name&gt;
 &amp;lt;/row&gt;
 &amp;lt;row&gt;
   &amp;lt;id&gt;2&amp;lt;/id&gt;
   &amp;lt;name&gt;Ben&amp;lt;/name&gt;
   &amp;lt;occupation&gt;Horticulturalist&amp;lt;/occupation&gt;
 &amp;lt;/row&gt;
&amp;lt;/dataset&gt;&lt;/code&gt;&lt;/pre&gt;</description><constructors><constructor scope="instance"><description>Create a new XmlReader</description><parameters><parameter name="meta" type="Object" usage="required"><description>Metadata configuration options</description></parameter><parameter name="recordType" type="Mixed" usage="required"><description>The definition of the data record type to produce. This can be either a valid
Record subclass created with &lt;a ext:cls=&quot;Ext.data.Record&quot; ext:member=&quot;create&quot; href=&quot;output/Ext.data.Record.html#create&quot;&gt;Ext.data.Record.create&lt;/a&gt;, or an array of objects with which to call
Ext.data.Record.create. See the &lt;a ext:cls=&quot;Ext.data.Record&quot; href=&quot;output/Ext.data.Record.html&quot;&gt;Ext.data.Record&lt;/a&gt; class for more details.</description></parameter></parameters></constructor></constructors><properties><property name="xmlData" type="XMLDocument" scope="instance" access="read-write"><description>After any data loads/reads, the raw XML Document is available for further custom processing.</description></property></properties><methods><method name="read" scope="instance"><description>This method is only used by a DataProxy which has retrieved data from a remote server.</description><parameters><parameter name="response" type="Object" usage="required"><description>The XHR object which contains the parsed XML document. The response is expected
to contain a method called 'responseXML' that returns an XML document object.</description></parameter></parameters></method><method name="readRecords" scope="instance"><description>Create a data block containing Ext.data.Records from an XML document.</description><parameters><parameter name="doc" type="Object" usage="required"><description>A parsed XML document.</description></parameter></parameters></method></methods></class><class type="Ext.dd.DD" superclass="Ext.dd.DragDrop"><description>A DragDrop implementation where the linked element follows the
mouse cursor during a drag.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="id" type="String" usage="required"><description>the id of the linked element</description></parameter><parameter name="sGroup" type="String" usage="required"><description>the group of related DragDrop items</description></parameter><parameter name="config" type="object" usage="required"><description>an object containing configurable attributes
Valid properties for DD:
scroll</description></parameter></parameters></constructor></constructors><properties><property name="scroll" type="boolean" scope="instance" access="read-write"><description>When set to true, the utility automatically tries to scroll the browser
window wehn a drag and drop element is dragged near the viewport boundary.
Defaults to true.</description></property></properties><methods><method name="autoOffset" scope="instance"><description>Sets the pointer offset to the distance between the linked element's top
left corner and the location the element was clicked</description><parameters><parameter name="iPageX" type="int" usage="required"><description>the X coordinate of the click</description></parameter><parameter name="iPageY" type="int" usage="required"><description>the Y coordinate of the click</description></parameter></parameters></method><method name="setDelta" scope="instance"><description>Sets the pointer offset.  You can call this directly to force the
offset to be in a particular location (e.g., pass in 0,0 to set it
to the center of the object)</description><parameters><parameter name="iDeltaX" type="int" usage="required"><description>the distance from the left</description></parameter><parameter name="iDeltaY" type="int" usage="required"><description>the distance from the top</description></parameter></parameters></method><method name="setDragElPos" scope="instance"><description>Sets the drag element to the location of the mousedown or click event,
maintaining the cursor location relative to the location on the element
that was clicked.  Override this if you want to place the element in a
location other than where the cursor is.</description><parameters><parameter name="iPageX" type="int" usage="required"><description>the X coordinate of the mousedown or drag event</description></parameter><parameter name="iPageY" type="int" usage="required"><description>the Y coordinate of the mousedown or drag event</description></parameter></parameters></method><method name="alignElWithMouse" scope="instance"><description>Sets the element to the location of the mousedown or click event,
maintaining the cursor location relative to the location on the element
that was clicked.  Override this if you want to place the element in a
location other than where the cursor is.</description><parameters><parameter name="el" type="HTMLElement" usage="required"><description>the element to move</description></parameter><parameter name="iPageX" type="int" usage="required"><description>the X coordinate of the mousedown or drag event</description></parameter><parameter name="iPageY" type="int" usage="required"><description>the Y coordinate of the mousedown or drag event</description></parameter></parameters></method><method name="cachePosition" scope="instance"><description>Saves the most recent position so that we can reset the constraints and
tick marks on-demand.  We need to know this so that we can calculate the
number of pixels the element is offset from its original position.</description><parameters><parameter name="the" type="iPageX" usage="required"><description>current x position (optional, this just makes it so we
don't have to look it up again)</description></parameter><parameter name="the" type="iPageY" usage="required"><description>current y position (optional, this just makes it so we
don't have to look it up again)</description></parameter></parameters></method></methods></class><class type="Ext.dd.DDProxy" superclass="Ext.dd.DD"><description>A DragDrop implementation that inserts an empty, bordered div into
the document that follows the cursor during drag operations.  At the time of
the click, the frame div is resized to the dimensions of the linked html
element, and moved to the exact location of the linked element.
References to the &quot;frame&quot; element refer to the single proxy element that
was created to be dragged in place of all DDProxy elements on the
page.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="id" type="String" usage="required"><description>the id of the linked html element</description></parameter><parameter name="sGroup" type="String" usage="required"><description>the group of related DragDrop objects</description></parameter><parameter name="config" type="object" usage="required"><description>an object containing configurable attributes
Valid properties for DDProxy in addition to those in DragDrop:
resizeFrame, centerFrame, dragElId</description></parameter></parameters></constructor></constructors><properties><property name="DDProxy.dragElId" type="String" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; The default drag frame div id</description></property><property name="resizeFrame" type="boolean" scope="instance" access="read-write"><description>By default we resize the drag frame to be the same size as the element
we want to drag (this is to get the frame effect).  We can turn it off
if we want a different behavior.</description></property><property name="centerFrame" type="boolean" scope="instance" access="read-write"><description>By default the frame is positioned exactly where the drag element is, so
we use the cursor offset provided by Ext.dd.DD.  Another option that works only if
you do not have constraints on the obj is to have the drag frame centered
around the cursor.  Set centerFrame to true for this effect.</description></property></properties><methods><method name="createFrame" scope="instance"><description>Creates the proxy element if it does not yet exist</description><parameters/></method><method name="initFrame" scope="instance"><description>Initialization for the drag frame element.  Must be called in the
constructor of all subclasses</description><parameters/></method></methods></class><class type="Ext.dd.DDTarget" superclass="Ext.dd.DragDrop"><description>A DragDrop implementation that does not move, but can be a drop
target.  You would get the same result by simply omitting implementation
for the event callbacks, but this way we reduce the processing cost of the
event listener and the callbacks.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="id" type="String" usage="required"><description>the id of the element that is a drop target</description></parameter><parameter name="sGroup" type="String" usage="required"><description>the group of related DragDrop objects</description></parameter><parameter name="config" type="object" usage="required"><description>an object containing configurable attributes
Valid properties for DDTarget in addition to those in
DragDrop:
none</description></parameter></parameters></constructor></constructors><properties/><methods/></class><class type="Ext.dd.DragDrop" superclass="Object"><description>Defines the interface and base operation of items that that can be
dragged or can be drop targets.  It was designed to be extended, overriding
the event handlers for startDrag, onDrag, onDragOver and onDragOut.
Up to three html elements can be associated with a DragDrop instance:
&lt;ul&gt;
&lt;li&gt;linked element: the element that is passed into the constructor.
This is the element which defines the boundaries for interaction with
other DragDrop objects.&lt;/li&gt;
&lt;li&gt;handle element(s): The drag operation only occurs if the element that
was clicked matches a handle element.  By default this is the linked
element, but there are times that you will want only a portion of the
linked element to initiate the drag operation, and the setHandleElId()
method provides a way to define this.&lt;/li&gt;
&lt;li&gt;drag element: this represents the element that would be moved along
with the cursor during a drag operation.  By default, this is the linked
element itself as in &lt;a ext:cls=&quot;Ext.dd.DD&quot; href=&quot;output/Ext.dd.DD.html&quot;&gt;Ext.dd.DD&lt;/a&gt;.  setDragElId() lets you define
a separate element that would be moved, as in &lt;a ext:cls=&quot;Ext.dd.DDProxy&quot; href=&quot;output/Ext.dd.DDProxy.html&quot;&gt;Ext.dd.DDProxy&lt;/a&gt;.
&lt;/li&gt;
&lt;/ul&gt;
This class should not be instantiated until the onload event to ensure that
the associated elements are available.
The following would define a DragDrop obj that would interact with any
other DragDrop obj in the &quot;group1&quot; group:
&lt;pre&gt;dd = new Ext.dd.DragDrop(&quot;div1&quot;, &quot;group1&quot;);&lt;/pre&gt;
Since none of the event handlers have been implemented, nothing would
actually happen if you were to run the code above.  Normally you would
override this class or one of the default implementations, but you can
also override the methods you want on an instance of the class...
&lt;pre&gt;dd.onDragDrop = function(e, id) {
&amp;nbsp;&amp;nbsp;alert(&quot;dd was dropped on &quot; + id);
}&lt;/pre&gt;</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="id" type="String" usage="required"><description>of the element that is linked to this instance</description></parameter><parameter name="sGroup" type="String" usage="required"><description>the group of related DragDrop objects</description></parameter><parameter name="config" type="object" usage="required"><description>an object containing configurable attributes
Valid properties for DragDrop:
padding, isTarget, maintainOffset, primaryButtonOnly</description></parameter></parameters></constructor></constructors><properties><property name="id" type="String" scope="instance" access="read-write"><description>The id of the element associated with this object.  This is what we
refer to as the &quot;linked element&quot; because the size and position of
this element is used to determine when the drag and drop objects have
interacted.</description></property><property name="config" type="object" scope="instance" access="read-write"><description>Configuration attributes passed into the constructor</description></property><property name="invalidHandleTypes" type="string:" scope="instance" access="read-write"><description>An associative array of HTML tags that will be ignored if clicked.</description></property><property name="invalidHandleIds" type="string:" scope="instance" access="read-write"><description>An associative array of ids for elements that will be ignored if clicked</description></property><property name="invalidHandleClasses" type="string[]" scope="instance" access="read-write"><description>An indexted array of css class names for elements that will be ignored
if clicked.</description></property><property name="groups" type="string:" scope="instance" access="read-write"><description>The group defines a logical collection of DragDrop objects that are
related.  Instances only get events when interacting with other
DragDrop object in the same group.  This lets us define multiple
groups using a single DragDrop subclass if we want.</description></property><property name="maintainOffset" type="boolean" scope="instance" access="read-write"><description>Maintain offsets when we resetconstraints.  Set to true when you want
the position of the element relative to its parent to stay the same
when the page changes</description></property><property name="xTicks" type="int[]" scope="instance" access="read-write"><description>Array of pixel locations the element will snap to if we specified a
horizontal graduation/interval.  This array is generated automatically
when you define a tick interval.</description></property><property name="yTicks" type="int[]" scope="instance" access="read-write"><description>Array of pixel locations the element will snap to if we specified a
vertical graduation/interval.  This array is generated automatically
when you define a tick interval.</description></property><property name="primaryButtonOnly" type="boolean" scope="instance" access="read-write"><description>By default the drag and drop instance will only respond to the primary
button click (left button for a right-handed mouse).  Set to true to
allow drag and drop to start with any mouse click that is propogated
by the browser</description></property><property name="available" type="boolean" scope="instance" access="read-write"><description>The availabe property is false until the linked dom element is accessible.</description></property><property name="hasOuterHandles" type="boolean" scope="instance" access="read-write"><description>By default, drags can only be initiated if the mousedown occurs in the
region the linked element is.  This is done in part to work around a
bug in some browsers that mis-report the mousedown if the previous
mouseup happened outside of the window.  This property is set to true
if outer handles are defined.</description></property></properties><methods><method name="lock" scope="instance"><description>Lock this instance</description><parameters/></method><method name="unlock" scope="instance"><description>Unlock this instace</description><parameters/></method><method name="isTarget" scope="instance"><description>By default, all insances can be a drop target.  This can be disabled by
setting isTarget to false.</description><parameters/></method><method name="padding" scope="instance"><description>The padding configured for this drag and drop object for calculating
the drop zone intersection with this object.</description><parameters/></method><method name="startDrag" scope="instance"><description>Abstract method called after a drag/drop object is clicked
and the drag or mousedown time thresholds have beeen met.</description><parameters><parameter name="X" type="int" usage="required"><description>click location</description></parameter><parameter name="Y" type="int" usage="required"><description>click location</description></parameter></parameters></method><method name="onDrag" scope="instance"><description>Abstract method called during the onMouseMove event while dragging an
object.</description><parameters><parameter name="e" type="Event" usage="required"><description>the mousemove event</description></parameter></parameters></method><method name="onDragEnter" scope="instance"><description>Abstract method called when this element fist begins hovering over
another DragDrop obj</description><parameters><parameter name="e" type="Event" usage="required"><description>the mousemove event</description></parameter><parameter name="id" type="String|DragDrop[]" usage="required"><description>In POINT mode, the element
id this is hovering over. In INTERSECT mode, an array of one or more
dragdrop items being hovered over.</description></parameter></parameters></method><method name="onDragOver" scope="instance"><description>Abstract method called when this element is hovering over another
DragDrop obj</description><parameters><parameter name="e" type="Event" usage="required"><description>the mousemove event</description></parameter><parameter name="id" type="String|DragDrop[]" usage="required"><description>In POINT mode, the element
id this is hovering over. In INTERSECT mode, an array of dd items
being hovered over.</description></parameter></parameters></method><method name="onDragOut" scope="instance"><description>Abstract method called when we are no longer hovering over an element</description><parameters><parameter name="e" type="Event" usage="required"><description>the mousemove event</description></parameter><parameter name="id" type="String|DragDrop[]" usage="required"><description>In POINT mode, the element
id this was hovering over. In INTERSECT mode, an array of dd items
that the mouse is no longer over.</description></parameter></parameters></method><method name="onDragDrop" scope="instance"><description>Abstract method called when this item is dropped on another DragDrop
obj</description><parameters><parameter name="e" type="Event" usage="required"><description>the mouseup event</description></parameter><parameter name="id" type="String|DragDrop[]" usage="required"><description>In POINT mode, the element
id this was dropped on. In INTERSECT mode, an array of dd items this
was dropped on.</description></parameter></parameters></method><method name="onInvalidDrop" scope="instance"><description>Abstract method called when this item is dropped on an area with no
drop target</description><parameters><parameter name="e" type="Event" usage="required"><description>the mouseup event</description></parameter></parameters></method><method name="endDrag" scope="instance"><description>Fired when we are done dragging the object</description><parameters><parameter name="e" type="Event" usage="required"><description>the mouseup event</description></parameter></parameters></method><method name="onMouseDown" scope="instance"><description>Event handler that fires when a drag/drop obj gets a mousedown</description><parameters><parameter name="e" type="Event" usage="required"><description>the mousedown event</description></parameter></parameters></method><method name="onMouseUp" scope="instance"><description>Event handler that fires when a drag/drop obj gets a mouseup</description><parameters><parameter name="e" type="Event" usage="required"><description>the mouseup event</description></parameter></parameters></method><method name="onAvailable" scope="instance"><description>Override the onAvailable method to do what is needed after the initial
position was determined.</description><parameters/></method><method name="getEl" scope="instance"><description>Returns a reference to the linked element</description><parameters/></method><method name="getDragEl" scope="instance"><description>Returns a reference to the actual element to drag.  By default this is
the same as the html element, but it can be assigned to another
element. An example of this can be found in Ext.dd.DDProxy</description><parameters/></method><method name="init" scope="instance"><description>Sets up the DragDrop object.  Must be called in the constructor of any
Ext.dd.DragDrop subclass</description><parameters><parameter name="the" type="id" usage="required"><description>id of the linked element</description></parameter><parameter name="sGroup" type="String" usage="required"><description>the group of related items</description></parameter><parameter name="config" type="object" usage="required"><description>configuration attributes</description></parameter></parameters></method><method name="initTarget" scope="instance"><description>Initializes Targeting functionality only... the object does not
get a mousedown handler.</description><parameters><parameter name="the" type="id" usage="required"><description>id of the linked element</description></parameter><parameter name="sGroup" type="String" usage="required"><description>the group of related items</description></parameter><parameter name="config" type="object" usage="required"><description>configuration attributes</description></parameter></parameters></method><method name="applyConfig" scope="instance"><description>Applies the configuration parameters that were passed into the constructor.
This is supposed to happen at each level through the inheritance chain.  So
a DDProxy implentation will execute apply config on DDProxy, DD, and
DragDrop in order to get all of the parameters that are available in
each object.</description><parameters/></method><method name="setPadding" scope="instance"><description>Configures the padding for the target zone in px.  Effectively expands
(or reduces) the virtual object size for targeting calculations.
Supports css-style shorthand; if only one parameter is passed, all sides
will have that padding, and if only two are passed, the top and bottom
will have the first param, the left and right the second.</description><parameters><parameter name="iTop" type="int" usage="required"><description>Top pad</description></parameter><parameter name="iRight" type="int" usage="required"><description>Right pad</description></parameter><parameter name="iBot" type="int" usage="required"><description>Bot pad</description></parameter><parameter name="iLeft" type="int" usage="required"><description>Left pad</description></parameter></parameters></method><method name="setInitialPosition" scope="instance"><description>Stores the initial placement of the linked element.</description><parameters><parameter name="diffX" type="int" usage="required"><description>the X offset, default 0</description></parameter><parameter name="diffY" type="int" usage="required"><description>the Y offset, default 0</description></parameter></parameters></method><method name="addToGroup" scope="instance"><description>Add this instance to a group of related drag/drop objects.  All
instances belong to at least one group, and can belong to as many
groups as needed.</description><parameters><parameter name="{string}" type="sGroup" usage="required"><description>the name of the group</description></parameter></parameters></method><method name="removeFromGroup" scope="instance"><description>Remove's this instance from the supplied interaction group</description><parameters><parameter name="sGroup" type="string" usage="required"><description>The group to drop</description></parameter></parameters></method><method name="setDragElId" scope="instance"><description>Allows you to specify that an element other than the linked element
will be moved with the cursor during a drag</description><parameters><parameter name="{string}" type="id" usage="required"><description>the id of the element that will be used to initiate the drag</description></parameter></parameters></method><method name="setHandleElId" scope="instance"><description>Allows you to specify a child of the linked element that should be
used to initiate the drag operation.  An example of this would be if
you have a content div with text and links.  Clicking anywhere in the
content area would normally start the drag operation.  Use this method
to specify that an element inside of the content div is the element
that starts the drag operation.</description><parameters><parameter name="{string}" type="id" usage="required"><description>the id of the element that will be used to
initiate the drag.</description></parameter></parameters></method><method name="setOuterHandleElId" scope="instance"><description>Allows you to set an element outside of the linked element as a drag
handle</description><parameters><parameter name="the" type="id" usage="required"><description>id of the element that will be used to initiate the drag</description></parameter></parameters></method><method name="unreg" scope="instance"><description>Remove all drag and drop hooks for this element</description><parameters/></method><method name="isLocked" scope="instance"><description>Returns true if this instance is locked, or the drag drop mgr is locked
(meaning that all drag/drop is disabled on the page.)</description><parameters/></method><method name="addInvalidHandleType" scope="instance"><description>Allows you to specify a tag name that should not start a drag operation
when clicked.  This is designed to facilitate embedding links within a
drag handle that do something other than start the drag.</description><parameters><parameter name="tagName" type="string" usage="required"><description>the type of element to exclude</description></parameter></parameters></method><method name="addInvalidHandleId" scope="instance"><description>Lets you to specify an element id for a child of a drag handle
that should not initiate a drag</description><parameters><parameter name="id" type="string" usage="required"><description>the element id of the element you wish to ignore</description></parameter></parameters></method><method name="addInvalidHandleClass" scope="instance"><description>Lets you specify a css class of elements that will not initiate a drag</description><parameters><parameter name="cssClass" type="string" usage="required"><description>the class of the elements you wish to ignore</description></parameter></parameters></method><method name="removeInvalidHandleType" scope="instance"><description>Unsets an excluded tag name set by addInvalidHandleType</description><parameters><parameter name="tagName" type="string" usage="required"><description>the type of element to unexclude</description></parameter></parameters></method><method name="removeInvalidHandleId" scope="instance"><description>Unsets an invalid handle id</description><parameters><parameter name="id" type="string" usage="required"><description>the id of the element to re-enable</description></parameter></parameters></method><method name="removeInvalidHandleClass" scope="instance"><description>Unsets an invalid css class</description><parameters><parameter name="cssClass" type="string" usage="required"><description>the class of the element(s) you wish to
re-enable</description></parameter></parameters></method><method name="isValidHandleChild" scope="instance"><description>Checks the tag exclusion list to see if this click should be ignored</description><parameters><parameter name="node" type="HTMLElement" usage="required"><description>the HTMLElement to evaluate</description></parameter></parameters></method><method name="setXConstraint" scope="instance"><description>By default, the element can be dragged any place on the screen.  Use
this method to limit the horizontal travel of the element.  Pass in
0,0 for the parameters if you want to lock the drag to the y axis.</description><parameters><parameter name="iLeft" type="int" usage="required"><description>the number of pixels the element can move to the left</description></parameter><parameter name="iRight" type="int" usage="required"><description>the number of pixels the element can move to the
right</description></parameter><parameter name="iTickSize" type="int" usage="required"><description>optional parameter for specifying that the
element
should move iTickSize pixels at a time.</description></parameter></parameters></method><method name="clearConstraints" scope="instance"><description>Clears any constraints applied to this instance.  Also clears ticks
since they can't exist independent of a constraint at this time.</description><parameters/></method><method name="clearTicks" scope="instance"><description>Clears any tick interval defined for this instance</description><parameters/></method><method name="setYConstraint" scope="instance"><description>By default, the element can be dragged any place on the screen.  Set
this to limit the vertical travel of the element.  Pass in 0,0 for the
parameters if you want to lock the drag to the x axis.</description><parameters><parameter name="iUp" type="int" usage="required"><description>the number of pixels the element can move up</description></parameter><parameter name="iDown" type="int" usage="required"><description>the number of pixels the element can move down</description></parameter><parameter name="iTickSize" type="int" usage="required"><description>optional parameter for specifying that the
element should move iTickSize pixels at a time.</description></parameter></parameters></method><method name="resetConstraints" scope="instance"><description>resetConstraints must be called if you manually reposition a dd element.</description><parameters><parameter name="maintainOffset" type="boolean" usage="required"><description></description></parameter></parameters></method><method name="toString" scope="instance"><description>toString method</description><parameters/></method></methods></class><class type="Ext.dd.DragDropMgr" superclass="Object"><description>DragDropMgr is a singleton that tracks the element interaction for
all DragDrop items in the window.  Generally, you will not call
this class directly, but it does have helper methods that could
be useful in your DragDrop implementations.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description><properties><property name="preventDefault" type="boolean" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; Flag to determine if we should prevent the default behavior of the
events we define. By default this is true, but this can be set to
false if you need the default behavior (not recommended)</description></property><property name="stopPropagation" type="boolean" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; Flag to determine if we should stop the propagation of the events
we generate. This is true by default but you may want to set it to
false if the html element contains other features that require the
mouse click.</description></property><property name="POINT" type="int" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; In point mode, drag and drop interaction is defined by the
location of the cursor during the drag/drop</description></property><property name="INTERSECT" type="int" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; In intersect mode, drag and drop interactio nis defined by the
overlap of two or more drag and drop objects.</description></property><property name="mode" type="int" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; The current drag and drop mode.  Default: POINT</description></property><property name="useCache" type="boolean" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; Set useCache to false if you want to force object the lookup of each
drag and drop linked element constantly during a drag.</description></property><property name="clickPixelThresh" type="int" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; The number of pixels that the mouse needs to move after the
mousedown before the drag is initiated.  Default=3;</description></property><property name="clickTimeThresh" type="int" scope="static" access="read-write"><description>&amp;lt;static&amp;gt; The number of milliseconds after the mousedown event to initiate the
drag if we don't get a mouseup event. Default=1000</description></property><property name="el" type="Object" scope="instance" access="read-write"><description>The element</description></property><property name="id" type="Object" scope="instance" access="read-write"><description>The element id</description></property><property name="css" type="Object" scope="instance" access="read-write"><description>A reference to the style property</description></property></properties><methods><method name="lock" scope="static"><description>&amp;lt;static&amp;gt; Lock all drag and drop functionality</description><parameters/></method><method name="unlock" scope="static"><description>&amp;lt;static&amp;gt; Unlock all drag and drop functionality</description><parameters/></method><method name="isLocked" scope="static"><description>&amp;lt;static&amp;gt; Is drag and drop locked?</description><parameters/></method><method name="regDragDrop" scope="static"><description>&amp;lt;static&amp;gt; Each DragDrop instance must be registered with the DragDropMgr.
This is executed in DragDrop.init()</description><parameters><parameter name="oDD" type="DragDrop" usage="required"><description>the DragDrop object to register</description></parameter><parameter name="sGroup" type="String" usage="required"><description>the name of the group this element belongs to</description></parameter></parameters></method><method name="regHandle" scope="static"><description>&amp;lt;static&amp;gt; Each DragDrop handle element must be registered.  This is done
automatically when executing DragDrop.setHandleElId()</description><parameters><parameter name="sDDId" type="String" usage="required"><description>the DragDrop id this element is a handle for</description></parameter><parameter name="sHandleId" type="String" usage="required"><description>the id of the element that is the drag
handle</description></parameter></parameters></method><method name="isDragDrop" scope="static"><description>&amp;lt;static&amp;gt; Utility function to determine if a given element has been
registered as a drag drop item.</description><parameters><parameter name="id" type="String" usage="required"><description>the element id to check</description></parameter></parameters></method><method name="getRelated" scope="static"><description>&amp;lt;static&amp;gt; Returns the drag and drop instances that are in all groups the
passed in instance belongs to.</description><parameters><parameter name="p_oDD" type="DragDrop" usage="required"><description>the obj to get related data for</description></parameter><parameter name="bTargetsOnly" type="boolean" usage="required"><description>if true, only return targetable objs</description></parameter></parameters></method><method name="isLegalTarget" scope="static"><description>&amp;lt;static&amp;gt; Returns true if the specified dd target is a legal target for
the specifice drag obj</description><parameters><parameter name="the" type="DragDrop" usage="required"><description>drag obj</description></parameter><parameter name="the" type="DragDrop" usage="required"><description>target</description></parameter></parameters></method><method name="isTypeOfDD" scope="static"><description>&amp;lt;static&amp;gt; My goal is to be able to transparently determine if an object is
typeof DragDrop, and the exact subclass of DragDrop.  typeof
returns &quot;object&quot;, oDD.constructor.toString() always returns
&quot;DragDrop&quot; and not the name of the subclass.  So for now it just
evaluates a well-known variable in DragDrop.</description><parameters><parameter name="the" type="Object" usage="required"><description>object to evaluate</description></parameter></parameters></method><method name="isHandle" scope="static"><description>&amp;lt;static&amp;gt; Utility function to determine if a given element has been
registered as a drag drop handle for the given Drag Drop object.</description><parameters><parameter name="id" type="String" usage="required"><description>the element id to check</description></parameter></parameters></method><method name="getDDById" scope="static"><description>&amp;lt;static&amp;gt; Returns the DragDrop instance for a given id</description><parameters><parameter name="id" type="String" usage="required"><description>the id of the DragDrop object</description></parameter></parameters></method><method name="startDrag" scope="static"><description>&amp;lt;static&amp;gt; Fired when either the drag pixel threshol or the mousedown hold
time threshold has been met.</description><parameters><parameter name="{int}" type="x" usage="required"><description>the X position of the original mousedown</description></parameter><parameter name="{int}" type="y" usage="required"><description>the Y position of the original mousedown</description></parameter></parameters></method><method name="stopEvent" scope="static"><description>&amp;lt;static&amp;gt; Utility to stop event propagation and event default, if these
features are turned on.</description><parameters><parameter name="e" type="Event" usage="required"><description>the event as returned by this.getEvent()</description></parameter></parameters></method><method name="getBestMatch" scope="static"><description>&amp;lt;static&amp;gt; Helper function for getting the best match from the list of drag
and drop objects returned by the drag and drop events when we are
in INTERSECT mode.  It returns either the first object that the
cursor is over, or the object that has the greatest overlap with
the dragged element.</description><parameters><parameter name="dds" type="DragDrop[]" usage="required"><description>The array of drag and drop objects
targeted</description></parameter></parameters></method><method name="refreshCache" scope="static"><description>&amp;lt;static&amp;gt; Refreshes the cache of the top-left and bottom-right points of the
drag and drop objects in the specified group(s).  This is in the
format that is stored in the drag and drop instance, so typical
usage is:
&lt;code&gt;
Ext.dd.DragDropMgr.refreshCache(ddinstance.groups);
&lt;/code&gt;
Alternatively:
&lt;code&gt;
Ext.dd.DragDropMgr.refreshCache({group1:true, group2:true});
&lt;/code&gt;
@TODO this really should be an indexed array.  Alternatively this
method could accept both.</description><parameters><parameter name="groups" type="Object" usage="required"><description>an associative array of groups to refresh</description></parameter></parameters></method><method name="verifyEl" scope="static"><description>&amp;lt;static&amp;gt; This checks to make sure an element exists and is in the DOM.  The
main purpose is to handle cases where innerHTML is used to remove
drag and drop objects from the DOM.  IE provides an 'unspecified
error' when trying to access the offsetParent of such an element</description><parameters><parameter name="el" type="HTMLElement" usage="required"><description>the element to check</description></parameter></parameters></method><method name="getLocation" scope="static"><description>&amp;lt;static&amp;gt; Returns a Region object containing the drag and drop element's position
and size, including the padding configured for it</description><parameters><parameter name="oDD" type="DragDrop" usage="required"><description>the drag and drop object to get the
location for</description></parameter></parameters></method><method name="getElement" scope="static"><description>&lt;b&gt;Deprecated.&lt;/b&gt; &amp;lt;static&amp;gt; Returns the actual DOM element</description><parameters><parameter name="id" type="String" usage="required"><description>the id of the elment to get</description></parameter></parameters></method><method name="getCss" scope="static"><description>&lt;b&gt;Deprecated.&lt;/b&gt; &amp;lt;static&amp;gt; Returns the style property for the DOM element (i.e.,
document.getElById(id).style)</description><parameters><parameter name="id" type="String" usage="required"><description>the id of the elment to get</description></parameter></parameters></method><method name="getPosX" scope="static"><description>&lt;b&gt;Deprecated.&lt;/b&gt; &amp;lt;static&amp;gt; Returns the X position of an html element</description><parameters><parameter name="the" type="el" usage="required"><description>element for which to get the position</description></parameter></parameters></method><method name="getPosY" scope="static"><description>&lt;b&gt;Deprecated.&lt;/b&gt; &amp;lt;static&amp;gt; Returns the Y position of an html element</description><parameters><parameter name="the" type="el" usage="required"><description>element for which to get the position</description></parameter></parameters></method><method name="swapNode" scope="static"><description>&amp;lt;static&amp;gt; Swap two nodes.  In IE, we use the native method, for others we
emulate the IE behavior</description><parameters><parameter name="the" type="n1" usage="required"><description>first node to swap</description></parameter><parameter name="the" type="n2" usage="required"><description>other node to swap</description></parameter></parameters></method><method name="getStyle" scope="static"><description>&lt;b&gt;Deprecated.&lt;/b&gt; &amp;lt;static&amp;gt; Returns the specified element style property</description><parameters><parameter name="el" type="HTMLElement" usage="required"><description>the element</description></parameter><parameter name="styleProp" type="string" usage="required"><description>the style property</description></parameter></parameters></method><method name="getScrollTop" scope="static"><description>&amp;lt;static&amp;gt; Gets the scrollTop</description><parameters/></method><method name="getScrollLeft" scope="static"><description>&amp;lt;static&amp;gt; Gets the scrollLeft</description><parameters/></method><method name="moveToEl" scope="static"><description>&amp;lt;static&amp;gt; Sets the x/y position of an element to the location of the
target element.</description><parameters><parameter name="moveEl" type="HTMLElement" usage="required"><description>The element to move</description></parameter><parameter name="targetEl" type="HTMLElement" usage="required"><description>The position reference element</description></parameter></parameters></method><method name="numericSort" scope="static"><description>&amp;lt;static&amp;gt; Numeric array sort function</description><parameters/></method><method name="handleWasClicked" scope="static"><description>&amp;lt;static&amp;gt; Recursively searches the immediate parent and all child nodes for
the handle element in order to determine wheter or not it was
clicked.</description><parameters><parameter name="the" type="node" usage="required"><description>html element to inspect</description></parameter></parameters></method></methods></class><class type="Ext.dd.DragSource" superclass="Ext.dd.DDProxy"><description>A simple class that provides the basic implementation needed to make any element draggable.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description>The container element</description></parameter><parameter name="config" type="Object" usage="required"><description></description></parameter></parameters></constructor></constructors><properties><property name="onStartDrag" type="Object" scope="instance" access="read-write"><description>An empty function by default, but provided so that you can perform a custom action once the initial
drag event has begun.  The drag cannot be canceled from this function.</description></property></properties><methods><method name="getDragData" scope="instance"><description>Returns the data object associated with this drag source</description><parameters/></method><method name="afterDragEnter" scope="instance"><description>An empty function by default, but provided so that you can perform a custom action
when the dragged item enters the drop target by providing an implementation.</description><parameters><parameter name="target" type="Ext.dd.DragDrop" usage="required"><description>The drop target</description></parameter><parameter name="e" type="Event" usage="required"><description>The event object</description></parameter><parameter name="id" type="String" usage="required"><description>The id of the dragged element</description></parameter></parameters></method><method name="beforeDragEnter" scope="instance"><description>An empty function by default, but provided so that you can perform a custom action
before the dragged item enters the drop target and optionally cancel the onDragEnter.</description><parameters><parameter name="target" type="Ext.dd.DragDrop" usage="required"><description>The drop target</description></parameter><parameter name="e" type="Event" usage="required"><description>The event object</description></parameter><parameter name="id" type="String" usage="required"><description>The id of the dragged element</description></parameter></parameters></method><method name="afterDragOver" scope="instance"><description>An empty function by default, but provided so that you can perform a custom action
while the dragged item is over the drop target by providing an implementation.</description><parameters><parameter name="target" type="Ext.dd.DragDrop" usage="required"><description>The drop target</description></parameter><parameter name="e" type="Event" usage="required"><description>The event object</description></parameter><parameter name="id" type="String" usage="required"><description>The id of the dragged element</description></parameter></parameters></method><method name="beforeDragOver" scope="instance"><description>An empty function by default, but provided so that you can perform a custom action
while the dragged item is over the drop target and optionally cancel the onDragOver.</description><parameters><parameter name="target" type="Ext.dd.DragDrop" usage="required"><description>The drop target</description></parameter><parameter name="e" type="Event" usage="required"><description>The event object</description></parameter><parameter name="id" type="String" usage="required"><description>The id of the dragged element</description></parameter></parameters></method><method name="afterDragOut" scope="instance"><description>An empty function by default, but provided so that you can perform a custom action
after the dragged item is dragged out of the target without dropping.</description><parameters><parameter name="target" type="Ext.dd.DragDrop" usage="required"><description>The drop target</description></parameter><parameter name="e" type="Event" usage="required"><description>The event object</description></parameter><parameter name="id" type="String" usage="required"><description>The id of the dragged element</description></parameter></parameters></method><method name="beforeDragOut" scope="instance"><description>An empty function by default, but provided so that you can perform a custom action before the dragged
item is dragged out of the target without dropping, and optionally cancel the onDragOut.</description><parameters><parameter name="target" type="Ext.dd.DragDrop" usage="required"><description>The drop target</description></parameter><parameter name="e" type="Event" usage="required"><description>The event object</description></parameter><parameter name="id" type="String" usage="required"><description>The id of the dragged element</description></parameter></parameters></method><method name="afterDragDrop" scope="instance"><description>An empty function by default, but provided so that you can perform a custom action
after a valid drag drop has occurred by providing an implementation.</description><parameters><parameter name="target" type="Ext.dd.DragDrop" usage="required"><description>The drop target</description></parameter><parameter name="e" type="Event" usage="required"><description>The event object</description></parameter><parameter name="id" type="String" usage="required"><description>The id of the dropped element</description></parameter></parameters></method><method name="beforeDragDrop" scope="instance"><description>An empty function by default, but provided so that you can perform a custom action before the dragged
item is dropped onto the target and optionally cancel the onDragDrop.</description><parameters><parameter name="target" type="Ext.dd.DragDrop" usage="required"><description>The drop target</description></parameter><parameter name="e" type="Event" usage="required"><description>The event object</description></parameter><parameter name="id" type="String" usage="required"><description>The id of the dragged element</description></parameter></parameters></method><method name="afterInvalidDrop" scope="instance"><description>An empty function by default, but provided so that you can perform a custom action
after an invalid drop has occurred by providing an implementation.</description><parameters><parameter name="e" type="Event" usage="required"><description>The event object</description></parameter><parameter name="id" type="String" usage="required"><description>The id of the dropped element</description></parameter></parameters></method><method name="beforeInvalidDrop" scope="instance"><description>An empty function by default, but provided so that you can perform a custom action after an invalid
drop has occurred.</description><parameters><parameter name="target" type="Ext.dd.DragDrop" usage="required"><description>The drop target</description></parameter><parameter name="e" type="Event" usage="required"><description>The event object</description></parameter><parameter name="id" type="String" usage="required"><description>The id of the dragged element</description></parameter></parameters></method><method name="onBeforeDrag" scope="instance"><description>An empty function by default, but provided so that you can perform a custom action before the initial
drag event begins and optionally cancel it.</description><parameters><parameter name="data" type="Object" usage="required"><description>An object containing arbitrary data to be shared with drop targets</description></parameter><parameter name="e" type="Event" usage="required"><description>The event object</description></parameter></parameters></method><method name="getProxy" scope="instance"><description>Returns the drag source's underlying &lt;a ext:cls=&quot;Ext.dd.StatusProxy&quot; href=&quot;output/Ext.dd.StatusProxy.html&quot;&gt;Ext.dd.StatusProxy&lt;/a&gt;</description><parameters/></method><method name="hideProxy" scope="instance"><description>Hides the drag source's &lt;a ext:cls=&quot;Ext.dd.StatusProxy&quot; href=&quot;output/Ext.dd.StatusProxy.html&quot;&gt;Ext.dd.StatusProxy&lt;/a&gt;</description><parameters/></method></methods></class><class type="Ext.dd.DragZone" superclass="Ext.dd.DragSource"><description>This class provides a container DD instance that proxies for multiple child node sources.&lt;br /&gt;
By default, this class requires that draggable child nodes are registered with &lt;a ext:cls=&quot;Ext.dd.Registry&quot; href=&quot;output/Ext.dd.Registry.html&quot;&gt;Ext.dd.Registry&lt;/a&gt;.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description>The container element</description></parameter><parameter name="config" type="Object" usage="required"><description></description></parameter></parameters></constructor></constructors><properties/><methods><method name="getDragData" scope="instance"><description>
Called when a mousedown occurs in this container. Looks in &lt;a ext:cls=&quot;Ext.dd.Registry&quot; href=&quot;output/Ext.dd.Registry.html&quot;&gt;Ext.dd.Registry&lt;/a&gt;
for a valid target to drag based on the mouse down. Override this method
to provide your own lookup logic (e.g. finding a child by class name). Make sure your returned
object has a &quot;ddel&quot; attribute (with an HTML Element) for other functions to work.</description><parameters><parameter name="e" type="EventObject" usage="required"><description>The mouse down event</description></parameter></parameters></method><method name="onInitDrag" scope="instance"><description>Called once drag threshold has been reached to initialize the proxy element. By default, it clones the
this.dragData.ddel</description><parameters><parameter name="x" type="Number" usage="required"><description>The x position of the click on the dragged object</description></parameter><parameter name="y" type="Number" usage="required"><description>The y position of the click on the dragged object</description></parameter></parameters></method><method name="afterRepair" scope="instance"><description>Called after a repair of an invalid drop. By default, highlights this.dragData.ddel</description><parameters/></method><method name="getRepairXY" scope="instance"><description>Called before a repair of an invalid drop to get the XY to animate to. By default returns
the XY of this.dragData.ddel</description><parameters><parameter name="e" type="EventObject" usage="required"><description>The mouse up event</description></parameter></parameters></method></methods></class><class type="Ext.dd.DropTarget" superclass="Ext.dd.DDTarget"><description>A simple class that provides the basic implementation needed to make any element a drop target that can have
draggable items dropped onto it.  The drop has no effect until an implementation of notifyDrop is provided.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description>The container element</description></parameter><parameter name="config" type="Object" usage="required"><description></description></parameter></parameters></constructor></constructors><properties/><methods><method name="notifyEnter" scope="instance"><description>The function a &lt;a ext:cls=&quot;Ext.dd.DragSource&quot; href=&quot;output/Ext.dd.DragSource.html&quot;&gt;Ext.dd.DragSource&lt;/a&gt; calls once to notify this drop target that the source is now over the
target.  This default implementation adds the CSS class specified by overClass (if any) to the drop element
and returns the dropAllowed config value.  This method should be overridden if drop validation is required.</description><parameters><parameter name="source" type="Ext.dd.DragSource" usage="required"><description>The drag source that was dragged over this drop target</description></parameter><parameter name="e" type="Event" usage="required"><description>The event</description></parameter><parameter name="data" type="Object" usage="required"><description>An object containing arbitrary data supplied by the drag source</description></parameter></parameters></method><method name="notifyOver" scope="instance"><description>The function a &lt;a ext:cls=&quot;Ext.dd.DragSource&quot; href=&quot;output/Ext.dd.DragSource.html&quot;&gt;Ext.dd.DragSource&lt;/a&gt; calls continuously while it is being dragged over the target.
This method will be called on every mouse movement while the drag source is over the drop target.
This default implementation simply returns the dropAllowed config value.</description><parameters><parameter name="source" type="Ext.dd.DragSource" usage="required"><description>The drag source that was dragged over this drop target</description></parameter><parameter name="e" type="Event" usage="required"><description>The event</description></parameter><parameter name="data" type="Object" usage="required"><description>An object containing arbitrary data supplied by the drag source</description></parameter></parameters></method><method name="notifyOut" scope="instance"><description>The function a &lt;a ext:cls=&quot;Ext.dd.DragSource&quot; href=&quot;output/Ext.dd.DragSource.html&quot;&gt;Ext.dd.DragSource&lt;/a&gt; calls once to notify this drop target that the source has been dragged
out of the target without dropping.  This default implementation simply removes the CSS class specified by
overClass (if any) from the drop element.</description><parameters><parameter name="source" type="Ext.dd.DragSource" usage="required"><description>The drag source that was dragged over this drop target</description></parameter><parameter name="e" type="Event" usage="required"><description>The event</description></parameter><parameter name="data" type="Object" usage="required"><description>An object containing arbitrary data supplied by the drag source</description></parameter></parameters></method><method name="notifyDrop" scope="instance"><description>The function a &lt;a ext:cls=&quot;Ext.dd.DragSource&quot; href=&quot;output/Ext.dd.DragSource.html&quot;&gt;Ext.dd.DragSource&lt;/a&gt; calls once to notify this drop target that the dragged item has
been dropped on it.  This method has no default implementation and returns false, so you must provide an
implementation that does something to process the drop event and returns true so that the drag source's
repair action does not run.</description><parameters><parameter name="source" type="Ext.dd.DragSource" usage="required"><description>The drag source that was dragged over this drop target</description></parameter><parameter name="e" type="Event" usage="required"><description>The event</description></parameter><parameter name="data" type="Object" usage="required"><description>An object containing arbitrary data supplied by the drag source</description></parameter></parameters></method></methods></class><class type="Ext.dd.DropZone" superclass="Ext.dd.DropTarget"><description>This class provides a container DD instance that proxies for multiple child node targets.&lt;br /&gt;
By default, this class requires that child nodes accepting drop are registered with &lt;a ext:cls=&quot;Ext.dd.Registry&quot; href=&quot;output/Ext.dd.Registry.html&quot;&gt;Ext.dd.Registry&lt;/a&gt;.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description>The container element</description></parameter><parameter name="config" type="Object" usage="required"><description></description></parameter></parameters></constructor></constructors><properties/><methods><method name="getTargetFromEvent" scope="instance"><description>Returns a custom data object associated with the DOM node that is the target of the event.  By default
this looks up the event target in the &lt;a ext:cls=&quot;Ext.dd.Registry&quot; href=&quot;output/Ext.dd.Registry.html&quot;&gt;Ext.dd.Registry&lt;/a&gt;, although you can override this method to
provide your own custom lookup.</description><parameters><parameter name="e" type="Event" usage="required"><description>The event</description></parameter></parameters></method><method name="onNodeEnter" scope="instance"><description>Called internally when the DropZone determines that a &lt;a ext:cls=&quot;Ext.dd.DragSource&quot; href=&quot;output/Ext.dd.DragSource.html&quot;&gt;Ext.dd.DragSource&lt;/a&gt; has entered a drop node
that it has registered.  This method has no default implementation and should be overridden to provide
node-specific processing if necessary.</description><parameters><parameter name="nodeData" type="Object" usage="required"><description>The custom data associated with the drop node (this is the same value returned from 
&lt;a ext:cls=&quot;Ext.dd.DropZone&quot; ext:member=&quot;getTargetFromEvent&quot; href=&quot;output/Ext.dd.DropZone.html#getTargetFromEvent&quot;&gt;getTargetFromEvent&lt;/a&gt; for this node)</description></parameter><parameter name="source" type="Ext.dd.DragSource" usage="required"><description>The drag source that was dragged over this drop zone</description></parameter><parameter name="e" type="Event" usage="required"><description>The event</description></parameter><parameter name="data" type="Object" usage="required"><description>An object containing arbitrary data supplied by the drag source</description></parameter></parameters></method><method name="onNodeOver" scope="instance"><description>Called internally while the DropZone determines that a &lt;a ext:cls=&quot;Ext.dd.DragSource&quot; href=&quot;output/Ext.dd.DragSource.html&quot;&gt;Ext.dd.DragSource&lt;/a&gt; is over a drop node
that it has registered.  The default implementation returns this.dropNotAllowed, so it should be
overridden to provide the proper feedback.</description><parameters><parameter name="nodeData" type="Object" usage="required"><description>The custom data associated with the drop node (this is the same value returned from
&lt;a ext:cls=&quot;Ext.dd.DropZone&quot; ext:member=&quot;getTargetFromEvent&quot; href=&quot;output/Ext.dd.DropZone.html#getTargetFromEvent&quot;&gt;getTargetFromEvent&lt;/a&gt; for this node)</description></parameter><parameter name="source" type="Ext.dd.DragSource" usage="required"><description>The drag source that was dragged over this drop zone</description></parameter><parameter name="e" type="Event" usage="required"><description>The event</description></parameter><parameter name="data" type="Object" usage="required"><description>An object containing arbitrary data supplied by the drag source</description></parameter></parameters></method><method name="onNodeOut" scope="instance"><description>Called internally when the DropZone determines that a &lt;a ext:cls=&quot;Ext.dd.DragSource&quot; href=&quot;output/Ext.dd.DragSource.html&quot;&gt;Ext.dd.DragSource&lt;/a&gt; has been dragged out of
the drop node without dropping.  This method has no default implementation and should be overridden to provide
node-specific processing if necessary.</description><parameters><parameter name="nodeData" type="Object" usage="required"><description>The custom data associated with the drop node (this is the same value returned from
&lt;a ext:cls=&quot;Ext.dd.DropZone&quot; ext:member=&quot;getTargetFromEvent&quot; href=&quot;output/Ext.dd.DropZone.html#getTargetFromEvent&quot;&gt;getTargetFromEvent&lt;/a&gt; for this node)</description></parameter><parameter name="source" type="Ext.dd.DragSource" usage="required"><description>The drag source that was dragged over this drop zone</description></parameter><parameter name="e" type="Event" usage="required"><description>The event</description></parameter><parameter name="data" type="Object" usage="required"><description>An object containing arbitrary data supplied by the drag source</description></parameter></parameters></method><method name="onNodeDrop" scope="instance"><description>Called internally when the DropZone determines that a &lt;a ext:cls=&quot;Ext.dd.DragSource&quot; href=&quot;output/Ext.dd.DragSource.html&quot;&gt;Ext.dd.DragSource&lt;/a&gt; has been dropped onto
the drop node.  The default implementation returns false, so it should be overridden to provide the
appropriate processing of the drop event and return true so that the drag source's repair action does not run.</description><parameters><parameter name="nodeData" type="Object" usage="required"><description>The custom data associated with the drop node (this is the same value returned from
&lt;a ext:cls=&quot;Ext.dd.DropZone&quot; ext:member=&quot;getTargetFromEvent&quot; href=&quot;output/Ext.dd.DropZone.html#getTargetFromEvent&quot;&gt;getTargetFromEvent&lt;/a&gt; for this node)</description></parameter><parameter name="source" type="Ext.dd.DragSource" usage="required"><description>The drag source that was dragged over this drop zone</description></parameter><parameter name="e" type="Event" usage="required"><description>The event</description></parameter><parameter name="data" type="Object" usage="required"><description>An object containing arbitrary data supplied by the drag source</description></parameter></parameters></method><method name="onContainerOver" scope="instance"><description>Called internally while the DropZone determines that a &lt;a ext:cls=&quot;Ext.dd.DragSource&quot; href=&quot;output/Ext.dd.DragSource.html&quot;&gt;Ext.dd.DragSource&lt;/a&gt; is being dragged over it,
but not over any of its registered drop nodes.  The default implementation returns this.dropNotAllowed, so
it should be overridden to provide the proper feedback if necessary.</description><parameters><parameter name="source" type="Ext.dd.DragSource" usage="required"><description>The drag source that was dragged over this drop zone</description></parameter><parameter name="e" type="Event" usage="required"><description>The event</description></parameter><parameter name="data" type="Object" usage="required"><description>An object containing arbitrary data supplied by the drag source</description></parameter></parameters></method><method name="onContainerDrop" scope="instance"><description>Called internally when the DropZone determines that a &lt;a ext:cls=&quot;Ext.dd.DragSource&quot; href=&quot;output/Ext.dd.DragSource.html&quot;&gt;Ext.dd.DragSource&lt;/a&gt; has been dropped on it,
but not on any of its registered drop nodes.  The default implementation returns false, so it should be
overridden to provide the appropriate processing of the drop event if you need the drop zone itself to
be able to accept drops.  It should return true when valid so that the drag source's repair action does not run.</description><parameters><parameter name="source" type="Ext.dd.DragSource" usage="required"><description>The drag source that was dragged over this drop zone</description></parameter><parameter name="e" type="Event" usage="required"><description>The event</description></parameter><parameter name="data" type="Object" usage="required"><description>An object containing arbitrary data supplied by the drag source</description></parameter></parameters></method><method name="notifyEnter" scope="instance"><description>The function a &lt;a ext:cls=&quot;Ext.dd.DragSource&quot; href=&quot;output/Ext.dd.DragSource.html&quot;&gt;Ext.dd.DragSource&lt;/a&gt; calls once to notify this drop zone that the source is now over
the zone.  The default implementation returns this.dropNotAllowed and expects that only registered drop
nodes can process drag drop operations, so if you need the drop zone itself to be able to process drops
you should override this method and provide a custom implementation.</description><parameters><parameter name="source" type="Ext.dd.DragSource" usage="required"><description>The drag source that was dragged over this drop zone</description></parameter><parameter name="e" type="Event" usage="required"><description>The event</description></parameter><parameter name="data" type="Object" usage="required"><description>An object containing arbitrary data supplied by the drag source</description></parameter></parameters></method><method name="notifyOver" scope="instance"><description>The function a &lt;a ext:cls=&quot;Ext.dd.DragSource&quot; href=&quot;output/Ext.dd.DragSource.html&quot;&gt;Ext.dd.DragSource&lt;/a&gt; calls continuously while it is being dragged over the drop zone.
This method will be called on every mouse movement while the drag source is over the drop zone.
It will call &lt;a ext:cls=&quot;Ext.dd.DropZone&quot; ext:member=&quot;onNodeOver&quot; href=&quot;output/Ext.dd.DropZone.html#onNodeOver&quot;&gt;onNodeOver&lt;/a&gt; while the drag source is over a registered node, and will also automatically
delegate to the appropriate node-specific methods as necessary when the drag source enters and exits
registered nodes (&lt;a ext:cls=&quot;Ext.dd.DropZone&quot; ext:member=&quot;onNodeEnter&quot; href=&quot;output/Ext.dd.DropZone.html#onNodeEnter&quot;&gt;onNodeEnter&lt;/a&gt;, &lt;a ext:cls=&quot;Ext.dd.DropZone&quot; ext:member=&quot;onNodeOut&quot; href=&quot;output/Ext.dd.DropZone.html#onNodeOut&quot;&gt;onNodeOut&lt;/a&gt;). If the drag source is not currently over a
registered node, it will call &lt;a ext:cls=&quot;Ext.dd.DropZone&quot; ext:member=&quot;onContainerOver&quot; href=&quot;output/Ext.dd.DropZone.html#onContainerOver&quot;&gt;onContainerOver&lt;/a&gt;.</description><parameters><parameter name="source" type="Ext.dd.DragSource" usage="required"><description>The drag source that was dragged over this drop zone</description></parameter><parameter name="e" type="Event" usage="required"><description>The event</description></parameter><parameter name="data" type="Object" usage="required"><description>An object containing arbitrary data supplied by the drag source</description></parameter></parameters></method><method name="notifyOut" scope="instance"><description>The function a &lt;a ext:cls=&quot;Ext.dd.DragSource&quot; href=&quot;output/Ext.dd.DragSource.html&quot;&gt;Ext.dd.DragSource&lt;/a&gt; calls once to notify this drop zone that the source has been dragged
out of the zone without dropping.  If the drag source is currently over a registered node, the notification
will be delegated to &lt;a ext:cls=&quot;Ext.dd.DropZone&quot; ext:member=&quot;onNodeOut&quot; href=&quot;output/Ext.dd.DropZone.html#onNodeOut&quot;&gt;onNodeOut&lt;/a&gt; for node-specific handling, otherwise it will be ignored.</description><parameters><parameter name="source" type="Ext.dd.DragSource" usage="required"><description>The drag source that was dragged over this drop target</description></parameter><parameter name="e" type="Event" usage="required"><description>The event</description></parameter><parameter name="data" type="Object" usage="required"><description>An object containing arbitrary data supplied by the drag zone</description></parameter></parameters></method><method name="notifyDrop" scope="instance"><description>The function a &lt;a ext:cls=&quot;Ext.dd.DragSource&quot; href=&quot;output/Ext.dd.DragSource.html&quot;&gt;Ext.dd.DragSource&lt;/a&gt; calls once to notify this drop zone that the dragged item has
been dropped on it.  The drag zone will look up the target node based on the event passed in, and if there
is a node registered for that event, it will delegate to &lt;a ext:cls=&quot;Ext.dd.DropZone&quot; ext:member=&quot;onNodeDrop&quot; href=&quot;output/Ext.dd.DropZone.html#onNodeDrop&quot;&gt;onNodeDrop&lt;/a&gt; for node-specific handling,
otherwise it will call &lt;a ext:cls=&quot;Ext.dd.DropZone&quot; ext:member=&quot;onContainerDrop&quot; href=&quot;output/Ext.dd.DropZone.html#onContainerDrop&quot;&gt;onContainerDrop&lt;/a&gt;.</description><parameters><parameter name="source" type="Ext.dd.DragSource" usage="required"><description>The drag source that was dragged over this drop zone</description></parameter><parameter name="e" type="Event" usage="required"><description>The event</description></parameter><parameter name="data" type="Object" usage="required"><description>An object containing arbitrary data supplied by the drag source</description></parameter></parameters></method></methods></class><class type="Ext.dd.Registry" superclass="Object"><description>Provides easy access to all drag drop components that are registered on a page.  Items can be retrieved either
directly by DOM node id, or by passing in the drag drop event that occurred and looking up the event target.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description><properties/><methods><method name="register" scope="instance"><description>Register a drag drop element</description><parameters><parameter name="element" type="String/HTMLElement)" usage="required"><description>The id or DOM node to register</description></parameter><parameter name="data" type="Object" usage="optional"><description>(optional) A custom data object that will be passed between the elements that are involved
in drag drop operations. You can populate this object with any arbitrary properties that your own code
knows how to interpret, plus there are some specific properties known to the Registry that should be
populated in the data object (if applicable):
&lt;pre&gt;Value      Description&lt;br /&gt;&#13;
---------  ------------------------------------------&lt;br /&gt;&#13;
handles    Array of DOM nodes that trigger dragging&lt;br /&gt;&#13;
           for the element being registered&lt;br /&gt;&#13;
isHandle   True if the element passed in triggers&lt;br /&gt;&#13;
           dragging itself, else false&lt;/pre&gt;</description></parameter></parameters></method><method name="unregister" scope="instance"><description>Unregister a drag drop element</description><parameters><parameter name="element" type="String/HTMLElement)" usage="required"><description>The id or DOM node to unregister</description></parameter></parameters></method><method name="getHandle" scope="instance"><description>Returns the handle registered for a DOM Node by id</description><parameters><parameter name="id" type="String/HTMLElement" usage="required"><description>The DOM node or id to look up</description></parameter></parameters></method><method name="getHandleFromEvent" scope="instance"><description>Returns the handle that is registered for the DOM node that is the target of the event</description><parameters><parameter name="e" type="Event" usage="required"><description>The event</description></parameter></parameters></method><method name="getTarget" scope="instance"><description>Returns a custom data object that is registered for a DOM node by id</description><parameters><parameter name="id" type="String/HTMLElement" usage="required"><description>The DOM node or id to look up</description></parameter></parameters></method><method name="getTargetFromEvent" scope="instance"><description>Returns a custom data object that is registered for the DOM node that is the target of the event</description><parameters><parameter name="e" type="Event" usage="required"><description>The event</description></parameter></parameters></method></methods></class><class type="Ext.dd.ScrollManager" superclass="Object"><description>Provides automatic scrolling of overflow regions in the page during drag operations.&lt;br&gt;&lt;br&gt;
&lt;b&gt;Note: This class uses &quot;Point Mode&quot; and is untested in &quot;Intersect Mode&quot;.&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description><properties><property name="thresh" type="Number" scope="instance" access="read-write"><description>The number of pixels from the edge of a container the pointer needs to be to 
trigger scrolling (defaults to 25)</description></property><property name="increment" type="Number" scope="instance" access="read-write"><description>The number of pixels to scroll in each scroll increment (defaults to 50)</description></property><property name="frequency" type="Number" scope="instance" access="read-write"><description>The frequency of scrolls in milliseconds (defaults to 500)</description></property><property name="animate" type="Boolean" scope="instance" access="read-write"><description>True to animate the scroll (defaults to true)</description></property><property name="animDuration" type="Number" scope="instance" access="read-write"><description>The animation duration in seconds - 
MUST BE less than Ext.dd.ScrollManager.frequency! (defaults to .4)</description></property></properties><methods><method name="register" scope="instance"><description>Registers new overflow element(s) to auto scroll</description><parameters><parameter name="el" type="String/HTMLElement/Element/Array" usage="required"><description>The id of or the element to be scrolled or an array of either</description></parameter></parameters></method><method name="unregister" scope="instance"><description>Unregisters overflow element(s) so they are no longer scrolled</description><parameters><parameter name="el" type="String/HTMLElement/Element/Array" usage="required"><description>The id of or the element to be removed or an array of either</description></parameter></parameters></method><method name="refreshCache" scope="instance"><description>Manually trigger a cache refresh.</description><parameters/></method></methods></class><class type="Ext.dd.StatusProxy" superclass="Object"><description>A specialized drag proxy that supports a drop status icon, &lt;a ext:cls=&quot;Ext.Layer&quot; href=&quot;output/Ext.Layer.html&quot;&gt;Ext.Layer&lt;/a&gt; styles and auto-repair.  This is the
default drag proxy used by all Ext.dd components.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="config" type="Object" usage="required"><description></description></parameter></parameters></constructor></constructors><properties/><methods><method name="setStatus" scope="instance"><description>Updates the proxy's visual element to indicate the status of whether or not drop is allowed
over the current target element.</description><parameters><parameter name="cssClass" type="String" usage="required"><description>The css class for the new drop status indicator image</description></parameter></parameters></method><method name="reset" scope="instance"><description>Resets the status indicator to the default dropNotAllowed value</description><parameters><parameter name="clearGhost" type="Boolean" usage="required"><description>True to also remove all content from the ghost, false to preserve it</description></parameter></parameters></method><method name="update" scope="instance"><description>Updates the contents of the ghost element</description><parameters><parameter name="html" type="String" usage="required"><description>The html that will replace the current innerHTML of the ghost element</description></parameter></parameters></method><method name="getEl" scope="instance"><description>Returns the underlying proxy &lt;a ext:cls=&quot;Ext.Layer&quot; href=&quot;output/Ext.Layer.html&quot;&gt;Ext.Layer&lt;/a&gt;</description><parameters/></method><method name="getGhost" scope="instance"><description>Returns the ghost element</description><parameters/></method><method name="hide" scope="instance"><description>Hides the proxy</description><parameters><parameter name="clear" type="Boolean" usage="required"><description>True to reset the status and clear the ghost contents, false to preserve them</description></parameter></parameters></method><method name="stop" scope="instance"><description>Stops the repair animation if it's currently running</description><parameters/></method><method name="show" scope="instance"><description>Displays this proxy</description><parameters/></method><method name="sync" scope="instance"><description>Force the Layer to sync its shadow and shim positions to the element</description><parameters/></method><method name="repair" scope="instance"><description>Causes the proxy to return to its position of origin via an animation.  Should be called after an
invalid drop operation by the item being dragged.</description><parameters><parameter name="xy" type="Array" usage="required"><description>The XY position of the element ([x, y])</description></parameter><parameter name="callback" type="Function" usage="required"><description>The function to call after the repair is complete</description></parameter><parameter name="scope" type="Object" usage="required"><description>The scope in which to execute the callback</description></parameter></parameters></method></methods></class><class type="Ext.form.BasicForm" superclass="Ext.util.Observable"><description>Supplies the functionality to do &quot;actions&quot; on forms and initialize Ext.form.Field types on existing markup.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="el" type="String/HTMLElement/Ext.Element" usage="required"><description>The form element or its id</description></parameter><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties><property name="waitMsgTarget" type="Mixed" scope="instance" access="read-write"><description>By default wait messages are displayed with Ext.MessageBox.wait. You can target a specific
element by passing it or its id or mask the form itself by passing in true.</description></property></properties><methods><method name="isValid" scope="instance"><description>Returns true if client-side validation on the form is successful.</description><parameters/></method><method name="isDirty" scope="instance"><description>Returns true if any fields in this form have changed since their original load.</description><parameters/></method><method name="doAction" scope="instance"><description>Performs a predefined action (submit or load) or custom actions you define on this form.</description><parameters><parameter name="actionName" type="String" usage="required"><description>The name of the action type</description></parameter><parameter name="options" type="Object" usage="required"><description>The options to pass to the action</description></parameter></parameters></method><method name="submit" scope="instance"><description>Shortcut to do a submit action.</description><parameters><parameter name="options" type="Object" usage="required"><description>The options to pass to the action</description></parameter></parameters></method><method name="load" scope="instance"><description>Shortcut to do a load action.</description><parameters><parameter name="options" type="Object" usage="required"><description>The options to pass to the action</description></parameter></parameters></method><method name="updateRecord" scope="instance"><description>Persists the values in this form into the passed Ext.data.Record object in a beginEdit/endEdit block.</description><parameters><parameter name="record" type="Record" usage="required"><description>The record to edit</description></parameter></parameters></method><method name="loadRecord" scope="instance"><description>Loads an Ext.data.Record into this form.</description><parameters><parameter name="record" type="Record" usage="required"><description>The record to load</description></parameter></parameters></method><method name="findField" scope="instance"><description>Find a Ext.form.Field in this form by id, dataIndex, name or hiddenName</description><parameters><parameter name="id" type="String" usage="required"><description>The value to search for</description></parameter></parameters></method><method name="markInvalid" scope="instance"><description>Mark fields in this form invalid in bulk.</description><parameters><parameter name="errors" type="Array/Object" usage="required"><description>Either an array in the form [{id:'fieldId', msg:'The message'},...] or an object hash of {id: msg, id2: msg2}</description></parameter></parameters></method><method name="setValues" scope="instance"><description>Set values for fields in this form in bulk.</description><parameters><parameter name="values" type="Array/Object" usage="required"><description>Either an array in the form [{id:'fieldId', value:'foo'},...] or an object hash of {id: value, id2: value2}</description></parameter></parameters></method><method name="getValues" scope="instance"><description>Returns the fields in this form as an object with key/value pairs. If multiple fields exist with the same name
they are returned as an array.</description><parameters><parameter name="asString" type="Boolean" usage="required"><description></description></parameter></parameters></method><method name="clearInvalid" scope="instance"><description>Clears all invalid messages in this form.</description><parameters/></method><method name="reset" scope="instance"><description>Resets this form.</description><parameters/></method><method name="add" scope="instance"><description>Add Ext.form components to this form.</description><parameters><parameter name="field1" type="Field" usage="required"><description></description></parameter><parameter name="field2" type="Field" usage="optional"><description>(optional)</description></parameter><parameter name="etc" type="Field" usage="optional"><description>(optional)</description></parameter></parameters></method><method name="remove" scope="instance"><description>Removes a field from the items collection (does NOT remove its markup).</description><parameters><parameter name="field" type="Field" usage="required"><description></description></parameter></parameters></method><method name="render" scope="instance"><description>Looks at the fields in this form, checks them for an id attribute,
and calls applyTo on the existing dom element with that id.</description><parameters/></method><method name="applyToFields" scope="instance"><description>Calls &lt;a ext:cls=&quot;Ext&quot; ext:member=&quot;apply&quot; href=&quot;output/Ext.html#apply&quot;&gt;Ext.apply&lt;/a&gt; for all fields in this form with the passed object.</description><parameters><parameter name="values" type="Object" usage="required"><description></description></parameter></parameters></method><method name="applyIfToFields" scope="instance"><description>Calls &lt;a ext:cls=&quot;Ext&quot; ext:member=&quot;applyIf&quot; href=&quot;output/Ext.html#applyIf&quot;&gt;Ext.applyIf&lt;/a&gt; for all field in this form with the passed object.</description><parameters><parameter name="values" type="Object" usage="required"><description></description></parameter></parameters></method></methods></class><class type="Ext.form.Checkbox" superclass="Ext.form.Field"><description>Single checkbox field.  Can be used as a direct replacement for traditional checkbox fields.</description><constructors><constructor scope="instance"><description>Creates a new Checkbox</description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties/><methods><method name="getValue" scope="instance"><description>Returns the checked state of the checkbox.</description><parameters/></method><method name="setValue" scope="instance"><description>Sets the checked state of the checkbox.</description><parameters><parameter name="checked" type="Boolean/String" usage="required"><description>True, 'true', '1', or 'on' to check the checkbox, any other value will uncheck it.</description></parameter></parameters></method></methods></class><class type="Ext.form.Column" superclass="Ext.form.Layout"><description>Creates a column container for layout and rendering of fields in an &lt;a ext:cls=&quot;Ext.form.Form&quot; href=&quot;output/Ext.form.Form.html&quot;&gt;Ext.form.Form&lt;/a&gt;.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties/><methods/></class><class type="Ext.form.ComboBox" superclass="Ext.form.TriggerField"><description>A combobox control with support for autocomplete, remote-loading, paging and many other features.</description><constructors><constructor scope="instance"><description>Create a new ComboBox.</description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties/><methods><method name="setEditable" scope="instance"><description>Allow or prevent the user from directly editing the field text.  If false is passed,
the user will only be able to select from the items defined in the dropdown list.  This method
is the runtime equivalent of setting the 'editable' config option at config time.</description><parameters><parameter name="value" type="Boolean" usage="required"><description>True to allow the user to directly edit the field text</description></parameter></parameters></method><method name="getValue" scope="instance"><description>Returns the currently selected field value or empty string if no value is set.</description><parameters/></method><method name="clearValue" scope="instance"><description>Clears any text/value currently set in the field</description><parameters/></method><method name="setValue" scope="instance"><description>Sets the specified value into the field.  If the value finds a match, the corresponding record text
will be displayed in the field.  If the value does not match the data value of an existing item,
and the valueNotFoundText config option is defined, it will be displayed as the default field text.
Otherwise the field will be blank (although the value will still be set).</description><parameters><parameter name="value" type="String" usage="required"><description>The value to match</description></parameter></parameters></method><method name="isExpanded" scope="instance"><description>Returns true if the dropdown list is expanded, else false.</description><parameters/></method><method name="selectByValue" scope="instance"><description>Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.
The store must be loaded and the list expanded for this function to work, otherwise use setValue.</description><parameters><parameter name="value" type="String" usage="required"><description>The data value of the item to select</description></parameter><parameter name="scrollIntoView" type="Boolean" usage="required"><description>False to prevent the dropdown list from autoscrolling to display the
selected item if it is not currently in view (defaults to true)</description></parameter></parameters></method><method name="select" scope="instance"><description>Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.
The store must be loaded and the list expanded for this function to work, otherwise use setValue.</description><parameters><parameter name="index" type="Number" usage="required"><description>The zero-based index of the list item to select</description></parameter><parameter name="scrollIntoView" type="Boolean" usage="required"><description>False to prevent the dropdown list from autoscrolling to display the
selected item if it is not currently in view (defaults to true)</description></parameter></parameters></method><method name="doQuery" scope="instance"><description>Execute a query to filter the dropdown list.  Fires the beforequery event prior to performing the
query allowing the query action to be canceled if needed.</description><parameters><parameter name="query" type="String" usage="required"><description>The SQL query to execute</description></parameter><parameter name="forceAll" type="Boolean" usage="required"><description>True to force the query to execute even if there are currently fewer characters
in the field than the minimum specified by the minChars config option. It also clears any filter previously
saved in the current store (defaults to false)</description></parameter></parameters></method><method name="collapse" scope="instance"><description>Hides the dropdown list if it is currently expanded. Fires the 'collapse' event on completion.</description><parameters/></method><method name="expand" scope="instance"><description>Expands the dropdown list if it is currently hidden. Fires the 'expand' event on completion.</description><parameters/></method><method name="autoSize" scope="instance"><description>
@hide</description><parameters/></method></methods></class><class type="Ext.form.DateField" superclass="Ext.form.TriggerField"><description>Provides a date input field with a &lt;a ext:cls=&quot;Ext.DatePicker&quot; href=&quot;output/Ext.DatePicker.html&quot;&gt;Ext.DatePicker&lt;/a&gt; dropdown and automatic date validation.</description><constructors><constructor scope="instance"><description>Create a new DateField</description><parameters><parameter name="config" type="Object" usage="required"><description></description></parameter></parameters></constructor></constructors><properties/><methods><method name="getValue" scope="instance"><description>Returns the current date value of the date field.</description><parameters/></method><method name="setValue" scope="instance"><description>Sets the value of the date field.  You can pass a date object or any string that can be parsed into a valid
date, using DateField.format as the date format, according to the same rules as &lt;a ext:cls=&quot;Date&quot; ext:member=&quot;parseDate&quot; href=&quot;output/Date.html#parseDate&quot;&gt;Date.parseDate&lt;/a&gt;
(the default format used is &quot;m/d/y&quot;).
&lt;br /&gt;Usage:
&lt;pre&gt;&lt;code&gt;//All of these calls set the same date value (May 4, 2006)

//Pass a date object:
var dt = new Date('5/4/06');
dateField.setValue(dt);

//Pass a date string (default format):
dateField.setValue('5/4/06');

//Pass a date string (custom format):
dateField.format = 'Y-m-d';
dateField.setValue('2006-5-4');&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="date" type="String/Date" usage="required"><description>The date or valid date string</description></parameter></parameters></method><method name="autoSize" scope="instance"><description>
@hide</description><parameters/></method></methods></class><class type="Ext.form.Field" superclass="Ext.BoxComponent"><description>Base class for form fields that provides default event handling, sizing, value handling and other functionality.</description><constructors><constructor scope="instance"><description>Creates a new Field</description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties/><methods><method name="getName" scope="instance"><description>Returns the name attribute of the field if available</description><parameters/></method><method name="applyTo" scope="instance"><description>Apply the behaviors of this component to an existing element. &lt;b&gt;This is used instead of render().&lt;/b&gt;</description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description>The id of the node, a DOM node or an existing Element</description></parameter></parameters></method><method name="isDirty" scope="instance"><description>Returns true if this field has been changed since it was originally loaded and is not disabled.</description><parameters/></method><method name="reset" scope="instance"><description>Resets the current field value to the originally loaded value and clears any validation messages</description><parameters/></method><method name="isValid" scope="instance"><description>Returns whether or not the field value is currently valid</description><parameters><parameter name="preventMark" type="Boolean" usage="required"><description>True to disable marking the field invalid</description></parameter></parameters></method><method name="validate" scope="instance"><description>Validates the field value</description><parameters/></method><method name="markInvalid" scope="instance"><description>Mark this field as invalid</description><parameters><parameter name="msg" type="String" usage="required"><description>The validation message</description></parameter></parameters></method><method name="clearInvalid" scope="instance"><description>Clear any invalid styles/messages for this field</description><parameters/></method><method name="getRawValue" scope="instance"><description>Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see &lt;a ext:cls=&quot;Ext.form.Field&quot; ext:member=&quot;getValue&quot; href=&quot;output/Ext.form.Field.html#getValue&quot;&gt;getValue&lt;/a&gt;.</description><parameters/></method><method name="getValue" scope="instance"><description>Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see &lt;a ext:cls=&quot;Ext.form.Field&quot; ext:member=&quot;getRawValue&quot; href=&quot;output/Ext.form.Field.html#getRawValue&quot;&gt;getRawValue&lt;/a&gt;.</description><parameters/></method><method name="setRawValue" scope="instance"><description>Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see &lt;a ext:cls=&quot;Ext.form.Field&quot; ext:member=&quot;setValue&quot; href=&quot;output/Ext.form.Field.html#setValue&quot;&gt;setValue&lt;/a&gt;.</description><parameters><parameter name="value" type="Mixed" usage="required"><description>The value to set</description></parameter></parameters></method><method name="setValue" scope="instance"><description>Sets a data value into the field and validates it.  To set the value directly without validation see &lt;a ext:cls=&quot;Ext.form.Field&quot; ext:member=&quot;setRawValue&quot; href=&quot;output/Ext.form.Field.html#setRawValue&quot;&gt;setRawValue&lt;/a&gt;.</description><parameters><parameter name="value" type="Mixed" usage="required"><description>The value to set</description></parameter></parameters></method></methods></class><class type="Ext.form.FieldSet" superclass="Ext.form.Layout"><description>Creates a fieldset container for layout and rendering of fields in an &lt;a ext:cls=&quot;Ext.form.Form&quot; href=&quot;output/Ext.form.Form.html&quot;&gt;Ext.form.Form&lt;/a&gt;.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties/><methods/></class><class type="Ext.form.Form" superclass="Ext.form.BasicForm"><description>Adds the ability to dynamically render forms with JavaScript to &lt;a ext:cls=&quot;Ext.form.BasicForm&quot; href=&quot;output/Ext.form.BasicForm.html&quot;&gt;Ext.form.BasicForm&lt;/a&gt;.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties><property name="buttons" type="Array" scope="instance" access="read-write"><description>Array of all the buttons that have been added to this form via &lt;a ext:cls=&quot;addButton&quot; href=&quot;output/addButton.html&quot;&gt;addButton&lt;/a&gt;</description></property></properties><methods><method name="column" scope="instance"><description>Opens a new &lt;a ext:cls=&quot;Ext.form.Column&quot; href=&quot;output/Ext.form.Column.html&quot;&gt;Ext.form.Column&lt;/a&gt; container in the layout stack. If fields are passed after the config, the
fields are added and the column is closed. If no fields are passed the column remains open
until end() is called.</description><parameters><parameter name="config" type="Object" usage="required"><description>The config to pass to the column</description></parameter><parameter name="field1" type="Field" usage="optional"><description>(optional)</description></parameter><parameter name="field2" type="Field" usage="optional"><description>(optional)</description></parameter><parameter name="etc" type="Field" usage="optional"><description>(optional)</description></parameter></parameters></method><method name="fieldset" scope="instance"><description>Opens a new &lt;a ext:cls=&quot;Ext.form.FieldSet&quot; href=&quot;output/Ext.form.FieldSet.html&quot;&gt;Ext.form.FieldSet&lt;/a&gt; container in the layout stack. If fields are passed after the config, the
fields are added and the fieldset is closed. If no fields are passed the fieldset remains open
until end() is called.</description><parameters><parameter name="config" type="Object" usage="required"><description>The config to pass to the fieldset</description></parameter><parameter name="field1" type="Field" usage="optional"><description>(optional)</description></parameter><parameter name="field2" type="Field" usage="optional"><description>(optional)</description></parameter><parameter name="etc" type="Field" usage="optional"><description>(optional)</description></parameter></parameters></method><method name="container" scope="instance"><description>Opens a new &lt;a ext:cls=&quot;Ext.form.Layout&quot; href=&quot;output/Ext.form.Layout.html&quot;&gt;Ext.form.Layout&lt;/a&gt; container in the layout stack. If fields are passed after the config, the
fields are added and the container is closed. If no fields are passed the container remains open
until end() is called.</description><parameters><parameter name="config" type="Object" usage="required"><description>The config to pass to the Layout</description></parameter><parameter name="field1" type="Field" usage="optional"><description>(optional)</description></parameter><parameter name="field2" type="Field" usage="optional"><description>(optional)</description></parameter><parameter name="etc" type="Field" usage="optional"><description>(optional)</description></parameter></parameters></method><method name="start" scope="instance"><description>Opens the passed container in the layout stack. The container can be any &lt;a ext:cls=&quot;Ext.form.Layout&quot; href=&quot;output/Ext.form.Layout.html&quot;&gt;Ext.form.Layout&lt;/a&gt; or subclass.</description><parameters><parameter name="container" type="Object" usage="required"><description>A Ext.form.Layout or subclass of Layout</description></parameter></parameters></method><method name="end" scope="instance"><description>Closes the current open container</description><parameters/></method><method name="add" scope="instance"><description>Add Ext.form components to the current open container (e.g. column, fieldset, etc.).  Fields added via this method
can also be passed with an additional property of fieldLabel, which if supplied, will provide the text to display
as the label of the field.</description><parameters><parameter name="field1" type="Field" usage="required"><description></description></parameter><parameter name="field2" type="Field" usage="optional"><description>(optional)</description></parameter><parameter name="etc." type="Field" usage="optional"><description>(optional)</description></parameter></parameters></method><method name="render" scope="instance"><description>Render this form into the passed container. This should only be called once!</description><parameters><parameter name="container" type="String/HTMLElement/Element" usage="required"><description>The element this component should be rendered into</description></parameter></parameters></method><method name="addButton" scope="instance"><description>Adds a button to the footer of the form - this &lt;b&gt;must&lt;/b&gt; be called before the form is rendered.</description><parameters><parameter name="config" type="String/Object" usage="required"><description>A string becomes the button text, an object can either be a Button config
object or a valid Ext.DomHelper element config</description></parameter><parameter name="handler" type="Function" usage="required"><description>The function called when the button is clicked</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope of the handler function</description></parameter></parameters></method><method name="startMonitoring" scope="instance"><description>Starts monitoring of the valid state of this form. Usually this is done by passing the config
option &quot;monitorValid&quot;</description><parameters/></method><method name="stopMonitoring" scope="instance"><description>Stops monitoring of the valid state of this form</description><parameters/></method></methods></class><class type="Ext.form.HtmlEditor" superclass="Ext.form.Field"><description>Provides a lightweight HTML Editor component.
&lt;br&gt;&lt;br&gt;&lt;b&gt;Note: The focus/blur and validation marking functionality inherited from Ext.form.Field is NOT
supported by this editor.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;
An Editor is a sensitive component that can't be used in all spots standard fields can be used. Putting an Editor within
any element that has display set to 'none' can cause problems in Safari and Firefox.</description><properties><property name="buttonTips" type="Object" scope="instance" access="read-write"><description>Object collection of toolbar tooltips for the buttons in the editor. The key
is the command id associated with that button and the value is a valid QuickTips object.
For example:&#13;
&lt;pre&gt;&lt;code&gt;{
    bold : {
        title: 'Bold (Ctrl+B)',
        text: 'Make the selected text bold.',
        cls: 'x-html-editor-tip'
    },
    italic : {
        title: 'Italic (Ctrl+I)',
        text: 'Make the selected text italic.',
        cls: 'x-html-editor-tip'
    },
    ...&lt;/code&gt;&lt;/pre&gt;</description></property></properties><methods><method name="createToolbar" scope="instance"><description>Protected method that will not generally be called directly. It
is called when the editor creates its toolbar. Override this method if you need to
add custom toolbar buttons.</description><parameters><parameter name="editor" type="HtmlEditor" usage="required"><description></description></parameter></parameters></method><method name="getDocMarkup" scope="instance"><description>Protected method that will not generally be called directly. It
is called when the editor initializes the iframe with HTML contents. Override this method if you
want to change the initialization markup of the iframe (e.g. to add stylesheets).</description><parameters/></method><method name="toggleSourceEdit" scope="instance"><description>Toggles the editor between standard and source edit mode.</description><parameters><parameter name="sourceEdit" type="Boolean" usage="optional"><description>(optional) True for source edit, false for standard</description></parameter></parameters></method><method name="markInvalid" scope="instance"><description>Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide</description><parameters/></method><method name="clearInvalid" scope="instance"><description>Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide</description><parameters/></method><method name="cleanHtml" scope="instance"><description>Protected method that will not generally be called directly. If you need/want
custom HTML cleanup, this is the method you should override.</description><parameters><parameter name="html" type="String" usage="required"><description>The HTML to be cleaned
return {String} The cleaned HTML</description></parameter></parameters></method><method name="syncValue" scope="instance"><description>Protected method that will not generally be called directly. Syncs the contents
of the editor iframe with the textarea.</description><parameters/></method><method name="pushValue" scope="instance"><description>Protected method that will not generally be called directly. Pushes the value of the textarea
into the iframe editor.</description><parameters/></method><method name="updateToolbar" scope="instance"><description>Protected method that will not generally be called directly. It triggers
a toolbar update by reading the markup state of the current selection in the editor.</description><parameters/></method><method name="relayCmd" scope="instance"><description>Executes a Midas editor command on the editor document and performs necessary focus and
toolbar updates. &lt;b&gt;This should only be called after the editor is initialized.&lt;/b&gt;</description><parameters><parameter name="cmd" type="String" usage="required"><description>The Midas command</description></parameter><parameter name="value" type="String/Boolean" usage="optional"><description>(optional) The value to pass to the command (defaults to null)</description></parameter></parameters></method><method name="execCmd" scope="instance"><description>Executes a Midas editor command directly on the editor document.
For visual commands, you should use &lt;a ext:cls=&quot;Ext.form.HtmlEditor&quot; ext:member=&quot;relayCmd&quot; href=&quot;output/Ext.form.HtmlEditor.html#relayCmd&quot;&gt;relayCmd&lt;/a&gt; instead.
&lt;b&gt;This should only be called after the editor is initialized.&lt;/b&gt;</description><parameters><parameter name="cmd" type="String" usage="required"><description>The Midas command</description></parameter><parameter name="value" type="String/Boolean" usage="optional"><description>(optional) The value to pass to the command (defaults to null)</description></parameter></parameters></method><method name="insertAtCursor" scope="instance"><description>Inserts the passed text at the current cursor position. Note: the editor must be initialized and activated
to insert text.</description><parameters><parameter name="text" type="String" usage="required"><description></description></parameter></parameters></method><method name="getToolbar" scope="instance"><description>Returns the editor's toolbar. &lt;b&gt;This is only available after the editor has been rendered.&lt;/b&gt;</description><parameters/></method></methods></class><class type="Ext.form.Layout" superclass="Ext.Component"><description>Creates a container for layout and rendering of fields in an &lt;a ext:cls=&quot;Ext.form.Form&quot; href=&quot;output/Ext.form.Form.html&quot;&gt;Ext.form.Form&lt;/a&gt;.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties/><methods/></class><class type="Ext.form.NumberField" superclass="Ext.form.TextField"><description>Numeric text field that provides automatic keystroke filtering and numeric validation.</description><constructors><constructor scope="instance"><description>Creates a new NumberField</description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties/><methods/></class><class type="Ext.form.Radio" superclass="Ext.form.Checkbox"><description>Single radio field.  Same as Checkbox, but provided as a convenience for automatically setting the input type.
Radio grouping is handled automatically by the browser if you give each radio in a group the same name.</description><constructors><constructor scope="instance"><description>Creates a new Radio</description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties/><methods><method name="getGroupValue" scope="instance"><description>If this radio is part of a group, it will return the selected value</description><parameters/></method></methods></class><class type="Ext.form.TextArea" superclass="Ext.form.TextField"><description>Multiline text field.  Can be used as a direct replacement for traditional textarea fields, plus adds
support for auto-sizing.</description><constructors><constructor scope="instance"><description>Creates a new TextArea</description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties/><methods><method name="autoSize" scope="instance"><description>Automatically grows the field to accomodate the height of the text up to the maximum field height allowed.
This only takes effect if grow = true, and fires the autosize event if the height changes.</description><parameters/></method></methods></class><class type="Ext.form.TextField" superclass="Ext.form.Field"><description>Basic text field.  Can be used as a direct replacement for traditional text inputs, or as the base
class for more sophisticated input controls (like &lt;a ext:cls=&quot;Ext.form.TextArea&quot; href=&quot;output/Ext.form.TextArea.html&quot;&gt;Ext.form.TextArea&lt;/a&gt; and &lt;a ext:cls=&quot;Ext.form.ComboBox&quot; href=&quot;output/Ext.form.ComboBox.html&quot;&gt;Ext.form.ComboBox&lt;/a&gt;).</description><constructors><constructor scope="instance"><description>Creates a new TextField</description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties/><methods><method name="reset" scope="instance"><description>Resets the current field value to the originally-loaded value and clears any validation messages.
Also adds emptyText and emptyClass if the original value was blank.</description><parameters/></method><method name="validateValue" scope="instance"><description>Validates a value according to the field's validation rules and marks the field as invalid
if the validation fails</description><parameters><parameter name="value" type="Mixed" usage="required"><description>The value to validate</description></parameter></parameters></method><method name="selectText" scope="instance"><description>Selects text in this field</description><parameters><parameter name="start" type="Number" usage="optional"><description>(optional) The index where the selection should start (defaults to 0)</description></parameter><parameter name="end" type="Number" usage="optional"><description>(optional) The index where the selection should end (defaults to the text length)</description></parameter></parameters></method><method name="autoSize" scope="instance"><description>Automatically grows the field to accomodate the width of the text up to the maximum field width allowed.
This only takes effect if grow = true, and fires the autosize event.</description><parameters/></method></methods></class><class type="Ext.form.TriggerField" superclass="Ext.form.TextField"><description>Provides a convenient wrapper for TextFields that adds a clickable trigger button (looks like a combobox by default).
The trigger has no default action, so you must assign a function to implement the trigger click handler by
overriding &lt;a ext:cls=&quot;Ext.form.TriggerField&quot; ext:member=&quot;onTriggerClick&quot; href=&quot;output/Ext.form.TriggerField.html#onTriggerClick&quot;&gt;onTriggerClick&lt;/a&gt;. You can create a TriggerField directly, as it renders exactly like a combobox
for which you can provide a custom implementation.  For example:
&lt;pre&gt;&lt;code&gt;var trigger = new Ext.form.TriggerField();
trigger.onTriggerClick = myTriggerFn;
trigger.applyTo('my-field');&lt;/code&gt;&lt;/pre&gt;
However, in general you will most likely want to use TriggerField as the base class for a reusable component.
&lt;a ext:cls=&quot;Ext.form.DateField&quot; href=&quot;output/Ext.form.DateField.html&quot;&gt;Ext.form.DateField&lt;/a&gt; and &lt;a ext:cls=&quot;Ext.form.ComboBox&quot; href=&quot;output/Ext.form.ComboBox.html&quot;&gt;Ext.form.ComboBox&lt;/a&gt; are perfect examples of this.</description><constructors><constructor scope="instance"><description>Create a new TriggerField.</description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options (valid {@Ext.form.TextField} config options will also be applied
to the base TextField)</description></parameter></parameters></constructor></constructors><properties/><methods><method name="autoSize" scope="instance"><description>
@hide</description><parameters/></method><method name="onTriggerClick" scope="instance"><description>The function that should handle the trigger's click event.  This method does nothing by default until overridden
by a handler implementation.</description><parameters><parameter name="e" type="EventObject" usage="required"><description></description></parameter></parameters></method></methods></class><class type="Ext.form.VTypes" superclass="Object"><description>Overridable validation definitions. The validations provided are basic and intended to be easily customizable and extended.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description><properties><property name="emailText" type="String" scope="instance" access="read-write"><description>The error text to display when the email validation function returns false</description></property><property name="emailMask" type="RegExp" scope="instance" access="read-write"><description>The keystroke filter mask to be applied on email input</description></property><property name="urlText" type="String" scope="instance" access="read-write"><description>The error text to display when the url validation function returns false</description></property><property name="alphaText" type="String" scope="instance" access="read-write"><description>The error text to display when the alpha validation function returns false</description></property><property name="alphaMask" type="RegExp" scope="instance" access="read-write"><description>The keystroke filter mask to be applied on alpha input</description></property><property name="alphanumText" type="String" scope="instance" access="read-write"><description>The error text to display when the alphanumeric validation function returns false</description></property><property name="alphanumMask" type="RegExp" scope="instance" access="read-write"><description>The keystroke filter mask to be applied on alphanumeric input</description></property></properties><methods><method name="email" scope="instance"><description>The function used to validate email addresses</description><parameters><parameter name="value" type="String" usage="required"><description>The email address</description></parameter></parameters></method><method name="url" scope="instance"><description>The function used to validate URLs</description><parameters><parameter name="value" type="String" usage="required"><description>The URL</description></parameter></parameters></method><method name="alpha" scope="instance"><description>The function used to validate alpha values</description><parameters><parameter name="value" type="String" usage="required"><description>The value</description></parameter></parameters></method><method name="alphanum" scope="instance"><description>The function used to validate alphanumeric values</description><parameters><parameter name="value" type="String" usage="required"><description>The value</description></parameter></parameters></method></methods></class><class type="Ext.grid.AbstractSelectionModel" superclass="Ext.util.Observable"><description>Abstract base class for grid SelectionModels.  It provides the interface that should be
implemented by descendant classes.  This class should not be directly instantiated.</description><constructors><constructor scope="instance"><description></description><parameters/></constructor></constructors><properties/><methods><method name="lock" scope="instance"><description>Locks the selections.</description><parameters/></method><method name="unlock" scope="instance"><description>Unlocks the selections.</description><parameters/></method><method name="isLocked" scope="instance"><description>Returns true if the selections are locked.</description><parameters/></method></methods></class><class type="Ext.grid.CellSelectionModel" superclass="Ext.grid.AbstractSelectionModel"><description>This class provides the basic implementation for cell selection in a grid.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="config" type="Object" usage="required"><description>The object containing the configuration of this model.</description></parameter></parameters></constructor></constructors><properties/><methods><method name="getSelectedCell" scope="instance"><description>Returns the currently selected cell,.</description><parameters/></method><method name="clearSelections" scope="instance"><description>Clears all selections.</description><parameters><parameter name="true" type="Boolean" usage="required"><description>to prevent the gridview from being notified about the change.</description></parameter></parameters></method><method name="hasSelection" scope="instance"><description>Returns true if there is a selection.</description><parameters/></method><method name="select" scope="instance"><description>Selects a cell.</description><parameters><parameter name="rowIndex" type="Number" usage="required"><description></description></parameter><parameter name="collIndex" type="Number" usage="required"><description></description></parameter></parameters></method></methods></class><class type="Ext.grid.ColumnModel" superclass="Ext.util.Observable"><description>This is the default implementation of a ColumnModel used by the Grid. It defines
the columns in the grid.
&lt;br&gt;Usage:&lt;br&gt;&#13;
 &lt;pre&gt;&lt;code&gt;var colModel = new Ext.grid.ColumnModel([
	{header: &quot;Ticker&quot;, width: 60, sortable: true, locked: true},
	{header: &quot;Company Name&quot;, width: 150, sortable: true},
	{header: &quot;Market Cap.&quot;, width: 100, sortable: true},
	{header: &quot;$ Sales&quot;, width: 100, sortable: true, renderer: money},
	{header: &quot;Employees&quot;, width: 100, sortable: true, resizable: false}
 ]);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The config options listed for this class are options which may appear in each
individual column definition.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="config" type="Object" usage="required"><description>An Array of column config objects. See this class's
config objects for details.</description></parameter></parameters></constructor></constructors><properties><property name="config" type="Object" scope="instance" access="read-write"><description>The config passed into the constructor</description></property><property name="defaultWidth" type="Number" scope="instance" access="read-write"><description>The width of columns which have no width specified (defaults to 100)</description></property><property name="defaultSortable" type="Boolean" scope="instance" access="read-write"><description>Default sortable of columns which have no sortable specified (defaults to false)</description></property></properties><methods><method name="getColumnId" scope="instance"><description>
Returns the id of the column at the specified index.</description><parameters><parameter name="index" type="Number" usage="required"><description>The column index</description></parameter></parameters></method><method name="getColumnById" scope="instance"><description>Returns the column for a specified id.</description><parameters><parameter name="id" type="String" usage="required"><description>The column id</description></parameter></parameters></method><method name="getIndexById" scope="instance"><description>Returns the index for a specified column id.</description><parameters><parameter name="id" type="String" usage="required"><description>The column id</description></parameter></parameters></method><method name="getColumnCount" scope="instance"><description>Returns the number of columns.</description><parameters/></method><method name="getColumnsBy" scope="instance"><description>Returns the column configs that return true by the passed function that is called with (columnConfig, index)</description><parameters><parameter name="fn" type="Function" usage="required"><description></description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional)</description></parameter></parameters></method><method name="isSortable" scope="instance"><description>Returns true if the specified column is sortable.</description><parameters><parameter name="col" type="Number" usage="required"><description>The column index</description></parameter></parameters></method><method name="getRenderer" scope="instance"><description>Returns the rendering (formatting) function defined for the column.</description><parameters><parameter name="col" type="Number" usage="required"><description>The column index.</description></parameter></parameters></method><method name="setRenderer" scope="instance"><description>Sets the rendering (formatting) function for a column.</description><parameters><parameter name="col" type="Number" usage="required"><description>The column index</description></parameter><parameter name="fn" type="Function" usage="required"><description>The function to use to process the cell's raw data
to return HTML markup for the grid view. The render function is called with
the following parameters:&lt;ul&gt;
&lt;li&gt;Data value.&lt;/li&gt;
&lt;li&gt;Cell metadata. An object in which you may set the following attributes:&lt;ul&gt;
&lt;li&gt;css A CSS style string to apply to the table cell.&lt;/li&gt;
&lt;li&gt;attr An HTML attribute definition string to apply to the data container element &lt;i&gt;within&lt;/i&gt; the table cell.&lt;/li&gt;&lt;/ul&gt;
&lt;li&gt;The &lt;a ext:cls=&quot;Ext.data.Record&quot; href=&quot;output/Ext.data.Record.html&quot;&gt;Ext.data.Record&lt;/a&gt; from which the data was extracted.&lt;/li&gt;
&lt;li&gt;Row index&lt;/li&gt;
&lt;li&gt;Column index&lt;/li&gt;
&lt;li&gt;The &lt;a ext:cls=&quot;Ext.data.Store&quot; href=&quot;output/Ext.data.Store.html&quot;&gt;Ext.data.Store&lt;/a&gt; object from which the Record was extracted&lt;/li&gt;&lt;/ul&gt;</description></parameter></parameters></method><method name="getColumnWidth" scope="instance"><description>Returns the width for the specified column.</description><parameters><parameter name="col" type="Number" usage="required"><description>The column index</description></parameter></parameters></method><method name="setColumnWidth" scope="instance"><description>Sets the width for a column.</description><parameters><parameter name="col" type="Number" usage="required"><description>The column index</description></parameter><parameter name="width" type="Number" usage="required"><description>The new width</description></parameter></parameters></method><method name="getTotalWidth" scope="instance"><description>Returns the total width of all columns.</description><parameters><parameter name="includeHidden" type="Boolean" usage="required"><description>True to include hidden column widths</description></parameter></parameters></method><method name="getColumnHeader" scope="instance"><description>Returns the header for the specified column.</description><parameters><parameter name="col" type="Number" usage="required"><description>The column index</description></parameter></parameters></method><method name="setColumnHeader" scope="instance"><description>Sets the header for a column.</description><parameters><parameter name="col" type="Number" usage="required"><description>The column index</description></parameter><parameter name="header" type="String" usage="required"><description>The new header</description></parameter></parameters></method><method name="getColumnTooltip" scope="instance"><description>Returns the tooltip for the specified column.</description><parameters><parameter name="col" type="Number" usage="required"><description>The column index</description></parameter></parameters></method><method name="setColumnTooltip" scope="instance"><description>Sets the tooltip for a column.</description><parameters><parameter name="col" type="Number" usage="required"><description>The column index</description></parameter><parameter name="tooltip" type="String" usage="required"><description>The new tooltip</description></parameter></parameters></method><method name="getDataIndex" scope="instance"><description>Returns the dataIndex for the specified column.</description><parameters><parameter name="col" type="Number" usage="required"><description>The column index</description></parameter></parameters></method><method name="setDataIndex" scope="instance"><description>Sets the dataIndex for a column.</description><parameters><parameter name="col" type="Number" usage="required"><description>The column index</description></parameter><parameter name="dataIndex" type="Number" usage="required"><description>The new dataIndex</description></parameter></parameters></method><method name="isCellEditable" scope="instance"><description>Returns true if the cell is editable.</description><parameters><parameter name="colIndex" type="Number" usage="required"><description>The column index</description></parameter><parameter name="rowIndex" type="Number" usage="required"><description>The row index</description></parameter></parameters></method><method name="getCellEditor" scope="instance"><description>Returns the editor defined for the cell/column.</description><parameters><parameter name="colIndex" type="Number" usage="required"><description>The column index</description></parameter><parameter name="rowIndex" type="Number" usage="required"><description>The row index</description></parameter></parameters></method><method name="setEditable" scope="instance"><description>Sets if a column is editable.</description><parameters><parameter name="col" type="Number" usage="required"><description>The column index</description></parameter><parameter name="editable" type="Boolean" usage="required"><description>True if the column is editable</description></parameter></parameters></method><method name="isHidden" scope="instance"><description>Returns true if the column is hidden.</description><parameters><parameter name="colIndex" type="Number" usage="required"><description>The column index</description></parameter></parameters></method><method name="isFixed" scope="instance"><description>Returns true if the column width cannot be changed</description><parameters/></method><method name="isResizable" scope="instance"><description>Returns true if the column can be resized</description><parameters/></method><method name="setHidden" scope="instance"><description>Sets if a column is hidden.</description><parameters><parameter name="colIndex" type="Number" usage="required"><description>The column index</description></parameter><parameter name="hidden" type="Boolean" usage="required"><description>True if the column is hidden</description></parameter></parameters></method><method name="setEditor" scope="instance"><description>Sets the editor for a column.</description><parameters><parameter name="col" type="Number" usage="required"><description>The column index</description></parameter><parameter name="editor" type="Object" usage="required"><description>The editor object</description></parameter></parameters></method></methods></class><class type="Ext.grid.EditorGrid" superclass="Ext.grid.Grid"><description>Class for creating and editable grid.</description><properties/><methods><method name="startEditing" scope="instance"><description>Starts editing the specified for the specified row/column</description><parameters><parameter name="rowIndex" type="Number" usage="required"><description></description></parameter><parameter name="colIndex" type="Number" usage="required"><description></description></parameter></parameters></method><method name="stopEditing" scope="instance"><description>Stops any active editing</description><parameters/></method></methods></class><class type="Ext.grid.Grid" superclass="Ext.util.Observable"><description>This class represents the primary interface of a component based grid control.
&lt;br&gt;&lt;br&gt;Usage:&lt;pre&gt;&lt;code&gt;var grid = new Ext.grid.Grid(&quot;my-container-id&quot;, {
     ds: myDataStore,
     cm: myColModel,
     selModel: mySelectionModel,
     autoSizeColumns: true,
     monitorWindowResize: false,
     trackMouseOver: true
 });
 // set any options
 grid.render();&lt;/code&gt;&lt;/pre&gt;
&lt;b&gt;Common Problems:&lt;/b&gt;&lt;br/&gt;
- Grid does not resize properly when going smaller: Setting overflow hidden on the container
element will correct this&lt;br/&gt;
- If you get el.style[camel]= NaNpx or -2px or something related, be certain you have given your container element
dimensions. The grid adapts to your container's size, if your container has no size defined then the results
are unpredictable.&lt;br/&gt;
- Do not render the grid into an element with display:none. Try using visibility:hidden. Otherwise there is no way for the
grid to calculate dimensions/offsets.&lt;br/&gt;</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="container" type="String/HTMLElement/Ext.Element" usage="required"><description>The element into which this grid will be rendered -
The container MUST have some type of size defined for the grid to fill. The container will be
automatically set to position relative if it isn't already.</description></parameter><parameter name="config" type="Object" usage="required"><description>A config object that sets properties on this grid.</description></parameter></parameters></constructor></constructors><properties><property name="ddText" type="String" scope="instance" access="read-write"><description>Configures the text is the drag proxy (defaults to &quot;%0 selected row(s)&quot;).
%0 is replaced with the number of selected rows.</description></property></properties><methods><method name="render" scope="instance"><description>
Called once after all setup has been completed and the grid is ready to be rendered.</description><parameters/></method><method name="reconfigure" scope="instance"><description>Reconfigures the grid to use a different Store and Column Model.
The View will be bound to the new objects and refreshed.</description><parameters><parameter name="dataSource" type="Ext.data.Store" usage="required"><description>The new &lt;a ext:cls=&quot;Ext.data.Store&quot; href=&quot;output/Ext.data.Store.html&quot;&gt;Ext.data.Store&lt;/a&gt; object</description></parameter><parameter name="The" type="Ext.grid.ColumnModel" usage="required"><description>new &lt;a ext:cls=&quot;Ext.grid.ColumnModel&quot; href=&quot;output/Ext.grid.ColumnModel.html&quot;&gt;Ext.grid.ColumnModel&lt;/a&gt; object</description></parameter></parameters></method><method name="destroy" scope="instance"><description>Destroy this grid.</description><parameters><parameter name="removeEl" type="Boolean" usage="required"><description>True to remove the element</description></parameter></parameters></method><method name="autoSize" scope="instance"><description>Causes the grid to manually recalculate its dimensions. Generally this is done automatically,
but if manual update is required this method will initiate it.</description><parameters/></method><method name="getSelectionModel" scope="instance"><description>Returns the grid's SelectionModel.</description><parameters/></method><method name="getDataSource" scope="instance"><description>Returns the grid's DataSource.</description><parameters/></method><method name="getColumnModel" scope="instance"><description>Returns the grid's ColumnModel.</description><parameters/></method><method name="getView" scope="instance"><description>Returns the grid's GridView object.</description><parameters/></method><method name="getDragDropText" scope="instance"><description>Called to get grid's drag proxy text, by default returns this.ddText.</description><parameters/></method></methods></class><class type="Ext.grid.GridView" superclass="Ext.util.Observable"><description></description><constructors><constructor scope="instance"><description></description><parameters><parameter name="config" type="Object" usage="required"><description></description></parameter></parameters></constructor></constructors><properties/><methods><method name="getRowClass" scope="instance"><description>Override this function to apply custom css classes to rows during rendering</description><parameters><parameter name="record" type="Record" usage="required"><description>The record</description></parameter><parameter name="index" type="Number" usage="required"><description></description></parameter></parameters></method><method name="scrollToTop" scope="instance"><description>Scrolls the grid to the top</description><parameters/></method><method name="getHeaderPanel" scope="instance"><description>Gets a panel in the header of the grid that can be used for toolbars etc.
After modifying the contents of this panel a call to grid.autoSize() may be
required to register any changes in size.</description><parameters><parameter name="doShow" type="Boolean" usage="required"><description>By default the header is hidden. Pass true to show the panel</description></parameter></parameters></method><method name="getFooterPanel" scope="instance"><description>Gets a panel in the footer of the grid that can be used for toolbars etc.
After modifying the contents of this panel a call to grid.autoSize() may be
required to register any changes in size.</description><parameters><parameter name="doShow" type="Boolean" usage="required"><description>By default the footer is hidden. Pass true to show the panel</description></parameter></parameters></method><method name="focusRow" scope="instance"><description>Focuses the specified row.</description><parameters><parameter name="row" type="Number" usage="required"><description>The row index</description></parameter></parameters></method><method name="focusCell" scope="instance"><description>Focuses the specified cell.</description><parameters><parameter name="row" type="Number" usage="required"><description>The row index</description></parameter><parameter name="col" type="Number" usage="required"><description>The column index</description></parameter><parameter name="hscroll" type="Boolean" usage="required"><description>false to disable horizontal scrolling</description></parameter></parameters></method><method name="ensureVisible" scope="instance"><description>Scrolls the specified cell into view</description><parameters><parameter name="row" type="Number" usage="required"><description>The row index</description></parameter><parameter name="col" type="Number" usage="required"><description>The column index</description></parameter><parameter name="hscroll" type="Boolean" usage="required"><description>false to disable horizontal scrolling</description></parameter></parameters></method><method name="refresh" scope="instance"><description>Refreshes the grid</description><parameters><parameter name="headersToo" type="Boolean" usage="required"><description></description></parameter></parameters></method><method name="autoSizeColumn" scope="instance"><description>Autofit a column to its content.</description><parameters><parameter name="colIndex" type="Number" usage="required"><description></description></parameter><parameter name="forceMinSize" type="Boolean" usage="required"><description>true to force the column to go smaller if possible</description></parameter></parameters></method><method name="autoSizeColumns" scope="instance"><description>Autofits all columns to their content and then expands to fit any extra space in the grid</description><parameters/></method><method name="fitColumns" scope="instance"><description>Autofits all columns to the grid's width proportionate with their current size</description><parameters><parameter name="reserveScrollSpace" type="Boolean" usage="required"><description>Reserve space for a scrollbar</description></parameter></parameters></method></methods></class><class type="Ext.grid.RowSelectionModel" superclass="Ext.grid.AbstractSelectionModel"><description>The default SelectionModel used by &lt;a ext:cls=&quot;Ext.grid.Grid&quot; href=&quot;output/Ext.grid.Grid.html&quot;&gt;Ext.grid.Grid&lt;/a&gt;.&#13;
 It supports multiple selections and keyboard selection/navigation. &lt;br&gt;&lt;br&gt;</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="config" type="Object" usage="required"><description></description></parameter></parameters></constructor></constructors><properties/><methods><method name="selectRecords" scope="instance"><description>Select records.</description><parameters><parameter name="records" type="Array" usage="required"><description>The records to select</description></parameter><parameter name="keepExisting" type="Boolean" usage="optional"><description>(optional) True to keep existing selections</description></parameter></parameters></method><method name="getCount" scope="instance"><description>Gets the number of selected rows.</description><parameters/></method><method name="selectFirstRow" scope="instance"><description>Selects the first row in the grid.</description><parameters/></method><method name="selectLastRow" scope="instance"><description>Select the last row.</description><parameters><parameter name="keepExisting" type="Boolean" usage="optional"><description>(optional) True to keep existing selections</description></parameter></parameters></method><method name="selectNext" scope="instance"><description>Selects the row immediately following the last selected row.</description><parameters><parameter name="keepExisting" type="Boolean" usage="optional"><description>(optional) True to keep existing selections</description></parameter></parameters></method><method name="selectPrevious" scope="instance"><description>Selects the row that precedes the last selected row.</description><parameters><parameter name="keepExisting" type="Boolean" usage="optional"><description>(optional) True to keep existing selections</description></parameter></parameters></method><method name="getSelections" scope="instance"><description>Returns the selected records</description><parameters/></method><method name="getSelected" scope="instance"><description>Returns the first selected record.</description><parameters/></method><method name="clearSelections" scope="instance"><description>Clears all selections.</description><parameters/></method><method name="selectAll" scope="instance"><description>Selects all rows.</description><parameters/></method><method name="hasSelection" scope="instance"><description>Returns True if there is a selection.</description><parameters/></method><method name="isSelected" scope="instance"><description>Returns True if the specified row is selected.</description><parameters><parameter name="record" type="Number/Record" usage="required"><description>The record or index of the record to check</description></parameter></parameters></method><method name="isIdSelected" scope="instance"><description>Returns True if the specified record id is selected.</description><parameters><parameter name="id" type="String" usage="required"><description>The id of record to check</description></parameter></parameters></method><method name="selectRows" scope="instance"><description>Selects multiple rows.</description><parameters><parameter name="rows" type="Array" usage="required"><description>Array of the indexes of the row to select</description></parameter><parameter name="keepExisting" type="Boolean" usage="optional"><description>(optional) True to keep existing selections</description></parameter></parameters></method><method name="selectRange" scope="instance"><description>Selects a range of rows. All rows in between startRow and endRow are also selected.</description><parameters><parameter name="startRow" type="Number" usage="required"><description>The index of the first row in the range</description></parameter><parameter name="endRow" type="Number" usage="required"><description>The index of the last row in the range</description></parameter><parameter name="keepExisting" type="Boolean" usage="optional"><description>(optional) True to retain existing selections</description></parameter></parameters></method><method name="deselectRange" scope="instance"><description>Deselects a range of rows. All rows in between startRow and endRow are also deselected.</description><parameters><parameter name="startRow" type="Number" usage="required"><description>The index of the first row in the range</description></parameter><parameter name="endRow" type="Number" usage="required"><description>The index of the last row in the range</description></parameter></parameters></method><method name="selectRow" scope="instance"><description>Selects a row.</description><parameters><parameter name="row" type="Number" usage="required"><description>The index of the row to select</description></parameter><parameter name="keepExisting" type="Boolean" usage="optional"><description>(optional) True to keep existing selections</description></parameter></parameters></method><method name="deselectRow" scope="instance"><description>Deselects a row.</description><parameters><parameter name="row" type="Number" usage="required"><description>The index of the row to deselect</description></parameter></parameters></method></methods></class><class type="Ext.menu.Adapter" superclass="Ext.menu.BaseItem"><description>A base utility class that adapts a non-menu component so that it can be wrapped by a menu item and added to a menu.
It provides basic rendering, activation management and enable/disable logic required to work in menus.</description><constructors><constructor scope="instance"><description>Creates a new Adapter</description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties/><methods/></class><class type="Ext.menu.BaseItem" superclass="Ext.Component"><description>The base class for all items that render into menus.  BaseItem provides default rendering, activated state
management and base configuration options shared by all menu components.</description><constructors><constructor scope="instance"><description>Creates a new BaseItem</description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties/><methods/></class><class type="Ext.menu.CheckItem" superclass="Ext.menu.Item"><description>Adds a menu item that contains a checkbox by default, but can also be part of a radio group.</description><constructors><constructor scope="instance"><description>Creates a new CheckItem</description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties/><methods><method name="setChecked" scope="instance"><description>Set the checked state of this item</description><parameters><parameter name="checked" type="Boolean" usage="required"><description>The new checked value</description></parameter><parameter name="suppressEvent" type="Boolean" usage="optional"><description>(optional) True to prevent the checkchange event from firing (defaults to false)</description></parameter></parameters></method></methods></class><class type="Ext.menu.ColorItem" superclass="Ext.menu.Adapter"><description>A menu item that wraps the &lt;a ext:cls=&quot;Ext.ColorPalette&quot; href=&quot;output/Ext.ColorPalette.html&quot;&gt;Ext.ColorPalette&lt;/a&gt; component.</description><constructors><constructor scope="instance"><description>Creates a new ColorItem</description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties><property name="palette" type="Ext.ColorPalette" scope="instance" access="read-write"><description>The Ext.ColorPalette object</description></property></properties><methods/></class><class type="Ext.menu.ColorMenu" superclass="Ext.menu.Menu"><description>A menu containing a &lt;a ext:cls=&quot;Ext.menu.ColorItem&quot; href=&quot;output/Ext.menu.ColorItem.html&quot;&gt;Ext.menu.ColorItem&lt;/a&gt; component (which provides a basic color picker).</description><constructors><constructor scope="instance"><description>Creates a new ColorMenu</description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties><property name="palette" type="ColorPalette" scope="instance" access="read-write"><description>The &lt;a ext:cls=&quot;Ext.ColorPalette&quot; href=&quot;output/Ext.ColorPalette.html&quot;&gt;Ext.ColorPalette&lt;/a&gt; instance for this ColorMenu</description></property></properties><methods/></class><class type="Ext.menu.DateItem" superclass="Ext.menu.Adapter"><description>A menu item that wraps the &lt;a ext:cls=&quot;Ext.DatPicker&quot; href=&quot;output/Ext.DatPicker.html&quot;&gt;Ext.DatPicker&lt;/a&gt; component.</description><constructors><constructor scope="instance"><description>Creates a new DateItem</description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties><property name="picker" type="Ext.DatePicker" scope="instance" access="read-write"><description>The Ext.DatePicker object</description></property></properties><methods/></class><class type="Ext.menu.DateMenu" superclass="Ext.menu.Menu"><description>A menu containing a &lt;a ext:cls=&quot;Ext.menu.DateItem&quot; href=&quot;output/Ext.menu.DateItem.html&quot;&gt;Ext.menu.DateItem&lt;/a&gt; component (which provides a date picker).</description><constructors><constructor scope="instance"><description>Creates a new DateMenu</description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties><property name="picker" type="DatePicker" scope="instance" access="read-write"><description>The &lt;a ext:cls=&quot;Ext.DatePicker&quot; href=&quot;output/Ext.DatePicker.html&quot;&gt;Ext.DatePicker&lt;/a&gt; instance for this DateMenu</description></property></properties><methods/></class><class type="Ext.menu.Item" superclass="Ext.menu.BaseItem"><description>A base class for all menu items that require menu-related functionality (like sub-menus) and are not static
display items.  Item extends the base functionality of &lt;a ext:cls=&quot;Ext.menu.BaseItem&quot; href=&quot;output/Ext.menu.BaseItem.html&quot;&gt;Ext.menu.BaseItem&lt;/a&gt; by adding menu-specific
activation and click handling.</description><constructors><constructor scope="instance"><description>Creates a new Item</description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties/><methods><method name="setText" scope="instance"><description>Sets the text to display in this menu item</description><parameters><parameter name="text" type="String" usage="required"><description>The text to display</description></parameter></parameters></method></methods></class><class type="Ext.menu.Menu" superclass="Ext.util.Observable"><description>A menu object.  This is the container to which you add all other menu items.  Menu can also serve a as a base class
when you want a specialzed menu based off of another component (like &lt;a ext:cls=&quot;Ext.menu.DateMenu&quot; href=&quot;output/Ext.menu.DateMenu.html&quot;&gt;Ext.menu.DateMenu&lt;/a&gt; for example).</description><constructors><constructor scope="instance"><description>Creates a new Menu</description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties/><methods><method name="isVisible" scope="instance"><description>Read-only.  Returns true if the menu is currently displayed, else false.</description><parameters/></method><method name="show" scope="instance"><description>Displays this menu relative to another element</description><parameters><parameter name="element" type="String/HTMLElement/Ext.Element" usage="required"><description>The element to align to</description></parameter><parameter name="position" type="String" usage="optional"><description>(optional) The &lt;a ext:cls=&quot;Ext.Element&quot; ext:member=&quot;alignTo&quot; href=&quot;output/Ext.Element.html#alignTo&quot;&gt;Ext.Element.alignTo&lt;/a&gt; anchor position to use in aligning to
the element (defaults to this.defaultAlign)</description></parameter><parameter name="parentMenu" type="Ext.menu.Menu" usage="optional"><description>(optional) This menu's parent menu, if applicable (defaults to undefined)</description></parameter></parameters></method><method name="showAt" scope="instance"><description>Displays this menu at a specific xy position</description><parameters><parameter name="xyPosition" type="Array" usage="required"><description>Contains X &amp; Y [x, y] values for the position at which to show the menu (coordinates are page-based)</description></parameter><parameter name="parentMenu" type="Ext.menu.Menu" usage="optional"><description>(optional) This menu's parent menu, if applicable (defaults to undefined)</description></parameter></parameters></method><method name="hide" scope="instance"><description>Hides this menu and optionally all parent menus</description><parameters><parameter name="deep" type="Boolean" usage="optional"><description>(optional) True to hide all parent menus recursively, if any (defaults to false)</description></parameter></parameters></method><method name="add" scope="instance"><description>Addds one or more items of any type supported by the Menu class, or that can be converted into menu items.
Any of the following are valid:
&lt;ul&gt;
&lt;li&gt;Any menu item object based on &lt;a ext:cls=&quot;Ext.menu.Item&quot; href=&quot;output/Ext.menu.Item.html&quot;&gt;Ext.menu.Item&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;An HTMLElement object which will be converted to a menu item&lt;/li&gt;
&lt;li&gt;A menu item config object that will be created as a new menu item&lt;/li&gt;
&lt;li&gt;A string, which can either be '-' or 'separator' to add a menu separator, otherwise
it will be converted into a &lt;a ext:cls=&quot;Ext.menu.TextItem&quot; href=&quot;output/Ext.menu.TextItem.html&quot;&gt;Ext.menu.TextItem&lt;/a&gt; and added&lt;/li&gt;
&lt;/ul&gt;
Usage:
&lt;pre&gt;&lt;code&gt;// Create the menu
var menu = new Ext.menu.Menu();

// Create a menu item to add by reference
var menuItem = new Ext.menu.Item({ text: 'New Item!' });

// Add a bunch of items at once using different methods.
// Only the last item added will be returned.
var item = menu.add(
    menuItem,                // add existing item by ref
    'Dynamic Item',          // new TextItem
    '-',                     // new separator
    { text: 'Config Item' }  // new item by config
);&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="args" type="Mixed" usage="required"><description>One or more menu items, menu item configs or other objects that can be converted to menu items</description></parameter></parameters></method><method name="getEl" scope="instance"><description>Returns this menu's underlying &lt;a ext:cls=&quot;Ext.Element&quot; href=&quot;output/Ext.Element.html&quot;&gt;Ext.Element&lt;/a&gt; object</description><parameters/></method><method name="addSeparator" scope="instance"><description>Adds a separator bar to the menu</description><parameters/></method><method name="addElement" scope="instance"><description>Adds an &lt;a ext:cls=&quot;Ext.Element&quot; href=&quot;output/Ext.Element.html&quot;&gt;Ext.Element&lt;/a&gt; object to the menu</description><parameters><parameter name="el" type="String/HTMLElement/Ext.Element" usage="required"><description>The element or DOM node to add, or its id</description></parameter></parameters></method><method name="addItem" scope="instance"><description>Adds an existing object based on &lt;a ext:cls=&quot;Ext.menu.Item&quot; href=&quot;output/Ext.menu.Item.html&quot;&gt;Ext.menu.Item&lt;/a&gt; to the menu</description><parameters><parameter name="item" type="Ext.menu.Item" usage="required"><description>The menu item to add</description></parameter></parameters></method><method name="addMenuItem" scope="instance"><description>Creates a new &lt;a ext:cls=&quot;Ext.menu.Item&quot; href=&quot;output/Ext.menu.Item.html&quot;&gt;Ext.menu.Item&lt;/a&gt; based an the supplied config object and adds it to the menu</description><parameters><parameter name="config" type="Object" usage="required"><description>A MenuItem config object</description></parameter></parameters></method><method name="addText" scope="instance"><description>Creates a new &lt;a ext:cls=&quot;Ext.menu.TextItem&quot; href=&quot;output/Ext.menu.TextItem.html&quot;&gt;Ext.menu.TextItem&lt;/a&gt; with the supplied text and adds it to the menu</description><parameters><parameter name="text" type="String" usage="required"><description>The text to display in the menu item</description></parameter></parameters></method><method name="insert" scope="instance"><description>Inserts an existing object based on &lt;a ext:cls=&quot;Ext.menu.Item&quot; href=&quot;output/Ext.menu.Item.html&quot;&gt;Ext.menu.Item&lt;/a&gt; to the menu at a specified index</description><parameters><parameter name="index" type="Number" usage="required"><description>The index in the menu's list of current items where the new item should be inserted</description></parameter><parameter name="item" type="Ext.menu.Item" usage="required"><description>The menu item to add</description></parameter></parameters></method><method name="remove" scope="instance"><description>Removes an &lt;a ext:cls=&quot;Ext.menu.Item&quot; href=&quot;output/Ext.menu.Item.html&quot;&gt;Ext.menu.Item&lt;/a&gt; from the menu and destroys the object</description><parameters><parameter name="item" type="Ext.menu.Item" usage="required"><description>The menu item to remove</description></parameter></parameters></method><method name="removeAll" scope="instance"><description>Removes and destroys all items in the menu</description><parameters/></method></methods></class><class type="Ext.menu.MenuMgr" superclass="Object"><description>Provides a common registry of all menu items on a page so that they can be easily accessed by id.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description><properties/><methods><method name="hideAll" scope="instance"><description>Hides all menus that are currently visible</description><parameters/></method><method name="get" scope="instance"><description>Returns a &lt;a ext:cls=&quot;Ext.menu.Menu&quot; href=&quot;output/Ext.menu.Menu.html&quot;&gt;Ext.menu.Menu&lt;/a&gt; object</description><parameters><parameter name="menu" type="String/Object" usage="required"><description>The string menu id, an existing menu object reference, or a Menu config that will
be used to generate and return a new Menu instance.</description></parameter></parameters></method></methods></class><class type="Ext.menu.Separator" superclass="Ext.menu.BaseItem"><description>Adds a separator bar to a menu, used to divide logical groups of menu items. Generally you will
add one of these by using &quot;-&quot; in you call to add() or in your items config rather than creating one directly.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="config" type="Object" usage="required"><description>Configuration options</description></parameter></parameters></constructor></constructors><properties/><methods/></class><class type="Ext.menu.TextItem" superclass="Ext.menu.BaseItem"><description>Adds a static text string to a menu, usually used as either a heading or group separator.</description><constructors><constructor scope="instance"><description>Creates a new TextItem</description><parameters><parameter name="text" type="String" usage="required"><description>The text to display</description></parameter></parameters></constructor></constructors><properties/><methods/></class><class type="Ext.state.CookieProvider" superclass="Ext.state.Provider"><description>The default Provider implementation which saves state via cookies.
&lt;br /&gt;Usage:&#13;
 &lt;pre&gt;&lt;code&gt;var cp = new Ext.state.CookieProvider({
       path: &quot;/cgi-bin/&quot;,
       expires: new Date(new Date().getTime()+(1000*60*60*24*30)); //30 days
       domain: &quot;extjs.com&quot;
   })
   Ext.state.Manager.setProvider(cp);&lt;/code&gt;&lt;/pre&gt;</description><constructors><constructor scope="instance"><description>Create a new CookieProvider</description><parameters><parameter name="config" type="Object" usage="required"><description>The configuration object</description></parameter></parameters></constructor></constructors><properties/><methods/></class><class type="Ext.state.Manager" superclass="Object"><description>This is the global state manager. By default all components that are &quot;state aware&quot; check this class
for state information if you don't pass them a custom state provider. In order for this class
to be useful, it must be initialized with a provider when your application initializes.&#13;
 &lt;pre&gt;&lt;code&gt;// in your initialization function
init : function(){
   Ext.state.Manager.setProvider(new Ext.state.CookieProvider());
   ...
   // supposed you have a &lt;a ext:cls=&quot;Ext.BorderLayout&quot; href=&quot;output/Ext.BorderLayout.html&quot;&gt;Ext.BorderLayout&lt;/a&gt;
   var layout = new Ext.BorderLayout(...);
   layout.restoreState();
   // or a {Ext.BasicDialog}
   var dialog = new Ext.BasicDialog(...);
   dialog.restoreState();&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description><properties/><methods><method name="setProvider" scope="instance"><description>Configures the default state provider for your application</description><parameters><parameter name="stateProvider" type="Provider" usage="required"><description>The state provider to set</description></parameter></parameters></method><method name="get" scope="instance"><description>Returns the current value for a key</description><parameters><parameter name="name" type="String" usage="required"><description>The key name</description></parameter><parameter name="defaultValue" type="Mixed" usage="required"><description>The default value to return if the key lookup does not match</description></parameter></parameters></method><method name="set" scope="instance"><description>Sets the value for a key</description><parameters><parameter name="name" type="String" usage="required"><description>The key name</description></parameter><parameter name="value" type="Mixed" usage="required"><description>The state data</description></parameter></parameters></method><method name="clear" scope="instance"><description>Clears a value from the state</description><parameters><parameter name="name" type="String" usage="required"><description>The key name</description></parameter></parameters></method><method name="getProvider" scope="instance"><description>Gets the currently configured state provider</description><parameters/></method></methods></class><class type="Ext.state.Provider" superclass="Object"><description>Abstract base class for state provider implementations. This class provides methods
for encoding and decoding &lt;b&gt;typed&lt;/b&gt; variables including dates and defines the 
Provider interface.</description><properties/><methods><method name="get" scope="instance"><description>Returns the current value for a key</description><parameters><parameter name="name" type="String" usage="required"><description>The key name</description></parameter><parameter name="defaultValue" type="Mixed" usage="required"><description>A default value to return if the key's value is not found</description></parameter></parameters></method><method name="clear" scope="instance"><description>Clears a value from the state</description><parameters><parameter name="name" type="String" usage="required"><description>The key name</description></parameter></parameters></method><method name="set" scope="instance"><description>Sets the value for a key</description><parameters><parameter name="name" type="String" usage="required"><description>The key name</description></parameter><parameter name="value" type="Mixed" usage="required"><description>The value to set</description></parameter></parameters></method><method name="decodeValue" scope="instance"><description>Decodes a string previously encoded with &lt;a ext:cls=&quot;Ext.state.Provider&quot; ext:member=&quot;encodeValue&quot; href=&quot;output/Ext.state.Provider.html#encodeValue&quot;&gt;encodeValue&lt;/a&gt;.</description><parameters><parameter name="value" type="String" usage="required"><description>The value to decode</description></parameter></parameters></method><method name="encodeValue" scope="instance"><description>Encodes a value including type information.  Decode with &lt;a ext:cls=&quot;Ext.state.Provider&quot; ext:member=&quot;decodeValue&quot; href=&quot;output/Ext.state.Provider.html#decodeValue&quot;&gt;decodeValue&lt;/a&gt;.</description><parameters><parameter name="value" type="Mixed" usage="required"><description>The value to encode</description></parameter></parameters></method></methods></class><class type="Ext.tree.AsyncTreeNode" superclass="Ext.tree.TreeNode"><description></description><constructors><constructor scope="instance"><description></description><parameters><parameter name="attributes" type="Object/String" usage="required"><description>The attributes/config for the node or just a string with the text for the node</description></parameter></parameters></constructor></constructors><properties><property name="loader" type="TreeLoader" scope="instance" access="read-write"><description>
The loader used by this node (defaults to using the tree's defined loader)</description></property></properties><methods><method name="isLoading" scope="instance"><description>Returns true if this node is currently loading</description><parameters/></method><method name="isLoaded" scope="instance"><description>Returns true if this node has been loaded</description><parameters/></method><method name="reload" scope="instance"><description>Trigger a reload for this node</description><parameters><parameter name="callback" type="Function" usage="required"><description></description></parameter></parameters></method></methods></class><class type="Ext.tree.DefaultSelectionModel" superclass="Ext.util.Observable"><description>The default single selection for a TreePanel.</description><properties/><methods><method name="select" scope="instance"><description>Select a node.</description><parameters><parameter name="node" type="TreeNode" usage="required"><description>The node to select</description></parameter></parameters></method><method name="unselect" scope="instance"><description>Deselect a node.</description><parameters><parameter name="node" type="TreeNode" usage="required"><description>The node to unselect</description></parameter></parameters></method><method name="clearSelections" scope="instance"><description>Clear all selections</description><parameters/></method><method name="getSelectedNode" scope="instance"><description>Get the selected node</description><parameters/></method><method name="isSelected" scope="instance"><description>Returns true if the node is selected</description><parameters><parameter name="node" type="TreeNode" usage="required"><description>The node to check</description></parameter></parameters></method><method name="selectPrevious" scope="instance"><description>Selects the node above the selected node in the tree, intelligently walking the nodes</description><parameters/></method><method name="selectNext" scope="instance"><description>Selects the node above the selected node in the tree, intelligently walking the nodes</description><parameters/></method></methods></class><class type="Ext.tree.MultiSelectionModel" superclass="Ext.util.Observable"><description>Multi selection for a TreePanel.</description><properties/><methods><method name="select" scope="instance"><description>Select a node.</description><parameters><parameter name="node" type="TreeNode" usage="required"><description>The node to select</description></parameter><parameter name="e" type="EventObject" usage="optional"><description>(optional) An event associated with the selection</description></parameter><parameter name="keepExisting" type="Boolean" usage="required"><description>True to retain existing selections</description></parameter></parameters></method><method name="unselect" scope="instance"><description>Deselect a node.</description><parameters><parameter name="node" type="TreeNode" usage="required"><description>The node to unselect</description></parameter></parameters></method><method name="clearSelections" scope="instance"><description>Clear all selections</description><parameters/></method><method name="isSelected" scope="instance"><description>Returns true if the node is selected</description><parameters><parameter name="node" type="TreeNode" usage="required"><description>The node to check</description></parameter></parameters></method><method name="getSelectedNodes" scope="instance"><description>Returns an array of the selected nodes</description><parameters/></method></methods></class><class type="Ext.tree.TreeEditor" superclass="Ext.Editor"><description>Provides editor functionality for inline tree node editing.  Any valid &lt;a ext:cls=&quot;Ext.form.Field&quot; href=&quot;output/Ext.form.Field.html&quot;&gt;Ext.form.Field&lt;/a&gt; can be used
as the editor field.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="tree" type="TreePanel" usage="required"><description></description></parameter><parameter name="config" type="Object" usage="required"><description>Either a prebuilt &lt;a ext:cls=&quot;Ext.form.Field&quot; href=&quot;output/Ext.form.Field.html&quot;&gt;Ext.form.Field&lt;/a&gt; instance or a Field config object</description></parameter></parameters></constructor></constructors><properties/><methods/></class><class type="Ext.tree.TreeFilter" superclass="Object"><description>Note this class is experimental and doesn't update the indent (lines) or expand collapse icons of the nodes</description><properties/><methods><method name="filter" scope="instance"><description>Filter the data by a specific attribute.</description><parameters><parameter name="value" type="String/RegExp" usage="required"><description>Either string that the attribute value
should start with or a RegExp to test against the attribute</description></parameter><parameter name="attr" type="String" usage="optional"><description>(optional) The attribute passed in your node's attributes collection. Defaults to &quot;text&quot;.</description></parameter><parameter name="startNode" type="TreeNode" usage="optional"><description>(optional) The node to start the filter at.</description></parameter></parameters></method><method name="filterBy" scope="instance"><description>Filter by a function. The passed function will be called with each
node in the tree (or from the startNode). If the function returns true, the node is kept
otherwise it is filtered. If a node is filtered, its children are also filtered.</description><parameters><parameter name="fn" type="Function" usage="required"><description>The filter function</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope of the function (defaults to the current node)</description></parameter></parameters></method><method name="clear" scope="instance"><description>Clears the current filter. Note: with the &quot;remove&quot; option
set a filter cannot be cleared.</description><parameters/></method></methods></class><class type="Ext.tree.TreeLoader" superclass="Ext.util.Observable"><description>A TreeLoader provides for lazy loading of an &lt;a ext:cls=&quot;Ext.tree.TreeNode&quot; href=&quot;output/Ext.tree.TreeNode.html&quot;&gt;Ext.tree.TreeNode&lt;/a&gt;'s child
nodes from a specified URL. The response must be a javascript Array definition
who's elements are node definition objects. eg:
&lt;pre&gt;&lt;code&gt;[{ 'id': 1, 'text': 'A folder Node', 'leaf': false },
    { 'id': 2, 'text': 'A leaf Node', 'leaf': true }]&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;br&gt;
A server request is sent, and child nodes are loaded only when a node is expanded.
The loading node's id is passed to the server under the parameter name &quot;node&quot; to
enable the server to produce the correct child nodes.
&lt;br&gt;&lt;br&gt;
To pass extra parameters, an event handler may be attached to the &quot;beforeload&quot;
event, and the parameters specified in the TreeLoader's baseParams property:
&lt;pre&gt;&lt;code&gt;myTreeLoader.on(&quot;beforeload&quot;, function(treeLoader, node) {
        this.baseParams.category = node.attributes.category;
    }, this);&lt;/code&gt;&lt;/pre&gt;&lt;
This would pass an HTTP parameter called &quot;category&quot; to the server containing
the value of the Node's &quot;category&quot; attribute.</description><constructors><constructor scope="instance"><description>Creates a new Treeloader.</description><parameters><parameter name="config" type="Object" usage="required"><description>A config object containing config properties.</description></parameter></parameters></constructor></constructors><properties/><methods><method name="load" scope="instance"><description>Load an &lt;a ext:cls=&quot;Ext.tree.TreeNode&quot; href=&quot;output/Ext.tree.TreeNode.html&quot;&gt;Ext.tree.TreeNode&lt;/a&gt; from the URL specified in the constructor.
This is called automatically when a node is expanded, but may be used to reload
a node (or append new children if the &lt;a ext:cls=&quot;Ext.tree.TreeLoader&quot; ext:member=&quot;clearOnLoad&quot; href=&quot;output/Ext.tree.TreeLoader.html#clearOnLoad&quot;&gt;clearOnLoad&lt;/a&gt; option is false.)</description><parameters><parameter name="node" type="Ext.tree.TreeNode" usage="required"><description></description></parameter><parameter name="callback" type="Function" usage="required"><description></description></parameter></parameters></method><method name="createNode" scope="instance"><description>Override this function for custom TreeNode node implementation</description><parameters/></method></methods></class><class type="Ext.tree.TreeNode" superclass="Ext.data.Node"><description></description><constructors><constructor scope="instance"><description></description><parameters><parameter name="attributes" type="Object/String" usage="required"><description>The attributes/config for the node or just a string with the text for the node</description></parameter></parameters></constructor></constructors><properties><property name="text" type="String" scope="instance" access="read-write"><description>Read-only. The text for this node. To change it use setText().</description></property><property name="disabled" type="Boolean" scope="instance" access="read-write"><description>True if this node is disabled.</description></property><property name="ui" type="TreeNodeUI" scope="instance" access="read-write"><description>Read-only. The UI for this node</description></property></properties><methods><method name="isExpanded" scope="instance"><description>Returns true if this node is expanded</description><parameters/></method><method name="getUI" scope="instance"><description>Returns the UI object for this node</description><parameters/></method><method name="setText" scope="instance"><description>Sets the text for this node</description><parameters><parameter name="text" type="String" usage="required"><description></description></parameter></parameters></method><method name="select" scope="instance"><description>Triggers selection of this node</description><parameters/></method><method name="unselect" scope="instance"><description>Triggers deselection of this node</description><parameters/></method><method name="isSelected" scope="instance"><description>Returns true if this node is selected</description><parameters/></method><method name="expand" scope="instance"><description>Expand this node.</description><parameters><parameter name="deep" type="Boolean" usage="optional"><description>(optional) True to expand all children as well</description></parameter><parameter name="anim" type="Boolean" usage="optional"><description>(optional) false to cancel the default animation</description></parameter><parameter name="callback" type="Function" usage="optional"><description>(optional) A callback to be called when
expanding this node completes (does not wait for deep expand to complete).
Called with 1 parameter, this node.</description></parameter></parameters></method><method name="collapse" scope="instance"><description>Collapse this node.</description><parameters><parameter name="deep" type="Boolean" usage="optional"><description>(optional) True to collapse all children as well</description></parameter><parameter name="anim" type="Boolean" usage="optional"><description>(optional) false to cancel the default animation</description></parameter></parameters></method><method name="toggle" scope="instance"><description>Toggles expanded/collapsed state of the node</description><parameters/></method><method name="ensureVisible" scope="instance"><description>Ensures all parent nodes are expanded</description><parameters/></method><method name="expandChildNodes" scope="instance"><description>Expand all child nodes</description><parameters><parameter name="deep" type="Boolean" usage="optional"><description>(optional) true if the child nodes should also expand their child nodes</description></parameter></parameters></method><method name="collapseChildNodes" scope="instance"><description>Collapse all child nodes</description><parameters><parameter name="deep" type="Boolean" usage="optional"><description>(optional) true if the child nodes should also collapse their child nodes</description></parameter></parameters></method><method name="disable" scope="instance"><description>Disables this node</description><parameters/></method><method name="enable" scope="instance"><description>Enables this node</description><parameters/></method></methods></class><class type="Ext.tree.TreePanel" superclass="Ext.data.Tree"><description></description><constructors><constructor scope="instance"><description></description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description>The container element</description></parameter><parameter name="config" type="Object" usage="required"><description></description></parameter></parameters></constructor></constructors><properties><property name="id" type="Object" scope="instance" access="read-write"><description>Read-only. The id of the container element becomes this TreePanel's id.</description></property><property name="dropZone" type="Ext.tree.TreeDropZone" scope="instance" access="read-write"><description>The dropZone used by this tree if drop is enabled</description></property><property name="dragZone" type="Ext.tree.TreeDragZone" scope="instance" access="read-write"><description>The dragZone used by this tree if drag is enabled</description></property></properties><methods><method name="getEl" scope="instance"><description>Returns the container element for this TreePanel</description><parameters/></method><method name="getLoader" scope="instance"><description>Returns the default TreeLoader for this TreePanel</description><parameters/></method><method name="expandAll" scope="instance"><description>Expand all nodes</description><parameters/></method><method name="collapseAll" scope="instance"><description>Collapse all nodes</description><parameters/></method><method name="getSelectionModel" scope="instance"><description>Returns the selection model used by this TreePanel</description><parameters/></method><method name="getChecked" scope="instance"><description>Retrieve an array of checked nodes, or an array of a specific attribute of checked nodes (e.g. &quot;id&quot;)</description><parameters><parameter name="attribute" type="String" usage="optional"><description>(optional) Defaults to null (return the actual nodes)</description></parameter><parameter name="startNode" type="TreeNode" usage="optional"><description>(optional) The node to start from, defaults to the root</description></parameter></parameters></method><method name="expandPath" scope="instance"><description>Expands a specified path in this TreePanel. A path can be retrieved from a node with &lt;a ext:cls=&quot;Ext.data.Node&quot; ext:member=&quot;getPath&quot; href=&quot;output/Ext.data.Node.html#getPath&quot;&gt;Ext.data.Node.getPath&lt;/a&gt;</description><parameters><parameter name="path" type="String" usage="required"><description></description></parameter><parameter name="attr" type="String" usage="optional"><description>(optional) The attribute used in the path (see &lt;a ext:cls=&quot;Ext.data.Node&quot; ext:member=&quot;getPath&quot; href=&quot;output/Ext.data.Node.html#getPath&quot;&gt;Ext.data.Node.getPath&lt;/a&gt; for more info)</description></parameter><parameter name="callback" type="Function" usage="optional"><description>(optional) The callback to call when the expand is complete. The callback will be called with
(bSuccess, oLastNode) where bSuccess is if the expand was successful and oLastNode is the last node that was expanded.</description></parameter></parameters></method><method name="selectPath" scope="instance"><description>Selects the node in this tree at the specified path. A path can be retrieved from a node with &lt;a ext:cls=&quot;Ext.data.Node&quot; ext:member=&quot;getPath&quot; href=&quot;output/Ext.data.Node.html#getPath&quot;&gt;Ext.data.Node.getPath&lt;/a&gt;</description><parameters><parameter name="path" type="String" usage="required"><description></description></parameter><parameter name="attr" type="String" usage="optional"><description>(optional) The attribute used in the path (see &lt;a ext:cls=&quot;Ext.data.Node&quot; ext:member=&quot;getPath&quot; href=&quot;output/Ext.data.Node.html#getPath&quot;&gt;Ext.data.Node.getPath&lt;/a&gt; for more info)</description></parameter><parameter name="callback" type="Function" usage="optional"><description>(optional) The callback to call when the selection is complete. The callback will be called with
(bSuccess, oSelNode) where bSuccess is if the selection was successful and oSelNode is the selected node.</description></parameter></parameters></method><method name="render" scope="instance"><description>Trigger rendering of this TreePanel</description><parameters/></method></methods></class><class type="Ext.tree.TreeSorter" superclass="Object"><description>Provides sorting of nodes in a TreePanel</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="tree" type="TreePanel" usage="required"><description></description></parameter><parameter name="config" type="Object" usage="required"><description></description></parameter></parameters></constructor></constructors><properties/><methods/></class><class type="Ext.util.CSS" superclass="Object"><description>Utility class for manipulating CSS rules&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description><properties/><methods><method name="createStyleSheet" scope="instance"><description>Very simple dynamic creation of stylesheets from a text blob of rules.  The text will wrapped in a style
tag and appended to the HEAD of the document.</description><parameters><parameter name="cssText" type="String" usage="required"><description>The text containing the css rules</description></parameter><parameter name="id" type="String" usage="required"><description>An id to add to the stylesheet for later removal</description></parameter></parameters></method><method name="removeStyleSheet" scope="instance"><description>Removes a style or link tag by id</description><parameters><parameter name="id" type="String" usage="required"><description>The id of the tag</description></parameter></parameters></method><method name="swapStyleSheet" scope="instance"><description>Dynamically swaps an existing stylesheet reference for a new one</description><parameters><parameter name="id" type="String" usage="required"><description>The id of an existing link tag to remove</description></parameter><parameter name="url" type="String" usage="required"><description>The href of the new stylesheet to include</description></parameter></parameters></method><method name="refreshCache" scope="instance"><description>Refresh the rule cache if you have dynamically added stylesheets</description><parameters/></method><method name="getRules" scope="instance"><description>Gets all css rules for the document</description><parameters><parameter name="refreshCache" type="Boolean" usage="required"><description>true to refresh the internal cache</description></parameter></parameters></method><method name="getRule" scope="instance"><description>Gets an an individual CSS rule by selector(s)</description><parameters><parameter name="selector" type="String/Array" usage="required"><description>The CSS selector or an array of selectors to try. The first selector that is found is returned.</description></parameter><parameter name="refreshCache" type="Boolean" usage="required"><description>true to refresh the internal cache if you have recently updated any rules or added styles dynamically</description></parameter></parameters></method><method name="updateRule" scope="instance"><description>Updates a rule property</description><parameters><parameter name="selector" type="String/Array" usage="required"><description>If it's an array it tries each selector until it finds one. Stops immediately once one is found.</description></parameter><parameter name="property" type="String" usage="required"><description>The css property</description></parameter><parameter name="value" type="String" usage="required"><description>The new value for the property</description></parameter></parameters></method></methods></class><class type="Ext.util.ClickRepeater" superclass="Ext.util.Observable"><description>A wrapper class which can be applied to any element. Fires a &quot;click&quot; event while the
 mouse is pressed. The interval between firings may be specified in the config but
 defaults to 10 milliseconds.

 Optionally, a CSS class may be applied to the element during the time it is pressed.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="el" type="String/HTMLElement/Element" usage="required"><description>The element to listen on</description></parameter><parameter name="config" type="Object" usage="required"><description></description></parameter></parameters></constructor></constructors><properties/><methods/></class><class type="Ext.util.DelayedTask" superclass="Object"><description>Provides a convenient method of performing setTimeout where a new
timeout cancels the old timeout. An example would be performing validation on a keypress.
You can use this class to buffer
the keypress events for a certain number of milliseconds, and perform only if they stop
for that amount of time.</description><constructors><constructor scope="instance"><description>The parameters to this constructor serve as defaults and are not required.</description><parameters><parameter name="fn" type="Function" usage="optional"><description>(optional) The default function to timeout</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The default scope of that timeout</description></parameter><parameter name="args" type="Array" usage="optional"><description>(optional) The default Array of arguments</description></parameter></parameters></constructor></constructors><properties/><methods><method name="delay" scope="instance"><description>Cancels any pending timeout and queues a new one</description><parameters><parameter name="delay" type="Number" usage="required"><description>The milliseconds to delay</description></parameter><parameter name="newFn" type="Function" usage="optional"><description>(optional) Overrides function passed to constructor</description></parameter><parameter name="newScope" type="Object" usage="optional"><description>(optional) Overrides scope passed to constructor</description></parameter><parameter name="newArgs" type="Array" usage="optional"><description>(optional) Overrides args passed to constructor</description></parameter></parameters></method><method name="cancel" scope="instance"><description>Cancel the last queued timeout</description><parameters/></method></methods></class><class type="Ext.util.Format" superclass="Object"><description>Reusable data formatting functions&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description><properties/><methods><method name="ellipsis" scope="instance"><description>Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length</description><parameters><parameter name="value" type="String" usage="required"><description>The string to truncate</description></parameter><parameter name="length" type="Number" usage="required"><description>The maximum length to allow before truncating</description></parameter></parameters></method><method name="undef" scope="instance"><description>Checks a reference and converts it to empty string if it is undefined</description><parameters><parameter name="value" type="Mixed" usage="required"><description>Reference to check</description></parameter></parameters></method><method name="htmlEncode" scope="instance"><description>Convert certain characters (&amp;, &lt;, &gt;, and ') to their HTML character equivalents for literal display in web pages.</description><parameters><parameter name="value" type="String" usage="required"><description>The string to encode</description></parameter></parameters></method><method name="htmlDecode" scope="instance"><description>Convert certain characters (&amp;, &lt;, &gt;, and ') from their HTML character equivalents.</description><parameters><parameter name="value" type="String" usage="required"><description>The string to decode</description></parameter></parameters></method><method name="trim" scope="instance"><description>Trims any whitespace from either side of a string</description><parameters><parameter name="value" type="String" usage="required"><description>The text to trim</description></parameter></parameters></method><method name="substr" scope="instance"><description>Returns a substring from within an original string</description><parameters><parameter name="value" type="String" usage="required"><description>The original text</description></parameter><parameter name="start" type="Number" usage="required"><description>The start index of the substring</description></parameter><parameter name="length" type="Number" usage="required"><description>The length of the substring</description></parameter></parameters></method><method name="lowercase" scope="instance"><description>Converts a string to all lower case letters</description><parameters><parameter name="value" type="String" usage="required"><description>The text to convert</description></parameter></parameters></method><method name="uppercase" scope="instance"><description>Converts a string to all upper case letters</description><parameters><parameter name="value" type="String" usage="required"><description>The text to convert</description></parameter></parameters></method><method name="capitalize" scope="instance"><description>Converts the first character only of a string to upper case</description><parameters><parameter name="value" type="String" usage="required"><description>The text to convert</description></parameter></parameters></method><method name="usMoney" scope="instance"><description>Format a number as US currency</description><parameters><parameter name="value" type="Number/String" usage="required"><description>The numeric value to format</description></parameter></parameters></method><method name="date" scope="instance"><description>Parse a value into a formatted date using the specified format pattern.</description><parameters><parameter name="value" type="Mixed" usage="required"><description>The value to format</description></parameter><parameter name="format" type="String" usage="optional"><description>(optional) Any valid date format string (defaults to 'm/d/Y')</description></parameter></parameters></method><method name="dateRenderer" scope="instance"><description>Returns a date rendering function that can be reused to apply a date format multiple times efficiently</description><parameters><parameter name="format" type="String" usage="required"><description>Any valid date format string</description></parameter></parameters></method><method name="stripTags" scope="instance"><description>Strips all HTML tags</description><parameters><parameter name="value" type="Mixed" usage="required"><description>The text from which to strip tags</description></parameter></parameters></method></methods></class><class type="Ext.util.JSON" superclass="Object"><description>Modified version of Douglas Crockford&quot;s json.js that doesn&quot;t
mess with the Object prototype 
http://www.json.org/js.html&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description><properties/><methods><method name="encode" scope="instance"><description>Encodes an Object, Array or other value</description><parameters><parameter name="o" type="Mixed" usage="required"><description>The variable to encode</description></parameter></parameters></method><method name="decode" scope="instance"><description>Decodes (parses) a JSON string to an object. If the JSON is invalid, this function throws a SyntaxError.</description><parameters><parameter name="json" type="String" usage="required"><description>The JSON string</description></parameter></parameters></method></methods></class><class type="Ext.util.MixedCollection" superclass="Ext.util.Observable"><description>A Collection class that maintains both numeric indexes and keys and exposes events.</description><constructors><constructor scope="instance"><description></description><parameters><parameter name="allowFunctions" type="Boolean" usage="required"><description>True if the addAll function should add function references to the
collection (defaults to false)</description></parameter><parameter name="keyFn" type="Function" usage="required"><description>A function that can accept an item of the type(s) stored in this MixedCollection
and return the key value for that item. This is used when available to look up the key on items that
were passed without an explicit key parameter to a MixedCollection method. Passing this parameter is
equivalent to providing an implementation for the &lt;a ext:cls=&quot;Ext.util.MixedCollection&quot; ext:member=&quot;getKey&quot; href=&quot;output/Ext.util.MixedCollection.html#getKey&quot;&gt;getKey&lt;/a&gt; method.</description></parameter></parameters></constructor></constructors><properties/><methods><method name="add" scope="instance"><description>Adds an item to the collection.</description><parameters><parameter name="key" type="String" usage="required"><description>The key to associate with the item</description></parameter><parameter name="o" type="Object" usage="required"><description>The item to add.</description></parameter></parameters></method><method name="getKey" scope="instance"><description>MixedCollection has a generic way to fetch keys if you implement getKey.&#13;
&lt;pre&gt;&lt;code&gt;// normal way
var mc = new Ext.util.MixedCollection();
mc.add(someEl.dom.id, someEl);
mc.add(otherEl.dom.id, otherEl);
//and so on

// using getKey
var mc = new Ext.util.MixedCollection();
mc.getKey = function(el){
   return el.dom.id;
};
mc.add(someEl);
mc.add(otherEl);

// or via the constructor
var mc = new Ext.util.MixedCollection(false, function(el){
   return el.dom.id;
});
mc.add(someEl);
mc.add(otherEl);&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="{Object}" type="o" usage="required"><description>The item for which to find the key.</description></parameter></parameters></method><method name="replace" scope="instance"><description>Replaces an item in the collection.</description><parameters><parameter name="key" type="String" usage="required"><description>The key associated with the item to replace, or the item to replace.</description></parameter><parameter name="{Object}" type="o" usage="optional"><description>o (optional) If the first parameter passed was a key, the item to associate with that key.</description></parameter></parameters></method><method name="addAll" scope="instance"><description>Adds all elements of an Array or an Object to the collection.</description><parameters><parameter name="objs" type="Object/Array" usage="required"><description>An Object containing properties which will be added to the collection, or
an Array of values, each of which are added to the collection.</description></parameter></parameters></method><method name="each" scope="instance"><description>Executes the specified function once for every item in the collection, passing each
item as the first and only parameter. returning false from the function will stop the iteration.</description><parameters><parameter name="fn" type="Function" usage="required"><description>The function to execute for each item.</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope in which to execute the function.</description></parameter></parameters></method><method name="eachKey" scope="instance"><description>Executes the specified function once for every key in the collection, passing each
key, and its associated item as the first two parameters.</description><parameters><parameter name="fn" type="Function" usage="required"><description>The function to execute for each item.</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope in which to execute the function.</description></parameter></parameters></method><method name="find" scope="instance"><description>Returns the first item in the collection which elicits a true return value from the
passed selection function.</description><parameters><parameter name="fn" type="Function" usage="required"><description>The selection function to execute for each item.</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope in which to execute the function.</description></parameter></parameters></method><method name="insert" scope="instance"><description>Inserts an item at the specified index in the collection.</description><parameters><parameter name="index" type="Number" usage="required"><description>The index to insert the item at.</description></parameter><parameter name="key" type="String" usage="required"><description>The key to associate with the new item, or the item itself.</description></parameter><parameter name="o" type="Object" usage="optional"><description>(optional) If the second parameter was a key, the new item.</description></parameter></parameters></method><method name="remove" scope="instance"><description>Removed an item from the collection.</description><parameters><parameter name="o" type="Object" usage="required"><description>The item to remove.</description></parameter></parameters></method><method name="removeAt" scope="instance"><description>Remove an item from a specified index in the collection.</description><parameters><parameter name="index" type="Number" usage="required"><description>The index within the collection of the item to remove.</description></parameter></parameters></method><method name="removeKey" scope="instance"><description>Removed an item associated with the passed key fom the collection.</description><parameters><parameter name="key" type="String" usage="required"><description>The key of the item to remove.</description></parameter></parameters></method><method name="getCount" scope="instance"><description>Returns the number of items in the collection.</description><parameters/></method><method name="indexOf" scope="instance"><description>Returns index within the collection of the passed Object.</description><parameters><parameter name="o" type="Object" usage="required"><description>The item to find the index of.</description></parameter></parameters></method><method name="indexOfKey" scope="instance"><description>Returns index within the collection of the passed key.</description><parameters><parameter name="key" type="String" usage="required"><description>The key to find the index of.</description></parameter></parameters></method><method name="item" scope="instance"><description>Returns the item associated with the passed key OR index. Key has priority over index.</description><parameters><parameter name="key" type="String/Number" usage="required"><description>The key or index of the item.</description></parameter></parameters></method><method name="itemAt" scope="instance"><description>Returns the item at the specified index.</description><parameters><parameter name="index" type="Number" usage="required"><description>The index of the item.</description></parameter></parameters></method><method name="key" scope="instance"><description>Returns the item associated with the passed key.</description><parameters><parameter name="key" type="String/Number" usage="required"><description>The key of the item.</description></parameter></parameters></method><method name="contains" scope="instance"><description>Returns true if the collection contains the passed Object as an item.</description><parameters><parameter name="o" type="Object" usage="required"><description>The Object to look for in the collection.</description></parameter></parameters></method><method name="containsKey" scope="instance"><description>Returns true if the collection contains the passed Object as a key.</description><parameters><parameter name="key" type="String" usage="required"><description>The key to look for in the collection.</description></parameter></parameters></method><method name="clear" scope="instance"><description>Removes all items from the collection.</description><parameters/></method><method name="first" scope="instance"><description>Returns the first item in the collection.</description><parameters/></method><method name="last" scope="instance"><description>Returns the last item in the collection.</description><parameters/></method><method name="sort" scope="instance"><description>Sorts this collection with the passed comparison function</description><parameters><parameter name="direction" type="String" usage="optional"><description>(optional) &quot;ASC&quot; or &quot;DESC&quot;</description></parameter><parameter name="fn" type="Function" usage="optional"><description>(optional) comparison function</description></parameter></parameters></method><method name="keySort" scope="instance"><description>Sorts this collection by keys</description><parameters><parameter name="direction" type="String" usage="optional"><description>(optional) &quot;ASC&quot; or &quot;DESC&quot;</description></parameter><parameter name="fn" type="Function" usage="optional"><description>(optional) a comparison function (defaults to case insensitive string)</description></parameter></parameters></method><method name="getRange" scope="instance"><description>Returns a range of items in this collection</description><parameters><parameter name="startIndex" type="Number" usage="optional"><description>(optional) defaults to 0</description></parameter><parameter name="endIndex" type="Number" usage="optional"><description>(optional) default to the last item</description></parameter></parameters></method><method name="filter" scope="instance"><description>Filter the &lt;i&gt;objects&lt;/i&gt; in this collection by a specific property. 
Returns a new collection that has been filtered.</description><parameters><parameter name="property" type="String" usage="required"><description>A property on your objects</description></parameter><parameter name="value" type="String/RegExp" usage="required"><description>Either string that the property values 
should start with or a RegExp to test against the property</description></parameter></parameters></method><method name="filterBy" scope="instance"><description>Filter by a function. * Returns a new collection that has been filtered.
The passed function will be called with each 
object in the collection. If the function returns true, the value is included 
otherwise it is filtered.</description><parameters><parameter name="fn" type="Function" usage="required"><description>The function to be called, it will receive the args o (the object), k (the key)</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope of the function (defaults to this)</description></parameter></parameters></method><method name="clone" scope="instance"><description>Creates a duplicate of this collection</description><parameters/></method><method name="get" scope="instance"><description>Returns the item associated with the passed key or index.</description><parameters><parameter name="key" type="String/Number" usage="required"><description>The key or index of the item.</description></parameter></parameters></method></methods></class><class type="Ext.util.Observable" superclass="Object"><description>Abstract base class that provides a common interface for publishing events. Subclasses are expected to
to have a property &quot;events&quot; with all the events defined.&lt;br&gt;
For example:
&lt;pre&gt;&lt;code&gt;Employee = function(name){
    this.name = name;
    this.addEvents({
        &quot;fired&quot; : true,
        &quot;quit&quot; : true
    });
 }
 Ext.extend(Employee, Ext.util.Observable);&lt;/code&gt;&lt;/pre&gt;</description><properties/><methods><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).</description><parameters><parameter name="eventName" type="String" usage="required"><description></description></parameter><parameter name="args" type="Object..." usage="required"><description>Variable number of parameters are passed to handlers</description></parameter></parameters></method><method name="addListener" scope="instance"><description>Appends an event handler to this component</description><parameters><parameter name="eventName" type="String" usage="required"><description>The type of event to listen for</description></parameter><parameter name="handler" type="Function" usage="required"><description>The method the event invokes</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope in which to execute the handler
function. The handler function's &quot;this&quot; context.</description></parameter><parameter name="options" type="Object" usage="optional"><description>(optional) An object containing handler configuration
properties. This may contain any of the following properties:&lt;ul&gt;
&lt;li&gt;scope {Object} The scope in which to execute the handler function. The handler function's &quot;this&quot; context.&lt;/li&gt;
&lt;li&gt;delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.&lt;/li&gt;
&lt;li&gt;single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.&lt;/li&gt;
&lt;li&gt;buffer {Number} Causes the handler to be scheduled to run in an &lt;a ext:cls=&quot;Ext.util.DelayedTask&quot; href=&quot;output/Ext.util.DelayedTask.html&quot;&gt;Ext.util.DelayedTask&lt;/a&gt; delayed
by the specified number of milliseconds. If the event fires again within that time, the original
handler is &lt;em&gt;not&lt;/em&gt; invoked, but the new handler is scheduled in its place.&lt;/li&gt;
&lt;/ul&gt;&lt;br&gt;
&lt;p&gt;
&lt;b&gt;Combining Options&lt;/b&gt;&lt;br&gt;
Using the options argument, it is possible to combine different types of listeners:&lt;br&gt;
&lt;br&gt;
A normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)
		&lt;pre&gt;&lt;code&gt;el.on('click', this.onClick, this, {
 			single: true,
    		delay: 100,
    		forumId: 4
		});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;b&gt;Attaching multiple handlers in 1 call&lt;/b&gt;&lt;br&gt;
The method also allows for a single argument to be passed which is a config object containing properties
which specify multiple handlers.
&lt;pre&gt;&lt;code&gt;el.on({
			'click': {
        		fn: this.onClick,
        		scope: this,
        		delay: 100
    		}, 
    		'mouseover': {
        		fn: this.onMouseOver,
        		scope: this
    		},
    		'mouseout': {
        		fn: this.onMouseOut,
        		scope: this
    		}
		});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Or a shorthand syntax which passes the same scope object to all handlers:
 	&lt;pre&gt;&lt;code&gt;el.on({
			'click': this.onClick,
    		'mouseover': this.onMouseOver,
    		'mouseout': this.onMouseOut,
    		scope: this
		});&lt;/code&gt;&lt;/pre&gt;</description></parameter></parameters></method><method name="removeListener" scope="instance"><description>Removes a listener</description><parameters><parameter name="eventName" type="String" usage="required"><description>The type of event to listen for</description></parameter><parameter name="handler" type="Function" usage="required"><description>The handler to remove</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope (this object) for the handler</description></parameter></parameters></method><method name="purgeListeners" scope="instance"><description>Removes all listeners for this object</description><parameters/></method><method name="addEvents" scope="instance"><description>Used to define events on this Observable</description><parameters><parameter name="object" type="Object" usage="required"><description>The object with the events defined</description></parameter></parameters></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description><parameters><parameter name="eventName" type="String" usage="required"><description>The name of the event to check for</description></parameter></parameters></method><method name="on" scope="instance"><description>Appends an event handler to this element (shorthand for addListener)</description><parameters><parameter name="eventName" type="String" usage="required"><description>The type of event to listen for</description></parameter><parameter name="handler" type="Function" usage="required"><description>The method the event invokes</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope in which to execute the handler
function. The handler function's &quot;this&quot; context.</description></parameter><parameter name="options" type="Object" usage="optional"><description>(optional)</description></parameter></parameters></method><method name="un" scope="instance"><description>Removes a listener (shorthand for removeListener)</description><parameters><parameter name="eventName" type="String" usage="required"><description>The type of event to listen for</description></parameter><parameter name="handler" type="Function" usage="required"><description>The handler to remove</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope (this object) for the handler</description></parameter></parameters></method><method name="Observable.capture" scope="static"><description>&amp;lt;static&amp;gt; Starts capture on the specified Observable. All events will be passed
to the supplied function with the event name + standard signature of the event
&lt;b&gt;before&lt;/b&gt; the event is fired. If the supplied function returns false,
the event will not fire.</description><parameters><parameter name="o" type="Observable" usage="required"><description>The Observable to capture</description></parameter><parameter name="fn" type="Function" usage="required"><description>The function to call</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope (this object) for the fn</description></parameter></parameters></method><method name="Observable.releaseCapture" scope="static"><description>&amp;lt;static&amp;gt; Removes &lt;b&gt;all&lt;/b&gt; added captures from the Observable.</description><parameters><parameter name="o" type="Observable" usage="required"><description>The Observable to release</description></parameter></parameters></method></methods></class><class type="Ext.util.TextMetrics" superclass="Object"><description>Provides precise pixel measurements for blocks of text so that you can determine exactly how high and
wide, in pixels, a given block of text will be.&lt;br&gt;&lt;br&gt;&lt;i&gt;This class is a singleton and cannot be created directly.&lt;/i&gt;</description><properties/><methods><method name="measure" scope="instance"><description>Measures the size of the specified text</description><parameters><parameter name="el" type="String/HTMLElement" usage="required"><description>The element, dom node or id from which to copy existing CSS styles
that can affect the size of the rendered text</description></parameter><parameter name="text" type="String" usage="required"><description>The text to measure</description></parameter><parameter name="fixedWidth" type="Number" usage="optional"><description>(optional) If the text will be multiline, you have to set a fixed width
in order to accurately measure the text height</description></parameter></parameters></method><method name="createInstance" scope="instance"><description>Return a unique TextMetrics instance that can be bound directly to an element and reused.  This reduces
the overhead of multiple calls to initialize the style properties on each measurement.</description><parameters><parameter name="el" type="String/HTMLElement" usage="required"><description>The element, dom node or id that the instance will be bound to</description></parameter><parameter name="fixedWidth" type="Number" usage="optional"><description>(optional) If the text will be multiline, you have to set a fixed width
in order to accurately measure the text height</description></parameter></parameters></method><method name="getSize" scope="instance"><description>Returns the size of the specified text based on the internal element's style and width properties</description><parameters><parameter name="text" type="String" usage="required"><description>The text to measure</description></parameter></parameters></method><method name="bind" scope="instance"><description>Binds this TextMetrics instance to an element from which to copy existing CSS styles
that can affect the size of the rendered text</description><parameters><parameter name="el" type="String/HTMLElement" usage="required"><description>The element, dom node or id</description></parameter></parameters></method><method name="setFixedWidth" scope="instance"><description>Sets a fixed width on the internal measurement element.  If the text will be multiline, you have
to set a fixed width in order to accurately measure the text height.</description><parameters><parameter name="width" type="Number" usage="required"><description>The width to set on the element</description></parameter></parameters></method><method name="getWidth" scope="instance"><description>Returns the measured width of the specified text</description><parameters><parameter name="text" type="String" usage="required"><description>The text to measure</description></parameter></parameters></method><method name="getHeight" scope="instance"><description>Returns the measured height of the specified text.  For multiline text, be sure to call
&lt;a ext:cls=&quot;Ext.util.TextMetrics&quot; ext:member=&quot;setFixedWidth&quot; href=&quot;output/Ext.util.TextMetrics.html#setFixedWidth&quot;&gt;setFixedWidth&lt;/a&gt; if necessary.</description><parameters><parameter name="text" type="String" usage="required"><description>The text to measure</description></parameter></parameters></method></methods></class><class type="Function" superclass="Object"><description>These functions are available on every Function object (any JavaScript function).</description><properties/><methods><method name="createCallback" scope="instance"><description>Creates a callback that passes arguments[0], arguments[1], arguments[2], ...
Call directly on any function. Example: &lt;code&gt;myFunction.createCallback(myarg, myarg2)&lt;/code&gt;
Will create a function that is bound to those 2 args.</description><parameters/></method><method name="createDelegate" scope="instance"><description>Creates a delegate (callback) that sets the scope to obj.
Call directly on any function. Example: &lt;code&gt;this.myFunction.createDelegate(this)&lt;/code&gt;
Will create a function that is automatically scoped to this.</description><parameters><parameter name="obj" type="Object" usage="optional"><description>(optional) The object for which the scope is set</description></parameter><parameter name="args" type="Array" usage="optional"><description>(optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)</description></parameter><parameter name="appendArgs" type="Boolean/Number" usage="optional"><description>(optional) if True args are appended to call args instead of overriding,
if a number the args are inserted at the specified position</description></parameter></parameters></method><method name="defer" scope="instance"><description>Calls this function after the number of millseconds specified.</description><parameters><parameter name="millis" type="Number" usage="required"><description>The number of milliseconds for the setTimeout call (if 0 the function is executed immediately)</description></parameter><parameter name="obj" type="Object" usage="optional"><description>(optional) The object for which the scope is set</description></parameter><parameter name="args" type="Array" usage="optional"><description>(optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)</description></parameter><parameter name="appendArgs" type="Boolean/Number" usage="optional"><description>(optional) if True args are appended to call args instead of overriding,
if a number the args are inserted at the specified position</description></parameter></parameters></method><method name="createSequence" scope="instance"><description>Create a combined function call sequence of the original function + the passed function.
The resulting function returns the results of the original function.
The passed fcn is called with the parameters of the original function</description><parameters><parameter name="fcn" type="Function" usage="required"><description>The function to sequence</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope of the passed fcn (Defaults to scope of original function or window)</description></parameter></parameters></method><method name="createInterceptor" scope="instance"><description>Creates an interceptor function. The passed fcn is called before the original one. If it returns false, the original one is not called.
The resulting function returns the results of the original function.
The passed fcn is called with the parameters of the original function.
@addon</description><parameters><parameter name="fcn" type="Function" usage="required"><description>The function to call before the original</description></parameter><parameter name="scope" type="Object" usage="optional"><description>(optional) The scope of the passed fcn (Defaults to scope of original function or window)</description></parameter></parameters></method></methods></class><class type="String" superclass="Object"><description>These functions are available as static methods on the JavaScript String object.</description><properties/><methods><method name="escape" scope="static"><description>&amp;lt;static&amp;gt; Escapes the passed string for ' and \</description><parameters><parameter name="string" type="String" usage="required"><description>The string to escape</description></parameter></parameters></method><method name="leftPad" scope="static"><description>&amp;lt;static&amp;gt; Pads the left side of a string with a specified character.  This is especially useful
for normalizing number and date strings.  Example usage:
&lt;pre&gt;&lt;code&gt;var s = String.leftPad('123', 5, '0');
// s now contains the string: '00123'&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="string" type="String" usage="required"><description>The original string</description></parameter><parameter name="size" type="Number" usage="required"><description>The total length of the output string</description></parameter><parameter name="char" type="String" usage="optional"><description>(optional) The character with which to pad the original string (defaults to empty string &quot; &quot;)</description></parameter></parameters></method><method name="format" scope="static"><description>&amp;lt;static&amp;gt; Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens.  Each
token must be unique, and must increment in the format {0}, {1}, etc.  Example usage:
&lt;pre&gt;&lt;code&gt;var cls = 'my-class', text = 'Some text';
var s = String.format('&lt;div class=&quot;{0}&quot;&gt;{1}&lt;/div&gt;', cls, text);
// s now contains the string: '&lt;div class=&quot;my-class&quot;&gt;Some text&lt;/div&gt;'&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="string" type="String" usage="required"><description>The tokenized string to be formatted</description></parameter><parameter name="value1" type="String" usage="required"><description>The value to replace token {0}</description></parameter><parameter name="value2" type="String" usage="required"><description>Etc...</description></parameter></parameters></method><method name="toggle" scope="instance"><description>Utility function that allows you to easily switch a string between two alternating values.  The passed value
is compared to the current string, and if they are equal, the other value that was passed in is returned.  If
they are already different, the first value passed in is returned.  Note that this method returns the new value
but does not change the current string.
&lt;pre&gt;&lt;code&gt;// alternate sort directions
sort = sort.toggle('ASC', 'DESC');

// instead of conditional logic:
sort = (sort == 'ASC' ? 'DESC' : 'ASC');&lt;/code&gt;&lt;/pre&gt;</description><parameters><parameter name="value" type="String" usage="required"><description>The value to compare to the current string</description></parameter><parameter name="other" type="String" usage="required"><description>The new value to use if the string already equals the first value passed in</description></parameter></parameters></method><method name="constrain" scope="instance"><description>Checks whether or not the current number is within a desired range.  If the number is already within the
range it is returned, otherwise the min or max value is returned depending on which side of the range is
exceeded.  Note that this method returns the constrained value but does not change the current number.</description><parameters><parameter name="min" type="Number" usage="required"><description>The minimum number in the range</description></parameter><parameter name="max" type="Number" usage="required"><description>The maximum number in the range</description></parameter></parameters></method><method name="indexOf" scope="instance"><description>Checks whether or not the specified object exists in the array.</description><parameters><parameter name="o" type="Object" usage="required"><description>The object to check for</description></parameter></parameters></method><method name="remove" scope="instance"><description>Removes the specified object from the array.  If the object is not found nothing happens.</description><parameters><parameter name="o" type="Object" usage="required"><description>The object to remove</description></parameter></parameters></method></methods></class></javascript>