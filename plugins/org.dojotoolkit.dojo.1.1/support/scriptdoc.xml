<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<javascript>
  <overview>The Dojo Toolkit is awesome</overview>
  <class type="dijit" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_curFocus" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_prevFocus" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_activeStack" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="registry">
        <description>A list of widgets on a page.</description>
      </property>
      <property type="Object" access="read-write" scope="static" name="_widgetTypeCtr" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_tabElements" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_base" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="dijit-all"/>
      <property type="Object" access="read-write" scope="static" name="dijit">
        <description>A roll-up for common dijit methods</description>
      </property>
      <property type="Object" access="read-write" scope="static" name="nls"/>
      <property type="Object" access="read-write" scope="static" name="resources"/>
    </properties>
    <methods>
      <method scope="static" name="showTooltip">
        <parameters>
          <parameter name="innerHTML" type="String" usage="required"/>
          <parameter name="aroundNode" type="DomNode" usage="required"/>
          <parameter name="position" type="String[]" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Display tooltip w/specified contents in specified position. See description of dijit.Tooltip.defaultPosition for details on position parameter. If position is not specified then dijit.Tooltip.defaultPosition is used.</description>
      </method>
      <method scope="static" name="hideTooltip">
        <parameters>
          <parameter name="aroundNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>hide the tooltip</description>
      </method>
      <method scope="static" name="isCollapsed">
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>tests whether the current selection is empty</description>
      </method>
      <method scope="static" name="getBookmark">
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Retrieves a bookmark that can be used with moveToBookmark to return to the same range</description>
      </method>
      <method scope="static" name="moveToBookmark">
        <parameters>
          <parameter name="bookmark" type="Object" usage="required">
            <description>This should be a returned object from dojo.html.selection.getBookmark()</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Moves current selection to a bookmark</description>
      </method>
      <method scope="static" name="getFocus">
        <parameters>
          <parameter name="menu" type="Widget" usage="optional">
            <description>The menu that's being opened</description>
          </parameter>
          <parameter name="openedForWindow" type="Window" usage="optional">
            <description>iframe in which menu was opened</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns the current focus and selection. Called when a popup appears (either a top level menu or a dialog), or when a toolbar/menubar receives focus</description>
      </method>
      <method scope="static" name="focus">
        <parameters>
          <parameter name="handle" type="Object|DomNode" usage="required">
            <description>object returned by get(), or a DomNode</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets the focused node and the selection according to argument. To set focus to an iframe's content, pass in the iframe itself.</description>
      </method>
      <method scope="static" name="registerWin">
        <parameters>
          <parameter name="targetWindow" type="Window" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Registers listeners on the specified window (either the main window or an iframe) to detect when the user has clicked somewhere. Anyone that creates an iframe should call this function.</description>
      </method>
      <method scope="static" name="_onBlurNode" visibility="internal">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called when focus leaves a node. Usually ignored, _unless_ it *isn't* follwed by touching another node, which indicates that we tabbed off the last field on the page, in which case every widget is marked inactive</description>
      </method>
      <method scope="static" name="_onTouchNode" visibility="internal">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Callback when node is focused or mouse-downed</description>
      </method>
      <method scope="static" name="_onFocusNode" visibility="internal">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Callback when node is focused</description>
      </method>
      <method scope="static" name="_setStack" visibility="internal">
        <parameters>
          <parameter name="newStack" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>The stack of active widgets has changed.  Send out appropriate events and record new stack</description>
      </method>
      <method scope="static" name="getUniqueId">
        <parameters>
          <parameter name="widgetType" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Generates a unique id for a given widgetType</description>
      </method>
      <method scope="static" name="byId">
        <parameters>
          <parameter name="id" type="String|Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Widget"/>
        </return-types>
        <description>Returns a widget by its id, or if passed a widget, no-op (like dojo.byId())</description>
      </method>
      <method scope="static" name="byNode">
        <parameters>
          <parameter name="node" type="DOMNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Widget"/>
        </return-types>
        <description>Returns the widget as referenced by node</description>
      </method>
      <method scope="static" name="getEnclosingWidget">
        <parameters>
          <parameter name="node" type="DOMNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns the widget whose dom tree contains node or null if the node is not contained within the dom tree of any widget</description>
      </method>
      <method scope="static" name="_isElementShown" visibility="internal">
        <parameters>
          <parameter name="elem" type="Element" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="isTabNavigable">
        <parameters>
          <parameter name="elem" type="Element" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Tests if an element is tab-navigable</description>
      </method>
      <method scope="static" name="_getTabNavigable" visibility="internal">
        <parameters>
          <parameter name="root" type="DOMNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Finds the following descendants of the specified root node: * the first tab-navigable element in document order without a tabindex or with tabindex=&amp;quot;0&amp;quot; * the last tab-navigable element in document order without a tabindex or with tabindex=&amp;quot;0&amp;quot; * the first element in document order with the lowest positive tabindex value * the last element in document order with the highest positive tabindex value</description>
      </method>
      <method scope="static" name="getFirstInTabbingOrder">
        <parameters>
          <parameter name="root" type="String|DOMNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Element"/>
        </return-types>
        <description>Finds the descendant of the specified root node that is first in the tabbing order</description>
      </method>
      <method scope="static" name="getLastInTabbingOrder">
        <parameters>
          <parameter name="root" type="String|DOMNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Element"/>
        </return-types>
        <description>Finds the descendant of the specified root node that is last in the tabbing order</description>
      </method>
      <method scope="static" name="getViewport">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns the dimensions and scroll position of the viewable area of a browser window</description>
      </method>
      <method scope="static" name="placeOnScreen">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
          <parameter name="pos" type="Object" usage="required"/>
          <parameter name="corners" type="Object" usage="required"/>
          <parameter name="tryOnly" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Keeps 'node' in the visible area of the screen while trying to place closest to pos.x, pos.y. The input coordinates are expected to be the desired document position.  Set which corner(s) you want to bind to, such as  placeOnScreen(node, {x: 10, y: 20}, [&amp;quot;TR&amp;quot;, &amp;quot;BL&amp;quot;])  The desired x/y will be treated as the topleft(TL)/topright(TR) or BottomLeft(BL)/BottomRight(BR) corner of the node. Each corner is tested and if a perfect match is found, it will be used. Otherwise, it goes through all of the specified corners, and choose the most appropriate one.  NOTE: node is assumed to be absolutely or relatively positioned.</description>
      </method>
      <method scope="static" name="_place" visibility="internal">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
          <parameter name="choices" type="Array" usage="required">
            <description>of elements like: {corner: 'TL', pos: {x: 10, y: 20} } Above example says to put the top-left corner of the node at (10,20)</description>
          </parameter>
          <parameter name="layoutNode" type="Function" usage="required">
            <description>(node aroundNodeCorner, nodeCorner) for things like tooltip, they are displayed differently (and have different dimensions) based on their orientation relative to the parent.   This adjusts the popup based on orientation.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Given a list of spots to put node, put it at the first spot where it fits, of if it doesn't fit anywhere then the place with the least overflow</description>
      </method>
      <method scope="static" name="placeOnScreenAroundElement">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
          <parameter name="aroundNode" type="DomNode" usage="required"/>
          <parameter name="aroundCorners" type="Object" usage="required"/>
          <parameter name="layoutNode" type="Function" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="scrollIntoView">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Scroll the passed node into view, if it is not.</description>
      </method>
      <method scope="static" name="hasWaiRole">
        <parameters>
          <parameter name="elem" type="Element" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Determines if an element has a role.</description>
      </method>
      <method scope="static" name="getWaiRole">
        <parameters>
          <parameter name="elem" type="Element" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Gets the role for an element.</description>
      </method>
      <method scope="static" name="setWaiRole">
        <parameters>
          <parameter name="elem" type="Element" usage="required"/>
          <parameter name="role" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets the role on an element.</description>
      </method>
      <method scope="static" name="removeWaiRole">
        <parameters>
          <parameter name="elem" type="Element" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Removes the role from an element.</description>
      </method>
      <method scope="static" name="hasWaiState">
        <parameters>
          <parameter name="elem" type="Element" usage="required"/>
          <parameter name="state" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Determines if an element has a given state.</description>
      </method>
      <method scope="static" name="getWaiState">
        <parameters>
          <parameter name="elem" type="Element" usage="required"/>
          <parameter name="state" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Gets the value of a state on an element.</description>
      </method>
      <method scope="static" name="setWaiState">
        <parameters>
          <parameter name="elem" type="Element" usage="required"/>
          <parameter name="state" type="String" usage="required"/>
          <parameter name="value" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets a state on an element.</description>
      </method>
      <method scope="static" name="removeWaiState">
        <parameters>
          <parameter name="elem" type="Element" usage="required"/>
          <parameter name="state" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Removes a state from an element.</description>
      </method>
      <method scope="static" name="getDocumentWindow">
        <parameters>
          <parameter name="doc" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Window"/>
        </return-types>
        <description>Get window object associated with document doc</description>
      </method>
      <method scope="static" name="selectInputText">
        <parameters>
          <parameter name="element" type="DomNode" usage="required"/>
          <parameter name="start" type="Number" usage="optional"/>
          <parameter name="stop" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Select text in the input element argument, from start (default 0), to stop (default end).</description>
      </method>
    </methods>
  </class>
  <class type="dijit.BackgroundIframe" superclass="Object">
    <description>For IE z-index schenanigans. id attribute is required.</description>
    <constructors>
      <constructor scope="instance">
        <description>For IE z-index schenanigans. id attribute is required.</description>
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="iframe"/>
    </properties>
    <methods>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>destroy the iframe</description>
      </method>
    </methods>
  </class>
  <class type="dijit.ColorPalette" superclass="dijit._Widget dijit._Templated">
    <description>A keyboard accessible color-picking widget</description>
    <constructors>
      <constructor scope="instance">
        <description>A keyboard accessible color-picking widget</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="colorNames"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.style.position"/>
      <property type="Object" access="read-write" scope="instance" name="value"/>
      <property type="Object" access="read-write" scope="instance" name="_cellNodes" visibility="internal"/>
      <property type="Number" access="read-write" scope="instance" name="_currentFocus" visibility="internal">
        <description>Index of the currently focused color.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="_xDim" visibility="internal">
        <description>This is the number of colors horizontally across.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="_yDim" visibility="internal">
        <description>/		This is the number of colors vertically down.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="defaultTimeout">
        <description>number of milliseconds before a held key or button becomes typematic</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="palette">
        <description>Size of grid, either &amp;quot;7x10&amp;quot; or &amp;quot;3x4&amp;quot;.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="tabIndex">
        <description>Widget tabindex.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="templatePath">
        <description>Path to the template of this widget.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="timeoutChangeRate">
        <description>fraction of time used to change the typematic timer between events 1.0 means that each typematic event fires at defaultTimeout intervals &amp;lt; 1.0 means that each typematic event fires at an increasing faster rate</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="value"/>
      <property type="Number" access="read-write" scope="instance" name="_currentFocus" visibility="internal">
        <description>Index of the currently focused color.</description>
      </property>
      <property type="Map" access="read-write" scope="instance" name="_imagePaths" visibility="internal">
        <description>This is stores the path to the palette images</description>
      </property>
      <property type="Map" access="read-write" scope="instance" name="_paletteCoords" visibility="internal">
        <description>This is a map that is used to calculate the coordinates of the images that make up the palette.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_paletteDims" visibility="internal">
        <description>Size of the supported palettes for alignment purposes.</description>
      </property>
      <property type="Map" access="read-write" scope="instance" name="_palettes" visibility="internal">
        <description>This represents the value of the colors. The first level is a hashmap of the different arrays available The next two dimensions represent the columns and rows of colors.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="_xDim" visibility="internal">
        <description>This is the number of colors horizontally across.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="_yDim" visibility="internal">
        <description>/		This is the number of colors vertically down.</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="focus">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Focus this ColorPalette.  Puts focus on the first swatch.</description>
      </method>
      <method scope="instance" name="onChange">
        <parameters>
          <parameter name="color" type="String" usage="required">
            <description>Hex value corresponding to color. console.debug(&amp;quot;Color selected is: &amp;quot;+color);</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Callback when a color is selected.</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_focusFirst" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_navigateByKey" visibility="internal">
        <parameters>
          <parameter name="increment" type="How" usage="required">
            <description>much the key is navigated.</description>
          </parameter>
          <parameter name="typeCount" type="How" usage="required">
            <description>many times typematic has fired.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This is the callback for typematic. It changes the focus and the highlighed color.</description>
      </method>
      <method scope="instance" name="_onBlur" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onCellBlur" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>needed for Firefox 2 on Mac OS X</description>
      </method>
      <method scope="instance" name="_onCellDijitclick" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required">
            <description>The event.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Handler for click, enter key &amp;amp; space key. Selects the color.</description>
      </method>
      <method scope="instance" name="_onCellFocus" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required">
            <description>The focus event.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Handler for onFocus. Removes highlight of the color that just lost focus, and highlights the new color.</description>
      </method>
      <method scope="instance" name="_onCellMouseEnter" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required">
            <description>The mouse event.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Handler for onMouseOver. Put focus on the color under the mouse.</description>
      </method>
      <method scope="instance" name="_onDivNodeFocus" visibility="internal">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onFocus" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_removeCellHighlight" visibility="internal">
        <parameters>
          <parameter name="index" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_selectColor" visibility="internal">
        <parameters>
          <parameter name="selectNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This selects a color. It triggers the onChange event area: The area node that covers the color being selected.</description>
      </method>
    </methods>
  </class>
  <class type="dijit.Declaration" superclass="dijit._Widget">
    <description>The Declaration widget allows a user to declare new widget classes directly from a snippet of markup.</description>
    <constructors>
      <constructor scope="instance">
        <description>The Declaration widget allows a user to declare new widget classes directly from a snippet of markup.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="mixins"/>
      <property type="Object" access="read-write" scope="instance" name="defaults"/>
      <property type="Object" access="read-write" scope="instance" name="mixins"/>
      <property type="Object" access="read-write" scope="instance" name="replaceVars"/>
      <property type="Object" access="read-write" scope="instance" name="widgetClass"/>
      <property type="Object" access="read-write" scope="instance" name="_noScript" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="buildRendering">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.demos" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="nihao"/>
    </properties>
  </class>
  <class type="dijit.demos.chat" superclass="Object"/>
  <class type="dijit.demos.chat.room" superclass="Object"/>
  <class type="dijit.demos.chat.Room" superclass="dijit._Widget dijit._Templated">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="chatNode.scrollTop"/>
      <property type="Object" access="read-write" scope="instance" name="joined.className"/>
      <property type="Object" access="read-write" scope="instance" name="joining.className"/>
      <property type="Object" access="read-write" scope="instance" name="phrase.value"/>
      <property type="Object" access="read-write" scope="instance" name="roomId"/>
      <property type="Object" access="read-write" scope="instance" name="_last" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_username" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="isPrivate"/>
      <property type="Object" access="read-write" scope="instance" name="prompt"/>
      <property type="Object" access="read-write" scope="instance" name="roomId"/>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
      <property type="Object" access="read-write" scope="instance" name="_last" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_username" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="chat">
        <parameters>
          <parameter name="text" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>publish a text message to the room</description>
      </method>
      <method scope="instance" name="join">
        <parameters>
          <parameter name="name" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="leave">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_chat" visibility="internal">
        <parameters>
          <parameter name="message" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>process an incoming message</description>
      </method>
      <method scope="instance" name="_cleanInput" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_join" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_sendPhrase" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.Dialog" superclass="dijit.layout.ContentPane dijit._DialogMixin dijit._Templated dijit.form._FormMixin">
    <description>A modal dialog Widget</description>
    <constructors>
      <constructor scope="instance">
        <description>A modal dialog Widget</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="domNode.style.visibility"/>
      <property type="Boolean" access="read-write" scope="instance" name="open">
        <description>is True or False depending on state of dialog</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_alreadyInitialized" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_fadeIn" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_fadeOut" visibility="internal"/>
      <property type="DomNode" access="read-write" scope="instance" name="_firstFocusItem" visibility="internal">
        <description>The pointer to the first focusable node in the dialog</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_modalconnects" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_moveable" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_savedFocus" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_scrollConnected" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_underlay" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="attributeMap"/>
      <property type="Boolean" access="read-write" scope="instance" name="doLayout">
        <description>Don't change this parameter from the default value. This ContentPane parameter doesn't make sense for Dialog, since Dialog is never a child of a layout container, nor can you specify the size of Dialog in order to control the size of an inner widget.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="duration">
        <description>The time in milliseconds it takes the dialog to fade in and out</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="open">
        <description>is True or False depending on state of dialog</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="refocus">
        <description>A Toggle to modify the default focus behavior of a Dialog, which is to re-focus the element which had focus before being opened. False will disable refocusing. Default: true</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
      <property type="DomNode" access="read-write" scope="instance" name="_firstFocusItem" visibility="internal">
        <description>The pointer to the first focusable node in the dialog</description>
      </property>
      <property type="DomNode" access="read-write" scope="instance" name="_lastFocusItem" visibility="internal">
        <description>The pointer to which node has focus prior to our dialog</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="hide">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Hide the dialog</description>
      </method>
      <method scope="instance" name="layout">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>position the Dialog and the underlay</description>
      </method>
      <method scope="instance" name="onLoad">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>when href is specified we need to reposition the dialog after the data is loaded</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="show">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>display the dialog</description>
      </method>
      <method scope="instance" name="uninitialize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onKey" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>handles the keyboard events for accessibility reasons</description>
      </method>
      <method scope="instance" name="_position" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>position modal dialog in center of screen</description>
      </method>
      <method scope="instance" name="_setup" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>stuff we need to do before showing the Dialog for the first time (but we defer it until right beforehand, for performance reasons)</description>
      </method>
    </methods>
  </class>
  <class type="dijit.DialogUnderlay" superclass="dijit._Widget dijit._Templated">
    <description>The component that grays out the screen behind the dialog  Template has two divs; outer div is used for fade-in/fade-out, and also to hold background iframe. Inner div has opacity specified in CSS file.</description>
    <constructors>
      <constructor scope="instance">
        <description>The component that grays out the screen behind the dialog  Template has two divs; outer div is used for fade-in/fade-out, and also to hold background iframe. Inner div has opacity specified in CSS file.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="bgIframe"/>
      <property type="Object" access="read-write" scope="instance" name="bgIframe.iframe.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="_resizeHandler" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="attributeMap"/>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
    </properties>
    <methods>
      <method scope="instance" name="hide">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>hides the dialog underlay</description>
      </method>
      <method scope="instance" name="layout">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets the background to the size of the viewport</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Append the underlay to the body</description>
      </method>
      <method scope="instance" name="show">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Show the dialog underlay</description>
      </method>
      <method scope="instance" name="uninitialize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.Editor" superclass="dijit._editor.RichText">
    <description>A rich-text Editing widget</description>
    <constructors>
      <constructor scope="instance">
        <description>A rich-text Editing widget</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="commands"/>
      <property type="Object" access="read-write" scope="instance" name="plugins"/>
      <property type="Object" access="read-write" scope="instance" name="toolbar"/>
      <property type="Object" access="read-write" scope="instance" name="_editInterval" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_editTimer" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_inEditing" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_plugins" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_steps" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_undoedSteps" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="customUndo"/>
      <property type="Number" access="read-write" scope="instance" name="editActionInterval">
        <description>When using customUndo, not every keystroke will be saved as a step. Instead typing (including delete) will be grouped together: after a user stop typing for editActionInterval seconds, a step will be saved; if a user resume typing within editActionInterval seconds, the timeout will be restarted. By default, editActionInterval is 3 seconds.</description>
      </property>
      <property type="Array" access="read-write" scope="instance" name="extraPlugins">
        <description>a list of extra plugin names which will be appended to plugins array</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="plugins"/>
      <property type="Object" access="read-write" scope="instance" name="_steps" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="addPlugin">
        <parameters>
          <parameter name="plugin" type="String|Object" usage="required">
            <description>String args object or plugin instance. Required. args: This object will be passed to the plugin constructor.</description>
          </parameter>
          <parameter name="index" type="Number" usage="optional">
            <description>optional. Used when creating an instance from something already in this.plugins. Ensures that the new instance is assigned to this.plugins at that index.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>takes a plugin name as a string or a plugin instance and adds it to the toolbar and associates it with this editor instance. The resulting plugin is added to the Editor's plugins array. If index is passed, it's placed in the plugins array at that index. No big magic, but a nice helper for passing in plugin names via markup.</description>
      </method>
      <method scope="instance" name="beginEditing">
        <parameters>
          <parameter name="cmd" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="Slider"/>
      <property type="Object" access="read-write" scope="static" name="nls"/>
    </properties>
  </class>
  <class type="dijit.form.Button" superclass="dijit.form._FormWidget">
    <description>Basically the same thing as a normal HTML button, but with special styling.</description>
    <constructors>
      <constructor scope="instance">
        <description>Basically the same thing as a normal HTML button, but with special styling.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="containerNode.innerHTML"/>
      <property type="String" access="read-write" scope="instance" name="label">
        <description>text to display in button</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="showLabel">
        <description>whether or not to display the text label in button</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="titleNode.title"/>
      <property type="Object" access="read-write" scope="instance" name="type"/>
      <property type="Object" access="read-write" scope="instance" name="baseClass"/>
      <property type="String" access="read-write" scope="instance" name="iconClass">
        <description>class to apply to div in button to make it display an icon</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="label">
        <description>text to display in button</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="showLabel">
        <description>whether or not to display the text label in button</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Object" access="read-write" scope="instance" name="type"/>
      <property type="Object" access="read-write" scope="instance" name="_onChangeMonitor" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="onClick">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>user callback for when button is clicked if type=&amp;quot;submit&amp;quot;, return true to perform submit</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>get label and set as title on button icon if necessary</description>
      </method>
      <method scope="instance" name="setLabel">
        <parameters>
          <parameter name="content" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>reset the label (text) of the button; takes an HTML string</description>
      </method>
      <method scope="instance" name="_clicked" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>internal replaceable function for when the button is clicked</description>
      </method>
      <method scope="instance" name="_onButtonClick" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>callback when the user mouse clicks the button portion</description>
      </method>
      <method scope="instance" name="_onClick" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>internal function to handle click actions</description>
      </method>
    </methods>
  </class>
  <class type="dijit.form.CheckBox" superclass="dijit.form.ToggleButton">
    <description>Same as an HTML checkbox, but with fancy styling.</description>
    <constructors>
      <constructor scope="instance">
        <description>Same as an HTML checkbox, but with fancy styling.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_resetValueAttr" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="baseClass"/>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Object" access="read-write" scope="instance" name="type"/>
      <property type="Value" access="read-write" scope="instance" name="value">
        <description>equivalent to value field on normal checkbox (if checked, the value is passed as the value when form is submitted)</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_getValueDeprecated" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="getValue">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>If the CheckBox is checked, returns the value attribute. Otherwise returns false.</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="reset">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="newValue" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>When passed a boolean, controls whether or not the CheckBox is checked. If passed a string, changes the value attribute of the CheckBox (the one specified as &amp;quot;value&amp;quot; when the CheckBox was constructed (ex: &amp;lt;input dojoType=&amp;quot;dijit.CheckBox&amp;quot; value=&amp;quot;chicken&amp;quot;&amp;gt;)</description>
      </method>
    </methods>
  </class>
  <class type="dijit.form.ComboBox" superclass="dijit.form.ValidationTextBox dijit.form.ComboBoxMixin">
    <description>Auto-completing text box, and base class for dijit.form.FilteringSelect.</description>
    <constructors>
      <constructor scope="instance">
        <description>Auto-completing text box, and base class for dijit.form.FilteringSelect.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <methods>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postMixInProperties">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setAttribute">
        <parameters>
          <parameter name="attr" type="String" usage="required"/>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form.ComboBoxMixin" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="baseClass"/>
      <property type="Object" access="read-write" scope="instance" name="focusNode.value"/>
      <property type="Object" access="read-write" scope="instance" name="item">
        <description>This is the item returned by the dojo.data.store implementation that provides the data for this cobobox, it's the currently selected item.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="query">
        <description>A query that can be passed to 'store' to initially filter the items, before doing further filtering based on `searchAttr` and the key. Any reference to the `searchAttr` is ignored.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="searchTimer"/>
      <property type="Object" access="read-write" scope="instance" name="store">
        <description>Reference to data provider object used by this ComboBox</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="value"/>
      <property type="Object" access="read-write" scope="instance" name="_isShowingNow" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_lastQuery" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_nextSearch" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_popupWidget" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_popupWidget.domNode.style.overflow"/>
      <property type="Object" access="read-write" scope="instance" name="_prev_key_backspace" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_prev_key_esc" visibility="internal"/>
      <property type="Boolean" access="read-write" scope="instance" name="autoComplete">
        <description>If you type in a partial string, and then tab out of the `&amp;lt;input&amp;gt;` box, automatically copy the first entry displayed in the drop down list to the `&amp;lt;input&amp;gt;` field</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="baseClass"/>
      <property type="Boolean" access="read-write" scope="instance" name="hasDownArrow">
        <description>Set this textbox to have a down arrow button. Defaults to true.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="ignoreCase">
        <description>Set true if the ComboBox should ignore case when matching possible items</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="item">
        <description>This is the item returned by the dojo.data.store implementation that provides the data for this cobobox, it's the currently selected item.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="open"/>
      <property type="Number" access="read-write" scope="instance" name="pageSize">
        <description>Argument to data provider. Specifies number of search results per page (before hitting &amp;quot;next&amp;quot; button)</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="query">
        <description>A query that can be passed to 'store' to initially filter the items, before doing further filtering based on `searchAttr` and the key. Any reference to the `searchAttr` is ignored.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="queryExpr">
        <description>dojo.data query expression pattern. `${0}` will be substituted for the user text. `*` is used for wildcards. `${0}*` means &amp;quot;starts with&amp;quot;, `*${0}*` means &amp;quot;contains&amp;quot;, `${0}` means &amp;quot;is&amp;quot;</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="reset"/>
      <property type="String" access="read-write" scope="instance" name="searchAttr">
        <description>Searches pattern match against this field</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="searchDelay">
        <description>Delay in milliseconds between when user types something and we start searching based on that value</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="store">
        <description>Reference to data provider object used by this ComboBox</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Object" access="read-write" scope="instance" name="uninitialize"/>
      <property type="Object" access="read-write" scope="instance" name="_getMenuLabelFromItem" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_getValueField" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_postCreate" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="compositionend">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>When inputting characters using an input method, such as Asian languages, it will generate this event instead of onKeyDown event Note: this event is only triggered in FF (not in IE)</description>
      </method>
      <method scope="instance" name="postMixInProperties">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_announceOption" visibility="internal">
        <parameters>
          <parameter name="node" type="Node" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>a11y code that puts the highlighted option in the textbox This way screen readers will know what is happening in the menu</description>
      </method>
      <method scope="instance" name="_arrowIdle" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_arrowPressed" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_autoCompleteText" visibility="internal">
        <parameters>
          <parameter name="text" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Fill in the textbox with the first item from the drop down list, and highlight the characters that were auto-completed. For example, if user typed &amp;quot;CA&amp;quot; and the drop down list appeared, the textbox would be changed to &amp;quot;California&amp;quot; and &amp;quot;ifornia&amp;quot; would be highlighted.</description>
      </method>
      <method scope="instance" name="_doSelect" visibility="internal">
        <parameters>
          <parameter name="tgt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getCaretPos" visibility="internal">
        <parameters>
          <parameter name="element" type="DomNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getQueryString" visibility="internal">
        <parameters>
          <parameter name="text" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_hideResultList" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onArrowMouseDown" visibility="internal">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>callback when arrow is clicked</description>
      </method>
      <method scope="instance" name="_onBlur" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called magically when focus has shifted away from this widget and it's dropdown</description>
      </method>
      <method scope="instance" name="_onKeyPress" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>handles keyboard events</description>
      </method>
      <method scope="instance" name="_openResultList" visibility="internal">
        <parameters>
          <parameter name="results" type="Object" usage="required"/>
          <parameter name="dataObject" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_selectOption" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setAttribute" visibility="internal">
        <parameters>
          <parameter name="attr" type="String" usage="required"/>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>additional code to set disablbed state of combobox node</description>
      </method>
      <method scope="instance" name="_setBlurValue" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setCaretPos" visibility="internal">
        <parameters>
          <parameter name="element" type="DomNode" usage="required"/>
          <parameter name="location" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_showResultList" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_startSearch" visibility="internal">
        <parameters>
          <parameter name="key" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_startSearchFromInput" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form.ComboButton" superclass="dijit.form.DropDownButton">
    <description>A Normal Button with a DropDown</description>
    <constructors>
      <constructor scope="instance">
        <description>A Normal Button with a DropDown</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_focalNodes" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_focusedNode" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="attributeMap"/>
      <property type="Object" access="read-write" scope="instance" name="baseClass"/>
      <property type="String" access="read-write" scope="instance" name="optionsTitle">
        <description>text that describes the options menu (accessibility)</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Object" access="read-write" scope="instance" name="_focusedNode" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="focusFocalNode">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Focus the focal node node.</description>
      </method>
      <method scope="instance" name="focusNext">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Focus the focal node following the current node with focus or the first one if no node currently has focus.</description>
      </method>
      <method scope="instance" name="focusPrev">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Focus the focal node before the current node with focus or the last one if no node currently has focus.</description>
      </method>
      <method scope="instance" name="getFocalNodes">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns an array of focal nodes for this widget.</description>
      </method>
      <method scope="instance" name="hasNextFocalNode">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns true if this widget has no node currently focused or if there is a node following the focused one. False is returned if the last node has focus.</description>
      </method>
      <method scope="instance" name="hasPrevFocalNode">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns true if this widget has no node currently focused or if there is a node before the focused one. False is returned if the first node has focus.</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onBlur" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onNodeBlur" visibility="internal">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onNodeFocus" visibility="internal">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form.CurrencyTextBox" superclass="dijit.form.NumberTextBox">
    <description>A validating currency textbox</description>
    <constructors>
      <constructor scope="instance">
        <description>A validating currency textbox</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="dijit.form._DateTimeTextBox.__Constraints" access="read-write" scope="instance" name="constraints"/>
      <property type="Object" access="read-write" scope="instance" name="constraints.currency"/>
      <property type="dijit.form._DateTimeTextBox.__Constraints" access="read-write" scope="instance" name="constraints"/>
      <property type="String" access="read-write" scope="instance" name="currency">
        <description>the [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code, a three letter sequence like &amp;quot;USD&amp;quot;</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="parse"/>
      <property type="Object" access="read-write" scope="instance" name="regExpGen"/>
      <property type="Object" access="read-write" scope="instance" name="_formatter" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="postMixInProperties">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form.DateTextBox" superclass="dijit.form._DateTimeTextBox">
    <description>A validating, serializable, range-bound date text box with a popup calendar</description>
    <constructors>
      <constructor scope="instance">
        <description>A validating, serializable, range-bound date text box with a popup calendar</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="popupClass"/>
      <property type="Object" access="read-write" scope="instance" name="_selector" visibility="internal"/>
    </properties>
  </class>
  <class type="dijit.form.DropDownButton" superclass="dijit.form.Button dijit._Container">
    <description>A button with a popup</description>
    <constructors>
      <constructor scope="instance">
        <description>A button with a popup</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="dropDown"/>
      <property type="Object" access="read-write" scope="instance" name="dropDown.domNode.style.visibility"/>
      <property type="Object" access="read-write" scope="instance" name="dropDownContainer"/>
      <property type="Object" access="read-write" scope="instance" name="_opened" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_seenKeydown" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="baseClass"/>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
    </properties>
    <methods>
      <method scope="instance" name="destroyDescendants">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_closeDropDown" visibility="internal">
        <parameters>
          <parameter name="focus" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_fillContent" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onArrowClick" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>callback when the user mouse clicks on menu popup node</description>
      </method>
      <method scope="instance" name="_onBlur" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called magically when focus has shifted away from this widget and it's dropdown</description>
      </method>
      <method scope="instance" name="_onDropDownBlur" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onDropDownClick" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>on Firefox 2 on the Mac it is possible to fire onclick by pressing enter down on a second element and transferring focus to the DropDownButton; we want to prevent opening our menu in this situation and only do so if we have seen a keydown on this button; detail != 0 means that we were fired by mouse</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onDropDownKeydown" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onKey" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>callback when the user presses a key on menu popup node</description>
      </method>
      <method scope="instance" name="_openDropDown" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_toggleDropDown" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>toggle the drop-down widget; if it is up, close it, if not, open it</description>
      </method>
    </methods>
  </class>
  <class type="dijit.form.FilteringSelect" superclass="dijit.form.MappedTextBox dijit.form.ComboBoxMixin">
    <description>An enhanced version of the HTML SELECT tag, populated dynamically</description>
    <constructors>
      <constructor scope="instance">
        <description>An enhanced version of the HTML SELECT tag, populated dynamically</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="item"/>
      <property type="Object" access="read-write" scope="instance" name="valueNode.value"/>
      <property type="Object" access="read-write" scope="instance" name="_isvalid" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="getValue"/>
      <property type="Object" access="read-write" scope="instance" name="isValid"/>
      <property type="String" access="read-write" scope="instance" name="labelAttr">
        <description>Optional.  The text that actually appears in the drop down. If not specified, the searchAttr text is used instead.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="labelType">
        <description>&amp;quot;html&amp;quot; or &amp;quot;text&amp;quot;</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="setDisplayedValue"/>
      <property type="Object" access="read-write" scope="instance" name="_getMenuLabelFromItem" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_getValueField" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_isvalid" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_lastDisplayedValue" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_setValue" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="labelFunc">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="store" type="dojo.data.store" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event handler called when the label changes return: the label that the ComboBox should display</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postMixInProperties">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setAttribute">
        <parameters>
          <parameter name="attr" type="String" usage="required"/>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="value" type="String" usage="required"/>
          <parameter name="priorityChange" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets the value of the select. Also sets the label to the corresponding value by reverse lookup.</description>
      </method>
      <method scope="instance" name="undo">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_callbackSetLabel" visibility="internal">
        <parameters>
          <parameter name="result" type="Array" usage="required"/>
          <parameter name="dataObject" type="Object" usage="required"/>
          <parameter name="priorityChange" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Callback function that dynamically sets the label of the ComboBox</description>
      </method>
      <method scope="instance" name="_doSelect" visibility="internal">
        <parameters>
          <parameter name="tgt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>ComboBox's menu callback function</description>
      </method>
      <method scope="instance" name="_openResultList" visibility="internal">
        <parameters>
          <parameter name="results" type="Object" usage="required"/>
          <parameter name="dataObject" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setValueFromItem" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="priorityChange" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Set the displayed valued in the input box, based on a selected item.</description>
      </method>
      <method scope="instance" name="_valueChanged" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form.Form" superclass="dijit._Widget dijit._Templated dijit.form._FormMixin">
    <description>Adds conveniences to regular HTML form</description>
    <constructors>
      <constructor scope="instance">
        <description>Adds conveniences to regular HTML form</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="domNode.encoding"/>
      <property type="Object" access="read-write" scope="instance" name="returnValue"/>
      <property type="Object" access="read-write" scope="instance" name="accept"/>
      <property type="Object" access="read-write" scope="instance" name="accept-charset"/>
      <property type="Object" access="read-write" scope="instance" name="action"/>
      <property type="Object" access="read-write" scope="instance" name="attributeMap"/>
      <property type="Object" access="read-write" scope="instance" name="encType"/>
      <property type="Object" access="read-write" scope="instance" name="method"/>
      <property type="Object" access="read-write" scope="instance" name="name"/>
      <property type="Object" access="read-write" scope="instance" name="target"/>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
    </properties>
    <methods>
      <method scope="instance" name="execute">
        <parameters>
          <parameter name="formContents" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Deprecated: use submit()</description>
      </method>
      <method scope="instance" name="onExecute">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Deprecated: use onSubmit()</description>
      </method>
      <method scope="instance" name="onReset">
        <parameters>
          <parameter name="e" type="Event" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Callback when user resets the form. This method is intended to be over-ridden. When the `reset` method is called programmatically, the return value from `onReset` is used to compute whether or not resetting should proceed</description>
      </method>
      <method scope="instance" name="onSubmit">
        <parameters>
          <parameter name="e" type="Event" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Callback when user submits the form. This method is intended to be over-ridden, but by default it checks and</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setAttribute">
        <parameters>
          <parameter name="attr" type="String" usage="required"/>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="submit">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>programmatically submit form if and only if the `onSubmit` returns true</description>
      </method>
      <method scope="instance" name="_onReset" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onSubmit" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form.HorizontalRule" superclass="dijit._Widget dijit._Templated">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Number" access="read-write" scope="instance" name="count">
        <description>Number of hash marks to generate</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="domNode.innerHTML"/>
      <property type="Node" access="read-write" scope="instance" name="container">
        <description>If this is a child widget, connect it to this parent node</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="count">
        <description>Number of hash marks to generate</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="ruleStyle">
        <description>CSS style to apply to individual hash marks</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
      <property type="Object" access="read-write" scope="instance" name="_isHorizontal" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_positionPrefix" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_positionSuffix" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_suffix" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_genHTML" visibility="internal">
        <parameters>
          <parameter name="pos" type="Object" usage="required"/>
          <parameter name="ndx" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form.HorizontalRuleLabels" superclass="dijit.form.HorizontalRule">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="count"/>
      <property type="Array" access="read-write" scope="instance" name="labels">
        <description>Array of text labels to render - evenly spaced from left-to-right or bottom-to-top</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="srcNodeRef.innerHTML"/>
      <property type="Object" access="read-write" scope="instance" name="constraints">
        <description>pattern, places, lang, et al (see dojo.number) for generated numeric labels when labels[] are not specified</description>
      </property>
      <property type="Array" access="read-write" scope="instance" name="labels">
        <description>Array of text labels to render - evenly spaced from left-to-right or bottom-to-top</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="labelStyle">
        <description>CSS style to apply to individual text labels</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="maximum"/>
      <property type="Object" access="read-write" scope="instance" name="minimum"/>
      <property type="Number" access="read-write" scope="instance" name="numericMargin">
        <description>Number of generated numeric labels that should be rendered as '' on the ends when labels[] are not specified</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
      <property type="Object" access="read-write" scope="instance" name="_labelPrefix" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_positionPrefix" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_suffix" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="getLabels">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>user replaceable function to return the labels array</description>
      </method>
      <method scope="instance" name="postMixInProperties">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_calcPosition" visibility="internal">
        <parameters>
          <parameter name="pos" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_genHTML" visibility="internal">
        <parameters>
          <parameter name="pos" type="Object" usage="required"/>
          <parameter name="ndx" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form.HorizontalSlider" superclass="dijit.form._FormValueWidget dijit._Container">
    <description>A form widget that allows one to select a value with a horizontally draggable image</description>
    <constructors>
      <constructor scope="instance">
        <description>A form widget that allows one to select a value with a horizontally draggable image</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="decrementButton.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="incrementButton.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="valueNode.value"/>
      <property type="Object" access="read-write" scope="instance" name="widget"/>
      <property type="Object" access="read-write" scope="instance" name="_descending" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_movable" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="attributeMap"/>
      <property type="Object" access="read-write" scope="instance" name="baseClass"/>
      <property type="Boolean" access="read-write" scope="instance" name="clickSelect">
        <description>If clicking the progress bar changes the value or not</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="discreteValues">
        <description>The maximum allowed values dispersed evenly between minimum and maximum (inclusive).</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="maximum">
        <description>The maximum allowed value.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="minimum">
        <description>The minimum value allowed.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="pageIncrement">
        <description>The amount of change with shift+arrow</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="showButtons">
        <description>Show increment/decrement buttons at the ends of the slider?</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="slideDuration">
        <description>The time in ms to take to animate the slider handle from 0% to 100%</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Object" access="read-write" scope="instance" name="value"/>
      <property type="Object" access="read-write" scope="instance" name="widgetsInTemplate"/>
      <property type="Object" access="read-write" scope="instance" name="_handleOffsetCoord" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_mousePixelCoord" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_pixelCount" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_progressPixelSize" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_startingPixelCoord" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_startingPixelCount" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="decrement">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>decrement slider by 1 unit</description>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="increment">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>increment slider by 1 unit</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="value" type="Number" usage="required"/>
          <parameter name="priorityChange" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_bumpValue" visibility="internal">
        <parameters>
          <parameter name="signedChange" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_isReversed" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_mouseWheeled" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onBarClick" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onClkDecBumper" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onClkIncBumper" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onHandleClick" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onKeyPress" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setPixelValue" visibility="internal">
        <parameters>
          <parameter name="pixelValue" type="Number" usage="required"/>
          <parameter name="maxPixels" type="Number" usage="required"/>
          <parameter name="priorityChange" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form.MappedTextBox" superclass="dijit.form.ValidationTextBox">
    <description>A dijit.form.ValidationTextBox subclass which provides a visible formatted display and a serializable value in a hidden input field which is actually sent to the server.  The visible display may be locale-dependent and interactive.  The value sent to the server is stored in a hidden input field which uses the `name` attribute declared by the original widget.  That value sent to the serveris defined by the dijit.form.MappedTextBox.serialize method and is typically locale-neutral.</description>
    <constructors>
      <constructor scope="instance">
        <description>A dijit.form.ValidationTextBox subclass which provides a visible formatted display and a serializable value in a hidden input field which is actually sent to the server.  The visible display may be locale-dependent and interactive.  The value sent to the server is stored in a hidden input field which uses the `name` attribute declared by the original widget.  That value sent to the serveris defined by the dijit.form.MappedTextBox.serialize method and is typically locale-neutral.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="textbox.name"/>
      <property type="Object" access="read-write" scope="instance" name="valueNode"/>
      <property type="Object" access="read-write" scope="instance" name="valueNode.disabled"/>
      <property type="Object" access="read-write" scope="instance" name="valueNode.value"/>
    </properties>
    <methods>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="serialize">
        <parameters>
          <parameter name="val" type="anything" usage="required"/>
          <parameter name="options" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>user replaceable function used to convert the getValue() result to a String</description>
      </method>
      <method scope="instance" name="setAttribute">
        <parameters>
          <parameter name="attr" type="String" usage="required"/>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="toString">
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>display the widget as a printable string using the widget's value</description>
      </method>
      <method scope="instance" name="validate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form.MultiSelect" superclass="dijit.form._FormWidget">
    <description>Wrapper for a native select multiple=&amp;quot;true&amp;quot; element to interact with dijit.form.Form</description>
    <constructors>
      <constructor scope="instance">
        <description>Wrapper for a native select multiple=&amp;quot;true&amp;quot; element to interact with dijit.form.Form</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="attributeMap"/>
      <property type="Object" access="read-write" scope="instance" name="size"/>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
      <property type="Object" access="read-write" scope="instance" name="_getValueDeprecated" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_multiValue" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="addSelected">
        <parameters>
          <parameter name="select" type="dijit.form.MultiSelect" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Move the selected nodes af an passed Select widget instance to this Select widget.</description>
      </method>
      <method scope="instance" name="getSelected">
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Access the NodeList of the selected options directly</description>
      </method>
      <method scope="instance" name="getValue">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns an array of the selected options' values</description>
      </method>
      <method scope="instance" name="invertSelection">
        <parameters>
          <parameter name="onChange" type="Boolean" usage="required">
            <description>If null, onChange is not fired.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Invert the selection</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="resize">
        <parameters>
          <parameter name="size" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="values" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Set the value(s) of this Select based on passed values</description>
      </method>
      <method scope="instance" name="_onChange" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form.NumberSpinner" superclass="dijit.form._Spinner dijit.form.NumberTextBoxMixin">
    <description>extends NumberTextBox to add up/down arrows for incremental change to the value</description>
    <constructors>
      <constructor scope="instance">
        <description>extends NumberTextBox to add up/down arrows for incremental change to the value</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="constraints.max"/>
      <property type="Object" access="read-write" scope="instance" name="constraints.min"/>
      <property type="Object" access="read-write" scope="instance" name="required"/>
    </properties>
    <methods>
      <method scope="instance" name="adjust">
        <parameters>
          <parameter name="val" type="Object" usage="required"/>
          <parameter name="delta" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>change Number val by the given amount</description>
      </method>
    </methods>
  </class>
  <class type="dijit.form.NumberTextBox" superclass="dijit.form.RangeBoundTextBox dijit.form.NumberTextBoxMixin">
    <description>A validating, serializable, range-bound text box.</description>
    <constructors>
      <constructor scope="instance">
        <description>A validating, serializable, range-bound text box.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
  </class>
  <class type="dijit.form.NumberTextBox.__Constraints" superclass="dijit.form.RangeBoundTextBox.__Constraints dojo.number.__FormatOptions dojo.number.__ParseOptions"/>
  <class type="dijit.form.NumberTextBoxMixin" superclass="Object">
    <description>A mixin for all number textboxes</description>
    <properties>
      <property type="dijit.form.NumberTextBox.__Constraints" access="read-write" scope="instance" name="constraints"/>
      <property type="Object" access="read-write" scope="instance" name="editOptions">
        <description>properties to mix into constraints when the value is being edited</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="regExpGen"/>
      <property type="Object" access="read-write" scope="instance" name="value"/>
      <property type="Object" access="read-write" scope="instance" name="_formatter" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="filter">
        <parameters>
          <parameter name="value" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="format">
        <parameters>
          <parameter name="value" type="Number" usage="required"/>
          <parameter name="constraints" type="dojo.number.__FormatOptions" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>formats the value as a Number, according to constraints</description>
      </method>
      <method scope="instance" name="parse">
        <parameters>
          <parameter name="value" type="String" usage="required"/>
          <parameter name="constraints" type="dojo.number.__ParseOptions" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>parses the value as a Number, according to constraints</description>
      </method>
      <method scope="instance" name="_onFocus" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form.RadioButton" superclass="dijit.form.CheckBox">
    <description>Same as an HTML radio, but with fancy styling.</description>
    <constructors>
      <constructor scope="instance">
        <description>Same as an HTML radio, but with fancy styling.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="baseClass"/>
      <property type="Object" access="read-write" scope="instance" name="type"/>
      <property type="Object" access="read-write" scope="instance" name="_groups" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setAttribute">
        <parameters>
          <parameter name="attr" type="String" usage="required"/>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="uninitialize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_clicked" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form.RangeBoundTextBox" superclass="dijit.form.MappedTextBox">
    <description>A dijit.form.MappedTextBox subclass which defines a range of valid values</description>
    <constructors>
      <constructor scope="instance">
        <description>A dijit.form.MappedTextBox subclass which defines a range of valid values</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="messages"/>
      <property type="String" access="read-write" scope="instance" name="rangeMessage">
        <description>The message to display if value is out-of-range</description>
      </property>
      <property type="dijit.form.RangeBoundTextBox.__Constraints" access="read-write" scope="instance" name="constraints"/>
      <property type="String" access="read-write" scope="instance" name="rangeMessage">
        <description>The message to display if value is out-of-range</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="compare">
        <parameters>
          <parameter name="val1" type="anything" usage="required"/>
          <parameter name="val2" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="anything"/>
        </return-types>
        <description>compare 2 values</description>
      </method>
      <method scope="instance" name="getErrorMessage">
        <parameters>
          <parameter name="isFocused" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
      </method>
      <method scope="instance" name="isInRange">
        <parameters>
          <parameter name="isFocused" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Need to over-ride with your own validation code in subclasses</description>
      </method>
      <method scope="instance" name="isValid">
        <parameters>
          <parameter name="isFocused" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postMixInProperties">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="rangeCheck">
        <parameters>
          <parameter name="primitive" type="Number" usage="required"/>
          <parameter name="constraints" type="dijit.form.RangeBoundTextBox.__Constraints" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>user replaceable function used to validate the range of the numeric input value</description>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="value" type="Number" usage="required"/>
          <parameter name="priorityChange" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form.RangeBoundTextBox.__Constraints" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Number" access="read-write" scope="instance" name="max">
        <description>Maximum signed value.  Default is +Infinity</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="min">
        <description>Minimum signed value.  Default is -Infinity</description>
      </property>
    </properties>
  </class>
  <class type="dijit.form.SimpleTextarea" superclass="dijit.form._FormValueWidget">
    <description>A simple textarea that degrades, and responds to minimal LayoutContainer usage, and works with dijit.form.Form. Doesn't automatically size according to input, like Textarea.</description>
    <constructors>
      <constructor scope="instance">
        <description>A simple textarea that degrades, and responds to minimal LayoutContainer usage, and works with dijit.form.Form. Doesn't automatically size according to input, like Textarea.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="domNode.value"/>
      <property type="Object" access="read-write" scope="instance" name="value"/>
      <property type="Object" access="read-write" scope="instance" name="attributeMap"/>
      <property type="Object" access="read-write" scope="instance" name="baseClass"/>
      <property type="Object" access="read-write" scope="instance" name="cols"/>
      <property type="Number" access="read-write" scope="instance" name="rows">
        <description>The number of characters per line.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
    </properties>
    <methods>
      <method scope="instance" name="getValue">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postMixInProperties">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="val" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form.Textarea" superclass="dijit.form._FormValueWidget">
    <description>A resizing textarea widget</description>
    <constructors>
      <constructor scope="instance">
        <description>A resizing textarea widget</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="domNode.style.overflowY"/>
      <property type="Object" access="read-write" scope="instance" name="editNode.contentEditable"/>
      <property type="Object" access="read-write" scope="instance" name="eventNode"/>
      <property type="Object" access="read-write" scope="instance" name="focusNode"/>
      <property type="Object" access="read-write" scope="instance" name="formValueNode.disabled"/>
      <property type="Object" access="read-write" scope="instance" name="iframe.contentDocument.designMode"/>
      <property type="Object" access="read-write" scope="instance" name="iframe.contentDocument.title"/>
      <property type="Object" access="read-write" scope="instance" name="iframe.postCreate"/>
      <property type="Object" access="read-write" scope="instance" name="iframe.style.overflowY"/>
      <property type="Object" access="read-write" scope="instance" name="lastHeight"/>
      <property type="Object" access="read-write" scope="instance" name="srcNodeRef.innerHTML"/>
      <property type="Object" access="read-write" scope="instance" name="value"/>
      <property type="Object" access="read-write" scope="instance" name="_iframeEditTitle" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_iframeFocusTitle" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="attributeMap"/>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
    </properties>
    <methods>
      <method scope="instance" name="focus">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Received focus, needed for the InlineEditBox widget</description>
      </method>
      <method scope="instance" name="getValue">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postMixInProperties">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setAttribute">
        <parameters>
          <parameter name="attr" type="String" usage="required"/>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="value" type="String" usage="required"/>
          <parameter name="priorityChange" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_blurred" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_changed" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
          <parameter name="priorityChange" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event handler for when a change has already happened</description>
      </method>
      <method scope="instance" name="_changing" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event handler for when a change is imminent</description>
      </method>
      <method scope="instance" name="_focused" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onIframeBlur" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onKeyPress" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form.TextBox" superclass="dijit.form._FormValueWidget">
    <description>A base class for textbox form inputs</description>
    <constructors>
      <constructor scope="instance">
        <description>A base class for textbox form inputs</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="textbox.value"/>
      <property type="Object" access="read-write" scope="instance" name="attributeMap"/>
      <property type="Object" access="read-write" scope="instance" name="baseClass"/>
      <property type="Boolean" access="read-write" scope="instance" name="lowercase">
        <description>Converts all characters to lowercase if true.  Default is false.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="maxLength">
        <description>HTML INPUT tag maxLength declaration.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="propercase">
        <description>Converts the first character of each word to uppercase if true.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Boolean" access="read-write" scope="instance" name="trim">
        <description>Removes leading and trailing whitespace if true.  Default is false.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="uppercase">
        <description>Converts all characters to uppercase if true.  Default is false.</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="filter">
        <parameters>
          <parameter name="val" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Apply specified filters to textbox value</description>
      </method>
      <method scope="instance" name="format">
        <parameters>
          <parameter name="value" type="String" usage="required"/>
          <parameter name="constraints" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Replacable function to convert a value to a properly formatted string</description>
      </method>
      <method scope="instance" name="getDisplayedValue">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns the formatted value that the user sees in the textbox, which may be different from the serialized value that's actually sent to the server (see dijit.form.ValidationTextBox.serialize)</description>
      </method>
      <method scope="instance" name="getValue">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="parse">
        <parameters>
          <parameter name="value" type="String" usage="required"/>
          <parameter name="constraints" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Replacable function to convert a formatted string to a value</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setDisplayedValue">
        <parameters>
          <parameter name="value" type="String" usage="required"/>
          <parameter name="priorityChange" type="Boolean" usage="optional">
            <description>If true, an onChange event is fired immediately instead of waiting for the next blur event.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets the value of the visual element to the string &amp;quot;value&amp;quot;. The widget value is also set to a corresponding, but not necessarily the same, value.</description>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="value" type="The" usage="required">
            <description>visual element value is also set to a corresponding, but not necessarily the same, value.</description>
          </parameter>
          <parameter name="priorityChange" type="Boolean" usage="optional">
            <description>If true, an onChange event is fired immediately instead of waiting for the next blur event.</description>
          </parameter>
          <parameter name="formattedValue" type="String" usage="optional">
            <description>If specified, used to set the visual element value, otherwise a computed visual value is used.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets the value of the widget to &amp;quot;value&amp;quot; which can be of any type as determined by the widget.</description>
      </method>
      <method scope="instance" name="_onBlur" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setBlurValue" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form.TimeTextBox" superclass="dijit.form._DateTimeTextBox">
    <description>A validating, serializable, range-bound time text box with a popup time picker</description>
    <constructors>
      <constructor scope="instance">
        <description>A validating, serializable, range-bound time text box with a popup time picker</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="dijit.form.TimeTextBox.__Constraints" access="read-write" scope="instance" name="constraints"/>
      <property type="Object" access="read-write" scope="instance" name="popupClass"/>
      <property type="Object" access="read-write" scope="instance" name="_selector" visibility="internal"/>
    </properties>
  </class>
  <class type="dijit.form.TimeTextBox.__Constraints" superclass="dijit.form._DateTimeTextBox.__Constraints dijit._TimePicker.__Constraints"/>
  <class type="dijit.form.ToggleButton" superclass="dijit.form.Button">
    <description>A button that can be in two states (checked or not). Can be base class for things like tabs or checkbox or radio buttons</description>
    <constructors>
      <constructor scope="instance">
        <description>A button that can be in two states (checked or not). Can be base class for things like tabs or checkbox or radio buttons</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="attributeMap"/>
      <property type="Object" access="read-write" scope="instance" name="baseClass"/>
      <property type="Boolean" access="read-write" scope="instance" name="checked">
        <description>Corresponds to the native HTML &amp;lt;input&amp;gt; element's attribute. In markup, specified as &amp;quot;checked='checked'&amp;quot; or just &amp;quot;checked&amp;quot;. True if the button is depressed, or the checkbox is checked, or the radio button is selected, etc.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_onChangeMonitor" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setAttribute">
        <parameters>
          <parameter name="attr" type="String" usage="required"/>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setChecked">
        <parameters>
          <parameter name="checked" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Programatically deselect the button</description>
      </method>
      <method scope="instance" name="_clicked" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form.ValidationTextBox" superclass="dijit.form.TextBox">
    <description>A TextBox subclass with the ability to validate content of various types and provide user feedback.</description>
    <constructors>
      <constructor scope="instance">
        <description>A TextBox subclass with the ability to validate content of various types and provide user feedback.</description>
      </constructor>
    </constructors>
    <properties>
      <property type="dijit.form.ValidationTextBox.__Constraints" access="read-write" scope="instance" name="constraints">
        <description>user-defined object needed to pass parameters to the validator functions</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="constraints.locale"/>
      <property type="String" access="read-write" scope="instance" name="invalidMessage">
        <description>The message to display if value is invalid.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="messages"/>
      <property type="String" access="read-write" scope="instance" name="regExp">
        <description>regular expression string used to validate the input Do not specify both regExp and regExpGen</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="state">
        <description>Shows current state (ie, validation result) of input (Normal, Warning, or Error)</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_message" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="baseClass"/>
      <property type="dijit.form.ValidationTextBox.__Constraints" access="read-write" scope="instance" name="constraints">
        <description>user-defined object needed to pass parameters to the validator functions</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="invalidMessage">
        <description>The message to display if value is invalid.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="promptMessage">
        <description>Hint string</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="regExp">
        <description>regular expression string used to validate the input Do not specify both regExp and regExpGen</description>
      </property>
      <property type="default" access="read-write" scope="instance" name="required">
        <description>values for new subclass properties Boolean Can be true or false, default is false.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="state">
        <description>Shows current state (ie, validation result) of input (Normal, Warning, or Error)</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="String[]" access="read-write" scope="instance" name="tooltipPosition">
        <description>See description of dijit.Tooltip.defaultPosition for details on this parameter.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_message" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="displayMessage">
        <parameters>
          <parameter name="message" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>User overridable method to display validation errors/hints. By default uses a tooltip.</description>
      </method>
      <method scope="instance" name="getErrorMessage">
        <parameters>
          <parameter name="isFocused" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>return an error message to show if appropriate</description>
      </method>
      <method scope="instance" name="getPromptMessage">
        <parameters>
          <parameter name="isFocused" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>return a hint to show if appropriate</description>
      </method>
      <method scope="instance" name="isValid">
        <parameters>
          <parameter name="isFocused" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Need to over-ride with your own validation code in subclasses</description>
      </method>
      <method scope="instance" name="postMixInProperties">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="regExpGen">
        <parameters>
          <parameter name="constraints" type="dijit.form.ValidationTextBox.__Constraints" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>user replaceable function used to generate regExp when dependent on constraints Do not specify both regExp and regExpGen</description>
      </method>
      <method scope="instance" name="setValue">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="validate">
        <parameters>
          <parameter name="isFocused" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called by oninit, onblur, and onkeypress.</description>
      </method>
      <method scope="instance" name="validator">
        <parameters>
          <parameter name="value" type="anything" usage="required"/>
          <parameter name="constraints" type="dijit.form.ValidationTextBox.__Constraints" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>user replaceable function used to validate the text input against the regular expression.</description>
      </method>
      <method scope="instance" name="_isEmpty" visibility="internal">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Checks for whitespace</description>
      </method>
      <method scope="instance" name="_refreshState" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_update" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form.ValidationTextBox.__Constraints" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="used" access="read-write" scope="instance" name="locale">
        <description>for validation, picks up value from this widget's lang attribute</description>
      </property>
      <property type="anything" access="read-write" scope="instance" name="_flags_" visibility="internal">
        <description>various flags passed to regExpGen function</description>
      </property>
    </properties>
  </class>
  <class type="dijit.form.VerticalRule" superclass="dijit.form.HorizontalRule">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
      <property type="Object" access="read-write" scope="instance" name="_isHorizontal" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_positionPrefix" visibility="internal"/>
    </properties>
  </class>
  <class type="dijit.form.VerticalRuleLabels" superclass="dijit.form.HorizontalRuleLabels">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
      <property type="Object" access="read-write" scope="instance" name="_isHorizontal" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_labelPrefix" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_positionPrefix" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="_calcPosition" visibility="internal">
        <parameters>
          <parameter name="pos" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form.VerticalSlider" superclass="dijit.form.HorizontalSlider">
    <description>A form widget that allows one to select a value with a vertically draggable image</description>
    <constructors>
      <constructor scope="instance">
        <description>A form widget that allows one to select a value with a vertically draggable image</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Boolean" access="read-write" scope="instance" name="_descending" visibility="internal">
        <description>Specifies if the slider values go from high-on-top (true), or low-on-top (false) TODO: expose this in 1.2 - the css progress/remaining bar classes need to be reversed</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_handleOffsetCoord" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_mousePixelCoord" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_pixelCount" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_progressPixelSize" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_startingPixelCoord" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_startingPixelCount" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_bottomButtonClicked" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_isReversed" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_rtlRectify" visibility="internal">
        <parameters>
          <parameter name="decorationNode" type="NodeList" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Rectify children nodes for left/right decoration in rtl case. Simply switch the rule and label child for each decoration node.</description>
      </method>
      <method scope="instance" name="_topButtonClicked" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form._ComboBoxDataStore" superclass="Object">
    <description>Inefficient but small data store specialized for inlined ComboBox data</description>
    <constructors>
      <constructor scope="instance">
        <description>Inefficient but small data store specialized for inlined ComboBox data</description>
        <parameters>
          <parameter name="root" type="DomNode" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="root"/>
    </properties>
    <methods>
      <method scope="instance" name="close">
        <parameters>
          <parameter name="request" type="dojo.data.api.Request|args|null" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="fetch">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Given a query and set of defined options, such as a start and count of items to return, this method executes the query and makes the results available as data items. Refer to dojo.data.api.Read.fetch() more details.</description>
      </method>
      <method scope="instance" name="fetchItemByIdentity">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Given the identity of an item, this method returns the item that has that identity through the onItem callback. Refer to dojo.data.api.Identity.fetchItemByIdentity() for more details.</description>
      </method>
      <method scope="instance" name="fetchSelectedItem">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Get the option marked as selected, like `&amp;lt;option selected&amp;gt;`. Not part of dojo.data API.</description>
      </method>
      <method scope="instance" name="getIdentity">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getLabel">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="defaultValue" type="value" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isItemLoaded">
        <parameters>
          <parameter name="something" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form._ComboBoxMenu" superclass="dijit._Widget dijit._Templated">
    <description>Focus-less div based menu for internal use in ComboBox</description>
    <constructors>
      <constructor scope="instance">
        <description>Focus-less div based menu for internal use in ComboBox</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="nextButton.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="previousButton.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="value"/>
      <property type="Object" access="read-write" scope="instance" name="_messages" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="highlightFirstOption"/>
      <property type="Object" access="read-write" scope="instance" name="highlightLastOption"/>
      <property type="Object" access="read-write" scope="instance" name="onClose"/>
      <property type="Object" access="read-write" scope="instance" name="postCreate"/>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
      <property type="Object" access="read-write" scope="instance" name="_blurOptionNode" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_createOption" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_focusOptionNode" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_highlightNextOption" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_highlightPrevOption" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_messages" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_onMouseOut" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_page" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clearResultList">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="createOptions">
        <parameters>
          <parameter name="results" type="Object" usage="required"/>
          <parameter name="dataObject" type="Object" usage="required"/>
          <parameter name="labelFunc" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getHighlightedOption">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns the highlighted option.</description>
      </method>
      <method scope="instance" name="getItems">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getListLength">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="handleKey">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onChange">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onPage">
        <parameters>
          <parameter name="direction" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="pageDown">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="pageUp">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postMixInProperties">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onMouseDown" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onMouseOver" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onMouseUp" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form._DateTimeTextBox" superclass="dijit.form.RangeBoundTextBox">
    <description>A validating, serializable, range-bound date or time text box.</description>
    <constructors>
      <constructor scope="instance">
        <description>A validating, serializable, range-bound date or time text box.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Date" access="read-write" scope="instance" name="value">
        <description>The value of this widget as a JavaScript Date object.  Use `getValue`/`setValue` to manipulate. When passed to the parser in markup, must be specified according to `dojo.date.stamp.fromISOString`</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_opened" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_picker" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="compare"/>
      <property type="dijit.form._DateTimeTextBox.__Constraints" access="read-write" scope="instance" name="constraints"/>
      <property type="Object" access="read-write" scope="instance" name="getDisplayedValue"/>
      <property type="String" access="read-write" scope="instance" name="popupClass">
        <description>Name of the popup widget class used to select a date/time</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="regExpGen"/>
      <property type="Object" access="read-write" scope="instance" name="serialize"/>
      <property type="Object" access="read-write" scope="instance" name="setDisplayedValue"/>
      <property type="Date" access="read-write" scope="instance" name="value">
        <description>The value of this widget as a JavaScript Date object.  Use `getValue`/`setValue` to manipulate. When passed to the parser in markup, must be specified according to `dojo.date.stamp.fromISOString`</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_selector" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="format">
        <parameters>
          <parameter name="value" type="Date" usage="required"/>
          <parameter name="constraints" type="dojo.date.locale.__FormatOptions" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>formats the value as a Date, according to constraints</description>
      </method>
      <method scope="instance" name="parse">
        <parameters>
          <parameter name="value" type="String" usage="required"/>
          <parameter name="constraints" type="dojo.date.locale.__FormatOptions" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>parses the value as a Date, according to constraints</description>
      </method>
      <method scope="instance" name="postMixInProperties">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="value" type="Date" usage="required"/>
          <parameter name="priorityChange" type="Boolean" usage="optional"/>
          <parameter name="formattedValue" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets the date on this textbox.  Note that `value` must be a Javascript Date object.</description>
      </method>
      <method scope="instance" name="_close" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onBlur" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called magically when focus has shifted away from this widget and it's dropdown</description>
      </method>
      <method scope="instance" name="_onFocus" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>open the TimePicker popup</description>
      </method>
      <method scope="instance" name="_onKeyPress" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_open" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>opens the TimePicker, and sets the onValueSelected value</description>
      </method>
    </methods>
  </class>
  <class type="dijit.form._DateTimeTextBox.__Constraints" superclass="dijit.form.RangeBoundTextBox.__Constraints dojo.date.locale.__FormatOptions"/>
  <class type="dijit.form._FormMixin" superclass="Object">
    <description>Widget corresponding to HTML form tag, for validation and serialization</description>
    <methods>
      <method scope="instance" name="getValues">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>generate JSON structure from form values</description>
      </method>
      <method scope="instance" name="isValid">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>make sure that every widget that has a validator function returns true</description>
      </method>
      <method scope="instance" name="reset">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setValues">
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>fill in form values from a JSON structure</description>
      </method>
      <method scope="instance" name="validate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>returns if the form is valid - same as isValid - but provides a few additional (ui-specific) features. 1 - it will highlight any sub-widgets that are not valid 2 - it will call focus() on the first invalid sub-widget</description>
      </method>
    </methods>
  </class>
  <class type="dijit.form._FormValueWidget" superclass="dijit.form._FormWidget">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="value"/>
      <property type="Object" access="read-write" scope="instance" name="attributeMap"/>
      <property type="Object" access="read-write" scope="instance" name="_getValueDeprecated" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="getValue">
        <parameters />
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>get the value of the widget.</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="newValue" type="anything" usage="required"/>
          <parameter name="priorityChange" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set the value of the widget.</description>
      </method>
      <method scope="instance" name="undo">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>restore the value to the last value passed to onChange</description>
      </method>
      <method scope="instance" name="_onKeyPress" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_valueChanged" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form._FormWidget" superclass="dijit._Widget dijit._Templated">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="stateModifier"/>
      <property type="Object" access="read-write" scope="instance" name="staticClass"/>
      <property type="Object" access="read-write" scope="instance" name="_active" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_hasBeenBlurred" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_hovering" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_lastValue" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_lastValueReported" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_layoutHackHandle" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_mouseDown" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_onChangeActive" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_resetValue" visibility="internal"/>
      <property type="String" access="read-write" scope="instance" name="alt">
        <description>Corresponds to the native HTML &amp;lt;input&amp;gt; element's attribute.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="attributeMap"/>
      <property type="Object" access="read-write" scope="instance" name="baseClass"/>
      <property type="Boolean" access="read-write" scope="instance" name="disabled">
        <description>Should this widget respond to user input? In markup, this is specified as &amp;quot;disabled='disabled'&amp;quot;, or just &amp;quot;disabled&amp;quot;.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="intermediateChanges">
        <description>Fires onChange for each value change or only on demand</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="name">
        <description>Name used when submitting form; same as &amp;quot;name&amp;quot; attribute or plain HTML elements</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="readOnly">
        <description>Should this widget respond to user input? In markup, this is specified as &amp;quot;readOnly&amp;quot;. Similar to disabled except readOnly form values are submitted</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="tabIndex">
        <description>Order fields are traversed when user hits the tab key</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="type">
        <description>Corresponds to the native HTML &amp;lt;input&amp;gt; element's attribute.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="value">
        <description>Corresponds to the native HTML &amp;lt;input&amp;gt; element's attribute.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_getValueDeprecated" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_onChangeActive" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_onChangeMonitor" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="create">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="focus">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getValue">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isFocusable">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onChange">
        <parameters>
          <parameter name="newValue" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>callback when value is changed</description>
      </method>
      <method scope="instance" name="reset">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setAttribute">
        <parameters>
          <parameter name="attr" type="String" usage="required"/>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setDisabled">
        <parameters>
          <parameter name="disabled" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Set disabled state of widget (Deprecated).</description>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="value" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_handleOnChange" visibility="internal">
        <parameters>
          <parameter name="newValue" type="anything" usage="required"/>
          <parameter name="priorityChange" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set the value of the widget.</description>
      </method>
      <method scope="instance" name="_layoutHack" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>work around table sizing bugs on FF2 by forcing redraw</description>
      </method>
      <method scope="instance" name="_onMouse" visibility="internal">
        <parameters>
          <parameter name="event" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets _hovering, _active, and stateModifier properties depending on mouse state, then calls setStateClass() to set appropriate CSS classes for this.domNode.  To get a different CSS class for hover, send onmouseover and onmouseout events to this method. To get a different CSS class while mouse button is depressed, send onmousedown to this method.</description>
      </method>
      <method scope="instance" name="_setStateClass" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Update the visual state of the widget by setting the css classes on this.domNode (or this.stateNode if defined) by combining this.baseClass with various suffixes that represent the current widget state(s).  In the case where a widget has multiple states, it sets the class based on all possible combinations.  For example, an invalid form widget that is being hovered will be &amp;quot;dijitInput dijitInputInvalid dijitInputHover dijitInputInvalidHover&amp;quot;.  For complex widgets with multiple regions, there can be various hover/active states, such as &amp;quot;Hover&amp;quot; or &amp;quot;CloseButtonHover&amp;quot; (for tab buttons). This is controlled by a stateModifier=&amp;quot;CloseButton&amp;quot; attribute on the close button node.  The widget may have one or more of the following states, determined by this.state, this.checked, this.valid, and this.selected: Error - ValidationTextBox sets this.state to &amp;quot;Error&amp;quot; if the current input value is invalid Checked - ex: a checkmark or a ToggleButton in a checked state, will have this.checked==true Selected - ex: currently selected tab will have this.selected==true  In addition, it may have one or more of the following states, based on this.disabled and flags set in _onMouse (this._active, this._hovering, this._focused): Disabled	- if the widget is disabled Active		- if the mouse (or space/enter key?) is being pressed down Focused		- if the widget has focus Hover		- if the mouse is over the widget</description>
      </method>
    </methods>
  </class>
  <class type="dijit.form._SliderMover" superclass="dojo.dnd.Mover">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="node" type="Node" usage="required">
            <description>a node (or node's id) to be moved</description>
          </parameter>
          <parameter name="e" type="Event" usage="required">
            <description>a mouse event, which started the move; only pageX and pageY properties are used</description>
          </parameter>
          <parameter name="host" type="Object" usage="optional">
            <description>object which implements the functionality of the move, and defines proper events (onMoveStart and onMoveStop)</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <methods>
      <method scope="instance" name="destroy">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onMouseMove">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.form._Spinner" superclass="dijit.form.RangeBoundTextBox">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="downArrowNode.style.behavior"/>
      <property type="Object" access="read-write" scope="instance" name="stateModifier"/>
      <property type="Object" access="read-write" scope="instance" name="upArrowNode.style.behavior"/>
      <property type="Object" access="read-write" scope="instance" name="_active" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_wheelTimer" visibility="internal"/>
      <property type="the" access="read-write" scope="instance" name="adjust">
        <description>value by this much when spinning using the PgUp/Dn keys</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="baseClass"/>
      <property type="Object" access="read-write" scope="instance" name="defaultTimeout"/>
      <property type="Number" access="read-write" scope="instance" name="largeDelta"/>
      <property type="Number" access="read-write" scope="instance" name="smallDelta"/>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Number" access="read-write" scope="instance" name="timeoutChangeRate">
        <description>fraction of time used to change the typematic timer between events 1.0 means that each typematic event fires at defaultTimeout intervals &amp;lt; 1.0 means that each typematic event fires at an increasing faster rate</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_wheelTimer" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_arrowPressed" visibility="internal">
        <parameters>
          <parameter name="nodePressed" type="Node" usage="required"/>
          <parameter name="direction" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_arrowReleased" visibility="internal">
        <parameters>
          <parameter name="node" type="Node" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_arrowState" visibility="internal">
        <parameters>
          <parameter name="node" type="Node" usage="required"/>
          <parameter name="pressed" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_mouseWheeled" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_typematicCallback" visibility="internal">
        <parameters>
          <parameter name="count" type="Number" usage="required"/>
          <parameter name="node" type="DOMNode" usage="required"/>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.InlineEditBox" superclass="dijit._Widget">
    <description>An element with in-line edit capabilitites</description>
    <constructors>
      <constructor scope="instance">
        <description>An element with in-line edit capabilitites</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="disabled"/>
      <property type="Object" access="read-write" scope="instance" name="displayNode"/>
      <property type="Object" access="read-write" scope="instance" name="displayNode.innerHTML"/>
      <property type="Object" access="read-write" scope="instance" name="displayNode.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="domNode"/>
      <property type="Boolean" access="read-write" scope="instance" name="editing">
        <description>Is the node currently in edit mode?</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="editWidget"/>
      <property type="String" access="read-write" scope="instance" name="value">
        <description>The display value of the widget in read-only mode</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="autoSave">
        <description>Changing the value automatically saves it; don't have to push save button (and save button isn't even displayed)</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="buttonCancel">
        <description>Cancel button label</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="buttonSave">
        <description>Save button label</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="editing">
        <description>Is the node currently in edit mode?</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="editor">
        <description>Class name for Editor widget</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="editorParams">
        <description>Set of parameters for editor, like {required: true}</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="noValueIndicator">
        <description>The text that gets displayed when there is no value (so that the user has a place to click to edit)</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="renderAsHtml">
        <description>Set this to true if the specified Editor's value should be interpreted as HTML rather than plain text (ie, dijit.Editor)</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="value">
        <description>The display value of the widget in read-only mode</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="width">
        <description>Width of editor.  By default it's width=100% (ie, block mode)</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="cancel">
        <parameters>
          <parameter name="focus" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Revert to display mode, discarding any changes made in the editor</description>
      </method>
      <method scope="instance" name="getValue">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onChange">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>User should set this handler to be notified of changes to value</description>
      </method>
      <method scope="instance" name="postMixInProperties">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="save">
        <parameters>
          <parameter name="focus" type="Boolean" usage="required">
            <description>Focus on the display mode text</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Save the contents of the editor and revert to display mode.</description>
      </method>
      <method scope="instance" name="setDisabled">
        <parameters>
          <parameter name="disabled" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Set disabled state of widget.</description>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="val" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>inserts specified HTML value into this node, or an &amp;quot;input needed&amp;quot; character if node is blank</description>
      </method>
      <method scope="instance" name="_edit" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>display the editor widget in place of the original (read only) markup</description>
      </method>
      <method scope="instance" name="_onClick" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onMouseOut" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onMouseOver" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_showText" visibility="internal">
        <parameters>
          <parameter name="focus" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>revert to display mode, and optionally focus on display node</description>
      </method>
    </methods>
  </class>
  <class type="dijit.layout" superclass="Object">
    <methods>
      <method scope="static" name="marginBox2contentBox">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
          <parameter name="mb" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Given the margin-box size of a node, return it's content box size. Functions like dojo.contentBox() but is more reliable since it doesn't have to wait for the browser to compute sizes.</description>
      </method>
      <method scope="static" name="layoutChildren">
        <parameters>
          <parameter name="container" type="DomNode" usage="required"/>
          <parameter name="dim" type="Object" usage="required"/>
          <parameter name="children" type="Object[]" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.layout.AccordionContainer" superclass="dijit.layout.StackContainer">
    <description>Holds a set of panes where every pane's title is visible, but only one pane's content is visible at a time, and switching between panes is visualized by sliding the other panes up/down.</description>
    <constructors>
      <constructor scope="instance">
        <description>Holds a set of panes where every pane's title is visible, but only one pane's content is visible at a time, and switching between panes is visualized by sliding the other panes up/down.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="domNode.style.overflow"/>
      <property type="Object" access="read-write" scope="instance" name="_inTransition" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_verticalSpace" visibility="internal"/>
      <property type="Number" access="read-write" scope="instance" name="duration">
        <description>Amount of time (in ms) it takes to slide panes</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_verticalSpace" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="layout">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Set the height of the open pane based on what room remains</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onKeyPress" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setupChild" visibility="internal">
        <parameters>
          <parameter name="page" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_transition" visibility="internal">
        <parameters>
          <parameter name="newWidget" type="Widget" usage="optional"/>
          <parameter name="oldWidget" type="Widget" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.layout.AccordionPane" superclass="dijit.layout.ContentPane dijit._Contained dijit._Templated">
    <description>AccordionPane is a ContentPane with a title that may contain another widget. Nested layout widgets, such as SplitContainer, are not supported at this time.</description>
    <constructors>
      <constructor scope="instance">
        <description>AccordionPane is a ContentPane with a title that may contain another widget. Nested layout widgets, such as SplitContainer, are not supported at this time.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="selected"/>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
    </properties>
    <methods>
      <method scope="instance" name="getTitleHeight">
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>returns the height of the title dom node</description>
      </method>
      <method scope="instance" name="onSelected">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called when this pane is selected</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setSelected">
        <parameters>
          <parameter name="isSelected" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>change the selected state on this pane</description>
      </method>
      <method scope="instance" name="_handleFocus" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>handle the blur and focus state of this widget</description>
      </method>
      <method scope="instance" name="_onTitleClick" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>callback when someone clicks my title</description>
      </method>
      <method scope="instance" name="_onTitleKeyPress" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setSelectedState" visibility="internal">
        <parameters>
          <parameter name="isSelected" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.layout.BorderContainer" superclass="dijit.layout._LayoutWidget">
    <description>Provides layout in 5 regions, a center and borders along its 4 sides.</description>
    <constructors>
      <constructor scope="instance">
        <description>Provides layout in 5 regions, a center and borders along its 4 sides.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="String" access="read-write" scope="instance" name="design">
        <description>choose which design is used for the layout: &amp;quot;headline&amp;quot; (default) where the top and bottom extend the full width of the container, or &amp;quot;sidebar&amp;quot; where the left and right sides extend from top to bottom.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_splitters" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_splitterThickness" visibility="internal"/>
      <property type="String" access="read-write" scope="instance" name="design">
        <description>choose which design is used for the layout: &amp;quot;headline&amp;quot; (default) where the top and bottom extend the full width of the container, or &amp;quot;sidebar&amp;quot; where the left and right sides extend from top to bottom.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="liveSplitters">
        <description>specifies whether splitters resize as you drag (true) or only upon mouseup (false)</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="persist">
        <description>Save splitter positions in a cookie.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="_splitterClass" visibility="internal">
        <description>Optional hook to override the default Splitter widget used by BorderContainer</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="addChild">
        <parameters>
          <parameter name="child" type="Widget" usage="required"/>
          <parameter name="insertIndex" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="layout">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="removeChild">
        <parameters>
          <parameter name="child" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_computeSplitterThickness" visibility="internal">
        <parameters>
          <parameter name="region" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_layoutChildren" visibility="internal">
        <parameters>
          <parameter name="changedRegion" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setupChild" visibility="internal">
        <parameters>
          <parameter name="child" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.layout.ContentPane" superclass="dijit._Widget">
    <description>A widget that acts as a Container for other widgets, and includes a ajax interface</description>
    <constructors>
      <constructor scope="instance">
        <description>A widget that acts as a Container for other widgets, and includes a ajax interface</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="containerNode"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.title"/>
      <property type="String" access="read-write" scope="instance" name="errorMessage">
        <description>Message that shows if an error occurs</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="href">
        <description>The href of the content that displays now. Set this at construction if you want to load data externally when the pane is shown.  (Set preload=true to load it immediately.) Changing href after creation doesn't have any effect; see setHref();</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="isContainer"/>
      <property type="Boolean" access="read-write" scope="instance" name="isLoaded">
        <description>Tells loading status see onLoad|onUnload for event hooks</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="loadingMessage">
        <description>Message that shows while downloading</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_beingDestroyed" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_contentBox" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_isDownloaded" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_singleChild" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_xhrDfd" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_xhrDfd.fired"/>
      <property type="String" access="read-write" scope="instance" name="class">
        <description>Class name to apply to ContentPane dom nodes TODO: this should be called &amp;quot;baseClass&amp;quot; like in the other widgets</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="doLayout">
        <description>false - don't adjust size of children true - looks for the first sizable child widget (ie, having resize() method) and sets it's size to however big the ContentPane is (TODO: implement) auto - if there is a single sizable child widget (ie, having resize() method), set it's size to however big the ContentPane is</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="errorMessage">
        <description>Message that shows if an error occurs</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="extractContent">
        <description>Extract visible content from inside of &amp;lt;body&amp;gt; .... &amp;lt;/body&amp;gt;</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="href">
        <description>The href of the content that displays now. Set this at construction if you want to load data externally when the pane is shown.  (Set preload=true to load it immediately.) Changing href after creation doesn't have any effect; see setHref();</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="isLoaded">
        <description>Tells loading status see onLoad|onUnload for event hooks</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="loadingMessage">
        <description>Message that shows while downloading</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="parseOnLoad">
        <description>parse content and create the widgets, if any</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="preload">
        <description>Force load of data even if pane is hidden.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="preventCache">
        <description>Cache content retreived externally</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="refreshOnShow">
        <description>Refresh (re-download) content when pane goes from hidden to shown</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="cancel">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Cancels a inflight download of content</description>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onContentError">
        <parameters>
          <parameter name="error" type="Error" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called on DOM faults, require fault etc in content default is to display errormessage inside pane</description>
      </method>
      <method scope="instance" name="onDownloadEnd">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called when download is finished</description>
      </method>
      <method scope="instance" name="onDownloadError">
        <parameters>
          <parameter name="error" type="Error" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called when download error occurs, default is to display errormessage inside pane. Overide function to change that. The string returned by this function will be the html that tells the user a error happend</description>
      </method>
      <method scope="instance" name="onDownloadStart">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called before download starts the string returned by this function will be the html that tells the user we are loading something override with your own function if you want to change text</description>
      </method>
      <method scope="instance" name="onLoad">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event hook, is called after everything is loaded and widgetified</description>
      </method>
      <method scope="instance" name="onUnload">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event hook, is called before old content is cleared</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="refresh">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Force a refresh (re-download) of content, be sure to turn off cache</description>
      </method>
      <method scope="instance" name="resize">
        <parameters>
          <parameter name="size" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setContent">
        <parameters>
          <parameter name="data" type="String|DomNode|Nodelist" usage="required">
            <description>the new Content may be String, DomNode or NodeList  if data is a NodeList (or an array of nodes) nodes are copied so you can import nodes from another document implicitly</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Replaces old content with data content, include style classes from old content</description>
      </method>
      <method scope="instance" name="setHref">
        <parameters>
          <parameter name="href" type="String|Uri" usage="required">
            <description>url to the page you want to get, must be within the same domain as your mainpage</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Reset the (external defined) content of this pane and replace with new url Note: It delays the download until widget is shown if preload is false</description>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_checkIfSingleChild" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Test if we have exactly one widget as a child, and if so assume that we are a container for that widget, and should propogate startup() and resize() calls to it.</description>
      </method>
      <method scope="instance" name="_createSubWidgets" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>scan my contents and create subwidgets</description>
      </method>
      <method scope="instance" name="_downloadExternalContent" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_isShown" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>returns true if the content is currently shown</description>
      </method>
      <method scope="instance" name="_loadCheck" visibility="internal">
        <parameters>
          <parameter name="forceLoad" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onError" visibility="internal">
        <parameters>
          <parameter name="type" type="Object" usage="required"/>
          <parameter name="err" type="Object" usage="required"/>
          <parameter name="consoleText" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onLoadHandler" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onUnloadHandler" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_prepareLoad" visibility="internal">
        <parameters>
          <parameter name="forceLoad" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setContent" visibility="internal">
        <parameters>
          <parameter name="cont" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.layout.LayoutContainer" superclass="dijit.layout._LayoutWidget">
    <description>Provides Delphi-style panel layout semantics.</description>
    <constructors>
      <constructor scope="instance">
        <description>Provides Delphi-style panel layout semantics.</description>
      </constructor>
    </constructors>
    <methods>
      <method scope="instance" name="addChild">
        <parameters>
          <parameter name="child" type="Widget" usage="required"/>
          <parameter name="insertIndex" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="layout">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="removeChild">
        <parameters>
          <parameter name="widget" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.layout.LinkPane" superclass="dijit.layout.ContentPane dijit._Templated">
    <description>A ContentPane that loads data remotely</description>
    <constructors>
      <constructor scope="instance">
        <description>A ContentPane that loads data remotely</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
    </properties>
    <methods>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.layout.SplitContainer" superclass="dijit.layout._LayoutWidget">
    <description>A Container widget with sizing handles in-between each child</description>
    <constructors>
      <constructor scope="instance">
        <description>A Container widget with sizing handles in-between each child</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="cover"/>
      <property type="Object" access="read-write" scope="instance" name="cover.style.zIndex"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.style.overflow"/>
      <property type="Object" access="read-write" scope="instance" name="dragOffset"/>
      <property type="Object" access="read-write" scope="instance" name="isDraggingLeft"/>
      <property type="Object" access="read-write" scope="instance" name="isHorizontal"/>
      <property type="Object" access="read-write" scope="instance" name="isSizing"/>
      <property type="Object" access="read-write" scope="instance" name="lastPoint"/>
      <property type="Object" access="read-write" scope="instance" name="originPos"/>
      <property type="Object" access="read-write" scope="instance" name="paneAfter"/>
      <property type="Object" access="read-write" scope="instance" name="paneAfter.position"/>
      <property type="Object" access="read-write" scope="instance" name="paneAfter.sizeActual"/>
      <property type="Object" access="read-write" scope="instance" name="paneBefore"/>
      <property type="Object" access="read-write" scope="instance" name="paneBefore.sizeActual"/>
      <property type="Object" access="read-write" scope="instance" name="paneHeight"/>
      <property type="Object" access="read-write" scope="instance" name="paneWidth"/>
      <property type="Object" access="read-write" scope="instance" name="screenToClientOffset"/>
      <property type="Object" access="read-write" scope="instance" name="sizers"/>
      <property type="Number" access="read-write" scope="instance" name="sizerWidth">
        <description>Size in pixels of the bar between each child</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="sizingSplitter"/>
      <property type="Object" access="read-write" scope="instance" name="sizingSplitter.style.zIndex"/>
      <property type="Object" access="read-write" scope="instance" name="startPoint"/>
      <property type="Object" access="read-write" scope="instance" name="virtualSizer"/>
      <property type="Object" access="read-write" scope="instance" name="virtualSizer.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="_ownconnects" visibility="internal"/>
      <property type="Boolean" access="read-write" scope="instance" name="activeSizing">
        <description>If true, the children's size changes as you drag the bar; otherwise, the sizes don't change until you drop the bar (by mouse-up)</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="orientation">
        <description>either 'horizontal' or vertical; indicates whether the children are arranged side-by-side or up/down.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="persist">
        <description>Save splitter positions in a cookie</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="sizerWidth">
        <description>Size in pixels of the bar between each child</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="addChild">
        <parameters>
          <parameter name="child" type="Widget" usage="required">
            <description>a widget to add</description>
          </parameter>
          <parameter name="insertIndex" type="Number" usage="optional">
            <description>postion in the &amp;quot;stack&amp;quot; to add the child widget</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Add a child widget to the container</description>
      </method>
      <method scope="instance" name="beginSizing">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
          <parameter name="i" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="changeSizing">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="endSizing">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="layout">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Do layout of panels</description>
      </method>
      <method scope="instance" name="legaliseSplitPoint">
        <parameters>
          <parameter name="a" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="movePoint">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postMixInProperties">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="removeChild">
        <parameters>
          <parameter name="widget" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Remove sizer, but only if widget is really our child and we have at least one sizer to throw away</description>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_addSizer" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_checkSizes" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getCookieName" visibility="internal">
        <parameters>
          <parameter name="i" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_growPane" visibility="internal">
        <parameters>
          <parameter name="growth" type="Object" usage="required"/>
          <parameter name="pane" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_hideSizingLine" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_injectChild" visibility="internal">
        <parameters>
          <parameter name="child" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_movePanel" visibility="internal">
        <parameters>
          <parameter name="panel" type="Object" usage="required"/>
          <parameter name="pos" type="Object" usage="required"/>
          <parameter name="size" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_moveSizingLine" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_moveSlider" visibility="internal">
        <parameters>
          <parameter name="slider" type="Object" usage="required"/>
          <parameter name="pos" type="Object" usage="required"/>
          <parameter name="size" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_restoreState" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_saveState" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_showSizingLine" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_updateSize" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.layout.StackContainer" superclass="dijit.layout._LayoutWidget">
    <description>A container that has multiple children, but shows only one child at a time</description>
    <constructors>
      <constructor scope="instance">
        <description>A container that has multiple children, but shows only one child at a time</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Widget" access="read-write" scope="instance" name="selectedChildWidget">
        <description>References the currently selected child widget, if any</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_beingDestroyed" visibility="internal"/>
      <property type="Boolean" access="read-write" scope="instance" name="doLayout">
        <description>if true, change the size of my currently displayed child to match my size</description>
      </property>
      <property type="Widget" access="read-write" scope="instance" name="selectedChildWidget">
        <description>References the currently selected child widget, if any</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_started" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="addChild">
        <parameters>
          <parameter name="child" type="Widget" usage="required"/>
          <parameter name="insertIndex" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Adds a widget to the stack</description>
      </method>
      <method scope="instance" name="back">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="closeChild">
        <parameters>
          <parameter name="page" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>callback when user clicks the [X] to remove a page if onClose() returns true then remove and destroy the child</description>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="forward">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="layout">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="removeChild">
        <parameters>
          <parameter name="page" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Removes the pane from the stack</description>
      </method>
      <method scope="instance" name="selectChild">
        <parameters>
          <parameter name="page" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Show the given widget (which must be one of my children)</description>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_adjacent" visibility="internal">
        <parameters>
          <parameter name="forward" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dijit._Widget"/>
        </return-types>
        <description>Gets the next/previous child widget in this container from the current selection</description>
      </method>
      <method scope="instance" name="_hideChild" visibility="internal">
        <parameters>
          <parameter name="page" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onKeyPress" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setupChild" visibility="internal">
        <parameters>
          <parameter name="page" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dijit._Widget"/>
        </return-types>
      </method>
      <method scope="instance" name="_showChild" visibility="internal">
        <parameters>
          <parameter name="page" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_transition" visibility="internal">
        <parameters>
          <parameter name="newWidget" type="Widget" usage="required"/>
          <parameter name="oldWidget" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.layout.StackController" superclass="dijit._Widget dijit._Container dijit._Templated">
    <description>Set of buttons to select a page in a page list. Monitors the specified StackContainer, and whenever a page is added, deleted, or selected, updates itself accordingly.</description>
    <constructors>
      <constructor scope="instance">
        <description>Set of buttons to select a page in a page list. Monitors the specified StackContainer, and whenever a page is added, deleted, or selected, updates itself accordingly.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="pane2button"/>
      <property type="Object" access="read-write" scope="instance" name="pane2menu"/>
      <property type="Object" access="read-write" scope="instance" name="_currentChild" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_subscriptions" visibility="internal"/>
      <property type="String" access="read-write" scope="instance" name="buttonWidget">
        <description>the name of the button widget to create to correspond to each page</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="containerId">
        <description>the id of the page container that I point to</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
    </properties>
    <methods>
      <method scope="instance" name="adjacent">
        <parameters>
          <parameter name="forward" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dijit._Widget"/>
        </return-types>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onAddChild">
        <parameters>
          <parameter name="page" type="Widget" usage="required"/>
          <parameter name="insertIndex" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called whenever a page is added to the container. Create button corresponding to the page.</description>
      </method>
      <method scope="instance" name="onButtonClick">
        <parameters>
          <parameter name="page" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called whenever one of my child buttons is pressed in an attempt to select a page</description>
      </method>
      <method scope="instance" name="onCloseButtonClick">
        <parameters>
          <parameter name="page" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called whenever one of my child buttons [X] is pressed in an attempt to close a page</description>
      </method>
      <method scope="instance" name="onContainerKeyPress">
        <parameters>
          <parameter name="info" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onkeypress">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Handle keystrokes on the page list, for advancing to next/previous button and closing the current page if the page is closable.</description>
      </method>
      <method scope="instance" name="onRemoveChild">
        <parameters>
          <parameter name="page" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called whenever a page is removed from the container. Remove the button corresponding to the page.</description>
      </method>
      <method scope="instance" name="onSelectChild">
        <parameters>
          <parameter name="page" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called when a page has been selected in the StackContainer, either by me or by another StackController</description>
      </method>
      <method scope="instance" name="onStartup">
        <parameters>
          <parameter name="info" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called after StackContainer has finished initializing</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.layout.TabContainer" superclass="dijit.layout.StackContainer dijit._Templated">
    <description>A Container with Title Tabs, each one pointing at a pane in the container.</description>
    <constructors>
      <constructor scope="instance">
        <description>A Container with Title Tabs, each one pointing at a pane in the container.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="tablist"/>
      <property type="String" access="read-write" scope="instance" name="tabPosition">
        <description>Defines where tabs go relative to tab content. &amp;quot;top&amp;quot;, &amp;quot;bottom&amp;quot;, &amp;quot;left-h&amp;quot;, &amp;quot;right-h&amp;quot;</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_containerContentBox" visibility="internal"/>
      <property type="String" access="read-write" scope="instance" name="tabPosition">
        <description>Defines where tabs go relative to tab content. &amp;quot;top&amp;quot;, &amp;quot;bottom&amp;quot;, &amp;quot;left-h&amp;quot;, &amp;quot;right-h&amp;quot;</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
      <property type="String" access="read-write" scope="instance" name="_controllerWidget" visibility="internal">
        <description>An optional parameter to overrider the default TabContainer controller used.</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="layout">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setupChild" visibility="internal">
        <parameters>
          <parameter name="tab" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Widget"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.layout.TabController" superclass="dijit.layout.StackController">
    <description>Set of tabs (the things with titles and a close button, that you click to show a tab panel).</description>
    <constructors>
      <constructor scope="instance">
        <description>Set of tabs (the things with titles and a close button, that you click to show a tab panel).</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="String" access="read-write" scope="instance" name="buttonWidget">
        <description>The name of the tab widget to create to correspond to each page</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="doLayout">
        <description>TODOC: deprecate doLayout? not sure.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="tabPosition">
        <description>Defines where tabs go relative to the content. &amp;quot;top&amp;quot;, &amp;quot;bottom&amp;quot;, &amp;quot;left-h&amp;quot;, &amp;quot;right-h&amp;quot;</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
    </properties>
    <methods>
      <method scope="instance" name="postMixInProperties">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_rectifyRtlTabList" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.layout._LayoutWidget" superclass="dijit._Widget dijit._Contained dijit._Container">
    <description>Mixin for widgets that contain a list of children like SplitContainer. Widgets which mixin this code must define layout() to lay out the children</description>
    <constructors>
      <constructor scope="instance">
        <description>Mixin for widgets that contain a list of children like SplitContainer. Widgets which mixin this code must define layout() to lay out the children</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_contentBox" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="isLayoutContainer"/>
    </properties>
    <methods>
      <method scope="instance" name="layout">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Widgets override this method to size &amp;amp; position their contents/children. When this is called this._contentBox is guaranteed to be set (see resize()).  This is called after startup(), and also when the widget's size has been changed.</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="resize">
        <parameters>
          <parameter name="args" type="Object" usage="optional">
            <description>{w: int, h: int, l: int, t: int}</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Explicitly set this widget's size (in pixels), and then call layout() to resize contents (and maybe adjust child widgets)</description>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called after all the widgets have been instantiated and their dom nodes have been inserted somewhere under dojo.doc.body.  Widgets should override this method to do any initialization dependent on other widgets existing, and then call this superclass method to finish things off.  startup() in subclasses shouldn't do anything size related because the size of the widget hasn't been set yet.</description>
      </method>
    </methods>
  </class>
  <class type="dijit.layout._Splitter" superclass="dijit._Widget dijit._Templated">
    <description>A draggable spacer between two items in a BorderContainer</description>
    <constructors>
      <constructor scope="instance">
        <description>A draggable spacer between two items in a BorderContainer</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="cover"/>
      <property type="Object" access="read-write" scope="instance" name="cover.style.zIndex"/>
      <property type="Object" access="read-write" scope="instance" name="fake"/>
      <property type="Object" access="read-write" scope="instance" name="horizontal"/>
      <property type="Object" access="read-write" scope="instance" name="_cookieName" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_drag" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_factor" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_handlers" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_maxSize" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_minSize" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_resize" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="child"/>
      <property type="Object" access="read-write" scope="instance" name="container"/>
      <property type="Boolean" access="read-write" scope="instance" name="live">
        <description>If true, the child's size changes and the child widget is redrawn as you drag the splitter; otherwise, the size doesn't change until you drop the splitter (by mouse-up)</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="region"/>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
    </properties>
    <methods>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_cleanupHandlers" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_computeMaxSize" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onKeyPress" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_stopDrag" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.layout._StackButton" superclass="dijit.form.ToggleButton">
    <description>Internal widget used by StackContainer. The button-like or tab-like object you click to select or delete a page</description>
    <constructors>
      <constructor scope="instance">
        <description>Internal widget used by StackContainer. The button-like or tab-like object you click to select or delete a page</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="tabIndex"/>
    </properties>
    <methods>
      <method scope="instance" name="onClick">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This is for TabContainer where the tabs are &amp;lt;span&amp;gt; rather than button, so need to set focus explicitly (on some browsers)</description>
      </method>
      <method scope="instance" name="onClickCloseButton">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>StackContainer connects to this function; if your widget contains a close button then clicking it should call this function.</description>
      </method>
      <method scope="instance" name="postCreate">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.layout._TabButton" superclass="dijit.layout._StackButton">
    <description>A tab (the thing you click to select a pane).</description>
    <constructors>
      <constructor scope="instance">
        <description>A tab (the thing you click to select a pane).</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="closeButtonNode.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="baseClass"/>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
    </properties>
    <methods>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.Menu" superclass="dijit._Widget dijit._KeyNavContainer dijit._Templated">
    <description>A context menu you can assign to multiple elements</description>
    <constructors>
      <constructor scope="instance">
        <description>A context menu you can assign to multiple elements</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="currentPopup"/>
      <property type="Object" access="read-write" scope="instance" name="focusedChild"/>
      <property type="Object" access="read-write" scope="instance" name="hover_timer"/>
      <property type="Object" access="read-write" scope="instance" name="isShowingNow"/>
      <property type="Widget" access="read-write" scope="instance" name="parentMenu">
        <description>pointer to menu that displayed me</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_bindings" visibility="internal"/>
      <property type="Boolean" access="read-write" scope="instance" name="_contextMenuWithMouse" visibility="internal">
        <description>used to record mouse and keyboard events to determine if a context menu is being opened with the keyboard or the mouse</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_onBlur" visibility="internal"/>
      <property type="Boolean" access="read-write" scope="instance" name="contextMenuForWindow">
        <description>if true, right clicking anywhere on the window will cause this context menu to open; if false, must specify targetNodeIds</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="leftClickToOpen">
        <description>If true, menu will open on left click instead of right click, similiar to a file menu.</description>
      </property>
      <property type="Widget" access="read-write" scope="instance" name="parentMenu">
        <description>pointer to menu that displayed me</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="popupDelay">
        <description>number of milliseconds before hovering (without clicking) causes the popup to automatically open</description>
      </property>
      <property type="String[]" access="read-write" scope="instance" name="targetNodeIds">
        <description>Array of dom node ids of nodes to attach to. Fill this with nodeIds upon widget creation and it becomes context menu for those nodes.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
      <property type="Boolean" access="read-write" scope="instance" name="_contextMenuWithMouse" visibility="internal">
        <description>used to record mouse and keyboard events to determine if a context menu is being opened with the keyboard or the mouse</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="bindDomNode">
        <parameters>
          <parameter name="node" type="String|DomNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>attach menu to given node</description>
      </method>
      <method scope="instance" name="onCancel">
        <parameters>
          <parameter name="closeAll" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>attach point for notification about when the user cancels the current menu</description>
      </method>
      <method scope="instance" name="onClose">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>callback when this menu is closed</description>
      </method>
      <method scope="instance" name="onExecute">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>attach point for notification about when a menu item has been executed</description>
      </method>
      <method scope="instance" name="onItemClick">
        <parameters>
          <parameter name="item" type="Widget" usage="required"/>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>user defined function to handle clicks on an item</description>
      </method>
      <method scope="instance" name="onItemHover">
        <parameters>
          <parameter name="item" type="MenuItem" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called when cursor is over a MenuItem</description>
      </method>
      <method scope="instance" name="onItemUnhover">
        <parameters>
          <parameter name="item" type="MenuItem" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Callback fires when mouse exits a MenuItem</description>
      </method>
      <method scope="instance" name="onOpen">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Open menu relative to the mouse</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unBindDomNode">
        <parameters>
          <parameter name="nodeName" type="String|DomNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>detach menu from given node</description>
      </method>
      <method scope="instance" name="uninitialize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_contextKey" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_contextMouse" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getTopMenu" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_iframeContentDocument" visibility="internal">
        <parameters>
          <parameter name="iframe_el" type="HTMLIFrameElement" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="HTMLDocument"/>
        </return-types>
        <description>Returns a reference to the document object inside iframe_el</description>
      </method>
      <method scope="instance" name="_iframeContentWindow" visibility="internal">
        <parameters>
          <parameter name="iframe_el" type="HTMLIFrameElement" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Window"/>
        </return-types>
        <description>Returns the window reference of the passed iframe</description>
      </method>
      <method scope="instance" name="_moveToPopup" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onChildBlur" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Close all popups that are open and descendants of this menu</description>
      </method>
      <method scope="instance" name="_onKeyPress" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Handle keyboard based menu navigation.</description>
      </method>
      <method scope="instance" name="_openPopup" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>open the popup to the side of the current menu item</description>
      </method>
      <method scope="instance" name="_stopPopupTimer" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.MenuItem" superclass="dijit._Widget dijit._Contained dijit._Templated">
    <description>A line item in a Menu Widget</description>
    <constructors>
      <constructor scope="instance">
        <description>A line item in a Menu Widget</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="containerNode.innerHTML"/>
      <property type="Boolean" access="read-write" scope="instance" name="disabled">
        <description>if true, the menu item is disabled if false, the menu item is enabled</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="disabled">
        <description>if true, the menu item is disabled if false, the menu item is enabled</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="iconClass">
        <description>class to apply to div in button to make it display an icon</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="label">
        <description>menu text</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
    </properties>
    <methods>
      <method scope="instance" name="focus">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onClick">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>User defined function to handle clicks</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setDisabled">
        <parameters>
          <parameter name="value" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>enable or disable this menu item</description>
      </method>
      <method scope="instance" name="setLabel">
        <parameters>
          <parameter name="value" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_blur" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onClick" visibility="internal">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onHover" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>callback when mouse is moved onto menu item</description>
      </method>
      <method scope="instance" name="_onUnhover" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>callback when mouse is moved off of menu item</description>
      </method>
    </methods>
  </class>
  <class type="dijit.MenuSeparator" superclass="dijit._Widget dijit._Contained dijit._Templated">
    <description>A line between two menu items</description>
    <constructors>
      <constructor scope="instance">
        <description>A line between two menu items</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
    </properties>
    <methods>
      <method scope="instance" name="isFocusable">
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>over ride to always return false</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.popup" superclass="Object">
    <description>This class is used to show/hide widgets as popups.</description>
    <constructors>
      <constructor scope="instance">
        <description>This class is used to show/hide widgets as popups.</description>
      </constructor>
    </constructors>
    <methods>
      <method scope="instance" name="close">
        <parameters>
          <parameter name="popup" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Close specified popup and any popups that it parented</description>
      </method>
      <method scope="instance" name="open">
        <parameters>
          <parameter name="args" type="Object" usage="required">
            <description>popup: Widget widget to display, parent: Widget the button etc. that is displaying this popup around: DomNode DOM node (typically a button); place popup relative to this node orient: Object structure specifying possible positions of popup relative to &amp;quot;around&amp;quot; node onCancel: Function callback when user has canceled the popup by 1. hitting ESC or 2. by using the popup widget's proprietary cancel mechanism (like a cancel button in a dialog); ie: whenever popupWidget.onCancel() is called, args.onCancel is called onClose: Function callback whenever this popup is closed onExecute: Function callback when user &amp;quot;executed&amp;quot; on the popup/sub-popup by selecting a menu choice, etc. (top menu only)  examples: 1. opening at the mouse position dijit.popup.open({popup: menuWidget, x: evt.pageX, y: evt.pageY}); 2. opening the widget as a dropdown dijit.popup.open({parent: this, popup: menuWidget, around: this.domNode, onClose: function(){...}  });  Note that whatever widget called dijit.popup.open() should also listen to it's own _onBlur callback (fired from _base/focus.js) to know that focus has moved somewhere else and thus the popup should be closed.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Popup the widget at the specified position</description>
      </method>
      <method scope="instance" name="prepare">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Prepares a node to be used as a popup</description>
      </method>
    </methods>
  </class>
  <class type="dijit.PopupMenuItem" superclass="dijit.MenuItem">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="dropDownContainer"/>
      <property type="Object" access="read-write" scope="instance" name="popup"/>
      <property type="Object" access="read-write" scope="instance" name="popup.domNode.style.display"/>
    </properties>
    <methods>
      <method scope="instance" name="destroyDescendants">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_fillContent" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>The innerHTML contains both the menu item text and a popup widget</description>
      </method>
    </methods>
  </class>
  <class type="dijit.ProgressBar" superclass="dijit._Widget dijit._Templated">
    <description>A progress indication widget</description>
    <constructors>
      <constructor scope="instance">
        <description>A progress indication widget</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="internalProgress.style.width"/>
      <property type="Object" access="read-write" scope="instance" name="label.firstChild.nodeValue"/>
      <property type="String" access="read-write" scope="instance" name="progress">
        <description>(Percentage or Number) initial progress value. with &amp;quot;%&amp;quot;: percentage value, 0% &amp;lt;= progress &amp;lt;= 100% or without &amp;quot;%&amp;quot;: absolute value, 0 &amp;lt;= progress &amp;lt;= maximum</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="indeterminate">
        <description>If false: show progress. If true: show that a process is underway but that the progress is unknown</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="maximum">
        <description>max sample number</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="places">
        <description>number of places to show in values; 0 by default</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="progress">
        <description>(Percentage or Number) initial progress value. with &amp;quot;%&amp;quot;: percentage value, 0% &amp;lt;= progress &amp;lt;= 100% or without &amp;quot;%&amp;quot;: absolute value, 0 &amp;lt;= progress &amp;lt;= maximum</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Object" access="read-write" scope="instance" name="_indeterminateHighContrastImagePath" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="onChange">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>User definable function fired when progress updates.</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="report">
        <parameters>
          <parameter name="percent" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="update">
        <parameters>
          <parameter name="attributes" type="Object" usage="optional">
            <description>may provide progress and/or maximum properties on this parameter, see attribute specs for details.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>update progress information</description>
      </method>
    </methods>
  </class>
  <class type="dijit.range" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="BlockTagNames"/>
      <property type="Object" access="read-write" scope="static" name="_w3c" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="getIndex">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
          <parameter name="parent" type="DomNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getNode">
        <parameters>
          <parameter name="index" type="Array" usage="required"/>
          <parameter name="parent" type="DomNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getCommonAncestor">
        <parameters>
          <parameter name="n1" type="Object" usage="required"/>
          <parameter name="n2" type="Object" usage="required"/>
          <parameter name="root" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getAncestor">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
          <parameter name="regex" type="RegEx" usage="optional"/>
          <parameter name="root" type="DomNode" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getBlockAncestor">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
          <parameter name="regex" type="RegEx" usage="optional"/>
          <parameter name="root" type="DomNode" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="atBeginningOfContainer">
        <parameters>
          <parameter name="container" type="DomNode" usage="required"/>
          <parameter name="node" type="DomNode" usage="required"/>
          <parameter name="offset" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="atEndOfContainer">
        <parameters>
          <parameter name="container" type="DomNode" usage="required"/>
          <parameter name="node" type="DomNode" usage="required"/>
          <parameter name="offset" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="adjacentNoneTextNode">
        <parameters>
          <parameter name="startnode" type="Object" usage="required"/>
          <parameter name="next" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="create">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getSelection">
        <parameters>
          <parameter name="win" type="Object" usage="required"/>
          <parameter name="ignoreUpdate" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.range.ie" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="cachedSelection"/>
    </properties>
    <methods>
      <method scope="static" name="decomposeControlRange">
        <parameters>
          <parameter name="range" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getEndPoint">
        <parameters>
          <parameter name="range" type="Object" usage="required"/>
          <parameter name="end" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="setEndPoint">
        <parameters>
          <parameter name="range" type="Object" usage="required"/>
          <parameter name="container" type="Object" usage="required"/>
          <parameter name="offset" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="decomposeTextRange">
        <parameters>
          <parameter name="range" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="setRange">
        <parameters>
          <parameter name="range" type="Object" usage="required"/>
          <parameter name="startContainter" type="Object" usage="required"/>
          <parameter name="startOffset" type="Object" usage="required"/>
          <parameter name="endContainter" type="Object" usage="required"/>
          <parameter name="endOffset" type="Object" usage="required"/>
          <parameter name="check" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.range.W3CRange" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="collapsed"/>
      <property type="Object" access="read-write" scope="instance" name="commonAncestorContainer"/>
      <property type="Object" access="read-write" scope="instance" name="endContainer"/>
      <property type="Object" access="read-write" scope="instance" name="endOffset"/>
      <property type="Object" access="read-write" scope="instance" name="startContainer"/>
      <property type="Object" access="read-write" scope="instance" name="startOffset"/>
      <property type="Object" access="read-write" scope="instance" name="_body" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="cloneRange">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="deleteContents">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="detach">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getBookmark">
        <parameters>
          <parameter name="body" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setEnd">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
          <parameter name="offset" type="Object" usage="required"/>
          <parameter name="__internal_common" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setEndAfter">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
          <parameter name="offset" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setEndBefore">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
          <parameter name="offset" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setStart">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
          <parameter name="offset" type="Object" usage="required"/>
          <parameter name="__internal_common" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setStartAfter">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
          <parameter name="offset" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setStartBefore">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
          <parameter name="offset" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getIERange" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_select" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setPoint" visibility="internal">
        <parameters>
          <parameter name="what" type="Object" usage="required"/>
          <parameter name="node" type="Object" usage="required"/>
          <parameter name="offset" type="Object" usage="required"/>
          <parameter name="ext" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_simpleSetEndPoint" visibility="internal">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
          <parameter name="range" type="Object" usage="required"/>
          <parameter name="end" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_updateInternal" visibility="internal">
        <parameters>
          <parameter name="__internal_common" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.TitlePane" superclass="dijit.layout.ContentPane dijit._Templated">
    <description>A pane with a title on top, that can be opened or collapsed.</description>
    <constructors>
      <constructor scope="instance">
        <description>A pane with a title on top, that can be opened or collapsed.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="arrowNodeInner.innerHTML"/>
      <property type="Object" access="read-write" scope="instance" name="hideNode.style.display"/>
      <property type="Boolean" access="read-write" scope="instance" name="open">
        <description>Whether pane is opened or closed.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="titleNode.innerHTML"/>
      <property type="Object" access="read-write" scope="instance" name="_wipeIn" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_wipeOut" visibility="internal"/>
      <property type="String" access="read-write" scope="instance" name="baseClass">
        <description>The root className to use for the various states of this widget</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="duration">
        <description>Time in milliseconds to fade in/fade out</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="open">
        <description>Whether pane is opened or closed.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="String" access="read-write" scope="instance" name="title">
        <description>Title of the pane</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setContent">
        <parameters>
          <parameter name="content" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Typically called when an href is loaded.  Our job is to make the animation smooth</description>
      </method>
      <method scope="instance" name="setTitle">
        <parameters>
          <parameter name="title" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sets the text of the title</description>
      </method>
      <method scope="instance" name="toggle">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>switches between opened and closed state</description>
      </method>
      <method scope="instance" name="_handleFocus" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>handle blur and focus for this widget  add/removeClass is safe to call without hasClass in this case</description>
      </method>
      <method scope="instance" name="_onTitleKey" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>callback when user hits a key</description>
      </method>
      <method scope="instance" name="_setCss" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set the open/close css state for the TitlePane</description>
      </method>
    </methods>
  </class>
  <class type="dijit.Toolbar" superclass="dijit._Widget dijit._KeyNavContainer dijit._Templated">
    <description>A Toolbar widget, used to hold things like dijit.Editor buttons</description>
    <constructors>
      <constructor scope="instance">
        <description>A Toolbar widget, used to hold things like dijit.Editor buttons</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="tabIndex"/>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
    </properties>
    <methods>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.ToolbarSeparator" superclass="dijit._Widget dijit._Templated">
    <description>A spacer between two Toolbar items</description>
    <constructors>
      <constructor scope="instance">
        <description>A spacer between two Toolbar items</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
    </properties>
    <methods>
      <method scope="instance" name="isFocusable">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This widget isn't focusable, so pass along that fact.</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.Tooltip" superclass="dijit._Widget">
    <description>Pops up a tooltip (a help message) when you hover over a node.</description>
    <constructors>
      <constructor scope="instance">
        <description>Pops up a tooltip (a help message) when you hover over a node.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="srcNodeRef.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="_connectNode" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_connectNodes" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_focus" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_showTimer" visibility="internal"/>
      <property type="String[]" access="read-write" scope="instance" name="connectId">
        <description>Id(s) of domNodes to attach the tooltip to. When user hovers over any of the specified dom nodes, the tooltip will appear.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="label"/>
      <property type="String[]" access="read-write" scope="instance" name="position">
        <description>See description of dijit.Tooltip.defaultPosition for details on position parameter.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="showDelay">
        <description>Number of milliseconds to wait after hovering over/focusing on the object, before the tooltip is displayed.</description>
      </property>
      <property type="Object" access="read-write" scope="static" name="defaultPosition"/>
    </properties>
    <methods>
      <method scope="instance" name="close">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>hide the tooltip; usually not called directly.</description>
      </method>
      <method scope="instance" name="open">
        <parameters>
          <parameter name="target" type="DomNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>display the tooltip; usually not called directly.</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="uninitialize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onBlur" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onFocus" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onHover" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onMouseOut" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onMouseOver" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onUnHover" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.TooltipDialog" superclass="dijit.layout.ContentPane dijit._DialogMixin dijit._Templated dijit.form._FormMixin">
    <description>Pops up a dialog that appears like a Tooltip</description>
    <constructors>
      <constructor scope="instance">
        <description>Pops up a dialog that appears like a Tooltip</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="containerNode.title"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.className"/>
      <property type="DomNode" access="read-write" scope="instance" name="_firstFocusItem" visibility="internal">
        <description>The pointer to the first focusable node in the dialog</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="doLayout">
        <description>Don't change this parameter from the default value. This ContentPane parameter doesn't make sense for TooltipDialog, since TooltipDialog is never a child of a layout container, nor can you specify the size of TooltipDialog in order to control the size of an inner widget.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
      <property type="String" access="read-write" scope="instance" name="title">
        <description>Description of tooltip dialog (required for a11Y)</description>
      </property>
      <property type="DomNode" access="read-write" scope="instance" name="_firstFocusItem" visibility="internal">
        <description>The pointer to the first focusable node in the dialog</description>
      </property>
      <property type="DomNode" access="read-write" scope="instance" name="_lastFocusItem" visibility="internal">
        <description>The domNode that had focus before we took it.</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="onOpen">
        <parameters>
          <parameter name="pos" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called when dialog is displayed</description>
      </method>
      <method scope="instance" name="orient">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
          <parameter name="aroundCorner" type="String" usage="required"/>
          <parameter name="corner" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>configure widget to be displayed in given position relative to the button</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onKey" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>keep keyboard focus in dialog; close dialog on escape key</description>
      </method>
    </methods>
  </class>
  <class type="dijit.Tree" superclass="dijit._Widget dijit._Templated">
    <description>This widget displays hierarchical data from a store.  A query is specified to get the &amp;quot;top level children&amp;quot; from a data store, and then those items are queried for their children and so on (but lazily, as the user clicks the expand node).  Thus in the default mode of operation this widget is technically a forest, not a tree, in that there can be multiple &amp;quot;top level children&amp;quot;.  However, if you specify label, then a special top level node (not corresponding to any item in the datastore) is created, to father all the top level children.</description>
    <constructors>
      <constructor scope="instance">
        <description>This widget displays hierarchical data from a store.  A query is specified to get the &amp;quot;top level children&amp;quot; from a data store, and then those items are queried for their children and so on (but lazily, as the user clicks the expand node).  Thus in the default mode of operation this widget is technically a forest, not a tree, in that there can be multiple &amp;quot;top level children&amp;quot;.  However, if you specify label, then a special top level node (not corresponding to any item in the datastore) is created, to father all the top level children.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="containerNodeTemplate"/>
      <property type="Object" access="read-write" scope="instance" name="cookieName"/>
      <property type="String" access="read-write" scope="instance" name="dndController">
        <description>class name to use as as the dnd controller</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="lastFocused"/>
      <property type="dijit.Tree.model" access="read-write" scope="instance" name="model">
        <description>Alternate interface from store to access data (and changes to data) in the tree</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="rootNode"/>
      <property type="Boolean" access="read-write" scope="instance" name="showRoot">
        <description>Should the root node be displayed, or hidden?</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="tree"/>
      <property type="Object" access="read-write" scope="instance" name="_itemNodeMap" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_keyHandlerMap" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_openedItemIds" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_v10Compat" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="checkAcceptance"/>
      <property type="Object" access="read-write" scope="instance" name="checkItemAcceptance"/>
      <property type="String[]" access="read-write" scope="instance" name="childrenAttr">
        <description>one ore more attributes that holds children of a tree node</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="dndController">
        <description>class name to use as as the dnd controller</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="dndParams"/>
      <property type="Object" access="read-write" scope="instance" name="isExpandable"/>
      <property type="Object" access="read-write" scope="instance" name="isTree"/>
      <property type="Object" access="read-write" scope="instance" name="itemCreator"/>
      <property type="String" access="read-write" scope="instance" name="label">
        <description>Deprecated.  Use dijit.tree.ForestStoreModel directly instead. Used in conjunction with query parameter. If a query is specified (rather than a root node id), and a label is also specified, then a fake root node is created and displayed, with this label.</description>
      </property>
      <property type="dijit.Tree.model" access="read-write" scope="instance" name="model">
        <description>Alternate interface from store to access data (and changes to data) in the tree</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="onDndCancel"/>
      <property type="Object" access="read-write" scope="instance" name="onDndDrop"/>
      <property type="Boolean" access="read-write" scope="instance" name="openOnClick">
        <description>If true, clicking a folder node's label will open it, rather than calling onClick()</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="persist">
        <description>enables/disables use of cookies for state saving.</description>
      </property>
      <property type="anything" access="read-write" scope="instance" name="query">
        <description>Specifies datastore query to return the root item for the tree.  Deprecated functionality: if the query returns multiple items, the tree is given a fake root node (not corresponding to any item in the data store), whose children are the items that match this query.  The root node is shown or hidden based on whether a label is specified.  Having a query return multiple items is deprecated. If your store doesn't have a root item, wrap the store with dijit.tree.ForestStoreModel, and specify model=myModel</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="showRoot">
        <description>Should the root node be displayed, or hidden?</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="store"/>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
    </properties>
    <methods>
      <method scope="instance" name="blurNode">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Removes focus from the currently focused node (which must be visible). Usually not called directly (just call focusNode() on another node instead)</description>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="destroyRecursive">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="focusNode">
        <parameters>
          <parameter name="node" type="_tree.Node" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Focus on the specified node (which must be visible)</description>
      </method>
      <method scope="instance" name="getIconClass">
        <parameters>
          <parameter name="item" type="dojo.data.Item" usage="required"/>
          <parameter name="opened" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>user overridable function to return CSS class name to display icon</description>
      </method>
      <method scope="instance" name="getItemChildren">
        <parameters>
          <parameter name="parentItem" type="dojo.data.Item" usage="required"/>
          <parameter name="onComplete" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>User overridable function that return array of child items of given parent item, or if parentItem==null then return top items in tree</description>
      </method>
      <method scope="instance" name="getLabel">
        <parameters>
          <parameter name="item" type="dojo.data.Item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>user overridable function to get the label for a tree node (given the item)</description>
      </method>
      <method scope="instance" name="getLabelClass">
        <parameters>
          <parameter name="item" type="dojo.data.Item" usage="required"/>
          <parameter name="opened" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>user overridable function to return CSS class name to display label</description>
      </method>
      <method scope="instance" name="mayHaveChildren">
        <parameters>
          <parameter name="item" type="dojo.data.Item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>User overridable function to tell if an item has or may have children. Controls whether or not +/- expando icon is shown. (For efficiency reasons we may not want to check if an element actually has children until user clicks the expando node)</description>
      </method>
      <method scope="instance" name="onClick">
        <parameters>
          <parameter name="item" type="dojo.data" usage="required"/>
          <parameter name="node" type="TreeNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>user overridable function for executing a tree item</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postMixInProperties">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_collapseNode" visibility="internal">
        <parameters>
          <parameter name="node" type="_TreeNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called when the user has requested to collapse the node</description>
      </method>
      <method scope="instance" name="_expandNode" visibility="internal">
        <parameters>
          <parameter name="node" type="_TreeNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called when the user has requested to expand the node</description>
      </method>
      <method scope="instance" name="_getNextNode" visibility="internal">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="_TreeNode"/>
        </return-types>
        <description>get next visible node</description>
      </method>
      <method scope="instance" name="_getRootOrFirstNode" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>get first visible node</description>
      </method>
      <method scope="instance" name="_load" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>initial load of the tree load root node (possibly hidden) and it's children</description>
      </method>
      <method scope="instance" name="_onBlur" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>We've moved away from the whole tree.  The currently &amp;quot;focused&amp;quot; node (see focusNode above) should remain as the lastFocused node so we can tab back into the tree.  Just change CSS to get rid of the dotted border until that time</description>
      </method>
      <method scope="instance" name="_onClick" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>translates click events into commands for the controller to process</description>
      </method>
      <method scope="instance" name="_onDownArrow" visibility="internal">
        <parameters>
          <parameter name="message" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>down arrow pressed; get next visible node, set focus there</description>
      </method>
      <method scope="instance" name="_onEndKey" visibility="internal">
        <parameters>
          <parameter name="message" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>end pressed; go to last visible node</description>
      </method>
      <method scope="instance" name="_onEnterKey" visibility="internal">
        <parameters>
          <parameter name="message" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onExpandoClick" visibility="internal">
        <parameters>
          <parameter name="message" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>user clicked the +/- icon; expand or collapse my children.</description>
      </method>
      <method scope="instance" name="_onHomeKey" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>home pressed; get first visible node, set focus there</description>
      </method>
      <method scope="instance" name="_onItemChange" visibility="internal">
        <parameters>
          <parameter name="item" type="Item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set data event on an item in the store</description>
      </method>
      <method scope="instance" name="_onItemChildrenChange" visibility="internal">
        <parameters>
          <parameter name="parent" type="dojo.data.Item" usage="required"/>
          <parameter name="newChildrenList" type="dojo.data.Item[]" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set data event on an item in the store</description>
      </method>
      <method scope="instance" name="_onItemDelete" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>delete event from the store TODO: currently this isn't called, and technically doesn't need to be, but it would help with garbage collection</description>
      </method>
      <method scope="instance" name="_onKeyPress" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>translates keypress events into commands for the controller</description>
      </method>
      <method scope="instance" name="_onLeftArrow" visibility="internal">
        <parameters>
          <parameter name="message" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Left arrow pressed. If not collapsed, collapse, else move to parent.</description>
      </method>
      <method scope="instance" name="_onLetterKeyNav" visibility="internal">
        <parameters>
          <parameter name="message" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>letter key pressed; search for node starting with first char = key</description>
      </method>
      <method scope="instance" name="_onRightArrow" visibility="internal">
        <parameters>
          <parameter name="message" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>right arrow pressed; go to child node</description>
      </method>
      <method scope="instance" name="_onTreeFocus" visibility="internal">
        <parameters>
          <parameter name="node" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called from onFocus handler of treeitem labelNode to set styles, wai state and tabindex for currently focused treeitem.</description>
      </method>
      <method scope="instance" name="_onUpArrow" visibility="internal">
        <parameters>
          <parameter name="message" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>up arrow pressed; move to previous visible node</description>
      </method>
      <method scope="instance" name="_publish" visibility="internal">
        <parameters>
          <parameter name="topicName" type="String" usage="required"/>
          <parameter name="message" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Publish a message for this widget/topic</description>
      </method>
      <method scope="instance" name="_saveState" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>create and save a cookie with the currently expanded nodes identifiers</description>
      </method>
      <method scope="instance" name="_store2model" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>user specified a store&amp;amp;query rather than model, so create model from store/query</description>
      </method>
    </methods>
  </class>
  <class type="dijit.tree.ForestStoreModel" superclass="dijit.tree.TreeStoreModel">
    <description>Interface between Tree and a dojo.store that doesn't have a root item, ie, has multiple &amp;quot;top level&amp;quot; items.</description>
    <constructors>
      <constructor scope="instance">
        <description>Interface between Tree and a dojo.store that doesn't have a root item, ie, has multiple &amp;quot;top level&amp;quot; items.</description>
        <parameters>
          <parameter name="params" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="root"/>
      <property type="Object" access="read-write" scope="instance" name="root.children"/>
      <property type="String" access="read-write" scope="instance" name="query">
        <description>Specifies the set of children of the root item.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="rootId"/>
      <property type="String" access="read-write" scope="instance" name="rootLabel">
        <description>Label of fabricated root item</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="getChildren">
        <parameters>
          <parameter name="parentItem" type="dojo.data.Item" usage="required"/>
          <parameter name="callback" type="Object" usage="required"/>
          <parameter name="onError" type="Function" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Calls onComplete() with array of child items of given parent item, all loaded.</description>
      </method>
      <method scope="instance" name="getIdentity">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getLabel">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="mayHaveChildren">
        <parameters>
          <parameter name="item" type="dojo.data.Item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Tells if an item has or may have children.  Implementing logic here avoids showing +/- expando icon for nodes that we know don't have children. (For efficiency reasons we may not want to check if an element actually has children until user clicks the expando node)</description>
      </method>
      <method scope="instance" name="newItem">
        <parameters>
          <parameter name="args" type="Object" usage="optional"/>
          <parameter name="parent" type="Item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Creates a new item.   See dojo.data.api.Write for details on args. Used in drag &amp;amp; drop when item from external source dropped onto tree.</description>
      </method>
      <method scope="instance" name="onAddToRoot">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called when item added to root of tree; user must override to modify the item so that it matches the query for top level items</description>
      </method>
      <method scope="instance" name="onLeaveRoot">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called when item removed from root of tree; user must override to modify the item so it doesn't match the query for top level items</description>
      </method>
      <method scope="instance" name="onNewRootItem">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>User can override this method to modify a new element that's being added to the root of the tree, for example to add a flag like root=true</description>
      </method>
      <method scope="instance" name="pasteItem">
        <parameters>
          <parameter name="childItem" type="Item" usage="required"/>
          <parameter name="oldParentItem" type="Item" usage="required"/>
          <parameter name="newParentItem" type="Item" usage="required"/>
          <parameter name="bCopy" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Move or copy an item from one parent item to another. Used in drag &amp;amp; drop</description>
      </method>
      <method scope="instance" name="_onDeleteItem" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>handler for delete notifications from underlying store</description>
      </method>
      <method scope="instance" name="_onNewItem" visibility="internal">
        <parameters>
          <parameter name="item" type="dojo.data.Item" usage="required"/>
          <parameter name="parentInfo" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>handler for when new items appear in the store.</description>
      </method>
      <method scope="instance" name="_requeryTop" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit.tree.TreeStoreModel" superclass="Object">
    <description>passed the arguments listed above (store, etc)</description>
    <constructors>
      <constructor scope="instance">
        <description>passed the arguments listed above (store, etc)</description>
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="connects"/>
      <property type="dojo.data.Item" access="read-write" scope="instance" name="root">
        <description>Pointer to the root item (read only, not a parameter)</description>
      </property>
      <property type="String[]" access="read-write" scope="instance" name="childrenAttrs">
        <description>one ore more attributes that holds children of a tree node</description>
      </property>
      <property type="anything" access="read-write" scope="instance" name="query">
        <description>Specifies datastore query to return the root item for the tree. Must only return a single item.   Alternately can just pass in pointer to root item.</description>
      </property>
      <property type="dojo.data.Item" access="read-write" scope="instance" name="root">
        <description>Pointer to the root item (read only, not a parameter)</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="store"/>
    </properties>
    <methods>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getChildren">
        <parameters>
          <parameter name="parentItem" type="dojo.data.Item" usage="required"/>
          <parameter name="onComplete" type="Object" usage="required"/>
          <parameter name="onError" type="Function" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Calls onComplete() with array of child items of given parent item, all loaded.</description>
      </method>
      <method scope="instance" name="getIdentity">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getLabel">
        <parameters>
          <parameter name="item" type="dojo.data.Item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>get the label for an item</description>
      </method>
      <method scope="instance" name="getRoot">
        <parameters>
          <parameter name="onItem" type="Object" usage="required"/>
          <parameter name="onError" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Calls onItem with the root item for the tree, possibly a fabricated item. Calls onError on error.</description>
      </method>
      <method scope="instance" name="mayHaveChildren">
        <parameters>
          <parameter name="item" type="dojo.data.Item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Tells if an item has or may have children.  Implementing logic here avoids showing +/- expando icon for nodes that we know don't have children. (For efficiency reasons we may not want to check if an element actually has children until user clicks the expando node)</description>
      </method>
      <method scope="instance" name="newItem">
        <parameters>
          <parameter name="args" type="Object" usage="optional"/>
          <parameter name="parent" type="Item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Creates a new item.   See dojo.data.api.Write for details on args. Used in drag &amp;amp; drop when item from external source dropped onto tree.</description>
      </method>
      <method scope="instance" name="onChange">
        <parameters>
          <parameter name="item" type="dojo.data.Item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Callback whenever an item has changed, so that Tree can update the label, icon, etc.   Note that changes to an item's children or parent(s) will trigger an onChildrenChange() so you can ignore those changes here.</description>
      </method>
      <method scope="instance" name="onChildrenChange">
        <parameters>
          <parameter name="parent" type="dojo.data.Item" usage="required"/>
          <parameter name="newChildrenList" type="dojo.data.Item[]" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Callback to do notifications about new, updated, or deleted items.</description>
      </method>
      <method scope="instance" name="pasteItem">
        <parameters>
          <parameter name="childItem" type="Item" usage="required"/>
          <parameter name="oldParentItem" type="Item" usage="required"/>
          <parameter name="newParentItem" type="Item" usage="required"/>
          <parameter name="bCopy" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Move or copy an item from one parent item to another. Used in drag &amp;amp; drop</description>
      </method>
      <method scope="instance" name="_onDeleteItem" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>handler for delete notifications from underlying store</description>
      </method>
      <method scope="instance" name="_onNewItem" visibility="internal">
        <parameters>
          <parameter name="item" type="dojo.data.Item" usage="required"/>
          <parameter name="parentInfo" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>handler for when new items appear in the store.</description>
      </method>
      <method scope="instance" name="_onSetItem" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="oldValue" type="Object|Array" usage="required"/>
          <parameter name="newValue" type="Object|Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set data event on an item in the store</description>
      </method>
    </methods>
  </class>
  <class type="dijit.typematic" superclass="Object">
    <description>These functions are used to repetitively call a user specified callback method when a specific key or mouse click over a specific DOM node is held down for a specific amount of time. Only 1 such event is allowed to occur on the browser page at 1 time.</description>
    <methods>
      <method scope="static" name="addKeyListener">
        <parameters>
          <parameter name="node" type="DOMNode" usage="required"/>
          <parameter name="keyObject" type="Object" usage="required">
            <description>an object defining the key to listen for. key: (mandatory) the keyCode (number) or character (string) to listen for. ctrlKey: desired ctrl key state to initiate the calback sequence: pressed (true) released (false) either (unspecified) altKey: same as ctrlKey but for the alt key shiftKey: same as ctrlKey but for the shift key See the trigger method for other parameters. Returns an array of dojo.connect handles</description>
          </parameter>
          <parameter name="_this" type="Object" usage="required"/>
          <parameter name="callback" type="Function" usage="required"/>
          <parameter name="subsequentDelay" type="Number" usage="required"/>
          <parameter name="initialDelay" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Start listening for a specific typematic key.</description>
      </method>
      <method scope="static" name="addMouseListener">
        <parameters>
          <parameter name="node" type="DOMNode" usage="required"/>
          <parameter name="_this" type="Object" usage="required"/>
          <parameter name="callback" type="Function" usage="required"/>
          <parameter name="subsequentDelay" type="Number" usage="required"/>
          <parameter name="initialDelay" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Start listening for a typematic mouse click. See the trigger method for other parameters. Returns an array of dojo.connect handles</description>
      </method>
      <method scope="static" name="addListener">
        <parameters>
          <parameter name="mouseNode" type="Node" usage="required">
            <description>the DOM node object to listen on for mouse events.</description>
          </parameter>
          <parameter name="keyNode" type="Node" usage="required">
            <description>the DOM node object to listen on for key events. See the addMouseListener and addKeyListener methods for other parameters. Returns an array of dojo.connect handles</description>
          </parameter>
          <parameter name="keyObject" type="Object" usage="required"/>
          <parameter name="_this" type="Object" usage="required"/>
          <parameter name="callback" type="Function" usage="required"/>
          <parameter name="subsequentDelay" type="Number" usage="required"/>
          <parameter name="initialDelay" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Start listening for a specific typematic key and mouseclick. This is a thin wrapper to addKeyListener and addMouseListener.</description>
      </method>
    </methods>
  </class>
  <class type="dijit.wai" superclass="Object">
    <methods>
      <method scope="static" name="onload">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Detects if we are in high-contrast mode or not</description>
      </method>
    </methods>
  </class>
  <class type="dijit.WidgetSet" superclass="Object">
    <description>A set of widgets indexed by id</description>
    <constructors>
      <constructor scope="instance">
        <description>A set of widgets indexed by id</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_hash" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="add">
        <parameters>
          <parameter name="widget" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="byClass">
        <parameters>
          <parameter name="cls" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dijit.WidgetSet"/>
        </return-types>
      </method>
      <method scope="instance" name="byId">
        <parameters>
          <parameter name="id" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="filter">
        <parameters>
          <parameter name="filter" type="Function" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dijit.WidgetSet"/>
        </return-types>
      </method>
      <method scope="instance" name="forEach">
        <parameters>
          <parameter name="func" type="Function" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="remove">
        <parameters>
          <parameter name="id" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit._Calendar" superclass="dijit._Widget dijit._Templated">
    <description>A simple GUI for choosing a date in the context of a monthly calendar.</description>
    <constructors>
      <constructor scope="instance">
        <description>A simple GUI for choosing a date in the context of a monthly calendar.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="displayMonth"/>
      <property type="Date" access="read-write" scope="instance" name="value">
        <description>the currently selected Date</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="dayWidth">
        <description>How to represent the days of the week in the calendar header. See dojo.date.locale</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Date" access="read-write" scope="instance" name="value">
        <description>the currently selected Date</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="getClassForDate">
        <parameters>
          <parameter name="dateObject" type="Date" usage="required"/>
          <parameter name="locale" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>May be overridden to return CSS classes to associate with the date entry for the given dateObject, for example to indicate a holiday in specified locale.</description>
      </method>
      <method scope="instance" name="goToToday">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isDisabledDate">
        <parameters>
          <parameter name="dateObject" type="Date" usage="required"/>
          <parameter name="locale" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>May be overridden to disable certain dates in the calendar e.g. `isDisabledDate=dojo.date.locale.isWeekend`</description>
      </method>
      <method scope="instance" name="onChange">
        <parameters>
          <parameter name="date" type="Date" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called only when the selected date has changed</description>
      </method>
      <method scope="instance" name="onValueSelected">
        <parameters>
          <parameter name="date" type="Date" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>a date cell was selected.  It may be the same as the previous value.</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="value" type="Date" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set the current date and update the UI.  If the date is disabled, the selection will not change, but the display will change to the corresponding month.</description>
      </method>
      <method scope="instance" name="_adjustDisplay" visibility="internal">
        <parameters>
          <parameter name="part" type="String" usage="required"/>
          <parameter name="amount" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onDayClick" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_populateGrid" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setText" visibility="internal">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
          <parameter name="text" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit._Contained" superclass="Object">
    <description>Mixin for widgets that are children of a container widget</description>
    <methods>
      <method scope="instance" name="getNextSibling">
        <return-types>
          <return-type type="Mixed"/>
        </return-types>
        <description>Returns null if this is the last child of the parent, otherwise returns the next element sibling to the &amp;quot;right&amp;quot;.</description>
      </method>
      <method scope="instance" name="getParent">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns the parent widget of this widget, assuming the parent implements dijit._Container</description>
      </method>
      <method scope="instance" name="getPreviousSibling">
        <return-types>
          <return-type type="Mixed"/>
        </return-types>
        <description>Returns null if this is the first child of the parent, otherwise returns the next element sibling to the &amp;quot;left&amp;quot;.</description>
      </method>
      <method scope="instance" name="_getSibling" visibility="internal">
        <parameters>
          <parameter name="which" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="null"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit._Container" superclass="Object">
    <description>Mixin for widgets that contain a list of children.</description>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="isContainer"/>
    </properties>
    <methods>
      <method scope="instance" name="addChild">
        <parameters>
          <parameter name="widget" type="Widget" usage="required"/>
          <parameter name="insertIndex" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Process the given child widget, inserting it's dom node as a child of our dom node</description>
      </method>
      <method scope="instance" name="getChildren">
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Returns array of children widgets</description>
      </method>
      <method scope="instance" name="hasChildren">
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Returns true if widget has children</description>
      </method>
      <method scope="instance" name="removeChild">
        <parameters>
          <parameter name="widget" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Removes the passed widget instance from this widget but does not destroy it</description>
      </method>
      <method scope="instance" name="_firstElement" visibility="internal">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getSiblingOfChild" visibility="internal">
        <parameters>
          <parameter name="child" type="Widget" usage="required"/>
          <parameter name="dir" type="Number" usage="required">
            <description>if 1, get the next sibling if -1, get the previous sibling</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Get the next or previous widget sibling of child</description>
      </method>
      <method scope="instance" name="_nextElement" visibility="internal">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit._DialogMixin" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_firstFocusItem" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_lastFocusItem" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="attributeMap"/>
    </properties>
    <methods>
      <method scope="instance" name="execute">
        <parameters>
          <parameter name="formContents" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>User defined function to do stuff when the user hits the submit button</description>
      </method>
      <method scope="instance" name="onCancel">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Callback when user has canceled dialog, to notify container (user shouldn't override)</description>
      </method>
      <method scope="instance" name="onExecute">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Callback when user is about to execute dialog, to notify container (user shouldn't override)</description>
      </method>
      <method scope="instance" name="_getFocusItems" visibility="internal">
        <parameters>
          <parameter name="dialogNode" type="Node" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onSubmit" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>callback when user hits submit button</description>
      </method>
    </methods>
  </class>
  <class type="dijit._editor" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="html"/>
      <property type="Object" access="read-write" scope="static" name="nls"/>
      <property type="Object" access="read-write" scope="static" name="range"/>
    </properties>
    <methods>
      <method scope="static" name="escapeXml">
        <parameters>
          <parameter name="str" type="String" usage="required"/>
          <parameter name="noSingleQuotes" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Adds escape sequences for special characters in XML: &amp;amp;&amp;lt;&amp;gt;&amp;quot;' Optionally skips escapes for single quotes</description>
      </method>
      <method scope="static" name="getNodeHtml">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getChildrenHtml">
        <parameters>
          <parameter name="dom" type="DomNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Returns the html content of a DomNode and children</description>
      </method>
    </methods>
  </class>
  <class type="dijit._editor.plugins" superclass="Object"/>
  <class type="dijit._editor.plugins.AlwaysShowToolbar" superclass="dijit._editor._Plugin">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="args" type="Object" usage="optional"/>
          <parameter name="node" type="DomNode" usage="optional"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="editor"/>
      <property type="Object" access="read-write" scope="instance" name="editor.iframe.style.marginTop"/>
      <property type="Object" access="read-write" scope="instance" name="_fixEnabled" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_handleScroll" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_IEOriginalPos" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_lastHeight" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_scrollSetUp" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_scrollThreshold" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_handleScroll" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_lastHeight" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="enable">
        <parameters>
          <parameter name="d" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="globalOnScrollHandler">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setEditor">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_updateHeight" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Updates the height of the editor area to fit the contents.</description>
      </method>
    </methods>
  </class>
  <class type="dijit._editor.plugins.EnterKeyHandling" superclass="dijit._editor._Plugin">
    <description>this plugin tries to handle enter key events to make all browsers have identical behaviors.</description>
    <constructors>
      <constructor scope="instance">
        <description>this plugin tries to handle enter key events to make all browsers have identical behaviors.</description>
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="blockNodeForEnter"/>
      <property type="Object" access="read-write" scope="instance" name="editor"/>
      <property type="Object" access="read-write" scope="instance" name="editor.document.__INSERTED_EDITIOR_NEWLINE_CSS" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_checkListLater" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_connects" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_pressedEnterInBlock" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="blockNodeForEnter"/>
      <property type="Object" access="read-write" scope="instance" name="blockNodes"/>
      <property type="Object" access="read-write" scope="instance" name="bogusHtmlContent"/>
    </properties>
    <methods>
      <method scope="instance" name="connect">
        <parameters>
          <parameter name="o" type="Object" usage="required"/>
          <parameter name="f" type="Object" usage="required"/>
          <parameter name="tf" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="handleEnterKey">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>manually handle enter key event to make the behavior consistant across all supported browsers. See property blockNodeForEnter for available options</description>
      </method>
      <method scope="instance" name="onKeyPressed">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="regularPsToSingleLinePs">
        <parameters>
          <parameter name="element" type="Object" usage="required"/>
          <parameter name="noWhiteSpaceInEmptyP" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="removeTrailingBr">
        <parameters>
          <parameter name="container" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setEditor">
        <parameters>
          <parameter name="editor" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="singleLinePsToRegularPs">
        <parameters>
          <parameter name="element" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_fixNewLineBehaviorForIE" visibility="internal">
        <parameters>
          <parameter name="d" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="HTMLStyleElement"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit._editor.plugins.FontChoice" superclass="dijit._editor._Plugin">
    <description>This plugin provides three dropdowns for setting font information in the editor</description>
    <constructors>
      <constructor scope="instance">
        <description>This plugin provides three dropdowns for setting font information in the editor</description>
        <parameters>
          <parameter name="args" type="Object" usage="optional"/>
          <parameter name="node" type="DomNode" usage="optional"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="command"/>
      <property type="Object" access="read-write" scope="instance" name="updating"/>
      <property type="Object" access="read-write" scope="instance" name="_focusHandle" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_savedSelection" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="buttonClass"/>
      <property type="Object" access="read-write" scope="instance" name="_uniqueId" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="setToolbar">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="updateState">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_initButton" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit._editor.plugins.LinkDialog" superclass="dijit._editor._Plugin">
    <description>This plugin provides dialogs for inserting links and images into the editor</description>
    <constructors>
      <constructor scope="instance">
        <description>This plugin provides dialogs for inserting links and images into the editor</description>
        <parameters>
          <parameter name="args" type="Object" usage="optional"/>
          <parameter name="node" type="DomNode" usage="optional"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="dropDown"/>
      <property type="Object" access="read-write" scope="instance" name="tag"/>
      <property type="Object" access="read-write" scope="instance" name="_savedSelection" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="buttonClass"/>
      <property type="Object" access="read-write" scope="instance" name="linkDialogTemplate"/>
      <property type="Object" access="read-write" scope="instance" name="urlRegExp"/>
      <property type="Object" access="read-write" scope="instance" name="useDefaultCommand"/>
    </properties>
    <methods>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>callback from the dialog when user hits &amp;quot;set&amp;quot; button TODO: prevent closing popup if the text is empty</description>
      </method>
      <method scope="instance" name="_initButton" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onCloseDialog" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onOpenDialog" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setContent" visibility="internal">
        <parameters>
          <parameter name="staticPanel" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit._editor.plugins.TextColor" superclass="dijit._editor._Plugin">
    <description>This plugin provides dropdown color pickers for setting text color and background color</description>
    <constructors>
      <constructor scope="instance">
        <description>This plugin provides dropdown color pickers for setting text color and background color</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="dropDown"/>
      <property type="Object" access="read-write" scope="instance" name="buttonClass"/>
    </properties>
  </class>
  <class type="dijit._editor.plugins.ToggleDir" superclass="dijit._editor._Plugin">
    <description>This plugin is used to toggle direction of the edited document only, no matter what direction the whole page is.</description>
    <constructors>
      <constructor scope="instance">
        <description>This plugin is used to toggle direction of the edited document only, no matter what direction the whole page is.</description>
        <parameters>
          <parameter name="args" type="Object" usage="optional"/>
          <parameter name="node" type="DomNode" usage="optional"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="command"/>
      <property type="Object" access="read-write" scope="instance" name="useDefaultCommand"/>
    </properties>
    <methods>
      <method scope="instance" name="updateState">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_initButton" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_toggleDir" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit._editor.RichText" superclass="dijit._Widget">
    <description>dijit._editor.RichText is the core of the WYSIWYG editor in dojo, which provides the basic editing features. It also encapsulates the differences of different js engines for various browsers</description>
    <constructors>
      <constructor scope="instance">
        <description>dijit._editor.RichText is the core of the WYSIWYG editor in dojo, which provides the basic editing features. It also encapsulates the differences of different js engines for various browsers</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contentDomPostFilters"/>
      <property type="Object" access="read-write" scope="instance" name="contentDomPreFilters"/>
      <property type="Object" access="read-write" scope="instance" name="contentPostFilters"/>
      <property type="Array" access="read-write" scope="instance" name="contentPreFilters">
        <description>pre content filter function register array. these filters will be executed before the actual editing area get the html content</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="disabled"/>
      <property type="Object" access="read-write" scope="instance" name="document"/>
      <property type="Object" access="read-write" scope="instance" name="document.designMode"/>
      <property type="Object" access="read-write" scope="instance" name="document.selection.type"/>
      <property type="Object" access="read-write" scope="instance" name="domNode"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.cssText"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.innerHTML"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.nodeName"/>
      <property type="Object" access="read-write" scope="instance" name="editingArea"/>
      <property type="Object" access="read-write" scope="instance" name="editingAreaStyleSheets"/>
      <property type="Object" access="read-write" scope="instance" name="editNode"/>
      <property type="Object" access="read-write" scope="instance" name="editNode.contentEditable"/>
      <property type="Object" access="read-write" scope="instance" name="editNode.innerHTML"/>
      <property type="Object" access="read-write" scope="instance" name="editNode.style.zoom"/>
      <property type="Object" access="read-write" scope="instance" name="editNode.unselectable"/>
      <property type="Object" access="read-write" scope="instance" name="editorObject"/>
      <property type="Object" access="read-write" scope="instance" name="iframe"/>
      <property type="Object" access="read-write" scope="instance" name="iframe.contentDocument.title"/>
      <property type="Object" access="read-write" scope="instance" name="iframe.height"/>
      <property type="Object" access="read-write" scope="instance" name="iframe.onfocus"/>
      <property type="Object" access="read-write" scope="instance" name="iframe.style.height"/>
      <property type="Object" access="read-write" scope="instance" name="iframe.style.width"/>
      <property type="Boolean" access="read-write" scope="instance" name="isClosed"/>
      <property type="Boolean" access="read-write" scope="instance" name="isLoaded"/>
      <property type="String" access="read-write" scope="instance" name="name">
        <description>If a save name is specified the content is saved and restored when the user leave this page can come back, or if the editor is not properly closed after editing has started.</description>
      </property>
      <property type="dojo.Deferred" access="read-write" scope="instance" name="onLoadDeferred">
        <description>deferred which is fired when the editor finishes loading</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="savedContent"/>
      <property type="String" access="read-write" scope="instance" name="styleSheets">
        <description>semicolon (&amp;quot;;&amp;quot;) separated list of css files for the editing area</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="tabStop"/>
      <property type="Object" access="read-write" scope="instance" name="textarea"/>
      <property type="Object" access="read-write" scope="instance" name="textarea.value"/>
      <property type="Object" access="read-write" scope="instance" name="window"/>
      <property type="Object" access="read-write" scope="instance" name="window._frameElement" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="window.__registeredWindow" visibility="internal"/>
      <property type="String" access="read-write" scope="instance" name="_content" visibility="internal">
        <description>temporary content storage</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_editorCommandsLocalized" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_initialFocus" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_keyHandlers" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_localizedIframeTitles" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_localizedIframeTitles.iframeEditTitle"/>
      <property type="Object" access="read-write" scope="instance" name="_mozSettings" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_oldHeight" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_oldWidth" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_updateTimer" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="__overflow" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="captureEvents"/>
      <property type="Object" access="read-write" scope="instance" name="disabled"/>
      <property type="which" access="read-write" scope="instance" name="events">
        <description>should be connected to the underlying editing area, events in this array will be addListener with capture=true</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="focusOnLoad">
        <description>whether focusing into this instance of richtext when page onload</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="height">
        <description>set height to fix the editor at a specific height, with scrolling. By default, this is 300px. If you want to have the editor always resizes to accommodate the content, use AlwaysShowToolbar plugin and set height=&amp;quot;&amp;quot;</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="inheritWidth">
        <description>whether to inherit the parent's width or simply use 100%</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="isClosed"/>
      <property type="Boolean" access="read-write" scope="instance" name="isLoaded"/>
      <property type="Object" access="read-write" scope="instance" name="KEY_CTRL"/>
      <property type="Object" access="read-write" scope="instance" name="KEY_SHIFT"/>
      <property type="String" access="read-write" scope="instance" name="minHeight">
        <description>The minimum height that the editor should have</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="name">
        <description>If a save name is specified the content is saved and restored when the user leave this page can come back, or if the editor is not properly closed after editing has started.</description>
      </property>
      <property type="dojo.Deferred" access="read-write" scope="instance" name="onLoadDeferred">
        <description>deferred which is fired when the editor finishes loading</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="styleSheets">
        <description>semicolon (&amp;quot;;&amp;quot;) separated list of css files for the editing area</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="updateInterval"/>
      <property type="String" access="read-write" scope="instance" name="_content" visibility="internal">
        <description>temporary content storage</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_editorCommandsLocalized" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_hrefInARegex" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_initialFocus" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_local2NativeFormatNames" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_localizedIframeTitles" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_mozSettingProps" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_native2LocalFormatNames" visibility="internal"/>
      <property type="String" access="read-write" scope="instance" name="_SEPARATOR" visibility="internal">
        <description>used to concat contents from multiple textareas into a single string</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_srcInImgRegex" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_updateTimer" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="addKeyHandler">
        <parameters>
          <parameter name="key" type="String" usage="required"/>
          <parameter name="modifiers" type="Number" usage="required"/>
          <parameter name="handler" type="Function" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>add a handler for a keyboard shortcut</description>
      </method>
      <method scope="instance" name="addStyleSheet">
        <parameters>
          <parameter name="uri" type="dojo._Url" usage="required">
            <description>a dojo.uri.Uri pointing to the url of the external css file</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>add an external stylesheet for the editing area</description>
      </method>
      <method scope="instance" name="blur">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>remove focus from this instance</description>
      </method>
      <method scope="instance" name="close">
        <parameters>
          <parameter name="save" type="Boolean" usage="required">
            <description>Whether or not to save the changes. If false, the changes are discarded.</description>
          </parameter>
          <parameter name="force" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Kills the editor and optionally writes back the modified contents to the element from which it originated.</description>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="destroyRendering">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>stub</description>
      </method>
      <method scope="instance" name="escapeXml">
        <parameters>
          <parameter name="str" type="String" usage="required"/>
          <parameter name="noSingleQuotes" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="execCommand">
        <parameters>
          <parameter name="command" type="String" usage="required">
            <description>The command to execute</description>
          </parameter>
          <parameter name="argument" type="An" usage="required">
            <description>optional argument to the command</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Executes a command in the Rich Text area</description>
      </method>
      <method scope="instance" name="focus">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>move focus to this instance</description>
      </method>
      <method scope="instance" name="getNodeChildrenHtml">
        <parameters>
          <parameter name="dom" type="DomNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getNodeHtml">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="nonDestructive" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>return the current content of the editing area (post filters are applied)</description>
      </method>
      <method scope="instance" name="onChange">
        <parameters>
          <parameter name="newContent" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>this is fired if and only if the editor loses focus and the content is changed</description>
      </method>
      <method scope="instance" name="onClick">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onDisplayChanged">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This event will be fired everytime the display context changes and the result needs to be reflected in the UI.</description>
      </method>
      <method scope="instance" name="onKeyDown">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Fired on keydown</description>
      </method>
      <method scope="instance" name="onKeyPress">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Fired on keypress</description>
      </method>
      <method scope="instance" name="onKeyPressed">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onKeyUp">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Fired on keyup</description>
      </method>
      <method scope="instance" name="onNormalizedDisplayChanged">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This event is fired every updateInterval ms or more</description>
      </method>
      <method scope="instance" name="open">
        <parameters>
          <parameter name="element" type="DomNode" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Transforms the node referenced in this.domNode into a rich text editing node. This will result in the creation and replacement with an &amp;lt;iframe&amp;gt; if designMode(FF)/contentEditable(IE) is used.</description>
      </method>
      <method scope="instance" name="placeCursorAtEnd">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>place the cursor at the end of the editing area</description>
      </method>
      <method scope="instance" name="placeCursorAtStart">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>place the cursor at the start of the editing area</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>init</description>
      </method>
      <method scope="instance" name="queryCommandAvailable">
        <parameters>
          <parameter name="command" type="String" usage="required">
            <description>The command to test for</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Tests whether a command is supported by the host. Clients SHOULD check whether a command is supported before attempting to use it, behaviour for unsupported commands is undefined.</description>
      </method>
      <method scope="instance" name="queryCommandEnabled">
        <parameters>
          <parameter name="command" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>check whether a command is enabled or not</description>
      </method>
      <method scope="instance" name="queryCommandState">
        <parameters>
          <parameter name="command" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>check the state of a given command</description>
      </method>
      <method scope="instance" name="queryCommandValue">
        <parameters>
          <parameter name="command" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>check the value of a given command</description>
      </method>
      <method scope="instance" name="removeStyleSheet">
        <parameters>
          <parameter name="uri" type="dojo._Url" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>remove an external stylesheet for the editing area</description>
      </method>
      <method scope="instance" name="replaceValue">
        <parameters>
          <parameter name="html" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>this function set the content while trying to maintain the undo stack (now only works fine with Moz, this is identical to setValue in all other browsers)</description>
      </method>
      <method scope="instance" name="setDisabled">
        <parameters>
          <parameter name="disabled" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setupDefaultShortcuts">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>add some default key handlers</description>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="html" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>this function set the content. No undo history is preserved</description>
      </method>
      <method scope="instance" name="_applyEditingAreaStyleSheets" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>apply the specified css files in styleSheets</description>
      </method>
      <method scope="instance" name="_drawIframe" visibility="internal">
        <parameters>
          <parameter name="html" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Draws an iFrame using the existing one if one exists. Used by Mozilla, Safari, and Opera</description>
      </method>
      <method scope="instance" name="_fixContentForMoz" visibility="internal">
        <parameters>
          <parameter name="html" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Moz can not handle strong/em tags correctly, convert them to b/i</description>
      </method>
      <method scope="instance" name="_getIframeDocTxt" visibility="internal">
        <parameters>
          <parameter name="html" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_isResized" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_localizeEditorCommands" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_normalizeCommand" visibility="internal">
        <parameters>
          <parameter name="cmd" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Used as the advice function by dojo.connect to map our normalized set of commands to those supported by the target browser</description>
      </method>
      <method scope="instance" name="_onBlur" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onFocus" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Fired on focus</description>
      </method>
      <method scope="instance" name="_onMouseDown" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_postFilterContent" visibility="internal">
        <parameters>
          <parameter name="dom" type="DomNode|DomNode[]|String" usage="optional"/>
          <parameter name="nonDestructive" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>filter the output after getting the content of the editing area</description>
      </method>
      <method scope="instance" name="_preDomFilterContent" visibility="internal">
        <parameters>
          <parameter name="dom" type="DomNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>filter the input</description>
      </method>
      <method scope="instance" name="_preFilterContent" visibility="internal">
        <parameters>
          <parameter name="html" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>filter the input before setting the content of the editing area</description>
      </method>
      <method scope="instance" name="_preFixUrlAttributes" visibility="internal">
        <parameters>
          <parameter name="html" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_removeMozBogus" visibility="internal">
        <parameters>
          <parameter name="html" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
      </method>
      <method scope="instance" name="_removeSafariBogus" visibility="internal">
        <parameters>
          <parameter name="html" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
      </method>
      <method scope="instance" name="_saveContent" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Saves the content in an onunload event if the editor has not been closed</description>
      </method>
    </methods>
  </class>
  <class type="dijit._editor.selection" superclass="Object">
    <methods>
      <method scope="static" name="getType">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Get the selection type (like dojo.doc.select.type in IE).</description>
      </method>
      <method scope="static" name="getSelectedText">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Return the text (no html tags) included in the current selection or null if no text is selected</description>
      </method>
      <method scope="static" name="getSelectedHtml">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Return the html of the current selection or null if unavailable</description>
      </method>
      <method scope="static" name="getSelectedElement">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Retrieves the selected element (if any), just in the case that a single element (object like and image or a table) is selected.</description>
      </method>
      <method scope="static" name="getParentElement">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Get the parent element of the current selection</description>
      </method>
      <method scope="static" name="hasAncestorElement">
        <parameters>
          <parameter name="tagName" type="Object" usage="one-or-more"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Check whether current selection has a  parent element which is of type tagName (or one of the other specified tagName)</description>
      </method>
      <method scope="static" name="getAncestorElement">
        <parameters>
          <parameter name="tagName" type="Object" usage="one-or-more"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Return the parent element of the current selection which is of type tagName (or one of the other specified tagName)</description>
      </method>
      <method scope="static" name="isTag">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
          <parameter name="tags" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getParentOfType">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
          <parameter name="tags" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="collapse">
        <parameters>
          <parameter name="beginning" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>clear current selection</description>
      </method>
      <method scope="static" name="remove">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>delete current selection</description>
      </method>
      <method scope="static" name="selectElementChildren">
        <parameters>
          <parameter name="element" type="DomNode" usage="required"/>
          <parameter name="nochangefocus" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>clear previous selection and select the content of the node (excluding the node itself)</description>
      </method>
      <method scope="static" name="selectElement">
        <parameters>
          <parameter name="element" type="DomNode" usage="required"/>
          <parameter name="nochangefocus" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>clear previous selection and select element (including all its children)</description>
      </method>
    </methods>
  </class>
  <class type="dijit._editor._Plugin" superclass="Object">
    <description>This represents a &amp;quot;plugin&amp;quot; to the editor, which is basically a single button on the Toolbar and some associated code</description>
    <constructors>
      <constructor scope="instance">
        <description>This represents a &amp;quot;plugin&amp;quot; to the editor, which is basically a single button on the Toolbar and some associated code</description>
        <parameters>
          <parameter name="args" type="Object" usage="optional"/>
          <parameter name="node" type="DomNode" usage="optional"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="button"/>
      <property type="Object" access="read-write" scope="instance" name="button.checked"/>
      <property type="Object" access="read-write" scope="instance" name="button.domNode.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="editor"/>
      <property type="Object" access="read-write" scope="instance" name="_connects" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="button"/>
      <property type="Object" access="read-write" scope="instance" name="buttonClass"/>
      <property type="Object" access="read-write" scope="instance" name="command"/>
      <property type="Object" access="read-write" scope="instance" name="commandArg"/>
      <property type="Object" access="read-write" scope="instance" name="editor"/>
      <property type="Object" access="read-write" scope="instance" name="iconClassPrefix"/>
      <property type="Object" access="read-write" scope="instance" name="queryCommand"/>
      <property type="Object" access="read-write" scope="instance" name="useDefaultCommand"/>
    </properties>
    <methods>
      <method scope="instance" name="connect">
        <parameters>
          <parameter name="o" type="Object" usage="required"/>
          <parameter name="f" type="Object" usage="required"/>
          <parameter name="tf" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="destroy">
        <parameters>
          <parameter name="f" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getLabel">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setEditor">
        <parameters>
          <parameter name="editor" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setToolbar">
        <parameters>
          <parameter name="toolbar" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="updateState">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_initButton" visibility="internal">
        <parameters>
          <parameter name="props" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit._frames" superclass="Object">
    <description>cache of iframes</description>
    <constructors>
      <constructor scope="instance">
        <description>cache of iframes</description>
      </constructor>
    </constructors>
    <methods>
      <method scope="instance" name="pop">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="push">
        <parameters>
          <parameter name="iframe" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit._InlineEditor" superclass="dijit._Widget dijit._Templated">
    <description>internal widget used by InlineEditBox, displayed when in editing mode to display the editor and maybe save/cancel buttons.  Calling code should connect to save/cancel methods to detect when editing is finished  Has mainly the same parameters as InlineEditBox, plus these values:  style: Object Set of CSS attributes of display node, to replicate in editor  value: String Value as an HTML string or plain text string, depending on renderAsHTML flag</description>
    <constructors>
      <constructor scope="instance">
        <description>internal widget used by InlineEditBox, displayed when in editing mode to display the editor and maybe save/cancel buttons.  Calling code should connect to save/cancel methods to detect when editing is finished  Has mainly the same parameters as InlineEditBox, plus these values:  style: Object Set of CSS attributes of display node, to replicate in editor  value: String Value as an HTML string or plain text string, depending on renderAsHTML flag</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="buttonContainer.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="editWidget"/>
      <property type="Object" access="read-write" scope="instance" name="messages"/>
      <property type="Object" access="read-write" scope="instance" name="width"/>
      <property type="Object" access="read-write" scope="instance" name="_exitInProgress" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_initialText" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Object" access="read-write" scope="instance" name="widgetsInTemplate"/>
    </properties>
    <methods>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="enableSave">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>User replacable function returning a Boolean to indicate if the Save button should be enabled or not - usually due to invalid conditions</description>
      </method>
      <method scope="instance" name="focus">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getValue">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postMixInProperties">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onBlur" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called when focus moves outside the editor</description>
      </method>
      <method scope="instance" name="_onChange" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called when the underlying widget fires an onChange event, which means that the user has finished entering the value</description>
      </method>
      <method scope="instance" name="_onKeyPress" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Callback when keypress in the edit box (see template).</description>
      </method>
    </methods>
  </class>
  <class type="dijit._KeyNavContainer" superclass="dijit._Container">
    <properties>
      <property type="Object" access="read-write" scope="instance" name="focusedChild"/>
      <property type="Object" access="read-write" scope="instance" name="_keyNavCodes" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="focusedChild"/>
      <property type="Object" access="read-write" scope="instance" name="_keyNavCodes" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="addChild">
        <parameters>
          <parameter name="widget" type="Widget" usage="required"/>
          <parameter name="insertIndex" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Add a child to our _Container</description>
      </method>
      <method scope="instance" name="connectKeyNavHandlers">
        <parameters>
          <parameter name="prevKeyCodes" type="Array" usage="required"/>
          <parameter name="nextKeyCodes" type="Array" usage="required">
            <description>Key codes for navigating to the next child.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Call in postCreate() to attach the keyboard handlers to the container. preKeyCodes: Array Key codes for navigating to the previous child.</description>
      </method>
      <method scope="instance" name="focus">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Default focus() implementation: focus the first child.</description>
      </method>
      <method scope="instance" name="focusChild">
        <parameters>
          <parameter name="widget" type="Widget" usage="required"/>
          <parameter name="node" type="Node" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Focus widget. Optionally focus 'node' within widget.</description>
      </method>
      <method scope="instance" name="focusFirstChild">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Focus the first focusable child in the container.</description>
      </method>
      <method scope="instance" name="focusNext">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Focus the next widget or focal node (for widgets with multiple focal nodes) within this container.</description>
      </method>
      <method scope="instance" name="focusPrev">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Focus the previous widget or focal node (for widgets with multiple focal nodes) within this container.</description>
      </method>
      <method scope="instance" name="startupKeyNavChildren">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Call in startup() to set child tabindexes to -1</description>
      </method>
      <method scope="instance" name="_connectNode" visibility="internal">
        <parameters>
          <parameter name="node" type="Element" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getFirstFocusableChild" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getNextFocusableChild" visibility="internal">
        <parameters>
          <parameter name="child" type="Object" usage="required"/>
          <parameter name="dir" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onChildBlur" visibility="internal">
        <parameters>
          <parameter name="widget" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called when focus leaves a child widget to go to a sibling widget.</description>
      </method>
      <method scope="instance" name="_onContainerFocus" visibility="internal">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onContainerKeypress" visibility="internal">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onNodeBlur" visibility="internal">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onNodeFocus" visibility="internal">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_startupChild" visibility="internal">
        <parameters>
          <parameter name="widget" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Set tabindex=&amp;quot;-1&amp;quot; on focusable widgets so that we can focus them programmatically and by clicking. Connect focus and blur handlers.</description>
      </method>
    </methods>
  </class>
  <class type="dijit._MasterTooltip" superclass="dijit._Widget dijit._Templated">
    <description>Internal widget that holds the actual tooltip markup, which occurs once per page. Called by Tooltip widgets which are just containers to hold the markup</description>
    <constructors>
      <constructor scope="instance">
        <description>Internal widget that holds the actual tooltip markup, which occurs once per page. Called by Tooltip widgets which are just containers to hold the markup</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="aroundNode"/>
      <property type="Object" access="read-write" scope="instance" name="bgIframe"/>
      <property type="Object" access="read-write" scope="instance" name="containerNode.innerHTML"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.style.cssText"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.style.filter"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.style.top"/>
      <property type="Object" access="read-write" scope="instance" name="fadeIn"/>
      <property type="Object" access="read-write" scope="instance" name="fadeOut"/>
      <property type="Object" access="read-write" scope="instance" name="isShowingNow"/>
      <property type="Object" access="read-write" scope="instance" name="_onDeck" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="duration"/>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
    </properties>
    <methods>
      <method scope="instance" name="hide">
        <parameters>
          <parameter name="aroundNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>hide the tooltip</description>
      </method>
      <method scope="instance" name="orient">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
          <parameter name="aroundCorner" type="String" usage="required"/>
          <parameter name="tooltipCorner" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>private function to set CSS for tooltip node based on which position it's in</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="show">
        <parameters>
          <parameter name="innerHTML" type="String" usage="required"/>
          <parameter name="aroundNode" type="DomNode" usage="required"/>
          <parameter name="position" type="String[]" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Display tooltip w/specified contents to right specified node (To left if there's no space on the right, or if LTR==right)</description>
      </method>
      <method scope="instance" name="_onHide" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onShow" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dijit._Templated" superclass="Object">
    <description>Mixin for widgets that are instantiated from a template</description>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="domNode"/>
      <property type="Object" access="read-write" scope="instance" name="_supportingWidgets" visibility="internal"/>
      <property type="DomNode" access="read-write" scope="instance" name="containerNode">
        <description>holds child elements. &amp;quot;containerNode&amp;quot; is generally set via a dojoAttachPoint assignment and it designates where children of the src dom node will be placed</description>
      </property>
      <property type="DomNode" access="read-write" scope="instance" name="templateNode">
        <description>a node that represents the widget template. Pre-empts both templateString and templatePath.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="templatePath">
        <description>Path to template (HTML file) for this widget relative to dojo.baseUrl</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="templateString">
        <description>a string that represents the widget template. Pre-empts the</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="widgetsInTemplate">
        <description>should we parse the template to find widgets that might be declared in markup inside it? false by default.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_skipNodeCache" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_templateCache" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="buildRendering">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Construct the UI for this widget from a template, setting this.domNode.</description>
      </method>
      <method scope="instance" name="_attachTemplateNodes" visibility="internal">
        <parameters>
          <parameter name="rootNode" type="DomNode" usage="required">
            <description>the node to search for properties. All children will be searched.</description>
          </parameter>
          <parameter name="getAttrFunc" type="Function" usage="optional">
            <description>a function which will be used to obtain property for a given DomNode/Widget</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Iterate through the template and attach functions and nodes accordingly.</description>
      </method>
      <method scope="instance" name="_fillContent" visibility="internal">
        <parameters>
          <parameter name="source" type="DomNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>relocate source contents to templated container node this.containerNode must be able to receive children, or exceptions will be thrown</description>
      </method>
      <method scope="instance" name="_stringRepl" visibility="internal">
        <parameters>
          <parameter name="tmpl" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getCachedTemplate">
        <parameters>
          <parameter name="templatePath" type="String" usage="required">
            <description>The URL to get the template from. dojo.uri.Uri is often passed as well.</description>
          </parameter>
          <parameter name="templateString" type="String" usage="optional">
            <description>a string to use in lieu of fetching the template from a URL. Takes precedence over templatePath Returns: Mixed Either string (if there are ${} variables that need to be replaced) or just a DOM tree (if the node can be cloned directly)</description>
          </parameter>
          <parameter name="alwaysUseString" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
          <return-type type="Node"/>
        </return-types>
        <description>Static method to get a template based on the templatePath or</description>
      </method>
      <method scope="static" name="_sanitizeTemplateString" visibility="internal">
        <parameters>
          <parameter name="tString" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Strips &amp;lt;?xml ...?&amp;gt; declarations so that external SVG and XML documents can be added to a document without worry. Also, if the string is an HTML document, only the part inside the body tag is returned.</description>
      </method>
      <method scope="static" name="_createNodesFromText" visibility="internal">
        <parameters>
          <parameter name="text" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Attempts to create a set of nodes based on the structure of the passed text.</description>
      </method>
    </methods>
  </class>
  <class type="dijit._TimePicker" superclass="dijit._Widget dijit._Templated">
    <description>A graphical time picker. This widget is used internally by other widgets and is not accessible as a standalone widget.</description>
    <constructors>
      <constructor scope="instance">
        <description>A graphical time picker. This widget is used internally by other widgets and is not accessible as a standalone widget.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="baseClass"/>
      <property type="String" access="read-write" scope="instance" name="clickableIncrement">
        <description>ISO-8601 string representing the amount by which every clickable element in the time picker increases. Set in local time, without a time zone. Example: `T00:15:00` creates 15 minute increments Must divide dijit._TimePicker.visibleIncrement evenly</description>
      </property>
      <property type="dijit._TimePicker.__Constraints" access="read-write" scope="instance" name="constraints"/>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="String" access="read-write" scope="instance" name="value">
        <description>Date to display. Defaults to current time and date. Can be a Date object or an ISO-8601 string. If you specify the GMT time zone (`-01:00`), the time will be converted to the local time in the local time zone. Otherwise, the time is considered to be in the local time zone. If you specify the date and isDate is true, the date is used. Example: if your local time zone is `GMT -05:00`, `T10:00:00` becomes `T10:00:00-05:00` (considered to be local time), `T10:00:00-01:00` becomes `T06:00:00-05:00` (4 hour difference), `T10:00:00Z` becomes `T05:00:00-05:00` (5 hour difference between Zulu and local time) `yyyy-mm-ddThh:mm:ss` is the format to set the date and time Example: `2007-06-01T09:00:00`</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="visibleIncrement">
        <description>ISO-8601 string representing the amount by which every element with a visible time in the time picker increases. Set in local time, without a time zone. Example: `T01:00:00` creates text in every 1 hour increment</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="visibleRange">
        <description>ISO-8601 string representing the range of this TimePicker. The TimePicker will only display times in this range. Example: `T05:00:00` displays 5 hours of options</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_clickableIncrement" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_totalIncrements" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_visibleIncrement" visibility="internal"/>
    </properties>
  </class>
  <class type="dijit._TimePicker.__Constraints" superclass="dojo.date.locale.__FormatOptions">
    <properties>
      <property type="String" access="read-write" scope="instance" name="clickableIncrement">
        <description>see dijit._TimePicker.clickableIncrement</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="visibleIncrement">
        <description>see dijit._TimePicker.visibleIncrement</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="visibleRange">
        <description>see dijit._TimePicker.visibleRange</description>
      </property>
    </properties>
  </class>
  <class type="dijit._tree" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="model"/>
    </properties>
  </class>
  <class type="dijit._TreeNode" superclass="dijit._Widget dijit._Contained dijit._Container dijit._Templated">
    <description>Single node within a tree</description>
    <constructors>
      <constructor scope="instance">
        <description>Single node within a tree</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="containerNode"/>
      <property type="Object" access="read-write" scope="instance" name="contentNode.className"/>
      <property type="Object" access="read-write" scope="instance" name="expandoNodeText.innerHTML"/>
      <property type="Object" access="read-write" scope="instance" name="iconNode.className"/>
      <property type="Object" access="read-write" scope="instance" name="isExpandable"/>
      <property type="Object" access="read-write" scope="instance" name="isExpanded"/>
      <property type="Object" access="read-write" scope="instance" name="labelNode.className"/>
      <property type="Object" access="read-write" scope="instance" name="labelNode.innerHTML"/>
      <property type="String" access="read-write" scope="instance" name="state">
        <description>dynamic loading-related stuff. When an empty folder node appears, it is &amp;quot;UNCHECKED&amp;quot; first, then after dojo.data query it becomes &amp;quot;LOADING&amp;quot; and, finally &amp;quot;LOADED&amp;quot;</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_wipeIn" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_wipeOut" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="isExpandable"/>
      <property type="Object" access="read-write" scope="instance" name="isExpanded"/>
      <property type="Object" access="read-write" scope="instance" name="isTreeNode"/>
      <property type="Object" access="read-write" scope="instance" name="item"/>
      <property type="String" access="read-write" scope="instance" name="label">
        <description>Text of this tree node</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="state">
        <description>dynamic loading-related stuff. When an empty folder node appears, it is &amp;quot;UNCHECKED&amp;quot; first, then after dojo.data query it becomes &amp;quot;LOADING&amp;quot; and, finally &amp;quot;LOADED&amp;quot;</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
    </properties>
    <methods>
      <method scope="instance" name="collapse">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="expand">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>show my children</description>
      </method>
      <method scope="instance" name="makeExpandable">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>if this node wasn't already showing the expando node, turn it into one and call _setExpando()</description>
      </method>
      <method scope="instance" name="markProcessing">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>visually denote that tree is loading data, etc.</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="removeChild">
        <parameters>
          <parameter name="node" type="treeNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setChildItems">
        <parameters>
          <parameter name="items" type="Object[]" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets the child items of this node, removing/adding nodes from current children to match specified items[] array.</description>
      </method>
      <method scope="instance" name="setLabelNode">
        <parameters>
          <parameter name="label" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unmarkProcessing">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>clear markup from markProcessing() call</description>
      </method>
      <method scope="instance" name="_onNodeFocus" visibility="internal">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setExpando" visibility="internal">
        <parameters>
          <parameter name="processing" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set the right image for the expando node</description>
      </method>
      <method scope="instance" name="_updateItemClasses" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set appropriate CSS classes for icon and label dom node (used to allow for item updates to change respective CSS)</description>
      </method>
      <method scope="instance" name="_updateLayout" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set appropriate CSS classes for this.domNode</description>
      </method>
    </methods>
  </class>
  <class type="dijit._Widget" superclass="Object">
    <description>The foundation of dijit widgets.</description>
    <constructors>
      <constructor scope="instance">
        <description>The foundation of dijit widgets.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dijit._Widget"/>
        </return-types>
      </constructor>
    </constructors>
    <properties>
      <property type="DomNode" access="read-write" scope="instance" name="domNode">
        <description>this is our visible representation of the widget! Other DOM Nodes may by assigned to other properties, usually through the template system's dojoAttachPonit syntax, but the domNode property is the canonical &amp;quot;top level&amp;quot; node in widget UI.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="id">
        <description>a unique, opaque ID string that can be assigned by users or by the system. If the developer passes an ID which is known not to be unique, the specified ID is ignored and the system-generated ID is used instead.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="params"/>
      <property type="DomNode" access="read-write" scope="instance" name="srcNodeRef">
        <description>pointer to original dom node</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="srcNodeRef.id"/>
      <property type="Object" access="read-write" scope="instance" name="_attaches" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_connects" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_ltr" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_started" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="attributeMap">
        <description>A map of attributes and attachpoints -- typically standard HTML attributes -- to set on the widget's dom, at the &amp;quot;domNode&amp;quot; attach point, by default. Other node references can be specified as properties of 'this'</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="class">
        <description>HTML class attribute</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="closable"/>
      <property type="String" access="read-write" scope="instance" name="dir">
        <description>Unsupported by Dijit, but here for completeness.  Dijit only supports setting text direction on the entire document. Bi-directional support, as defined by the [HTML DIR](http://www.w3.org/TR/html401/struct/dirlang.html#adef-dir) attribute. Either left-to-right &amp;quot;ltr&amp;quot; or right-to-left &amp;quot;rtl&amp;quot;.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="dojoAttachEvent"/>
      <property type="Object" access="read-write" scope="instance" name="dojoAttachPoint"/>
      <property type="DomNode" access="read-write" scope="instance" name="domNode">
        <description>this is our visible representation of the widget! Other DOM Nodes may by assigned to other properties, usually through the template system's dojoAttachPonit syntax, but the domNode property is the canonical &amp;quot;top level&amp;quot; node in widget UI.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="id">
        <description>a unique, opaque ID string that can be assigned by users or by the system. If the developer passes an ID which is known not to be unique, the specified ID is ignored and the system-generated ID is used instead.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="lang">
        <description>Rarely used.  Overrides the default Dojo locale used to render this widget, as defined by the [HTML LANG](http://www.w3.org/TR/html401/struct/dirlang.html#adef-lang) attribute. Value must be among the list of locales specified during by the Dojo bootstrap, formatted according to [RFC 3066](http://www.ietf.org/rfc/rfc3066.txt) (like en-us).</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="layoutAlign"/>
      <property type="Object" access="read-write" scope="instance" name="maxSize"/>
      <property type="Object" access="read-write" scope="instance" name="minSize"/>
      <property type="Object" access="read-write" scope="instance" name="nodesWithKeyClick"/>
      <property type="Object" access="read-write" scope="instance" name="region"/>
      <property type="Object" access="read-write" scope="instance" name="selected"/>
      <property type="Object" access="read-write" scope="instance" name="sizeMin"/>
      <property type="Object" access="read-write" scope="instance" name="sizeShare"/>
      <property type="Object" access="read-write" scope="instance" name="splitter"/>
      <property type="DomNode" access="read-write" scope="instance" name="srcNodeRef">
        <description>pointer to original dom node</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="style">
        <description>HTML style attribute</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="title"/>
      <property type="Object" access="read-write" scope="instance" name="waiRole"/>
      <property type="Object" access="read-write" scope="instance" name="waiState"/>
    </properties>
    <methods>
      <method scope="instance" name="buildRendering">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Construct the UI for this widget, setting this.domNode. Most widgets will mixin TemplatedWidget, which overrides this method.</description>
      </method>
      <method scope="instance" name="connect">
        <parameters>
          <parameter name="obj" type="Object|null" usage="required"/>
          <parameter name="event" type="String" usage="required"/>
          <parameter name="method" type="String|Function" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Connects specified obj/event to specified method of this object and registers for disconnect() on widget destroy. Special event: &amp;quot;ondijitclick&amp;quot; triggers on a click or enter-down or space-up Similar to dojo.connect() but takes three arguments rather than four.</description>
      </method>
      <method scope="instance" name="create">
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Kick off the life-cycle of a widget</description>
      </method>
      <method scope="instance" name="destroy">
        <parameters>
          <parameter name="finalize" type="Boolean" usage="required">
            <description>is this function being called part of global environment tear-down?</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Destroy this widget, but not its descendants</description>
      </method>
      <method scope="instance" name="destroyDescendants">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Recursively destroy the children of this widget and their descendants.</description>
      </method>
      <method scope="instance" name="destroyRecursive">
        <parameters>
          <parameter name="finalize" type="Boolean" usage="required">
            <description>is this function being called part of global environment tear-down?</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Destroy this widget and it's descendants. This is the generic &amp;quot;destructor&amp;quot; function that all widget users should call to cleanly discard with a widget. Once a widget is destroyed, it's removed from the manager object.</description>
      </method>
      <method scope="instance" name="destroyRendering">
        <parameters>
          <parameter name="finalize" type="Boolean" usage="required">
            <description>is this function being called part of global environment tear-down?</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Destroys the DOM nodes associated with this widget</description>
      </method>
      <method scope="instance" name="disconnect">
        <parameters>
          <parameter name="handles" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Disconnects handle created by this.connect. Also removes handle from this widget's list of connects</description>
      </method>
      <method scope="instance" name="getDescendants">
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Returns all the widgets that contained by this, i.e., all widgets underneath this.containerNode.</description>
      </method>
      <method scope="instance" name="isFocusable">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Return true if this widget can currently be focused and false if not</description>
      </method>
      <method scope="instance" name="isLeftToRight">
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Checks the DOM to for the text direction for bi-directional support</description>
      </method>
      <method scope="instance" name="onBlur">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>stub function. Override or connect to this method to receive notifications for when the widget moves out of focus.</description>
      </method>
      <method scope="instance" name="onClose">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Callback if someone tries to close the child, child will be closed if func returns true</description>
      </method>
      <method scope="instance" name="onFocus">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>stub function. Override or connect to this method to receive notifications for when the widget moves into focus.</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called after a widget's dom has been setup</description>
      </method>
      <method scope="instance" name="postMixInProperties">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called after the parameters to the widget have been read-in, but before the widget template is instantiated. Especially useful to set properties that are referenced in the widget template.</description>
      </method>
      <method scope="instance" name="postscript">
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setAttribute">
        <parameters>
          <parameter name="attr" type="String" usage="required"/>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Set native HTML attributes reflected in the widget, such as readOnly, disabled, and maxLength in TextBox widgets.</description>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called after a widget's children, and other widgets on the page, have been created. Provides an opportunity to manipulate any children before they are displayed. This is useful for composite widgets that need to control or layout sub-widgets. Many layout widgets can use this as a wiring phase.</description>
      </method>
      <method scope="instance" name="toString">
        <return-types>
          <return-type type="String"/>
        </return-types>
      </method>
      <method scope="instance" name="uninitialize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>stub function. Override to implement custom widget tear-down behavior.</description>
      </method>
      <method scope="instance" name="_onBlur" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onFocus" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojo" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="NodeList-fx"/>
      <property type="Object" access="read-write" scope="static" name="OpenAjax"/>
      <property type="Object" access="read-write" scope="static" name="_scopeArgs" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="global">
        <description>Alias for the global scope (e.g. the window object in a browser).</description>
      </property>
      <property type="Object" access="read-write" scope="static" name="config"/>
      <property type="Object" access="read-write" scope="static" name="locale"/>
      <property type="Object" access="read-write" scope="static" name="version">
        <description>version number of dojo</description>
      </property>
      <property type="Boolean" access="read-write" scope="static" name="isBrowser">
        <description>True if the client is a web-browser</description>
      </property>
      <property type="Number" access="read-write" scope="static" name="isFF">
        <description>Greater than zero if client is FireFox. 0 otherwise. Corresponds to major detected FireFox version (1.5, 2, 3, etc.)</description>
      </property>
      <property type="Number" access="read-write" scope="static" name="isIE">
        <description>Greater than zero if client is MSIE(PC). 0 otherwise. Corresponds to major detected IE version (6, 7, 8, etc.)</description>
      </property>
      <property type="Number" access="read-write" scope="static" name="isSafari">
        <description>Greater than zero if client is Safari or iPhone. 0 otherwise.</description>
      </property>
      <property type="Number" access="read-write" scope="static" name="isKhtml">
        <description>Greater than zero if client is a KTHML-derived browser (Konqueror, Safari, etc.). 0 otherwise. Corresponds to major detected version.</description>
      </property>
      <property type="Number" access="read-write" scope="static" name="isMozilla">
        <description>Greater than zero if client is a Mozilla-based browser (Firefox, SeaMonkey). 0 otherwise. Corresponds to major detected version.</description>
      </property>
      <property type="Number" access="read-write" scope="static" name="isOpera">
        <description>Greater than zero if client is Opera. 0 otherwise. Corresponds to major detected version.</description>
      </property>
      <property type="Object" access="read-write" scope="static" name="baseUrl">
        <description>The root relative path to dojo.js (as a string)</description>
      </property>
      <property type="Object" access="read-write" scope="static" name="isAIR"/>
      <property type="Object" access="read-write" scope="static" name="isQuirks"/>
      <property type="Object" access="read-write" scope="static" name="_XMLHTTP_PROGIDS" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_xhrObj" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_name" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_initFired" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_khtmlTimer" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="isRhino"/>
      <property type="Object" access="read-write" scope="static" name="doc">
        <description>Alias for the current document. 'dojo.doc' can be modified for temporary context shifting. Also see dojo.withDoc().</description>
      </property>
      <property type="Object" access="read-write" scope="static" name="_timeouts" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="isSpidermonkey">
        <description>Detect spidermonkey</description>
      </property>
      <property type="Object" access="read-write" scope="static" name="_global_omit_module_check" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="requireAfterIf"/>
      <property type="Object" access="read-write" scope="static" name="nonDebugProvide"/>
      <property type="Object" access="read-write" scope="static" name="_xdBundleMap" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_xdRealRequireLocalization" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_topics" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="keys">
        <description>definitions for common key values</description>
      </property>
      <property type="Object" access="read-write" scope="static" name="boxModel"/>
      <property type="Object" access="read-write" scope="static" name="toJsonIndentStr"/>
      <property type="Object" access="read-write" scope="static" name="isGears">
        <description>True if client is using Google Gears</description>
      </property>
      <property type="Object" access="read-write" scope="static" name="_blockAsync" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_base" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_firebug" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="dojo"/>
      <property type="Object" access="read-write" scope="static" name="jaxer"/>
      <property type="Object" access="read-write" scope="static" name="nls"/>
      <property type="Object" access="read-write" scope="static" name="resources"/>
      <property type="Object" access="read-write" scope="static" name="tests">
        <description>D.O.H. Test files for Dojo unit testing.</description>
      </property>
    </properties>
    <methods>
      <method scope="static" name="blendColors">
        <parameters>
          <parameter name="start" type="dojo.Color" usage="required"/>
          <parameter name="end" type="dojo.Color" usage="required"/>
          <parameter name="weight" type="Number" usage="required"/>
          <parameter name="obj" type="dojo.Color" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="dojo.Color"/>
        </return-types>
        <description>blend colors end and start with weight from 0 to 1, 0.5 being a 50/50 blend, can reuse a previously allocated dojo.Color object for the result</description>
      </method>
      <method scope="static" name="colorFromRgb">
        <parameters>
          <parameter name="color" type="String" usage="required"/>
          <parameter name="obj" type="dojo.Color" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="dojo.Color"/>
        </return-types>
        <description>get rgb(a) array from css-style color declarations</description>
      </method>
      <method scope="static" name="colorFromHex">
        <parameters>
          <parameter name="color" type="String" usage="required"/>
          <parameter name="obj" type="dojo.Color" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="dojo.Color"/>
        </return-types>
        <description>converts a hex string with a '#' prefix to a color object. Supports 12-bit #rgb shorthand.</description>
      </method>
      <method scope="static" name="colorFromArray">
        <parameters>
          <parameter name="a" type="Array" usage="required"/>
          <parameter name="obj" type="dojo.Color" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="dojo.Color"/>
        </return-types>
        <description>builds a color from 1, 2, 3, or 4 element array</description>
      </method>
      <method scope="static" name="colorFromString">
        <parameters>
          <parameter name="str" type="String" usage="required"/>
          <parameter name="obj" type="dojo.Color" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>parses str for a color value.</description>
      </method>
      <method scope="static" name="deprecated">
        <parameters>
          <parameter name="behaviour" type="String" usage="required"/>
          <parameter name="extra" type="String" usage="optional">
            <description>Text to append to the message.</description>
          </parameter>
          <parameter name="removal" type="String" usage="optional">
            <description>Text to indicate when in the future the behavior will be removed.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Log a debug message to indicate that a behavior has been deprecated.</description>
      </method>
      <method scope="static" name="_mixin" visibility="internal">
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
          <parameter name="props" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Adds all properties and methods of props to obj. This addition is &amp;quot;prototype extension safe&amp;quot;, so that instances of objects will not pass along prototype defaults.</description>
      </method>
      <method scope="static" name="mixin">
        <parameters>
          <parameter name="obj" type="Object" usage="required">
            <description>If more than one of these objects contain the same value, the one specified last in the function call will &amp;quot;win&amp;quot;.</description>
          </parameter>
          <parameter name="props" type="Object" usage="one-or-more">
            <description>One or more objects whose values are successively copied into</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Adds all properties and methods of props to obj and returns the (now modified) obj.</description>
      </method>
      <method scope="static" name="_getProp" visibility="internal">
        <parameters>
          <parameter name="parts" type="Array" usage="required"/>
          <parameter name="create" type="Boolean" usage="required"/>
          <parameter name="context" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="mixed"/>
        </return-types>
      </method>
      <method scope="static" name="setObject">
        <parameters>
          <parameter name="name" type="String" usage="required">
            <description>Path to a property, in the form &amp;quot;A.B.C&amp;quot;.</description>
          </parameter>
          <parameter name="value" type="Object" usage="required">
            <description>if setting is successful or `undefined` if not.</description>
          </parameter>
          <parameter name="context" type="Object" usage="optional">
            <description>Optional. Object to use as root of path. Defaults to `dojo.global`.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Set a property from a dot-separated string, such as &amp;quot;A.B.C&amp;quot;</description>
      </method>
      <method scope="static" name="getObject">
        <parameters>
          <parameter name="name" type="String" usage="required">
            <description>Path to an property, in the form &amp;quot;A.B.C&amp;quot;.</description>
          </parameter>
          <parameter name="create" type="Boolean" usage="required">
            <description>Optional. Defaults to `false`. If `true`, Objects will be created at any point along the 'path' that is undefined.</description>
          </parameter>
          <parameter name="context" type="Object" usage="required">
            <description>Optional. Object to use as root of path. Defaults to 'dojo.global'. Null may be passed.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Get a property from a dot-separated string, such as &amp;quot;A.B.C&amp;quot;</description>
      </method>
      <method scope="static" name="exists">
        <parameters>
          <parameter name="name" type="String" usage="required">
            <description>Path to an object, in the form &amp;quot;A.B.C&amp;quot;.</description>
          </parameter>
          <parameter name="obj" type="Object" usage="optional">
            <description>to use as root of path. Defaults to 'dojo.global'. Null may be passed.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>determine if an object supports a given method</description>
      </method>
      <method scope="static" name="eval">
        <parameters>
          <parameter name="scriptFragment" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Perform an evaluation in the global scope. Use this rather than calling 'eval()' directly.</description>
      </method>
      <method scope="static" name="experimental">
        <parameters>
          <parameter name="moduleName" type="String" usage="required">
            <description>The name of a module, or the name of a module file or a specific function</description>
          </parameter>
          <parameter name="extra" type="String" usage="optional">
            <description>some additional message for the user</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Marks code as experimental.</description>
      </method>
      <method scope="static" name="_loadInit" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_fakeLoadInit" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_isDocumentOk" visibility="internal">
        <parameters>
          <parameter name="http" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
      </method>
      <method scope="static" name="_getText" visibility="internal">
        <parameters>
          <parameter name="uri" type="URI" usage="required">
            <description>A relative or absolute uri. If absolute, it still must be in the same &amp;quot;domain&amp;quot; as we are.</description>
          </parameter>
          <parameter name="fail_ok" type="Boolean" usage="required">
            <description>Default false. If fail_ok and loading fails, return null instead of throwing.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="null"/>
          <return-type type="String"/>
        </return-types>
        <description>Read the contents of the specified uri and return those contents.</description>
      </method>
      <method scope="static" name="byId">
        <parameters>
          <parameter name="id" type="String|DOMNode" usage="required">
            <description>A string to match an HTML id attribute or a reference to a DOM Node</description>
          </parameter>
          <parameter name="doc" type="Document" usage="optional">
            <description>Document to work in. Defaults to the current value of dojo.doc.  Can be used to retrieve node references from other documents.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="DomNode"/>
        </return-types>
        <description>Returns DOM node with matching `id` attribute or `null` if not found, similar to &amp;quot;$&amp;quot; function in another library. If `id` is a DomNode, this function is a no-op.</description>
      </method>
      <method scope="static" name="exit">
        <parameters>
          <parameter name="exitcode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_rhinoCurrentScriptViaJava" visibility="internal">
        <parameters>
          <parameter name="depth" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="body">
        <return-types>
          <return-type type="Node"/>
        </return-types>
        <description>Return the body element of the document return the body object associated with dojo.doc</description>
      </method>
      <method scope="static" name="_spidermonkeyCurrentFile" visibility="internal">
        <parameters>
          <parameter name="depth" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_loadPath" visibility="internal">
        <parameters>
          <parameter name="relpath" type="String" usage="required"/>
          <parameter name="module" type="String" usage="optional"/>
          <parameter name="cb" type="Function" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Internal xd loader function. Overrides loadPath() from loader.js. xd loading requires slightly different behavior from loadPath().</description>
      </method>
      <method scope="static" name="_loadUriAndCheck" visibility="internal">
        <parameters>
          <parameter name="uri" type="String" usage="required"/>
          <parameter name="moduleName" type="String" usage="required"/>
          <parameter name="cb" type="Function" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>calls loadUri then findModule and returns true if both succeed</description>
      </method>
      <method scope="static" name="unloaded">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>signal fired by impending environment destruction. You may use dojo.addOnUnload() or dojo.connect() to this method to perform page/application cleanup methods.</description>
      </method>
      <method scope="static" name="addOnLoad">
        <parameters>
          <parameter name="obj" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Registers a function to be triggered after the DOM has finished loading and widgets declared in markup have been instantiated. Images and CSS files may or may not have finished downloading when the specified function is called.  (Note that widgets' CSS and HTML code is guaranteed to be downloaded before said widgets are instantiated.)</description>
      </method>
      <method scope="static" name="addOnUnload">
        <parameters>
          <parameter name="obj" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>registers a function to be triggered when the page unloads</description>
      </method>
      <method scope="static" name="_modulesLoaded" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_callLoaded" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_getModuleSymbols" visibility="internal">
        <parameters>
          <parameter name="modulename" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Converts a module name in dotted JS notation to an array representing the path in the source tree</description>
      </method>
      <method scope="static" name="require">
        <parameters>
          <parameter name="moduleName" type="String" usage="required">
            <description>module name to load. Module paths are de-referenced by dojo's internal mapping of locations to names and are disambiguated by longest prefix. See `dojo.registerModulePath()` for details on registering new modules.</description>
          </parameter>
          <parameter name="omitModuleCheck" type="Boolean" usage="optional">
            <description>if `true`, omitModuleCheck skips the step of ensuring that the loaded file actually defines the symbol it is referenced by. For example if it called as `dojo._loadModule(&amp;quot;a.b.c&amp;quot;)` and the file located at `a/b/c.js` does not define an object `a.b.c`, and exception will be throws whereas no exception is raised when called as `dojo._loadModule(&amp;quot;a.b.c&amp;quot;, true)`</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>loads a Javascript module from the appropriate URI</description>
      </method>
      <method scope="static" name="provide">
        <parameters>
          <parameter name="resourceName" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="platformRequire">
        <parameters>
          <parameter name="modMap" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>require one or more modules based on which host environment Dojo is currently operating in</description>
      </method>
      <method scope="static" name="requireIf">
        <parameters>
          <parameter name="condition" type="Boolean" usage="required"/>
          <parameter name="resourceName" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>If the condition is true then call dojo.require() for the specified resource</description>
      </method>
      <method scope="static" name="registerModulePath">
        <parameters>
          <parameter name="module" type="String" usage="required"/>
          <parameter name="prefix" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>maps a module name to a path</description>
      </method>
      <method scope="static" name="requireLocalization">
        <parameters>
          <parameter name="moduleName" type="String" usage="required"/>
          <parameter name="bundleName" type="String" usage="required"/>
          <parameter name="locale" type="String" usage="optional"/>
          <parameter name="availableFlatLocales" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>loads a bundle intelligently based on whether the module is local or xd. Overrides the local-case implementation.</description>
      </method>
      <method scope="static" name="moduleUrl">
        <parameters>
          <parameter name="module" type="String" usage="required"/>
          <parameter name="url" type="dojo._Url|String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Returns a `dojo._Url` object relative to a module.</description>
      </method>
      <method scope="static" name="_xdCreateResource" visibility="internal">
        <parameters>
          <parameter name="contents" type="String" usage="required"/>
          <parameter name="resourceName" type="String" usage="required"/>
          <parameter name="resourcePath" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Internal xd loader function. Creates an xd module source given an non-xd module contents.</description>
      </method>
      <method scope="static" name="_xdIsXDomainPath" visibility="internal">
        <parameters>
          <parameter name="relpath" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Figure out whether the path is local or x-domain If there is a colon before the first / then, we have a URL with a protocol.</description>
      </method>
      <method scope="static" name="_xdResourceLoaded" visibility="internal">
        <parameters>
          <parameter name="res" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Internal xd loader function. Called by an xd module resource when it has been loaded via a script tag.</description>
      </method>
      <method scope="static" name="_xdLoadFlattenedBundle" visibility="internal">
        <parameters>
          <parameter name="moduleName" type="String" usage="required"/>
          <parameter name="bundleName" type="String" usage="required"/>
          <parameter name="locale" type="String" usage="optional"/>
          <parameter name="bundleData" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Internal xd loader function. Used when loading a flattened localized bundle via a script tag.</description>
      </method>
      <method scope="static" name="_xdInitExtraLocales" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="xdRequireLocalization">
        <parameters>
          <parameter name="moduleName" type="String" usage="required"/>
          <parameter name="bundleName" type="String" usage="required"/>
          <parameter name="locale" type="String" usage="optional"/>
          <parameter name="availableFlatLocales" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Internal xd loader function. The xd version of dojo.requireLocalization.</description>
      </method>
      <method scope="static" name="_xdUnpackDependency" visibility="internal">
        <parameters>
          <parameter name="dep" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Internal xd loader function. Determines what to do with a dependency that was listed in an xd version of a module contents.</description>
      </method>
      <method scope="static" name="_xdWalkReqs" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Internal xd loader function. Walks the requires and evaluates module resource contents in the right order.</description>
      </method>
      <method scope="static" name="_xdEvalReqs" visibility="internal">
        <parameters>
          <parameter name="reqChain" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Internal xd loader function. Does a depth first, breadth second search and eval of required modules.</description>
      </method>
      <method scope="static" name="indexOf">
        <parameters>
          <parameter name="array" type="Array" usage="required"/>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="fromIndex" type="Number" usage="optional"/>
          <parameter name="findLast" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>locates the first index of the provided value in the passed array. If the value is not found, -1 is returned.</description>
      </method>
      <method scope="static" name="lastIndexOf">
        <parameters>
          <parameter name="array" type="Array" usage="required"/>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="fromIndex" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>locates the last index of the provided value in the passed array. If the value is not found, -1 is returned.</description>
      </method>
      <method scope="static" name="forEach">
        <parameters>
          <parameter name="arr" type="Array|String" usage="required">
            <description>the array to iterate on.  If a string, operates on individual characters.</description>
          </parameter>
          <parameter name="callback" type="Function|String" usage="required">
            <description>a function is invoked with three arguments: item, index, and array</description>
          </parameter>
          <parameter name="thisObject" type="Object" usage="optional">
            <description>may be used to scope the call to callback</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>for every item in arr, callback is invoked.  Return values are ignored.</description>
      </method>
      <method scope="static" name="_everyOrSome" visibility="internal">
        <parameters>
          <parameter name="every" type="Boolean" usage="required"/>
          <parameter name="arr" type="Array|String" usage="required"/>
          <parameter name="callback" type="Function|String" usage="required"/>
          <parameter name="thisObject" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
      </method>
      <method scope="static" name="every">
        <parameters>
          <parameter name="arr" type="Array|String" usage="required">
            <description>the array to iterate on.  If a string, operates on individual characters.</description>
          </parameter>
          <parameter name="callback" type="Function|String" usage="required">
            <description>a function is invoked with three arguments: item, index, and array and returns true if the condition is met.</description>
          </parameter>
          <parameter name="thisObject" type="Object" usage="optional">
            <description>may be used to scope the call to callback</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Determines whether or not every item in arr satisfies the condition implemented by callback.</description>
      </method>
      <method scope="static" name="some">
        <parameters>
          <parameter name="arr" type="Array|String" usage="required">
            <description>the array to iterate on.  If a string, operates on individual characters.</description>
          </parameter>
          <parameter name="callback" type="Function|String" usage="required">
            <description>a function is invoked with three arguments: item, index, and array and returns true if the condition is met.</description>
          </parameter>
          <parameter name="thisObject" type="Object" usage="optional">
            <description>may be used to scope the call to callback</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Determines whether or not any item in arr satisfies the condition implemented by callback.</description>
      </method>
      <method scope="static" name="map">
        <parameters>
          <parameter name="arr" type="Array|String" usage="required">
            <description>the array to iterate on.  If a string, operates on individual characters.</description>
          </parameter>
          <parameter name="callback" type="Function|String" usage="required">
            <description>a function is invoked with three arguments: item, index, and array and returns a value</description>
          </parameter>
          <parameter name="thisObject" type="Function" usage="optional">
            <description>may be used to scope the call to callback</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>applies callback to each element of arr and returns an Array with the results</description>
      </method>
      <method scope="static" name="filter">
        <parameters>
          <parameter name="arr" type="Array" usage="required">
            <description>the array to iterate on.  If a string, operates on individual characters.</description>
          </parameter>
          <parameter name="callback" type="Function|String" usage="required">
            <description>a function is invoked with three arguments: item, index, and array and returns true if the condition is met.</description>
          </parameter>
          <parameter name="thisObject" type="Object" usage="optional">
            <description>may be used to scope the call to callback</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Returns a new Array with those items from arr that match the condition implemented by callback.</description>
      </method>
      <method scope="static" name="connect">
        <parameters>
          <parameter name="obj" type="Object|null" usage="required">
            <description>The source object for the event function. Defaults to dojo.global if null. If obj is a DOM node, the connection is delegated to the DOM event manager (unless dontFix is true).</description>
          </parameter>
          <parameter name="event" type="String" usage="required">
            <description>name of the event function in obj. I.e. identifies a property obj[event].</description>
          </parameter>
          <parameter name="context" type="Object|null" usage="required">
            <description>The object that method will receive as &amp;quot;this&amp;quot;.  If context is null and method is a function, then method inherits the context of event.  If method is a string then context must be the source object object for method (context[method]). If context is null, dojo.global is used.</description>
          </parameter>
          <parameter name="method" type="String|Function" usage="required">
            <description>receives the same arguments as the event. See context argument comments for information on method's scope.</description>
          </parameter>
          <parameter name="dontFix" type="Boolean" usage="required">
            <description>If obj is a DOM node, set dontFix to true to prevent delegation of this connection to the DOM event manager.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Handle"/>
        </return-types>
        <description>Create a link that calls one function when another executes.</description>
      </method>
      <method scope="static" name="_connect" visibility="internal">
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
          <parameter name="event" type="Object" usage="required"/>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="method" type="Object" usage="required"/>
          <parameter name="dontFix" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="disconnect">
        <parameters>
          <parameter name="handle" type="Handle" usage="required">
            <description>the return value of the dojo.connect call that created the connection.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Remove a link created by dojo.connect.</description>
      </method>
      <method scope="static" name="_disconnect" visibility="internal">
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
          <parameter name="event" type="Object" usage="required"/>
          <parameter name="handle" type="Object" usage="required"/>
          <parameter name="listener" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="subscribe">
        <parameters>
          <parameter name="topic" type="String" usage="required"/>
          <parameter name="context" type="Object|null" usage="required">
            <description>Scope in which method will be invoked, or null for default scope.</description>
          </parameter>
          <parameter name="method" type="String|Function" usage="required">
            <description>The name of a function in context, or a function reference. This is the function that is invoked when topic is published.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Handle"/>
        </return-types>
        <description>Attach a listener to a named topic. The listener function is invoked whenever the named topic is published (see: dojo.publish). Returns a handle which is needed to unsubscribe this listener.</description>
      </method>
      <method scope="static" name="unsubscribe">
        <parameters>
          <parameter name="handle" type="Handle" usage="required">
            <description>The handle returned from a call to subscribe.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Remove a topic listener.</description>
      </method>
      <method scope="static" name="publish">
        <parameters>
          <parameter name="topic" type="String" usage="required">
            <description>The name of the topic to publish.</description>
          </parameter>
          <parameter name="args" type="Array" usage="required">
            <description>An array of arguments. The arguments will be applied to each topic subscriber (as first class parameters, via apply).</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Invoke all listener method subscribed to topic.</description>
      </method>
      <method scope="static" name="connectPublisher">
        <parameters>
          <parameter name="topic" type="String" usage="required">
            <description>The name of the topic to publish.</description>
          </parameter>
          <parameter name="obj" type="Object|null" usage="required">
            <description>The source object for the event function. Defaults to dojo.global if null.</description>
          </parameter>
          <parameter name="event" type="String" usage="required">
            <description>The name of the event function in obj. I.e. identifies a property obj[event].</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Handle"/>
        </return-types>
        <description>Ensure that everytime obj.event() is called, a message is published on the topic. Returns a handle which can be passed to dojo.disconnect() to disable subsequent automatic publication on the topic.</description>
      </method>
      <method scope="static" name="declare">
        <parameters>
          <parameter name="className" type="String" usage="required">
            <description>The name of the constructor (loosely, a &amp;quot;class&amp;quot;) stored in the &amp;quot;declaredClass&amp;quot; property in the created prototype</description>
          </parameter>
          <parameter name="superclass" type="Function|Function[]" usage="required">
            <description>May be null, a Function, or an Array of Functions. If an array, the first element is used as the prototypical ancestor and any following Functions become mixin ancestors.</description>
          </parameter>
          <parameter name="props" type="Object" usage="required">
            <description>An object whose properties are copied to the created prototype. Add an instance-initialization function by making it a property named &amp;quot;constructor&amp;quot;.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Function"/>
        </return-types>
        <description>Create a feature-rich constructor from compact notation</description>
      </method>
      <method scope="static" name="_ieDispatcher" visibility="internal">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
          <parameter name="sender" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_getIeDispatcher" visibility="internal">
        <return-types>
          <return-type type="Function"/>
        </return-types>
      </method>
      <method scope="static" name="fixEvent">
        <parameters>
          <parameter name="evt" type="Event" usage="required">
            <description>native event object</description>
          </parameter>
          <parameter name="sender" type="DOMNode" usage="required">
            <description>node to treat as &amp;quot;currentTarget&amp;quot;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>normalizes properties on the event object including event bubbling methods, keystroke normalization, and x/y positions</description>
      </method>
      <method scope="static" name="stopEvent">
        <parameters>
          <parameter name="evt" type="Event" usage="required">
            <description>The event object. If omitted, window.event is used on IE.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>prevents propagation and clobbers the default action of the passed event</description>
      </method>
      <method scope="static" name="_fade" visibility="internal">
        <parameters>
          <parameter name="args" type="Object" usage="required">
            <description>end (end is mandatory, start is optional)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Returns an animation that will fade the node defined by</description>
      </method>
      <method scope="static" name="fadeIn">
        <parameters>
          <parameter name="args" type="dojo.__FadeArgs" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Returns an animation that will fade node defined in 'args' from its current opacity to fully opaque.</description>
      </method>
      <method scope="static" name="fadeOut">
        <parameters>
          <parameter name="args" type="dojo.__FadeArgs" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Returns an animation that will fade node defined in 'args' from its current opacity to fully transparent.</description>
      </method>
      <method scope="static" name="_defaultEasing" visibility="internal">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>The default easing function for dojo._Animation(s)</description>
      </method>
      <method scope="static" name="anim">
        <parameters>
          <parameter name="node" type="DOMNode|String" usage="required">
            <description>a DOM node or the id of a node to animate CSS properties on</description>
          </parameter>
          <parameter name="properties" type="Object" usage="required"/>
          <parameter name="duration" type="Number" usage="optional">
            <description>The number of milliseconds over which the animation should run. Defaults to the global animation default duration (350ms).</description>
          </parameter>
          <parameter name="easing" type="Function" usage="optional">
            <description>An easing function over which to calculate acceleration and deceleration of the animation through its duration. A default easing algorithm is provided, but you may plug in any you wish. A large selection of easing algorithms are available in `dojox.fx.easing`.</description>
          </parameter>
          <parameter name="onEnd" type="Function" usage="optional">
            <description>A function to be called when the animation finishes running.</description>
          </parameter>
          <parameter name="delay" type="Number" usage="optional">
            <description>The number of milliseconds to delay beginning the animation by. The default is 0.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>A simpler interface to `dojo.animateProperty()`, also returns an instance of `dojo._Animation` but begins the animation immediately, unlike nearly every other Dojo animation API.</description>
      </method>
      <method scope="static" name="hasClass">
        <parameters>
          <parameter name="node" type="DomNode|String" usage="required"/>
          <parameter name="classStr" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Returns whether or not the specified classes are a portion of the class list currently applied to the node.</description>
      </method>
      <method scope="static" name="addClass">
        <parameters>
          <parameter name="node" type="DomNode|String" usage="required"/>
          <parameter name="classStr" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Adds the specified classes to the end of the class list on the passed node.</description>
      </method>
      <method scope="static" name="removeClass">
        <parameters>
          <parameter name="node" type="DomNode|String" usage="required"/>
          <parameter name="classStr" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Removes the specified classes from node.</description>
      </method>
      <method scope="static" name="toggleClass">
        <parameters>
          <parameter name="node" type="DomNode|String" usage="required"/>
          <parameter name="classStr" type="String" usage="required"/>
          <parameter name="condition" type="Boolean" usage="optional">
            <description>If passed, true means to add the class, false means to remove.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Adds a class to node if not present, or removes if present. Pass a boolean condition if you want to explicitly add or remove.</description>
      </method>
      <method scope="static" name="getComputedStyle">
        <parameters>
          <parameter name="node" type="DOMNode" usage="required">
            <description>A reference to a DOM node. Does NOT support taking an ID string for speed reasons.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="CSS2Properties"/>
        </return-types>
        <description>Returns a &amp;quot;computed style&amp;quot; object.</description>
      </method>
      <method scope="static" name="_getOpacity" visibility="internal">
        <parameters>
          <parameter name="node" type="DomNode" usage="required">
            <description>a reference to a DOM node. Does NOT support taking an ID string for speed reasons. return: Number between 0 and 1</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns the current opacity of the passed node as a floating-point value between 0 and 1.</description>
      </method>
      <method scope="static" name="_setOpacity" visibility="internal">
        <parameters>
          <parameter name="node" type="DOMNode" usage="required">
            <description>a reference to a DOM node. Does NOT support taking an ID string for performance reasons.</description>
          </parameter>
          <parameter name="opacity" type="Number" usage="required">
            <description>A Number between 0 and 1. 0 specifies transparent. return: Number between 0 and 1</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set the opacity of the passed node portably. Returns the new opacity of the node.</description>
      </method>
      <method scope="static" name="_destroyElement" visibility="internal">
        <parameters>
          <parameter name="node" type="String|DomNode" usage="required">
            <description>the element to be destroyed, either as an ID or a reference</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>removes node from its parent, clobbers it and all of its children.</description>
      </method>
      <method scope="static" name="isDescendant">
        <parameters>
          <parameter name="node" type="DomNode|String" usage="required">
            <description>id or node reference to test</description>
          </parameter>
          <parameter name="ancestor" type="DomNode|String" usage="required">
            <description>id or node reference of potential parent to test against</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Returns true if node is a descendant of ancestor</description>
      </method>
      <method scope="static" name="setSelectable">
        <parameters>
          <parameter name="node" type="DomNode|String" usage="required">
            <description>id or reference to node</description>
          </parameter>
          <parameter name="selectable" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>enable or disable selection on a node</description>
      </method>
      <method scope="static" name="place">
        <parameters>
          <parameter name="node" type="String|DomNode" usage="required">
            <description>id or node reference to place relative to refNode</description>
          </parameter>
          <parameter name="refNode" type="String|DomNode" usage="required">
            <description>Accepted string values are:  * before * after * first * last  &amp;quot;first&amp;quot; and &amp;quot;last&amp;quot; indicate positions as children of refNode.</description>
          </parameter>
          <parameter name="position" type="String|Number" usage="required">
            <description>string noting the position of node relative to refNode or a number indicating the location in the childNodes collection of</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Attempt to insert node into the DOM, choosing from various positioning options. Returns true if successful, false otherwise.</description>
      </method>
      <method scope="static" name="_toPixelValue" visibility="internal">
        <parameters>
          <parameter name="element" type="Object" usage="required"/>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="avalue" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="style">
        <parameters>
          <parameter name="node" type="DomNode|String" usage="required">
            <description>id or reference to node to get/set style for</description>
          </parameter>
          <parameter name="style" type="Object" usage="optional">
            <description>the style property to set in DOM-accessor format (&amp;quot;borderWidth&amp;quot;, not &amp;quot;border-width&amp;quot;) or an object with key/value pairs suitable for setting each property.</description>
          </parameter>
          <parameter name="value" type="String" usage="optional">
            <description>If passed, sets value on the node for style, handling cross-browser concerns.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
          <return-type type="CSS2Properties"/>
          <return-type type="String"/>
          <return-type type="Number"/>
        </return-types>
        <description>Accesses styles on a node. If 2 arguments are passed, acts as a getter. If 3 arguments are passed, acts as a setter.</description>
      </method>
      <method scope="static" name="_getPadExtents" visibility="internal">
        <parameters>
          <parameter name="n" type="DomNode" usage="required"/>
          <parameter name="computedStyle" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns object with special values specifically useful for node fitting.  * l/t = left/top padding (respectively) * w = the total of the left and right padding * h = the total of the top and bottom padding  If 'node' has position, l/t forms the origin for child nodes. The w/h are used for calculating boxes. Normally application code will not need to invoke this directly, and will use the ...box... functions instead.</description>
      </method>
      <method scope="static" name="_getBorderExtents" visibility="internal">
        <parameters>
          <parameter name="n" type="DomNode" usage="required"/>
          <parameter name="computedStyle" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_getPadBorderExtents" visibility="internal">
        <parameters>
          <parameter name="n" type="DomNode" usage="required"/>
          <parameter name="computedStyle" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_getMarginExtents" visibility="internal">
        <parameters>
          <parameter name="n" type="Object" usage="required"/>
          <parameter name="computedStyle" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_getMarginBox" visibility="internal">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
          <parameter name="computedStyle" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_getContentBox" visibility="internal">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
          <parameter name="computedStyle" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns an object that encodes the width, height, left and top positions of the node's content box, irrespective of the current box model.</description>
      </method>
      <method scope="static" name="_getBorderBox" visibility="internal">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
          <parameter name="computedStyle" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_setBox" visibility="internal">
        <parameters>
          <parameter name="node" type="DomNode" usage="required">
            <description>DOM Node reference. Id string not supported for performance reasons.</description>
          </parameter>
          <parameter name="l" type="Number" usage="optional">
            <description>optional. left offset from parent.</description>
          </parameter>
          <parameter name="t" type="Number" usage="optional">
            <description>optional. top offset from parent.</description>
          </parameter>
          <parameter name="w" type="Number" usage="optional">
            <description>optional. width in current box model.</description>
          </parameter>
          <parameter name="h" type="Number" usage="optional">
            <description>optional. width in current box model.</description>
          </parameter>
          <parameter name="u" type="String" usage="optional">
            <description>optional. unit measure to use for other measures. Defaults to &amp;quot;px&amp;quot;.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sets width/height/left/top in the current (native) box-model dimentions. Uses the unit passed in u.</description>
      </method>
      <method scope="static" name="_usesBorderBox" visibility="internal">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>True if the node uses border-box layout.</description>
      </method>
      <method scope="static" name="_setContentSize" visibility="internal">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
          <parameter name="widthPx" type="Number" usage="required"/>
          <parameter name="heightPx" type="Number" usage="required"/>
          <parameter name="computedStyle" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets the size of the node's contents, irrespective of margins, padding, or borders.</description>
      </method>
      <method scope="static" name="_setMarginBox" visibility="internal">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
          <parameter name="leftPx" type="Number" usage="optional"/>
          <parameter name="topPx" type="Number" usage="optional"/>
          <parameter name="widthPx" type="Number" usage="optional"/>
          <parameter name="heightPx" type="Number" usage="optional"/>
          <parameter name="computedStyle" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sets the size of the node's margin box and placement (left/top), irrespective of box model. Think of it as a passthrough to dojo._setBox that handles box-model vagaries for you.</description>
      </method>
      <method scope="static" name="marginBox">
        <parameters>
          <parameter name="node" type="DomNode|String" usage="required">
            <description>id or reference to DOM Node to get/set box for</description>
          </parameter>
          <parameter name="box" type="Object" usage="optional">
            <description>If passed, denotes that dojo.marginBox() should update/set the margin box for node. Box is an object in the above format. All properties are optional if passed.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Getter/setter for the margin-box of node.</description>
      </method>
      <method scope="static" name="contentBox">
        <parameters>
          <parameter name="node" type="DomNode|String" usage="required">
            <description>id or reference to DOM Node to get/set box for</description>
          </parameter>
          <parameter name="box" type="Object" usage="optional">
            <description>If passed, denotes that dojo.contentBox() should update/set the content box for node. Box is an object in the above format. All properties are optional if passed.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Getter/setter for the content-box of node.</description>
      </method>
      <method scope="static" name="_docScroll" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_isBodyLtr" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_getIeDocumentElementOffset" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>The following values in IE contain an offset: event.clientX event.clientY node.getBoundingClientRect().left node.getBoundingClientRect().top But other position related values do not contain this offset, such as node.offsetLeft, node.offsetTop, node.style.left and node.style.top. The offset is always (2, 2) in LTR direction. When the body is in RTL direction, the offset counts the width of left scroll bar's width. This function computes the actual offset.</description>
      </method>
      <method scope="static" name="_fixIeBiDiScrollLeft" visibility="internal">
        <parameters>
          <parameter name="scrollLeft" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
      </method>
      <method scope="static" name="_abs" visibility="internal">
        <parameters>
          <parameter name="node" type="DomNode" usage="required"/>
          <parameter name="includeScroll" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Gets the position of the passed element relative to the viewport (if includeScroll==false), or relative to the document root (if includeScroll==true).  Returns an object of the form: { x: 100, y: 300 } if includeScroll is passed, the x and y values will include any document offsets that may affect the position relative to the viewport.</description>
      </method>
      <method scope="static" name="coords">
        <parameters>
          <parameter name="node" type="DomNode|String" usage="required"/>
          <parameter name="includeScroll" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns an object that measures margin box width/height and absolute positioning data from dojo._abs().</description>
      </method>
      <method scope="static" name="hasAttr">
        <parameters>
          <parameter name="node" type="DomNode|String" usage="required">
            <description>id or reference to the element to check</description>
          </parameter>
          <parameter name="name" type="String" usage="required">
            <description>the name of the attribute</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Returns true if the requested attribute is specified on the given element, and false otherwise.</description>
      </method>
      <method scope="static" name="attr">
        <parameters>
          <parameter name="node" type="DomNode|String" usage="required">
            <description>id or reference to the element to get or set the attribute on</description>
          </parameter>
          <parameter name="name" type="String|Object" usage="required">
            <description>the name of the attribute to get or set.</description>
          </parameter>
          <parameter name="value" type="String" usage="optional">
            <description>The value to set for the attribute</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Gets or sets an attribute on an HTML element.</description>
      </method>
      <method scope="static" name="removeAttr">
        <parameters>
          <parameter name="node" type="DomNode|String" usage="required">
            <description>id or reference to the element to remove the attribute from</description>
          </parameter>
          <parameter name="name" type="String" usage="required">
            <description>the name of the attribute to remove</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Removes an attribute from an HTML element.</description>
      </method>
      <method scope="static" name="fromJson">
        <parameters>
          <parameter name="json" type="String" usage="required">
            <description>a string literal of a JSON item, for instance: `'{ &amp;quot;foo&amp;quot;: [ &amp;quot;bar&amp;quot;, 1, { &amp;quot;baz&amp;quot;: &amp;quot;thud&amp;quot; } ] }'`</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Parses a [JSON](http://json.org) string to return a JavaScript object.</description>
      </method>
      <method scope="static" name="_escapeString" visibility="internal">
        <parameters>
          <parameter name="str" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Adds escape sequences for non-visual characters, double quote and backslash and surrounds with double quotes to form a valid string literal.</description>
      </method>
      <method scope="static" name="toJson">
        <parameters>
          <parameter name="it" type="Object" usage="required">
            <description>an object to be serialized. Objects may define their own serialization via a special &amp;quot;__json__&amp;quot; or &amp;quot;json&amp;quot; function property. If a specialized serializer has been defined, it will be used as a fallback.</description>
          </parameter>
          <parameter name="prettyPrint" type="Boolean" usage="optional">
            <description>if true, we indent objects and arrays to make the output prettier. The variable dojo.toJsonIndentStr is used as the indent string -- to use something other than the default (tab), change that variable before calling dojo.toJson().</description>
          </parameter>
          <parameter name="_indentStr" type="String" usage="optional">
            <description>private variable for recursive calls when pretty printing, do not use.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="null"/>
          <return-type type="String"/>
        </return-types>
        <description>Returns a [JSON](http://json.org) serialization of an object.</description>
      </method>
      <method scope="static" name="isString">
        <parameters>
          <parameter name="it" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Return true if it is a String</description>
      </method>
      <method scope="static" name="isArray">
        <parameters>
          <parameter name="it" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Return true if it is an Array</description>
      </method>
      <method scope="static" name="isObject">
        <parameters>
          <parameter name="it" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns true if it is a JavaScript object (or an Array, a Function or null)</description>
      </method>
      <method scope="static" name="isArrayLike">
        <parameters>
          <parameter name="it" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>similar to dojo.isArray() but more permissive</description>
      </method>
      <method scope="static" name="isAlien">
        <parameters>
          <parameter name="it" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Returns true if it is a built-in function or some other kind of oddball that *should* report as a function but doesn't</description>
      </method>
      <method scope="static" name="extend">
        <parameters>
          <parameter name="constructor" type="Object" usage="required"/>
          <parameter name="props" type="Object" usage="one-or-more"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Adds all properties and methods of props to constructor's prototype, making them available to all instances created with</description>
      </method>
      <method scope="static" name="_hitchArgs" visibility="internal">
        <parameters>
          <parameter name="scope" type="Object" usage="required"/>
          <parameter name="method" type="Object" usage="one-or-more"/>
        </parameters>
        <return-types>
          <return-type type="mixed"/>
        </return-types>
      </method>
      <method scope="static" name="hitch">
        <parameters>
          <parameter name="scope" type="Object" usage="required">
            <description>to be hitched.</description>
          </parameter>
          <parameter name="method" type="Function" usage="one-or-more">
            <description>A function to be hitched to scope, or the name of the method in</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Function"/>
        </return-types>
        <description>Returns a function that will only ever execute in the a given scope. This allows for easy use of object member functions in callbacks and other places in which the &amp;quot;this&amp;quot; keyword may otherwise not reference the expected scope. Any number of default positional arguments may be passed as parameters beyond &amp;quot;method&amp;quot;. Each of these values will be used to &amp;quot;placehold&amp;quot; (similar to curry) for the hitched function.</description>
      </method>
      <method scope="static" name="delegate">
        <parameters>
          <parameter name="obj" type="The" usage="required">
            <description>object to delegate to for properties not found directly on the return object or in props.</description>
          </parameter>
          <parameter name="props" type="an" usage="required">
            <description>object containing properties to assign to the returned object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_delegate" visibility="internal">
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
          <parameter name="props" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="partial">
        <parameters>
          <parameter name="method" type="Function" usage="one-or-more"/>
        </parameters>
        <return-types>
          <return-type type="Function"/>
        </return-types>
        <description>similar to hitch() except that the scope object is left to be whatever the execution context eventually becomes.</description>
      </method>
      <method scope="static" name="_toArray" visibility="internal">
        <parameters>
          <parameter name="obj" type="Object" usage="required">
            <description>the object to &amp;quot;arrayify&amp;quot;. We expect the object to have, at a minimum, a length property which corresponds to integer-indexed properties.</description>
          </parameter>
          <parameter name="offset" type="Number" usage="optional">
            <description>the location in obj to start iterating from. Defaults to 0. Optional.</description>
          </parameter>
          <parameter name="startWith" type="Array" usage="optional">
            <description>is the returned array.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Converts an array-like object (i.e. arguments, DOMCollection) to an array. Returns a new Array with the elements of obj.</description>
      </method>
      <method scope="static" name="clone">
        <parameters>
          <parameter name="o" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
          <return-type type="anything"/>
          <return-type type="Node"/>
          <return-type type="Date"/>
          <return-type type="Object"/>
        </return-types>
        <description>Clones objects (including DOM nodes) and all children. Warning: do not clone cyclic structures.</description>
      </method>
      <method scope="static" name="trim">
        <parameters>
          <parameter name="str" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>trims whitespaces from both sides of the string</description>
      </method>
      <method scope="static" name="query">
        <parameters>
          <parameter name="query" type="String" usage="required">
            <description>The CSS3 expression to match against. For details on the syntax of CSS3 selectors, see &amp;lt;http://www.w3.org/TR/css3-selectors/#selectors&amp;gt;</description>
          </parameter>
          <parameter name="root" type="String|DOMNode" usage="optional">
            <description>A DOMNode (or node id) to scope the search from. Optional.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojo.NodeList"/>
        </return-types>
        <description>Returns nodes which match the given CSS3 selector, searching the entire document by default but optionally taking a node to scope the search by. Returns an instance of dojo.NodeList.</description>
      </method>
      <method scope="static" name="_filterQueryResult" visibility="internal">
        <parameters>
          <parameter name="nodeList" type="Object" usage="required"/>
          <parameter name="simpleFilter" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_gearsObject" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>factory method to get a Google Gears plugin instance to expose in the browser runtime environment, if present</description>
      </method>
      <method scope="static" name="setContext">
        <parameters>
          <parameter name="globalObject" type="Object" usage="required"/>
          <parameter name="globalDocument" type="DocumentElement" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>changes the behavior of many core Dojo functions that deal with namespace and DOM lookup, changing them to work in a new global context (e.g., an iframe). The varibles dojo.global and dojo.doc are modified as a result of calling this function and the result of `dojo.body()` likewise differs.</description>
      </method>
      <method scope="static" name="_fireCallback" visibility="internal">
        <parameters>
          <parameter name="callback" type="Object" usage="required"/>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="cbArguments" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="withGlobal">
        <parameters>
          <parameter name="globalObject" type="Object" usage="required">
            <description>document as dojo.doc. If provided, globalObject will be executed in the context of object thisObject</description>
          </parameter>
          <parameter name="callback" type="Function" usage="required"/>
          <parameter name="thisObject" type="Object" usage="optional"/>
          <parameter name="cbArguments" type="Array" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Call callback with globalObject as dojo.global and</description>
      </method>
      <method scope="static" name="withDoc">
        <parameters>
          <parameter name="documentObject" type="Object" usage="required"/>
          <parameter name="callback" type="Function" usage="required">
            <description>will be executed in the context of object thisObject</description>
          </parameter>
          <parameter name="thisObject" type="Object" usage="optional"/>
          <parameter name="cbArguments" type="Array" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Call callback with documentObject as dojo.doc. If provided,</description>
      </method>
      <method scope="static" name="formToObject">
        <parameters>
          <parameter name="formNode" type="DOMNode|String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>dojo.formToObject returns the values encoded in an HTML form as string properties in an object which it then returns. Disabled form elements, buttons, and other non-value form elements are skipped. Multi-select elements are returned as an array of string values.</description>
      </method>
      <method scope="static" name="objectToQuery">
        <parameters>
          <parameter name="map" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>takes a name/value mapping object and returns a string representing a URL-encoded version of that object.</description>
      </method>
      <method scope="static" name="formToQuery">
        <parameters>
          <parameter name="formNode" type="DOMNode|String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Returns a URL-encoded string representing the form passed as either a node or string ID identifying the form to serialize</description>
      </method>
      <method scope="static" name="formToJson">
        <parameters>
          <parameter name="formNode" type="DOMNode|String" usage="required"/>
          <parameter name="prettyPrint" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>return a serialized JSON string from a form node or string ID identifying the form to serialize</description>
      </method>
      <method scope="static" name="queryToObject">
        <parameters>
          <parameter name="str" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_ioSetArgs" visibility="internal">
        <parameters>
          <parameter name="args" type="dojo.__IoArgs" usage="required">
            <description>The args object passed into the public io call. Recognized properties on the args object are:</description>
          </parameter>
          <parameter name="canceller" type="Function" usage="required"/>
          <parameter name="okHandler" type="Function" usage="required">
            <description>The first OK callback to be registered with Deferred. It has the opportunity to transform the OK response. It will receive one argument -- the Deferred object returned from this function.</description>
          </parameter>
          <parameter name="errHandler" type="Function" usage="required">
            <description>The first error callback to be registered with Deferred. It has the opportunity to do cleanup on an error. It will receive two arguments: error (the Error object) and dfd, the Deferred object returned from this function.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sets up the Deferred and ioArgs property on the Deferred so it can be used in an io call.</description>
      </method>
      <method scope="static" name="_ioCancelAll" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Cancels all pending IO requests, regardless of IO type (xhr, script, iframe).</description>
      </method>
      <method scope="static" name="_ioWatch" visibility="internal">
        <parameters>
          <parameter name="dfd" type="Deferred" usage="required">
            <description>The Deferred object to watch.</description>
          </parameter>
          <parameter name="validCheck" type="Function" usage="required">
            <description>used to check if the IO request is still valid. Gets the dfd object as its only argument.</description>
          </parameter>
          <parameter name="ioCheck" type="Function" usage="required">
            <description>used to check if basic IO call worked. Gets the dfd object as its only argument.</description>
          </parameter>
          <parameter name="resHandle" type="Function" usage="required">
            <description>used to process response. Gets the dfd object as its only argument.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>watches the io request represented by dfd to see if it completes.</description>
      </method>
      <method scope="static" name="_ioAddQueryToUrl" visibility="internal">
        <parameters>
          <parameter name="ioArgs" type="dojo.__IoCallbackArgs" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Adds query params discovered by the io deferred construction to the URL. Only use this for operations which are fundamentally GET-type operations.</description>
      </method>
      <method scope="static" name="xhr">
        <parameters>
          <parameter name="method" type="String" usage="required"/>
          <parameter name="args" type="dojo.__XhrArgs" usage="required"/>
          <parameter name="hasBody" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="dojo.Deferred"/>
        </return-types>
        <description>Sends an HTTP request with the given method. If the request has an HTTP body, then pass true for hasBody. The method argument should be uppercase. Also look at dojo.xhrGet(), xhrPost(), xhrPut() and dojo.xhrDelete() for shortcuts for those HTTP methods. There are also methods for &amp;quot;raw&amp;quot; PUT and POST methods via dojo.rawXhrPut() and dojo.rawXhrPost() respectively.</description>
      </method>
      <method scope="static" name="xhrGet">
        <parameters>
          <parameter name="args" type="dojo.__XhrArgs" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo.Deferred"/>
        </return-types>
        <description>Sends an HTTP GET request to the server.</description>
      </method>
      <method scope="static" name="xhrPost">
        <parameters>
          <parameter name="args" type="dojo.__XhrArgs" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo.Deferred"/>
        </return-types>
        <description>Sends an HTTP POST request to the server.</description>
      </method>
      <method scope="static" name="rawXhrPost">
        <parameters>
          <parameter name="args" type="dojo.__XhrArgs" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo.Deferred"/>
        </return-types>
        <description>Sends an HTTP POST request to the server. In addtion to the properties listed for the dojo.__XhrArgs type, the following property is allowed: postData: String. The raw data to send in the body of the POST request.</description>
      </method>
      <method scope="static" name="xhrPut">
        <parameters>
          <parameter name="args" type="dojo.__XhrArgs" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo.Deferred"/>
        </return-types>
        <description>Sends an HTTP PUT request to the server.</description>
      </method>
      <method scope="static" name="rawXhrPut">
        <parameters>
          <parameter name="args" type="dojo.__XhrArgs" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo.Deferred"/>
        </return-types>
        <description>Sends an HTTP PUT request to the server. In addtion to the properties listed for the dojo.__XhrArgs type, the following property is allowed: putData: String. The raw data to send in the body of the PUT request.</description>
      </method>
      <method scope="static" name="xhrDelete">
        <parameters>
          <parameter name="args" type="dojo.__XhrArgs" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo.Deferred"/>
        </return-types>
        <description>Sends an HTTP DELETE request to the server.</description>
      </method>
      <method scope="static" name="__backArgs" visibility="internal">
        <parameters>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="cookie">
        <parameters>
          <parameter name="name" type="String" usage="required">
            <description>Name of the cookie</description>
          </parameter>
          <parameter name="value" type="String" usage="optional">
            <description>Value for the cookie</description>
          </parameter>
          <parameter name="props" type="dojo.__cookieProps" usage="optional">
            <description>Properties for the cookie</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Get or set a cookie.</description>
      </method>
    </methods>
  </class>
  <class type="dojo.AdapterRegistry" superclass="Object">
    <description>A registry to make contextual calling/searching easier.</description>
    <constructors>
      <constructor scope="instance">
        <description>A registry to make contextual calling/searching easier.</description>
        <parameters>
          <parameter name="returnWrappers" type="Boolean" usage="optional"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="pairs"/>
      <property type="Object" access="read-write" scope="instance" name="returnWrappers"/>
    </properties>
    <methods>
      <method scope="instance" name="match">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Find an adapter for the given arguments. If no suitable adapter is found, throws an exception. match() accepts any number of arguments, all of which are passed to all matching functions from the registered pairs.</description>
      </method>
      <method scope="instance" name="register">
        <parameters>
          <parameter name="name" type="String" usage="required">
            <description>a way to identify this matcher.</description>
          </parameter>
          <parameter name="check" type="Function" usage="required">
            <description>a function that arguments are passed to from the adapter's match() function.  The check function should return true if the given arguments are appropriate for the wrap function.</description>
          </parameter>
          <parameter name="wrap" type="Function" usage="required"/>
          <parameter name="directReturn" type="Boolean" usage="optional">
            <description>If directReturn is true, the value passed in for wrap will be returned instead of being called. Alternately, the AdapterRegistry can be set globally to &amp;quot;return not call&amp;quot; using the returnWrappers property. Either way, this behavior allows the registry to act as a &amp;quot;search&amp;quot; function instead of a function interception library.</description>
          </parameter>
          <parameter name="override" type="Boolean" usage="optional">
            <description>If override is given and true, the check function will be given highest priority. Otherwise, it will be the lowest priority adapter.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>register a check function to determine if the wrap function or object gets selected</description>
      </method>
      <method scope="instance" name="unregister">
        <parameters>
          <parameter name="name" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Remove a named adapter from the registry</description>
      </method>
    </methods>
  </class>
  <class type="dojo.back" superclass="Object">
    <description>Browser history management resources</description>
    <properties>
      <property type="Object" access="read-write" scope="static" name="getHash"/>
      <property type="Object" access="read-write" scope="static" name="setHash"/>
      <property type="Object" access="read-write" scope="static" name="goBack"/>
      <property type="Object" access="read-write" scope="static" name="goForward"/>
    </properties>
    <methods>
      <method scope="static" name="init">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Initializes the undo stack. This must be called from a &amp;lt;script&amp;gt; block that lives inside the &amp;lt;body&amp;gt; tag to prevent bugs on IE.</description>
      </method>
      <method scope="static" name="setInitialState">
        <parameters>
          <parameter name="args" type="Object" usage="required">
            <description>See the addToHistory() function for the list of valid args properties.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets the state object and back callback for the very first page that is loaded.</description>
      </method>
      <method scope="static" name="addToHistory">
        <parameters>
          <parameter name="args" type="dojo.__backArgs" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>adds a state object (args) to the history list.</description>
      </method>
      <method scope="static" name="_iframeLoaded" visibility="internal">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
          <parameter name="ifrLoc" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>private method. Do not call this directly.</description>
      </method>
    </methods>
  </class>
  <class type="dojo.behavior" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_behaviors" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="add">
        <parameters>
          <parameter name="behaviorObj" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>add the specified behavior to the list of behaviors which will be applied the next time apply() is called. Calls to add() for an already existing behavior do not replace the previous rules, but are instead additive. New nodes which match the rule will have all add()-ed behaviors applied to them when matched.</description>
      </method>
      <method scope="instance" name="apply">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>applies all currently registered behaviors to the document, taking care to ensure that only incremental updates are made since the last time add() or apply() were called. If new matching nodes have been added, all rules in a behavior will be applied to that node. For previously matched nodes, only behaviors which have been added since the last call to apply() will be added to the nodes.</description>
      </method>
    </methods>
  </class>
  <class type="dojo.cldr" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="nls"/>
    </properties>
  </class>
  <class type="dojo.cldr.monetary" superclass="Object">
    <methods>
      <method scope="static" name="getData">
        <parameters>
          <parameter name="code" type="String" usage="required">
            <description>an [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>A mapping of currency code to currency-specific formatting information. Returns a unique object with properties: places, round.</description>
      </method>
    </methods>
  </class>
  <class type="dojo.cldr.supplemental" superclass="Object">
    <methods>
      <method scope="static" name="getFirstDayOfWeek">
        <parameters>
          <parameter name="locale" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Returns a zero-based index for first day of the week</description>
      </method>
      <method scope="static" name="_region" visibility="internal">
        <parameters>
          <parameter name="locale" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getWeekend">
        <parameters>
          <parameter name="locale" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns a hash containing the start and end days of the weekend</description>
      </method>
    </methods>
  </class>
  <class type="dojo.Color" superclass="Object">
    <description>takes a named string, hex string, array of rgb or rgba values, an object with r, g, b, and a properties, or another dojo.Color object</description>
    <constructors>
      <constructor scope="instance">
        <description>takes a named string, hex string, array of rgb or rgba values, an object with r, g, b, and a properties, or another dojo.Color object</description>
        <parameters>
          <parameter name="color" type="Array|String|Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="r"/>
      <property type="Object" access="read-write" scope="static" name="named"/>
    </properties>
    <methods>
      <method scope="instance" name="sanitize">
        <return-types>
          <return-type type="dojo.Color"/>
        </return-types>
        <description>makes sure that the object has correct attributes</description>
      </method>
      <method scope="instance" name="setColor">
        <parameters>
          <parameter name="color" type="Array|String|Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo.Color"/>
        </return-types>
        <description>takes a named string, hex string, array of rgb or rgba values, an object with r, g, b, and a properties, or another dojo.Color object</description>
      </method>
      <method scope="instance" name="toCss">
        <parameters>
          <parameter name="includeAlpha" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>returns a css color string in rgb(a) representation</description>
      </method>
      <method scope="instance" name="toHex">
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>returns a css color string in hexadecimal representation</description>
      </method>
      <method scope="instance" name="toRgb">
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>returns 3 component array of rgb values</description>
      </method>
      <method scope="instance" name="toRgba">
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>returns a 4 component array of rgba values</description>
      </method>
      <method scope="instance" name="toString">
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>returns a visual representation of the color</description>
      </method>
      <method scope="instance" name="_set" visibility="internal">
        <parameters>
          <parameter name="r" type="Object" usage="required"/>
          <parameter name="g" type="Object" usage="required"/>
          <parameter name="b" type="Object" usage="required"/>
          <parameter name="a" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojo.colors" superclass="Object">
    <description>Color utilities</description>
    <methods>
      <method scope="static" name="makeGrey">
        <parameters>
          <parameter name="g" type="Number" usage="required"/>
          <parameter name="a" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>creates a greyscale color with an optional alpha</description>
      </method>
    </methods>
  </class>
  <class type="dojo.currency" superclass="Object">
    <description>localized formatting and parsing routines for currencies</description>
    <methods>
      <method scope="static" name="_mixInDefaults" visibility="internal">
        <parameters>
          <parameter name="options" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="format">
        <parameters>
          <parameter name="value" type="Number" usage="required">
            <description>the number to be formatted.</description>
          </parameter>
          <parameter name="options" type="dojo.number.__FormatOptions" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Format a Number as a currency, using locale-specific settings</description>
      </method>
      <method scope="static" name="regexp">
        <parameters>
          <parameter name="options" type="dojo.number.__RegexpOptions" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Builds the regular needed to parse a currency value</description>
      </method>
      <method scope="static" name="parse">
        <parameters>
          <parameter name="expression" type="String" usage="required">
            <description>A string representation of a Number</description>
          </parameter>
          <parameter name="options" type="dojo.currency.__ParseOptions" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Convert a properly formatted currency string to a primitive Number, using locale-specific settings.</description>
      </method>
    </methods>
  </class>
  <class type="dojo.currency.__ParseOptions" superclass="dojo.number.__ParseOptions">
    <properties>
      <property type="Object" access="read-write" scope="instance" name="fractional">
        <description>where places are implied by pattern or explicit 'places' parameter, whether to include the fractional portion. By default for currencies, it the fractional portion is optional.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="places">
        <description>number of decimal places to accept.  Default is defined by currency.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="symbol">
        <description>override currency symbol. Normally, will be looked up in table of supported currencies, and ISO currency code will be used if not found.  See dojo.i18n.cldr.nls-&amp;gt;currency.js</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="type">
        <description>currency, set by default.</description>
      </property>
    </properties>
  </class>
  <class type="dojo.data" superclass="Object"/>
  <class type="dojo.data.api" superclass="Object"/>
  <class type="dojo.data.api.Identity" superclass="dojo.data.api.Read">
    <description>This is an abstract API that data provider implementations conform to. This file defines methods signatures and intentionally leaves all the methods unimplemented.</description>
    <methods>
      <method scope="instance" name="fetchItemByIdentity">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required">
            <description>An anonymous object that defines the item to locate and callbacks to invoke when the item has been located and load has completed.  The format of the object is as follows: { identity: string|object, onItem: Function, onError: Function, scope: object } The *identity* parameter. The identity parameter is the identity of the item you wish to locate and load This attribute is required.  It should be a string or an object that toString() can be called on.  The *onItem* parameter. Function(item) The onItem parameter is the callback to invoke when the item has been loaded.  It takes only one parameter, the item located, or null if none found.  The *onError* parameter. Function(error) The onError parameter is the callback to invoke when the item load encountered an error.  It takes only one parameter, the error object  The *scope* parameter. If a scope object is provided, all of the callback functions (onItem, onError, etc) will be invoked in the context of the scope object. In the body of the callback function, the value of the &amp;quot;this&amp;quot; keyword will be the scope object.   If no scope object is provided, the callback functions will be called in the context of dojo.global. For example, onItem.call(scope, item, request) vs. onItem.call(dojo.global, item, request)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Given the identity of an item, this method returns the item that has that identity through the onItem callback.  Conforming implementations should return null if there is no item with the given identity. Implementations of fetchItemByIdentity() may sometimes return an item from a local cache and may sometimes fetch an item from a remote server,</description>
      </method>
      <method scope="instance" name="getFeatures">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getFeatures()</description>
      </method>
      <method scope="instance" name="getIdentity">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>is not an item.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Returns a unique identifier for an item.  The return value will be either a string or something that has a toString() method (such as, for example, a dojox.uuid.Uuid object).</description>
      </method>
      <method scope="instance" name="getIdentityAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item from the store from which to obtain the array of public attributes that compose the identifier, if any.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Returns an array of attribute names that are used to generate the identity. For most stores, this is a single attribute, but for some complex stores such as RDB backed stores that use compound (multi-attribute) identifiers it can be more than one.  If the identity is not composed of attributes on the item, it will return null.  This function is intended to identify the attributes that comprise the identity so that so that during a render of all attributes, the UI can hide the the identity information if it chooses.</description>
      </method>
    </methods>
  </class>
  <class type="dojo.data.api.Notification" superclass="dojo.data.api.Read">
    <description>This is an abstract API that data provider implementations conform to. This file defines functions signatures and intentionally leaves all the functions unimplemented.</description>
    <methods>
      <method scope="instance" name="getFeatures">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getFeatures()</description>
      </method>
      <method scope="instance" name="onDelete">
        <parameters>
          <parameter name="deletedItem" type="item" usage="required">
            <description>The item deleted.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function is called any time an item is deleted from the store. It is called immediately after the store deleteItem processing has completed.</description>
      </method>
      <method scope="instance" name="onNew">
        <parameters>
          <parameter name="newItem" type="item" usage="required">
            <description>The item created.</description>
          </parameter>
          <parameter name="parentInfo" type="Object" usage="optional">
            <description>An optional javascript object that is passed when the item created was placed in the store hierarchy as a value f another item's attribute, instead of a root level item.  Note that if this function is invoked with a value for parentInfo, then onSet is not invoked stating the attribute of the parent item was modified.  This is to avoid getting two notification  events occurring when a new item with a parent is created.  The structure passed in is as follows: { item: someItem,							//The parent item attribute:	&amp;quot;attribute-name-string&amp;quot;,	//The attribute the new item was assigned to. oldValue: something	//Whatever was the previous value for the attribute. //If it is a single-value attribute only, then this value will be a single value. //If it was a multi-valued attribute, then this will be an array of all the values minues the new one. newValue: something	//The new value of the attribute.  In the case of single value calls, such as setValue, this value will be //generally be an atomic value of some sort (string, int, etc, object).  In the case of multi-valued attributes, //it will be an array. }</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function is called any time a new item is created in the store. It is called immediately after the store newItem processing has completed.</description>
      </method>
      <method scope="instance" name="onSet">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item being modified.</description>
          </parameter>
          <parameter name="attribute" type="Object" usage="required">
            <description>The attribute being changed represented as a string name.</description>
          </parameter>
          <parameter name="oldValue" type="Object|Array" usage="required">
            <description>The old value of the attribute.  In the case of single value calls, such as setValue, unsetAttribute, etc, this value will be generally be an atomic value of some sort (string, int, etc, object).  In the case of multi-valued attributes, it will be an array.</description>
          </parameter>
          <parameter name="newValue" type="Object|Array" usage="required">
            <description>The new value of the attribute.  In the case of single value calls, such as setValue, this value will be generally be an atomic value of some sort (string, int, etc, object).  In the case of multi-valued attributes, it will be an array.  In the case of unsetAttribute, the new value will be 'undefined'.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function is called any time an item is modified via setValue, setValues, unsetAttribute, etc.</description>
      </method>
    </methods>
  </class>
  <class type="dojo.data.api.Read" superclass="Object">
    <description>This is an abstract API that data provider implementations conform to. This file defines methods signatures and intentionally leaves all the methods unimplemented.  For more information on the dojo.data APIs, please visit: http://www.dojotoolkit.org/node/98</description>
    <methods>
      <method scope="instance" name="close">
        <parameters>
          <parameter name="request" type="dojo.data.api.Request|keywordArgs|null" usage="required">
            <description>An instance of a request for the store to use to identify what to close out. If no request is passed, then the store should clear all internal caches (if any) and close out all 'open' connections.  It does not render the store unusable from there on, it merely cleans out any current data and resets the store to initial state.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>The close() method is intended for instructing the store to 'close' out any information associated with a particular request.</description>
      </method>
      <method scope="instance" name="containsValue">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item to access values on.</description>
          </parameter>
          <parameter name="attribute" type="Object" usage="required">
            <description>The attribute to access represented as a string.</description>
          </parameter>
          <parameter name="value" type="anything" usage="required">
            <description>The value to match as a value for the attribute.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Returns true if the given *value* is one of the values that getValues() would return.</description>
      </method>
      <method scope="instance" name="fetch">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required">
            <description>The keywordArgs parameter may either be an instance of conforming to dojo.data.api.Request or may be a simple anonymous object that may contain any of the following: { query: query-string or query-object, queryOptions: object, onBegin: Function, onItem: Function, onComplete: Function, onError: Function, scope: object, start: int count: int sort: array } All implementations should accept keywordArgs objects with any of the 9 standard properties: query, onBegin, onItem, onComplete, onError scope, sort, start, and count.  Some implementations may accept additional properties in the keywordArgs object as valid parameters, such as {includeOutliers:true}.  The *query* parameter. The query may be optional in some data store implementations. The dojo.data.api.Read API does not specify the syntax or semantics of the query itself -- each different data store implementation may have its own notion of what a query should look like. In most implementations the query will probably be a string, but in some implementations the query might be a Date, or a number, or some complex keyword parameter object.  The dojo.data.api.Read API is completely agnostic about what the query actually is. In general for query objects that accept strings as attribute value matches, the store should support basic filtering capability, such as * (match any character) and ? (match single character).  The *queryOptions* parameter The queryOptions parameter is an optional parameter used to specify optiosn that may modify the query in some fashion, such as doing a case insensitive search, or doing a deep search where all items in a hierarchical representation of data are scanned instead of just the root items.  It currently defines two options that all datastores should attempt to honor if possible: { ignoreCase: boolean, //Whether or not the query should match case sensitively or not.  Default behaviour is false. deep: boolean 	//Whether or not a fetch should do a deep search of items and all child //items instead of just root-level items in a datastore.  Default is false. }  The *onBegin* parameter. function(size, request); If an onBegin callback function is provided, the callback function will be called just once, before the first onItem callback is called. The onBegin callback function will be passed two arguments, the the total number of items identified and the Request object.  If the total number is unknown, then size will be -1.  Note that size is not necessarily the size of the collection of items returned from the query, as the request may have specified to return only a subset of the total set of items through the use of the start and count parameters.  The *onItem* parameter. function(item, request); If an onItem callback function is provided, the callback function will be called as each item in the result is received. The callback function will be passed two arguments: the item itself, and the Request object.  The *onComplete* parameter. function(items, request);  If an onComplete callback function is provided, the callback function will be called just once, after the last onItem callback is called. Note that if the onItem callback is not present, then onComplete will be passed an array containing all items which matched the query and the request object. If the onItem callback is present, then onComplete is called as: onComplete(null, request).  The *onError* parameter. function(errorData, request); If an onError callback function is provided, the callback function will be called if there is any sort of error while attempting to execute the query. The onError callback function will be passed two arguments: an Error object and the Request object.  The *scope* parameter. If a scope object is provided, all of the callback functions (onItem, onComplete, onError, etc) will be invoked in the context of the scope object.  In the body of the callback function, the value of the &amp;quot;this&amp;quot; keyword will be the scope object.   If no scope object is provided, the callback functions will be called in the context of dojo.global(). For example, onItem.call(scope, item, request) vs. onItem.call(dojo.global(), item, request)  The *start* parameter. If a start parameter is specified, this is a indication to the datastore to only start returning items once the start number of items have been located and skipped.  When this parameter is paired withh 'count', the store should be able to page across queries with millions of hits by only returning subsets of the hits for each query  The *count* parameter. If a count parameter is specified, this is a indication to the datastore to only return up to that many items.  This allows a fetch call that may have millions of item matches to be paired down to something reasonable.  The *sort* parameter. If a sort parameter is specified, this is a indication to the datastore to sort the items in some manner before returning the items.  The array is an array of javascript objects that must conform to the following format to be applied to the fetching of items: { attribute: attribute || attribute-name-string, descending: true|false;   // Optional.  Default is false. } Note that when comparing attributes, if an item contains no value for the attribute (undefined), then it the default ascending sort logic should push it to the bottom of the list.  In the descending order case, it such items should appear at the top of the list.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Given a query and set of defined options, such as a start and count of items to return, this method executes the query and makes the results available as data items. The format and expectations of stores is that they operate in a generally asynchronous manner, therefore callbacks are always used to return items located by the fetch parameters.</description>
      </method>
      <method scope="instance" name="getAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item to access attributes on.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Returns an array with all the attributes that this item has.  This method will always return an array; if the item has no attributes at all, getAttributes() will return an empty array: [].</description>
      </method>
      <method scope="instance" name="getFeatures">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>The getFeatures() method returns an simple keyword values object that specifies what interface features the datastore implements. A simple CsvStore may be read-only, and the only feature it implements will be the 'dojo.data.api.Read' interface, so the getFeatures() method will return an object like this one: {'dojo.data.api.Read': true}. A more sophisticated datastore might implement a variety of interface features, like 'dojo.data.api.Read', 'dojo.data.api.Write', 'dojo.data.api.Identity', and 'dojo.data.api.Attribution'.</description>
      </method>
      <method scope="instance" name="getLabel">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item to return the label for.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Method to inspect the item and return a user-readable 'label' for the item that provides a general/adequate description of what the item is.</description>
      </method>
      <method scope="instance" name="getLabelAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item to return the list of label attributes for.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Method to inspect the item and return an array of what attributes of the item were used to generate its label, if any.</description>
      </method>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item to access values on.</description>
          </parameter>
          <parameter name="attribute" type="Object" usage="required">
            <description>The attribute to access represented as a string.</description>
          </parameter>
          <parameter name="defaultValue" type="value" usage="optional">
            <description>Optional.  A default value to use for the getValue return in the attribute does not exist or has no value.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns a single attribute value. Returns defaultValue if and only if *item* does not have a value for *attribute*. Returns null if and only if null was explicitly set as the attribute value. Returns undefined if and only if the item does not have a value for the given attribute (which is the same as saying the item does not have the attribute).</description>
      </method>
      <method scope="instance" name="getValues">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item to access values on.</description>
          </parameter>
          <parameter name="attribute" type="Object" usage="required">
            <description>The attribute to access represented as a string.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This getValues() method works just like the getValue() method, but getValues() always returns an array rather than a single attribute value.  The array may be empty, may contain a single attribute value, or may contain many attribute values. If the item does not have a value for the given attribute, then getValues() will return an empty array: [].  (So, if store.hasAttribute(item, attribute) has a return of false, then store.getValues(item, attribute) will return [].)</description>
      </method>
      <method scope="instance" name="hasAttribute">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item to access attributes on.</description>
          </parameter>
          <parameter name="attribute" type="Object" usage="required">
            <description>The attribute to access represented as a string.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Returns true if the given *item* has a value for the given *attribute*.</description>
      </method>
      <method scope="instance" name="isItem">
        <parameters>
          <parameter name="something" type="anything" usage="required">
            <description>Can be anything.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Returns true if *something* is an item and came from the store instance. Returns false if *something* is a literal, an item from another store instance, or is any object other than an item.</description>
      </method>
      <method scope="instance" name="isItemLoaded">
        <parameters>
          <parameter name="something" type="anything" usage="required">
            <description>Can be anything.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Returns false if isItem(something) is false.  Returns false if if isItem(something) is true but the the item is not yet loaded in local memory (for example, if the item has not yet been read from the server).</description>
      </method>
      <method scope="instance" name="loadItem">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required">
            <description>An anonymous object that defines the item to load and callbacks to invoke when the load has completed.  The format of the object is as follows: { item: object, onItem: Function, onError: Function, scope: object } The *item* parameter. The item parameter is an object that represents the item in question that should be contained by the store.  This attribute is required.  The *onItem* parameter. Function(item) The onItem parameter is the callback to invoke when the item has been loaded.  It takes only one parameter, the fully loaded item.  The *onError* parameter. Function(error) The onError parameter is the callback to invoke when the item load encountered an error.  It takes only one parameter, the error object  The *scope* parameter. If a scope object is provided, all of the callback functions (onItem, onError, etc) will be invoked in the context of the scope object. In the body of the callback function, the value of the &amp;quot;this&amp;quot; keyword will be the scope object.   If no scope object is provided, the callback functions will be called in the context of dojo.global(). For example, onItem.call(scope, item, request) vs. onItem.call(dojo.global(), item, request)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Given an item, this method loads the item so that a subsequent call to store.isItemLoaded(item) will return true.  If a call to isItemLoaded() returns true before loadItem() is even called, then loadItem() need not do any work at all and will not even invoke the callback handlers.  So, before invoking this method, check that the item has not already been loaded.</description>
      </method>
    </methods>
  </class>
  <class type="dojo.data.api.Request" superclass="Object">
    <description>This class defines out the semantics of what a 'Request' object looks like when returned from a fetch() method.  In general, a request object is nothing more than the original keywordArgs from fetch with an abort function attached to it to allow users to abort a particular request if they so choose. No other functions are required on a general Request object return.  That does not inhibit other store implementations from adding extentions to it, of course.  This is an abstract API that data provider implementations conform to. This file defines methods signatures and intentionally leaves all the methods unimplemented.  For more details on fetch, see dojo.data.api.Read.fetch().</description>
    <methods>
      <method scope="instance" name="abort">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function is a hook point for stores to provide as a way for a fetch to be halted mid-processing.</description>
      </method>
    </methods>
  </class>
  <class type="dojo.data.api.Write" superclass="dojo.data.api.Read">
    <description>This is an abstract API that data provider implementations conform to. This file defines function signatures and intentionally leaves all the functionss unimplemented.</description>
    <methods>
      <method scope="instance" name="deleteItem">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item to delete.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Deletes an item from the store.</description>
      </method>
      <method scope="instance" name="getFeatures">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getFeatures()</description>
      </method>
      <method scope="instance" name="isDirty">
        <parameters>
          <parameter name="item" type="item" usage="optional">
            <description>The item to check.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Given an item, isDirty() returns true if the item has been modified since the last save().  If isDirty() is called with no *item* argument, then this function returns true if any item has been modified since the last save().</description>
      </method>
      <method scope="instance" name="newItem">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="optional">
            <description>A javascript object defining the initial content of the item as a set of JavaScript 'property name: value' pairs.</description>
          </parameter>
          <parameter name="parentInfo" type="Object" usage="optional">
            <description>An optional javascript object defining what item is the parent of this item (in a hierarchical store.  Not all stores do hierarchical items), and what attribute of that parent to assign the new item to.  If this is present, and the attribute specified is a multi-valued attribute, it will append this item into the array of values for that attribute.  The structure of the object is as follows: { parent: someItem, attribute: &amp;quot;attribute-name-string&amp;quot; }</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="item"/>
        </return-types>
        <description>Returns a newly created item.  Sets the attributes of the new item based on the *keywordArgs* provided.  In general, the attribute names in the keywords become the attributes in the new item and as for the attribute values in keywordArgs, they become the values of the attributes in the new item.  In addition, for stores that support hierarchical item creation, an optional second parameter is accepted that defines what item is the parent of the new item and what attribute of that item should the new item be assigned to. In general, this will assume that the attribute targetted is multi-valued and a new item is appended onto the list of values for that attribute.</description>
      </method>
      <method scope="instance" name="revert">
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Discards any unsaved changes.</description>
      </method>
      <method scope="instance" name="save">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required">
            <description>onComplete: function onError: function scope: object }  The *onComplete* parameter. function();  If an onComplete callback function is provided, the callback function will be called just once, after the save has completed.  No parameters are generally passed to the onComplete.  The *onError* parameter. function(errorData);  If an onError callback function is provided, the callback function will be called if there is any sort of error while attempting to execute the save.  The onError function will be based one parameter, the error.  The *scope* parameter. If a scope object is provided, all of the callback function ( onComplete, onError, etc) will be invoked in the context of the scope object.  In the body of the callback function, the value of the &amp;quot;this&amp;quot; keyword will be the scope object.   If no scope object is provided, the callback functions will be called in the context of dojo.global. For example, onComplete.call(scope) vs. onComplete.call(dojo.global)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Saves to the server all the changes that have been made locally. The save operation may take some time and is generally performed in an asynchronous fashion.  The outcome of the save action is is passed into the set of supported callbacks for the save.</description>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item to modify.</description>
          </parameter>
          <parameter name="attribute" type="String" usage="required">
            <description>The attribute of the item to change represented as a string name.</description>
          </parameter>
          <parameter name="value" type="Object" usage="required">
            <description>The value to assign to the item.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Sets the value of an attribute on an item. Replaces any previous value or values.</description>
      </method>
      <method scope="instance" name="setValues">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>or if *attribute* is neither an attribute object or a string.</description>
          </parameter>
          <parameter name="attribute" type="String" usage="required">
            <description>The attribute of the item to change represented as a string name.</description>
          </parameter>
          <parameter name="values" type="Array" usage="required">
            <description>An array of values to assign to the attribute..</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Adds each value in the *values* array as a value of the given</description>
      </method>
      <method scope="instance" name="unsetAttribute">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item to modify.</description>
          </parameter>
          <parameter name="attribute" type="String" usage="required">
            <description>The attribute of the item to unset represented as a string.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Deletes all the values of an attribute on an item.</description>
      </method>
    </methods>
  </class>
  <class type="dojo.data.ItemFileReadStore" superclass="Object">
    <description>constructor</description>
    <constructors>
      <constructor scope="instance">
        <description>constructor</description>
        <parameters>
          <parameter name="keywordParameters" type="Object" usage="required">
            <description>typeMap object) The structure of the typeMap object is as follows: { type0: function || object, type1: function || object, ... typeN: function || object } Where if it is a function, it is assumed to be an object constructor that takes the value of _value as the initialization parameters.  If it is an object, then it is assumed to be an object of general form: { type: function, //constructor. deserialize:	function(value) //The function that parses the value and constructs the object defined by type appropriately. }</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <mixins scope="instance">
      <mixin scope="static" type="dojo.data.util.simpleFetch"/>
    </mixins>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_arrayOfAllItems" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_arrayOfTopLevelItems" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_datatypeMap" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_features" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_itemNumPropName" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_itemsByIdentity" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_jsonData" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_jsonFileUrl" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_labelAttr" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_loadFinished" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_loadInProgress" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_queuedFetches" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_reverseRefMap" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_rootItemPropName" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_storeRefPropName" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="url"/>
    </properties>
    <methods>
      <method scope="instance" name="close">
        <parameters>
          <parameter name="request" type="dojo.data.api.Request|keywordArgs|null" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.close()</description>
      </method>
      <method scope="instance" name="containsValue">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="boolean."/>
        </return-types>
        <description>See dojo.data.api.Read.containsValue()</description>
      </method>
      <method scope="instance" name="fetchItemByIdentity">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Identity.fetchItemByIdentity()</description>
      </method>
      <method scope="instance" name="getAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>See dojo.data.api.Read.getAttributes()</description>
      </method>
      <method scope="instance" name="getFeatures">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getFeatures()</description>
      </method>
      <method scope="instance" name="getIdentity">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
          <return-type type="Object"/>
          <return-type type="String"/>
          <return-type type="null"/>
        </return-types>
        <description>See dojo.data.api.Identity.getIdentity()</description>
      </method>
      <method scope="instance" name="getIdentityAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="null"/>
          <return-type type="Array"/>
        </return-types>
        <description>See dojo.data.api.Identity.getIdentifierAttributes()</description>
      </method>
      <method scope="instance" name="getLabel">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
          <return-type type="undefined"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabel()</description>
      </method>
      <method scope="instance" name="getLabelAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
          <return-type type="null"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabelAttributes()</description>
      </method>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="defaultValue" type="value" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="mixed"/>
        </return-types>
        <description>See dojo.data.api.Read.getValue()</description>
      </method>
      <method scope="instance" name="getValues">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>See dojo.data.api.Read.getValues()</description>
      </method>
      <method scope="instance" name="hasAttribute">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.hasAttribute()</description>
      </method>
      <method scope="instance" name="isItem">
        <parameters>
          <parameter name="something" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>See dojo.data.api.Read.isItem()</description>
      </method>
      <method scope="instance" name="isItemLoaded">
        <parameters>
          <parameter name="something" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>See dojo.data.api.Read.isItemLoaded()</description>
      </method>
      <method scope="instance" name="loadItem">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.loadItem()</description>
      </method>
      <method scope="instance" name="_addReferenceToMap" visibility="internal">
        <parameters>
          <parameter name="refItem" type="item" usage="required">
            <description>The item that is referenced.</description>
          </parameter>
          <parameter name="parentItem" type="item" usage="required">
            <description>The item that holds the new reference to refItem.</description>
          </parameter>
          <parameter name="attribute" type="String" usage="required">
            <description>The attribute on parentItem that contains the new reference.  Stub function, does nothing.  Real processing is in ItemFileWriteStore.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Method to add an reference map entry for an item and attribute.</description>
      </method>
      <method scope="instance" name="_assertIsAttribute" visibility="internal">
        <parameters>
          <parameter name="attribute" type="Object" usage="required">
            <description>The attribute to test for being contained by the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.</description>
      </method>
      <method scope="instance" name="_assertIsItem" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item to test for being contained by the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function tests whether the item passed in is indeed an item in the store.</description>
      </method>
      <method scope="instance" name="_containsValue" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The data item to examine for attribute values.</description>
          </parameter>
          <parameter name="attribute" type="Object" usage="required">
            <description>The attribute to inspect.</description>
          </parameter>
          <parameter name="value" type="anything" usage="required">
            <description>The value to match.</description>
          </parameter>
          <parameter name="regexp" type="RegExp" usage="optional">
            <description>Optional regular expression generated off value if value was of string type to handle wildcarding. If present and attribute values are string, then it can be used for comparison instead of 'value'</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Internal function for looking at the values contained by the item.</description>
      </method>
      <method scope="instance" name="_fetchItems" visibility="internal">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required"/>
          <parameter name="findCallback" type="Function" usage="required"/>
          <parameter name="errorCallback" type="Function" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.util.simpleFetch.fetch()</description>
      </method>
      <method scope="instance" name="_forceLoad" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Internal function to force a load of the store if it hasn't occurred yet.  This is required for specific functions to work properly.</description>
      </method>
      <method scope="instance" name="_getItemByIdentity" visibility="internal">
        <parameters>
          <parameter name="identity" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Internal function to look an item up by its identity map.</description>
      </method>
      <method scope="instance" name="_getItemsArray" visibility="internal">
        <parameters>
          <parameter name="queryOptions" type="Object" usage="optional">
            <description>The query options parameter, if any.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Internal function to determine which list of items to search over.</description>
      </method>
      <method scope="instance" name="_getItemsFromLoadedData" visibility="internal">
        <parameters>
          <parameter name="dataObject" type="Object" usage="required">
            <description>The JS data object containing the raw data to convery into item format.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Function to parse the loaded data into item format and build the internal items array.</description>
      </method>
      <method scope="instance" name="_handleQueuedFetches" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Internal function to execute delayed request in the store. Execute any deferred fetches now.</description>
      </method>
    </methods>
  </class>
  <class type="dojo.data.ItemFileWriteStore" superclass="dojo.data.ItemFileReadStore">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="keywordParameters" type="Object" usage="required">
            <description>typeMap object) The structure of the typeMap object is as follows: { type0: function || object, type1: function || object, ... typeN: function || object } Where if it is a function, it is assumed to be an object constructor that takes the value of _value as the initialization parameters.  It is serialized assuming object.toString() serialization.  If it is an object, then it is assumed to be an object of general form: { type: function, //constructor. deserialize:	function(value) //The function that parses the value and constructs the object defined by type appropriately. serialize:	function(object) //The function that converts the object back into the proper file format form. }</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="referenceIntegrity"/>
      <property type="Object" access="read-write" scope="instance" name="_pending" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_saveInProgress" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="referenceIntegrity"/>
    </properties>
    <methods>
      <method scope="instance" name="deleteItem">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Write.deleteItem()</description>
      </method>
      <method scope="instance" name="isDirty">
        <parameters>
          <parameter name="item" type="item" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>See dojo.data.api.Write.isDirty()</description>
      </method>
      <method scope="instance" name="newItem">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="optional"/>
          <parameter name="parentInfo" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="item"/>
        </return-types>
        <description>See dojo.data.api.Write.newItem()</description>
      </method>
      <method scope="instance" name="onDelete">
        <parameters>
          <parameter name="deletedItem" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Notification.onDelete()  No need to do anything. This method is here just so that the client code can connect observers to it.</description>
      </method>
      <method scope="instance" name="onNew">
        <parameters>
          <parameter name="newItem" type="item" usage="required"/>
          <parameter name="parentInfo" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Notification.onNew()  No need to do anything. This method is here just so that the client code can connect observers to it.</description>
      </method>
      <method scope="instance" name="onSet">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="oldValue" type="Object|Array" usage="required"/>
          <parameter name="newValue" type="Object|Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Notification.onSet()  No need to do anything. This method is here just so that the client code can connect observers to it.</description>
      </method>
      <method scope="instance" name="revert">
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>See dojo.data.api.Write.revert()</description>
      </method>
      <method scope="instance" name="save">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Write.save()</description>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>See dojo.data.api.Write.set()</description>
      </method>
      <method scope="instance" name="setValues">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="values" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>See dojo.data.api.Write.setValues()</description>
      </method>
      <method scope="instance" name="unsetAttribute">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Write.unsetAttribute()</description>
      </method>
      <method scope="instance" name="_addReferenceToMap" visibility="internal">
        <parameters>
          <parameter name="refItem" type="item" usage="required">
            <description>The item that is referenced.</description>
          </parameter>
          <parameter name="parentItem" type="item" usage="required">
            <description>The item that holds the new reference to refItem.</description>
          </parameter>
          <parameter name="attribute" type="String" usage="required">
            <description>The attribute on parentItem that contains the new reference.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Method to add an reference map entry for an item and attribute.</description>
      </method>
      <method scope="instance" name="_assert" visibility="internal">
        <parameters>
          <parameter name="condition" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_dumpReferenceMap" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Function to dump the reverse reference map of all items in the store for debug purposes.</description>
      </method>
      <method scope="instance" name="_flatten" visibility="internal">
        <parameters>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getIdentifierAttribute" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getNewFileContentString" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Generate a string that can be saved to a file. The result should look similar to: http://trac.dojotoolkit.org/browser/dojo/trunk/tests/data/countries.json</description>
      </method>
      <method scope="instance" name="_getValueOrValues" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_isEmpty" visibility="internal">
        <parameters>
          <parameter name="something" type="The" usage="required">
            <description>array or object to examine.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Function to determine if an array or object has no properties or values.</description>
      </method>
      <method scope="instance" name="_removeArrayElement" visibility="internal">
        <parameters>
          <parameter name="array" type="Array" usage="required"/>
          <parameter name="element" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_removeReferenceFromMap" visibility="internal">
        <parameters>
          <parameter name="refItem" type="item" usage="required">
            <description>The item that is referenced.</description>
          </parameter>
          <parameter name="parentItem" type="item" usage="required">
            <description>The item holding a reference to refItem.</description>
          </parameter>
          <parameter name="attribute" type="strin" usage="required">
            <description>The attribute on parentItem that contains the reference.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Method to remove an reference map entry for an item and attribute.</description>
      </method>
      <method scope="instance" name="_setValueOrValues" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="newValueOrValues" type="anything" usage="required"/>
          <parameter name="callOnSet" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojo.data.util" superclass="Object"/>
  <class type="dojo.data.util.filter" superclass="Object">
    <methods>
      <method scope="static" name="patternToRegExp">
        <parameters>
          <parameter name="pattern" type="String" usage="required">
            <description>string A simple matching pattern to convert that follows basic rules: * Means match anything, so ca* means match anything starting with ca ? Means match single character.  So, b?b will match to bob and bab, and so on. \ is an escape character.  So for example, \* means do not treat * as a match, but literal character *. To use a \ as a character in the string, it must be escaped.  So in the pattern it should be represented by \\ to be treated as an ordinary \ character instead of an escape.</description>
          </parameter>
          <parameter name="ignoreCase" type="Boolean" usage="optional">
            <description>An optional flag to indicate if the pattern matching should be treated as case-sensitive or not when comparing By default, it is assumed case sensitive.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="RegExp"/>
        </return-types>
        <description>Helper function to convert a simple pattern to a regular expression for matching.</description>
      </method>
    </methods>
  </class>
  <class type="dojo.data.util.simpleFetch" superclass="Object">
    <methods>
      <method scope="static" name="fetch">
        <parameters>
          <parameter name="request" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>The simpleFetch mixin is designed to serve as a set of function(s) that can be mixed into other datastore implementations to accelerate their development. The simpleFetch mixin should work well for any datastore that can respond to a _fetchItems() call by returning an array of all the found items that matched the query.  The simpleFetch mixin is not designed to work for datastores that respond to a fetch() call by incrementally loading items, or sequentially loading partial batches of the result set.  For datastores that mixin simpleFetch, simpleFetch implements a fetch method that automatically handles eight of the fetch() arguments -- onBegin, onItem, onComplete, onError, start, count, sort and scope The class mixing in simpleFetch should not implement fetch(), but should instead implement a _fetchItems() method.  The _fetchItems() method takes three arguments, the keywordArgs object that was passed to fetch(), a callback function to be called when the result array is available, and an error callback to be called if something goes wrong. The _fetchItems() method should ignore any keywordArgs parameters for start, count, onBegin, onItem, onComplete, onError, sort, and scope. The _fetchItems() method needs to correctly handle any other keywordArgs parameters, including the query parameter and any optional parameters (such as includeChildren).  The _fetchItems() method should create an array of result items and pass it to the fetchHandler along with the original request object -- or, the _fetchItems() method may, if it wants to, create an new request object with other specifics about the request that are specific to the datastore and pass that as the request object to the handler.  For more information on this specific function, see dojo.data.api.Read.fetch()</description>
      </method>
    </methods>
  </class>
  <class type="dojo.data.util.sorter" superclass="Object">
    <methods>
      <method scope="static" name="basicComparator">
        <parameters>
          <parameter name="a" type="anything" usage="required"/>
          <parameter name="b" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Basic comparision function that compares if an item is greater or less than another item</description>
      </method>
      <method scope="static" name="createSortFunction">
        <parameters>
          <parameter name="sortSpec" type="Object" usage="required">
            <description>array A JS object that array that defines out what attribute names to sort on and whether it should be descenting or asending. The objects should be formatted as follows: { attribute: &amp;quot;attributeName-string&amp;quot; || attribute, descending: true|false;   // Default is false. }</description>
          </parameter>
          <parameter name="store" type="dojo.data.core.Read" usage="required">
            <description>object The datastore object to look up item values from.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Helper function to generate the sorting function based off the list of sort attributes.</description>
      </method>
    </methods>
  </class>
  <class type="dojo.date" superclass="Object">
    <methods>
      <method scope="static" name="getDaysInMonth">
        <parameters>
          <parameter name="dateObject" type="Date" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Returns the number of days in the month used by dateObject</description>
      </method>
      <method scope="static" name="isLeapYear">
        <parameters>
          <parameter name="dateObject" type="Date" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Determines if the year of the dateObject is a leap year</description>
      </method>
      <method scope="static" name="getTimezoneName">
        <parameters>
          <parameter name="dateObject" type="Date" usage="required">
            <description>Needed because the timezone may vary with time (daylight savings)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Get the user's time zone as provided by the browser</description>
      </method>
      <method scope="static" name="compare">
        <parameters>
          <parameter name="date1" type="Date" usage="required">
            <description>object</description>
          </parameter>
          <parameter name="date2" type="Date" usage="optional">
            <description>object.  If not specified, the current Date is used.</description>
          </parameter>
          <parameter name="portion" type="String" usage="optional">
            <description>A string indicating the &amp;quot;date&amp;quot; or &amp;quot;time&amp;quot; portion of a Date object. Compares both &amp;quot;date&amp;quot; and &amp;quot;time&amp;quot; by default.  One of the following: &amp;quot;date&amp;quot;, &amp;quot;time&amp;quot;, &amp;quot;datetime&amp;quot;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Compare two date objects by date, time, or both.</description>
      </method>
      <method scope="static" name="add">
        <parameters>
          <parameter name="date" type="Date" usage="required">
            <description>object to start with</description>
          </parameter>
          <parameter name="interval" type="String" usage="required">
            <description>A string representing the interval.  One of the following: &amp;quot;year&amp;quot;, &amp;quot;month&amp;quot;, &amp;quot;day&amp;quot;, &amp;quot;hour&amp;quot;, &amp;quot;minute&amp;quot;, &amp;quot;second&amp;quot;, &amp;quot;millisecond&amp;quot;, &amp;quot;quarter&amp;quot;, &amp;quot;week&amp;quot;, &amp;quot;weekday&amp;quot;</description>
          </parameter>
          <parameter name="amount" type="Number" usage="required">
            <description>How much to add to the date.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Date"/>
        </return-types>
        <description>Add to a Date in intervals of different size, from milliseconds to years</description>
      </method>
      <method scope="static" name="difference">
        <parameters>
          <parameter name="date1" type="Date" usage="required">
            <description>object</description>
          </parameter>
          <parameter name="date2" type="Date" usage="optional">
            <description>object.  If not specified, the current Date is used.</description>
          </parameter>
          <parameter name="interval" type="String" usage="optional">
            <description>A string representing the interval.  One of the following: &amp;quot;year&amp;quot;, &amp;quot;month&amp;quot;, &amp;quot;day&amp;quot;, &amp;quot;hour&amp;quot;, &amp;quot;minute&amp;quot;, &amp;quot;second&amp;quot;, &amp;quot;millisecond&amp;quot;, &amp;quot;quarter&amp;quot;, &amp;quot;week&amp;quot;, &amp;quot;weekday&amp;quot; Defaults to &amp;quot;day&amp;quot;.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Get the difference in a specific unit of time (e.g., number of months, weeks, days, etc.) between two dates, rounded to the nearest integer.</description>
      </method>
    </methods>
  </class>
  <class type="dojo.date.locale" superclass="Object">
    <methods>
      <method scope="static" name="getNames">
        <parameters>
          <parameter name="item" type="String" usage="required">
            <description>months || 'days'</description>
          </parameter>
          <parameter name="type" type="String" usage="required">
            <description>wide || 'narrow' || 'abbr' (e.g. &amp;quot;Monday&amp;quot;, &amp;quot;Mon&amp;quot;, or &amp;quot;M&amp;quot; respectively, in English)</description>
          </parameter>
          <parameter name="use" type="String" usage="optional">
            <description>standAlone || 'format' (default)</description>
          </parameter>
          <parameter name="locale" type="String" usage="optional">
            <description>override locale used to find the names</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Used to get localized strings from dojo.cldr for day or month names.</description>
      </method>
      <method scope="static" name="isWeekend">
        <parameters>
          <parameter name="dateObject" type="Date" usage="optional"/>
          <parameter name="locale" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Determines if the date falls on a weekend, according to local custom.</description>
      </method>
      <method scope="static" name="_getDayOfYear" visibility="internal">
        <parameters>
          <parameter name="dateObject" type="Date" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>gets the day of the year as represented by dateObject</description>
      </method>
      <method scope="static" name="_getWeekOfYear" visibility="internal">
        <parameters>
          <parameter name="dateObject" type="Date" usage="required"/>
          <parameter name="firstDayOfWeek" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
      </method>
      <method scope="static" name="format">
        <parameters>
          <parameter name="dateObject" type="Date" usage="required">
            <description>the date and/or time to be formatted.  If a time only is formatted, the values in the year, month, and day fields are irrelevant.  The opposite is true when formatting only dates.</description>
          </parameter>
          <parameter name="options" type="dojo.date.locale.__FormatOptions" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Format a Date object as a String, using locale-specific settings.</description>
      </method>
      <method scope="static" name="regexp">
        <parameters>
          <parameter name="options" type="dojo.date.locale.__FormatOptions" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Builds the regular needed to parse a localized date</description>
      </method>
      <method scope="static" name="_parseInfo" visibility="internal">
        <parameters>
          <parameter name="options" type="dojo.date.locale.__FormatOptions" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="parse">
        <parameters>
          <parameter name="value" type="String" usage="required">
            <description>A string representation of a date</description>
          </parameter>
          <parameter name="options" type="dojo.date.locale.__FormatOptions" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="null"/>
          <return-type type="Date"/>
        </return-types>
        <description>Convert a properly formatted string to a primitive Date object, using locale-specific settings.</description>
      </method>
      <method scope="static" name="addCustomFormats">
        <parameters>
          <parameter name="packageName" type="String" usage="required"/>
          <parameter name="bundleName" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Add a reference to a bundle containing localized custom formats to be used by date/time formatting and parsing routines.</description>
      </method>
      <method scope="static" name="_getGregorianBundle" visibility="internal">
        <parameters>
          <parameter name="locale" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojo.date.locale.__FormatOptions" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="String" access="read-write" scope="instance" name="am">
        <description>override strings for am in times</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="datePattern">
        <description>override pattern with this string</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="formatLength">
        <description>choice of long, short, medium or full (plus any custom additions).  Defaults to 'short'</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="fullYear">
        <description>(format only) use 4 digit years whenever 2 digit years are called for</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="locale">
        <description>override the locale used to determine formatting rules</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="pm">
        <description>override strings for pm in times</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="selector">
        <description>choice of 'time','date' (default: date and time)</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="strict">
        <description>(parse only) strict parsing, off by default</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="timePattern">
        <description>override pattern with this string</description>
      </property>
    </properties>
  </class>
  <class type="dojo.date.stamp" superclass="Object">
    <methods>
      <method scope="static" name="fromISOString">
        <parameters>
          <parameter name="formattedString" type="String" usage="required">
            <description>A string such as 2005-06-30T08:05:00-07:00 or 2005-06-30 or T08:05:00</description>
          </parameter>
          <parameter name="defaultTime" type="Number" usage="optional">
            <description>Used for defaults for fields omitted in the formattedString. Uses 1970-01-01T00:00:00.0Z by default.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns a Date object given a string formatted according to a subset of the ISO-8601 standard.</description>
      </method>
      <method scope="static" name="toISOString">
        <parameters>
          <parameter name="dateObject" type="Date" usage="required">
            <description>A Date object</description>
          </parameter>
          <parameter name="options" type="dojo.date.stamp.__Options" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Format a Date object as a string according a subset of the ISO-8601 standard</description>
      </method>
    </methods>
  </class>
  <class type="dojo.date.stamp.__Options" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Boolean" access="read-write" scope="instance" name="milliseconds">
        <description>if true, output milliseconds</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="selector">
        <description>&amp;quot;date&amp;quot; or &amp;quot;time&amp;quot; for partial formatting of the Date object. Both date and time will be formatted by default.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="zulu">
        <description>if true, UTC/GMT is used for a timezone</description>
      </property>
    </properties>
  </class>
  <class type="dojo.declare._core" superclass="Object">
    <methods>
      <method scope="static" name="_construct" visibility="internal">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_findMixin" visibility="internal">
        <parameters>
          <parameter name="mixin" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_findMethod" visibility="internal">
        <parameters>
          <parameter name="name" type="Object" usage="required"/>
          <parameter name="method" type="Object" usage="required"/>
          <parameter name="ptype" type="Object" usage="required"/>
          <parameter name="has" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="inherited">
        <parameters>
          <parameter name="name" type="Object" usage="required"/>
          <parameter name="args" type="Object" usage="required"/>
          <parameter name="newArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojo.Deferred" superclass="Object">
    <description>Encapsulates a sequence of callbacks in response to a value that may not yet be available.  This is modeled after the Deferred class from Twisted &amp;lt;http://twistedmatrix.com&amp;gt;.</description>
    <constructors>
      <constructor scope="instance">
        <description>Encapsulates a sequence of callbacks in response to a value that may not yet be available.  This is modeled after the Deferred class from Twisted &amp;lt;http://twistedmatrix.com&amp;gt;.</description>
        <parameters>
          <parameter name="canceller" type="Function" usage="optional"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="canceller"/>
      <property type="Object" access="read-write" scope="instance" name="chain"/>
      <property type="Object" access="read-write" scope="instance" name="fired"/>
      <property type="Object" access="read-write" scope="instance" name="id"/>
      <property type="Object" access="read-write" scope="instance" name="paused"/>
      <property type="Object" access="read-write" scope="instance" name="results"/>
      <property type="Object" access="read-write" scope="instance" name="silentlyCancelled"/>
      <property type="Object" access="read-write" scope="instance" name="_nextId" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="addBoth">
        <parameters>
          <parameter name="cb" type="Function|Object" usage="required"/>
          <parameter name="cbfn" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Add the same function as both a callback and an errback as the next element on the callback sequence.This is useful for code that you want to guarantee to run, e.g. a finalizer.</description>
      </method>
      <method scope="instance" name="addCallback">
        <parameters>
          <parameter name="cb" type="Function|Object" usage="required"/>
          <parameter name="cbfn" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Add a single callback to the end of the callback sequence.</description>
      </method>
      <method scope="instance" name="addCallbacks">
        <parameters>
          <parameter name="cb" type="Object" usage="required"/>
          <parameter name="eb" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Add separate callback and errback to the end of the callback sequence.</description>
      </method>
      <method scope="instance" name="addErrback">
        <parameters>
          <parameter name="cb" type="Object" usage="required"/>
          <parameter name="cbfn" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Add a single callback to the end of the callback sequence.</description>
      </method>
      <method scope="instance" name="callback">
        <parameters>
          <parameter name="res" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Begin the callback sequence with a non-error value.</description>
      </method>
      <method scope="instance" name="cancel">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Cancels a Deferred that has not yet received a value, or is waiting on another Deferred as its value.</description>
      </method>
      <method scope="instance" name="errback">
        <parameters>
          <parameter name="res" type="Error" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Begin the callback sequence with an error result.</description>
      </method>
      <method scope="instance" name="_check" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_fire" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Used internally to exhaust the callback sequence when a result is available.</description>
      </method>
      <method scope="instance" name="_resback" visibility="internal">
        <parameters>
          <parameter name="res" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>The private primitive that means either callback or errback</description>
      </method>
    </methods>
  </class>
  <class type="dojo.DeferredList" superclass="dojo.Deferred">
    <description>Provides event handling for a group of Deferred objects.</description>
    <constructors>
      <constructor scope="instance">
        <description>Provides event handling for a group of Deferred objects.</description>
        <parameters>
          <parameter name="list" type="Array" usage="required">
            <description>The list of deferreds to be synchronizied with this DeferredList</description>
          </parameter>
          <parameter name="fireOnOneCallback" type="Boolean" usage="optional">
            <description>Will cause the DeferredLists callback to be fired as soon as any of the deferreds in its list have been fired instead of waiting until the entire list has finished fireonOneErrback: Will cause the errback to fire upon any of the deferreds errback</description>
          </parameter>
          <parameter name="fireOnOneErrback" type="Boolean" usage="optional">
            <description>will fire before all the deferreds as appropriate</description>
          </parameter>
          <parameter name="consumeErrors" type="Boolean" usage="optional"/>
          <parameter name="canceller" type="Function" usage="optional">
            <description>A deferred canceller function, see dojo.Deferred</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="A" access="read-write" scope="instance" name="canceller">
        <description>deferred canceller function, see dojo.Deferred</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="chain"/>
      <property type="Object" access="read-write" scope="instance" name="consumeErrors"/>
      <property type="Object" access="read-write" scope="instance" name="finishedCount"/>
      <property type="Object" access="read-write" scope="instance" name="fired"/>
      <property type="Will" access="read-write" scope="instance" name="fireOnOneCallback">
        <description>cause the DeferredLists callback to be fired as soon as any of the deferreds in its list have been fired instead of waiting until the entire list has finished fireonOneErrback: Will cause the errback to fire upon any of the deferreds errback</description>
      </property>
      <property type="will" access="read-write" scope="instance" name="fireOnOneErrback">
        <description>fire before all the deferreds as appropriate</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="id"/>
      <property type="The" access="read-write" scope="instance" name="list">
        <description>list of deferreds to be synchronizied with this DeferredList</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="list.length"/>
      <property type="Object" access="read-write" scope="instance" name="paused"/>
      <property type="Object" access="read-write" scope="instance" name="resultList"/>
      <property type="Object" access="read-write" scope="instance" name="results"/>
      <property type="Object" access="read-write" scope="instance" name="silentlyCancelled"/>
    </properties>
    <methods>
      <method scope="instance" name="gatherResults">
        <parameters>
          <parameter name="deferredList" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Gathers the results of the deferreds for packaging as the parameters to the Deferred Lists' callback</description>
      </method>
      <method scope="instance" name="_cbDeferred" visibility="internal">
        <parameters>
          <parameter name="index" type="Object" usage="required"/>
          <parameter name="succeeded" type="Object" usage="required"/>
          <parameter name="result" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>The DeferredLists' callback handler</description>
      </method>
    </methods>
  </class>
  <class type="dojo.dnd" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_defaultCreatorNodes" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_manager" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_validNodes" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_validOverflow" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="V_TRIGGER_AUTOSCROLL"/>
      <property type="Object" access="read-write" scope="static" name="H_TRIGGER_AUTOSCROLL"/>
      <property type="Object" access="read-write" scope="static" name="V_AUTOSCROLL_VALUE"/>
      <property type="Object" access="read-write" scope="static" name="H_AUTOSCROLL_VALUE"/>
      <property type="Object" access="read-write" scope="static" name="autoscroll"/>
      <property type="Object" access="read-write" scope="static" name="_empty" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_copyKey" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_uniqueId" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="common"/>
      <property type="Object" access="read-write" scope="static" name="constrainedMover"/>
      <property type="Object" access="read-write" scope="static" name="boxConstrainedMover"/>
      <property type="Object" access="read-write" scope="static" name="parentConstrainedMover"/>
    </properties>
    <methods>
      <method scope="static" name="_createNode" visibility="internal">
        <parameters>
          <parameter name="tag" type="String" usage="required">
            <description>a tag name or empty for SPAN</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Function"/>
        </return-types>
        <description>returns a function, which creates an element of given tag (SPAN by default) and sets its innerHTML to given text</description>
      </method>
      <method scope="static" name="_createTrTd" visibility="internal">
        <parameters>
          <parameter name="text" type="String" usage="required">
            <description>a text for TD</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Node"/>
        </return-types>
        <description>creates a TR/TD structure with given text as an innerHTML of TD</description>
      </method>
      <method scope="static" name="_createSpan" visibility="internal">
        <parameters>
          <parameter name="text" type="String" usage="required">
            <description>a text for SPAN</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Node"/>
        </return-types>
        <description>creates a SPAN element with given text as its innerHTML</description>
      </method>
      <method scope="static" name="_defaultCreator" visibility="internal">
        <parameters>
          <parameter name="node" type="Node" usage="required">
            <description>a container node</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Function"/>
        </return-types>
        <description>takes a container node, and returns an appropriate creator function</description>
      </method>
      <method scope="static" name="manager">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>returns the current DnD manager, creates one if it is not created yet</description>
      </method>
      <method scope="static" name="getViewport">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>returns a viewport size (visible part of the window)</description>
      </method>
      <method scope="static" name="autoScroll">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>onmousemove event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>a handler for onmousemove event, which scrolls the window, if necesary</description>
      </method>
      <method scope="static" name="autoScrollNodes">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>onmousemove event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>a handler for onmousemove event, which scrolls the first avaialble Dom element, it falls back to dojo.dnd.autoScroll()</description>
      </method>
      <method scope="static" name="getCopyKeyState">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>abstracts away the difference between selection on Mac and PC, and returns the state of the &amp;quot;copy&amp;quot; key to be pressed.</description>
      </method>
      <method scope="static" name="getUniqueId">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>returns a unique string for use with any DOM element</description>
      </method>
      <method scope="static" name="isFormElement">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>returns true, if user clicked on a form element</description>
      </method>
    </methods>
  </class>
  <class type="dojo.dnd.Avatar" superclass="Object">
    <description>an object, which represents transferred DnD items visually manager: Object: a DnD manager object</description>
    <constructors>
      <constructor scope="instance">
        <description>an object, which represents transferred DnD items visually manager: Object: a DnD manager object</description>
        <parameters>
          <parameter name="manager" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="manager"/>
      <property type="Object" access="read-write" scope="instance" name="node"/>
    </properties>
    <methods>
      <method scope="instance" name="construct">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>a constructor function; it is separate so it can be (dynamically) overwritten in case of need</description>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>a desctructor for the avatar, called to remove all references so it can be garbage-collected</description>
      </method>
      <method scope="instance" name="update">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>updates the avatar to reflect the current DnD state</description>
      </method>
      <method scope="instance" name="_generateText" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>generates a proper text to reflect copying or moving of items</description>
      </method>
    </methods>
  </class>
  <class type="dojo.dnd.Container" superclass="Object">
    <description>a constructor of the Container</description>
    <constructors>
      <constructor scope="instance">
        <description>a constructor of the Container</description>
        <parameters>
          <parameter name="node" type="Node" usage="required">
            <description>node or node's id to build the container on</description>
          </parameter>
          <parameter name="params" type="Object" usage="required">
            <description>a dict of parameters, recognized parameters are:</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="containerState"/>
      <property type="Object" access="read-write" scope="instance" name="current"/>
      <property type="Object" access="read-write" scope="instance" name="defaultCreator"/>
      <property type="Object" access="read-write" scope="instance" name="events"/>
      <property type="Object" access="read-write" scope="instance" name="map"/>
      <property type="Node" access="read-write" scope="instance" name="node">
        <description>node or node's id to build the container on</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="parent"/>
      <property type="Boolean" access="read-write" scope="instance" name="skipForm">
        <description>don't start the drag operation, if clicked on form elements _skipStartup: Boolean: skip startup(), which collects children, for deferred initialization (this is used in the markup mode)</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="skipForm">
        <description>don't start the drag operation, if clicked on form elements _skipStartup: Boolean: skip startup(), which collects children, for deferred initialization (this is used in the markup mode)</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="creator">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>a creator function, which takes a data item, and returns an object like that: {node: newNode, data: usedData, type: arrayOfStrings}</description>
      </method>
      <method scope="instance" name="clearItems">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>removes all data items from the map</description>
      </method>
      <method scope="instance" name="creator">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>a creator function, which takes a data item, and returns an object like that: {node: newNode, data: usedData, type: arrayOfStrings}</description>
      </method>
      <method scope="instance" name="delItem">
        <parameters>
          <parameter name="key" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>removes a data item from the map by its key (id)</description>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>prepares the object to be garbage-collected</description>
      </method>
      <method scope="instance" name="forInItems">
        <parameters>
          <parameter name="f" type="Function" usage="required"/>
          <parameter name="o" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>iterates over a data map skipping members, which are present in the empty object (IE and/or 3rd-party libraries).</description>
      </method>
      <method scope="instance" name="getAllNodes">
        <return-types>
          <return-type type="NodeList"/>
        </return-types>
        <description>returns a list (an array) of all valid child nodes</description>
      </method>
      <method scope="instance" name="getItem">
        <parameters>
          <parameter name="key" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>returns a data item by its key (id)</description>
      </method>
      <method scope="instance" name="insertNodes">
        <parameters>
          <parameter name="data" type="Array" usage="required">
            <description>a list of data items, which should be processed by the creator function</description>
          </parameter>
          <parameter name="before" type="Boolean" usage="required">
            <description>insert before the anchor, if true, and after the anchor otherwise</description>
          </parameter>
          <parameter name="anchor" type="Node" usage="required">
            <description>the anchor node to be used as a point of insertion</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>inserts an array of new nodes before/after an anchor node</description>
      </method>
      <method scope="instance" name="markupFactory">
        <parameters>
          <parameter name="params" type="Object" usage="required"/>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onMouseOut">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onmouseout</description>
      </method>
      <method scope="instance" name="onMouseOver">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onmouseover</description>
      </method>
      <method scope="instance" name="onOutEvent">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>this function is called once, when mouse is out of our container</description>
      </method>
      <method scope="instance" name="onOverEvent">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>this function is called once, when mouse is over our container</description>
      </method>
      <method scope="instance" name="onSelectStart">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onselectevent and ondragevent</description>
      </method>
      <method scope="instance" name="setItem">
        <parameters>
          <parameter name="key" type="String" usage="required"/>
          <parameter name="data" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>associates a data item with its key (id)</description>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>collects valid child items and populate the map  set up the real parent node</description>
      </method>
      <method scope="instance" name="_addItemClass" visibility="internal">
        <parameters>
          <parameter name="node" type="Node" usage="required">
            <description>a node</description>
          </parameter>
          <parameter name="type" type="String" usage="required">
            <description>a variable suffix for a class name</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>adds a class with prefix &amp;quot;dojoDndItem&amp;quot;</description>
      </method>
      <method scope="instance" name="_changeState" visibility="internal">
        <parameters>
          <parameter name="type" type="String" usage="required">
            <description>a name of the state to change</description>
          </parameter>
          <parameter name="newState" type="String" usage="required">
            <description>new state</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>changes a named state to new state value</description>
      </method>
      <method scope="instance" name="_getChildByEvent" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>a mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>gets a child, which is under the mouse at the moment, or null</description>
      </method>
      <method scope="instance" name="_normalizedCreator" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="hint" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>adds all necessary data to the output of the user-supplied creator function</description>
      </method>
      <method scope="instance" name="_removeItemClass" visibility="internal">
        <parameters>
          <parameter name="node" type="Node" usage="required">
            <description>a node</description>
          </parameter>
          <parameter name="type" type="String" usage="required">
            <description>a variable suffix for a class name</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>removes a class with prefix &amp;quot;dojoDndItem&amp;quot;</description>
      </method>
    </methods>
  </class>
  <class type="dojo.dnd.Manager" superclass="Object">
    <description>the manager of DnD operations (usually a singleton)</description>
    <constructors>
      <constructor scope="instance">
        <description>the manager of DnD operations (usually a singleton)</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="avatar"/>
      <property type="Object" access="read-write" scope="instance" name="canDropFlag"/>
      <property type="Object" access="read-write" scope="instance" name="copy"/>
      <property type="Object" access="read-write" scope="instance" name="events"/>
      <property type="Object" access="read-write" scope="instance" name="nodes"/>
      <property type="Object" access="read-write" scope="instance" name="source"/>
      <property type="Object" access="read-write" scope="instance" name="source.mouseButton"/>
      <property type="Object" access="read-write" scope="instance" name="target"/>
      <property type="Object" access="read-write" scope="instance" name="OFFSET_X"/>
      <property type="Object" access="read-write" scope="instance" name="OFFSET_Y"/>
    </properties>
    <methods>
      <method scope="instance" name="canDrop">
        <parameters>
          <parameter name="flag" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called to notify if the current target can accept items</description>
      </method>
      <method scope="instance" name="makeAvatar">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>makes the avatar, it is separate to be overwritten dynamically, if needed</description>
      </method>
      <method scope="instance" name="onKeyDown">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>keyboard event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onkeydown: watching for CTRL for copy/move status, watching for ESCAPE to cancel the drag</description>
      </method>
      <method scope="instance" name="onKeyUp">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>keyboard event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onkeyup, watching for CTRL for copy/move status</description>
      </method>
      <method scope="instance" name="onMouseMove">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onmousemove</description>
      </method>
      <method scope="instance" name="onMouseUp">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onmouseup</description>
      </method>
      <method scope="instance" name="outSource">
        <parameters>
          <parameter name="source" type="Object" usage="required">
            <description>the reporter</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called when a source detected a mouse-out conditiion</description>
      </method>
      <method scope="instance" name="overSource">
        <parameters>
          <parameter name="source" type="Object" usage="required">
            <description>the reporter</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called when a source detected a mouse-over conditiion</description>
      </method>
      <method scope="instance" name="startDrag">
        <parameters>
          <parameter name="source" type="Object" usage="required">
            <description>the source which provides items</description>
          </parameter>
          <parameter name="nodes" type="Array" usage="required">
            <description>the list of transferred items</description>
          </parameter>
          <parameter name="copy" type="Boolean" usage="required">
            <description>copy items, if true, move items otherwise</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called to initiate the DnD operation</description>
      </method>
      <method scope="instance" name="stopDrag">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>stop the DnD in progress</description>
      </method>
      <method scope="instance" name="updateAvatar">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>updates the avatar, it is separate to be overwritten dynamically, if needed</description>
      </method>
      <method scope="instance" name="_setCopyStatus" visibility="internal">
        <parameters>
          <parameter name="copy" type="Boolean" usage="required">
            <description>the copy status</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>changes the copy status</description>
      </method>
    </methods>
  </class>
  <class type="dojo.dnd.move" superclass="Object">
    <methods>
      <method scope="static" name="boxConstrainedMover">
        <parameters>
          <parameter name="box" type="Object" usage="required">
            <description>a constraint box (l, t, w, h)</description>
          </parameter>
          <parameter name="within" type="Boolean" usage="required">
            <description>if true, constraints the whole dragged object withtin the rectangle, otherwise the constraint is applied to the left-top corner</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>a specialization of dojo.dnd.constrainedMover, which constrains to the specified box</description>
      </method>
      <method scope="static" name="parentConstrainedMover">
        <parameters>
          <parameter name="area" type="String" usage="required">
            <description>&amp;quot;margin&amp;quot; to constrain within the parent's margin box, &amp;quot;border&amp;quot; for the border box, &amp;quot;padding&amp;quot; for the padding box, and &amp;quot;content&amp;quot; for the content box; &amp;quot;content&amp;quot; is the default value.</description>
          </parameter>
          <parameter name="within" type="Boolean" usage="required">
            <description>if true, constraints the whole dragged object withtin the rectangle, otherwise the constraint is applied to the left-top corner</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>a specialization of dojo.dnd.constrainedMover, which constrains to the parent node</description>
      </method>
    </methods>
  </class>
  <class type="dojo.dnd.Moveable" superclass="Object">
    <description>an object, which makes a node moveable</description>
    <constructors>
      <constructor scope="instance">
        <description>an object, which makes a node moveable</description>
        <parameters>
          <parameter name="node" type="Node" usage="required">
            <description>a node (or node's id) to be moved</description>
          </parameter>
          <parameter name="params" type="Object" usage="required">
            <description>an optional object with additional parameters; following parameters are recognized:</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Number" access="read-write" scope="instance" name="delay">
        <description>delay move by this number of pixels</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="events"/>
      <property type="Node" access="read-write" scope="instance" name="handle">
        <description>a node (or node's id), which is used as a mouse handle if omitted, the node itself is used as a handle</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="mover">
        <description>a constructor of custom Mover</description>
      </property>
      <property type="Node" access="read-write" scope="instance" name="node">
        <description>a node (or node's id) to be moved</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="skip">
        <description>skip move of form elements</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_lastX" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_lastY" visibility="internal"/>
      <property type="Number" access="read-write" scope="instance" name="delay">
        <description>delay move by this number of pixels</description>
      </property>
      <property type="Node" access="read-write" scope="instance" name="handle">
        <description>a node (or node's id), which is used as a mouse handle if omitted, the node itself is used as a handle</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="skip">
        <description>skip move of form elements</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>stops watching for possible move, deletes all references, so the object can be garbage-collected</description>
      </method>
      <method scope="instance" name="markupFactory">
        <parameters>
          <parameter name="params" type="Object" usage="required"/>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onFirstMove">
        <parameters>
          <parameter name="mover" type="dojo.dnd.Mover" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called during the very first move notification, can be used to initialize coordinates, can be overwritten.  default implementation does nothing</description>
      </method>
      <method scope="instance" name="onMouseDown">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onmousedown, creates a Mover for the node</description>
      </method>
      <method scope="instance" name="onMouseMove">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onmousemove, used only for delayed drags</description>
      </method>
      <method scope="instance" name="onMouseUp">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onmouseup, used only for delayed delayed drags</description>
      </method>
      <method scope="instance" name="onMove">
        <parameters>
          <parameter name="mover" type="dojo.dnd.Mover" usage="required"/>
          <parameter name="leftTop" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called during every move notification, should actually move the node, can be overwritten.</description>
      </method>
      <method scope="instance" name="onMoved">
        <parameters>
          <parameter name="mover" type="dojo.dnd.Mover" usage="required"/>
          <parameter name="leftTop" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called after every incremental move, can be overwritten.  default implementation does nothing</description>
      </method>
      <method scope="instance" name="onMoveStart">
        <parameters>
          <parameter name="mover" type="dojo.dnd.Mover" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called before every move operation</description>
      </method>
      <method scope="instance" name="onMoveStop">
        <parameters>
          <parameter name="mover" type="dojo.dnd.Mover" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called after every move operation</description>
      </method>
      <method scope="instance" name="onMoving">
        <parameters>
          <parameter name="mover" type="dojo.dnd.Mover" usage="required"/>
          <parameter name="leftTop" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called before every incremental move, can be overwritten.  default implementation does nothing</description>
      </method>
      <method scope="instance" name="onSelectStart">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onselectevent and ondragevent</description>
      </method>
    </methods>
  </class>
  <class type="dojo.dnd.Mover" superclass="Object">
    <description>an object, which makes a node follow the mouse, used as a default mover, and as a base class for custom movers</description>
    <constructors>
      <constructor scope="instance">
        <description>an object, which makes a node follow the mouse, used as a default mover, and as a base class for custom movers</description>
        <parameters>
          <parameter name="node" type="Node" usage="required">
            <description>a node (or node's id) to be moved</description>
          </parameter>
          <parameter name="e" type="Event" usage="required">
            <description>a mouse event, which started the move; only pageX and pageY properties are used</description>
          </parameter>
          <parameter name="host" type="Object" usage="optional">
            <description>object which implements the functionality of the move, and defines proper events (onMoveStart and onMoveStop)</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="events"/>
      <property type="Object" access="read-write" scope="instance" name="host">
        <description>object which implements the functionality of the move, and defines proper events (onMoveStart and onMoveStop)</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="marginBox"/>
      <property type="Object" access="read-write" scope="instance" name="marginBox.l"/>
      <property type="Object" access="read-write" scope="instance" name="marginBox.t"/>
      <property type="Object" access="read-write" scope="instance" name="mouseButton"/>
      <property type="Node" access="read-write" scope="instance" name="node">
        <description>a node (or node's id) to be moved</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>stops the move, deletes all references, so the object can be garbage-collected</description>
      </method>
      <method scope="instance" name="onFirstMove">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>makes the node absolute; it is meant to be called only once</description>
      </method>
      <method scope="instance" name="onMouseMove">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onmousemove</description>
      </method>
      <method scope="instance" name="onMouseUp">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojo.dnd.Selector" superclass="dojo.dnd.Container">
    <description>a constructor of the Selector</description>
    <constructors>
      <constructor scope="instance">
        <description>a constructor of the Selector</description>
        <parameters>
          <parameter name="node" type="Node" usage="required">
            <description>node or node's id to build the selector on</description>
          </parameter>
          <parameter name="params" type="Object" usage="required">
            <description>a dict of parameters, recognized parameters are:</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="anchor"/>
      <property type="Object" access="read-write" scope="instance" name="onmousemoveEvent"/>
      <property type="Object" access="read-write" scope="instance" name="selection"/>
      <property type="Object" access="read-write" scope="instance" name="simpleSelection"/>
      <property type="Boolean" access="read-write" scope="instance" name="singular">
        <description>allows selection of only one element, if true the rest of parameters are passed to the container</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_normalizedCreator" visibility="internal"/>
      <property type="Boolean" access="read-write" scope="instance" name="singular">
        <description>allows selection of only one element, if true the rest of parameters are passed to the container</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="deleteSelectedNodes">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>deletes all selected items</description>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>prepares the object to be garbage-collected</description>
      </method>
      <method scope="instance" name="getSelectedNodes">
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>returns a list (an array) of selected nodes</description>
      </method>
      <method scope="instance" name="markupFactory">
        <parameters>
          <parameter name="params" type="Object" usage="required"/>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onMouseDown">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onmousedown</description>
      </method>
      <method scope="instance" name="onMouseMove">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onmousemove</description>
      </method>
      <method scope="instance" name="onMouseUp">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onmouseup</description>
      </method>
      <method scope="instance" name="onOutEvent">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>this function is called once, when mouse is out of our container</description>
      </method>
      <method scope="instance" name="onOverEvent">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>this function is called once, when mouse is over our container</description>
      </method>
      <method scope="instance" name="selectAll">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>selects all items</description>
      </method>
      <method scope="instance" name="selectNone">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>unselects all items</description>
      </method>
      <method scope="instance" name="_removeAnchor" visibility="internal">
        <return-types>
          <return-type type="self"/>
        </return-types>
      </method>
      <method scope="instance" name="_removeSelection" visibility="internal">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>unselects all items</description>
      </method>
    </methods>
  </class>
  <class type="dojo.dnd.Source" superclass="dojo.dnd.Selector">
    <description>a constructor of the Source</description>
    <constructors>
      <constructor scope="instance">
        <description>a constructor of the Source</description>
        <parameters>
          <parameter name="node" type="DOMNode|String" usage="required">
            <description>or node's id to build the source on</description>
          </parameter>
          <parameter name="params" type="dojo.dnd.__SourceArgs" usage="optional">
            <description>any property of this class may be configured via the params object which is mixed-in to the `dojo.dnd.Source` instance</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="accept"/>
      <property type="Object" access="read-write" scope="instance" name="before"/>
      <property type="Object" access="read-write" scope="instance" name="current"/>
      <property type="Object" access="read-write" scope="instance" name="isDragging"/>
      <property type="Object" access="read-write" scope="instance" name="mouseButton"/>
      <property type="Object" access="read-write" scope="instance" name="mouseDown"/>
      <property type="Object" access="read-write" scope="instance" name="sourceState"/>
      <property type="Object" access="read-write" scope="instance" name="targetAnchor"/>
      <property type="Object" access="read-write" scope="instance" name="targetBox"/>
      <property type="Object" access="read-write" scope="instance" name="targetState"/>
      <property type="Object" access="read-write" scope="instance" name="topics"/>
      <property type="Object" access="read-write" scope="instance" name="_normalizedCreator" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="accept"/>
      <property type="Object" access="read-write" scope="instance" name="copyOnly"/>
      <property type="Object" access="read-write" scope="instance" name="horizontal"/>
      <property type="Object" access="read-write" scope="instance" name="isSource"/>
      <property type="Object" access="read-write" scope="instance" name="skipForm"/>
      <property type="Object" access="read-write" scope="instance" name="withHandles"/>
    </properties>
    <methods>
      <method scope="instance" name="checkAcceptance">
        <parameters>
          <parameter name="source" type="Object" usage="required">
            <description>the source which provides items</description>
          </parameter>
          <parameter name="nodes" type="Array" usage="required">
            <description>the list of transferred items</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>checks, if the target can accept nodes from this source</description>
      </method>
      <method scope="instance" name="copyState">
        <parameters>
          <parameter name="keyPressed" type="Boolean" usage="required">
            <description>the &amp;quot;copy&amp;quot; was pressed</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Returns true, if we need to copy items, false to move. It is separated to be overwritten dynamically, if needed.</description>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>prepares the object to be garbage-collected</description>
      </method>
      <method scope="instance" name="markupFactory">
        <parameters>
          <parameter name="params" type="Object" usage="required"/>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onDndCancel">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>topic event processor for /dnd/cancel, called to cancel the DnD operation</description>
      </method>
      <method scope="instance" name="onDndSourceOver">
        <parameters>
          <parameter name="source" type="Object" usage="required">
            <description>the source which has the mouse over it</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>topic event processor for /dnd/source/over, called when detected a current source</description>
      </method>
      <method scope="instance" name="onDndStart">
        <parameters>
          <parameter name="source" type="Object" usage="required">
            <description>the source which provides items</description>
          </parameter>
          <parameter name="nodes" type="Array" usage="required">
            <description>the list of transferred items</description>
          </parameter>
          <parameter name="copy" type="Boolean" usage="required">
            <description>copy items, if true, move items otherwise</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>topic event processor for /dnd/start, called to initiate the DnD operation</description>
      </method>
      <method scope="instance" name="onMouseDown">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onmousedown</description>
      </method>
      <method scope="instance" name="onMouseMove">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onmousemove</description>
      </method>
      <method scope="instance" name="onMouseUp">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onmouseup</description>
      </method>
      <method scope="instance" name="onOutEvent">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>this function is called once, when mouse is out of our container</description>
      </method>
      <method scope="instance" name="onOverEvent">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>this function is called once, when mouse is over our container</description>
      </method>
      <method scope="instance" name="_legalMouseDown" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>checks if user clicked on &amp;quot;approved&amp;quot; items</description>
      </method>
      <method scope="instance" name="_markDndStatus" visibility="internal">
        <parameters>
          <parameter name="copy" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>changes source's state based on &amp;quot;copy&amp;quot; status</description>
      </method>
      <method scope="instance" name="_markTargetAnchor" visibility="internal">
        <parameters>
          <parameter name="before" type="Boolean" usage="required">
            <description>insert before, if true, after otherwise</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>assigns a class to the current target anchor based on &amp;quot;before&amp;quot; status</description>
      </method>
      <method scope="instance" name="_unmarkTargetAnchor" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>removes a class of the current target anchor based on &amp;quot;before&amp;quot; status</description>
      </method>
    </methods>
  </class>
  <class type="dojo.dnd.Target" superclass="dojo.dnd.Source">
    <description>a constructor of the Target --- see the Source constructor for details</description>
    <constructors>
      <constructor scope="instance">
        <description>a constructor of the Target --- see the Source constructor for details</description>
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
          <parameter name="params" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="isSource"/>
    </properties>
    <methods>
      <method scope="instance" name="markupFactory">
        <parameters>
          <parameter name="params" type="Object" usage="required"/>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojo.dnd.TimedMoveable" superclass="dojo.dnd.Moveable">
    <description>an object, which makes a node moveable with a timer</description>
    <constructors>
      <constructor scope="instance">
        <description>an object, which makes a node moveable with a timer</description>
        <parameters>
          <parameter name="node" type="Node" usage="required">
            <description>a node (or node's id) to be moved</description>
          </parameter>
          <parameter name="params" type="Object" usage="required">
            <description>an optional object with additional parameters. See dojo.dnd.Moveable for details on general parameters. Following parameters are specific for this class:</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Number" access="read-write" scope="instance" name="timeout">
        <description>delay move by this number of ms accumulating position changes during the timeout  sanitize parameters</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="timeout">
        <description>delay move by this number of ms accumulating position changes during the timeout  sanitize parameters</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="markupFactory">
        <parameters>
          <parameter name="params" type="Object" usage="required"/>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onMove">
        <parameters>
          <parameter name="mover" type="dojo.dnd.Mover" usage="required"/>
          <parameter name="leftTop" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onMoveStop">
        <parameters>
          <parameter name="mover" type="dojo.dnd.Mover" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojo.dnd.__SourceArgs" superclass="Object">
    <description>a dict of parameters for DnD Source configuration. Note that any property on Source elements may be configured, but this is the short-list</description>
    <constructors>
      <constructor scope="instance">
        <description>a dict of parameters for DnD Source configuration. Note that any property on Source elements may be configured, but this is the short-list</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="accept">
        <description>list of accepted types (text strings) for a target; defaults to [&amp;quot;text&amp;quot;]</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="copyOnly">
        <description>always copy items, if true, use a state of Ctrl key otherwise</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="horizontal">
        <description>a horizontal container, if true, vertical otherwise or when omitted</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="isSource">
        <description>can be used as a DnD source. Defaults to true.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="withHandles">
        <description>allows dragging only by handles</description>
      </property>
    </properties>
  </class>
  <class type="dojo.fx" superclass="Object">
    <description>Effects library on top of Base animations</description>
    <methods>
      <method scope="static" name="wipeIn">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Returns an animation that will expand the node defined in 'args' object from it's current height to it's natural height (with no scrollbar). Node must have no margin/border/padding.</description>
      </method>
      <method scope="static" name="wipeOut">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Returns an animation that will shrink node defined in &amp;quot;args&amp;quot; from it's current height to 1px, and then hide it.</description>
      </method>
      <method scope="static" name="slideTo">
        <parameters>
          <parameter name="args" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Returns an animation that will slide &amp;quot;node&amp;quot; defined in args Object from its current position to the position defined by (args.left, args.top).</description>
      </method>
      <method scope="static" name="chain">
        <parameters>
          <parameter name="animations" type="dojo._Animation[]" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Chain a list of dojo._Animation s to run in sequence</description>
      </method>
      <method scope="static" name="combine">
        <parameters>
          <parameter name="animations" type="dojo._Animation[]" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Combine a list of dojo._Animation s to run in parallel</description>
      </method>
    </methods>
  </class>
  <class type="dojo.fx.Toggler" superclass="Object">
    <description>class constructor for an animation toggler. It accepts a packed set of arguments about what type of animation to use in each direction, duration, etc.</description>
    <constructors>
      <constructor scope="instance">
        <description>class constructor for an animation toggler. It accepts a packed set of arguments about what type of animation to use in each direction, duration, etc.</description>
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Time" access="read-write" scope="instance" name="hideDuration">
        <description>in milliseconds to run the hide Animation</description>
      </property>
      <property type="DomNode" access="read-write" scope="instance" name="node">
        <description>the node to toggle</description>
      </property>
      <property type="Time" access="read-write" scope="instance" name="showDuration">
        <description>in milliseconds to run the show Animation</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_hideAnim" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_hideArgs" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_isHiding" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_isShowing" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_showAnim" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_showArgs" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="hide">
        <parameters>
          <parameter name="delay" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Toggle the node to hidden</description>
      </method>
      <method scope="instance" name="hideFunc">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>The function that returns the dojo._Animation to hide the node</description>
      </method>
      <method scope="instance" name="show">
        <parameters>
          <parameter name="delay" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Toggle the node to showing</description>
      </method>
      <method scope="instance" name="showFunc">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>The function that returns the dojo._Animation to show the node</description>
      </method>
    </methods>
  </class>
  <class type="dojo.i18n" superclass="Object">
    <description>Utility classes to enable loading of resources for internationalization (i18n)</description>
    <methods>
      <method scope="static" name="getLocalization">
        <parameters>
          <parameter name="packageName" type="String" usage="required">
            <description>package which is associated with this resource</description>
          </parameter>
          <parameter name="bundleName" type="String" usage="required">
            <description>the base filename of the resource bundle (without the &amp;quot;.js&amp;quot; suffix)</description>
          </parameter>
          <parameter name="locale" type="String" usage="optional">
            <description>the variant to load (optional).  By default, the locale defined by the host environment: dojo.locale</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns an Object containing the localization for a given resource bundle in a package, matching the specified locale.</description>
      </method>
      <method scope="static" name="normalizeLocale">
        <parameters>
          <parameter name="locale" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Returns canonical form of locale, as used by Dojo.</description>
      </method>
      <method scope="static" name="_requireLocalization" visibility="internal">
        <parameters>
          <parameter name="moduleName" type="String" usage="required"/>
          <parameter name="bundleName" type="String" usage="required"/>
          <parameter name="locale" type="String" usage="optional"/>
          <parameter name="availableFlatLocales" type="String" usage="optional"/>
          <parameter name="m" type="Object" usage="required"/>
          <parameter name="b" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.requireLocalization()</description>
      </method>
      <method scope="static" name="_searchLocalePath" visibility="internal">
        <parameters>
          <parameter name="locale" type="String" usage="required"/>
          <parameter name="down" type="Boolean" usage="required"/>
          <parameter name="searchFunc" type="Function" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>A helper method to assist in searching for locale-based resources. Will iterate through the variants of a particular locale, either up or down, executing a callback function.  For example, &amp;quot;en-us&amp;quot; and true will try &amp;quot;en-us&amp;quot; followed by &amp;quot;en&amp;quot; and finally &amp;quot;ROOT&amp;quot;.</description>
      </method>
      <method scope="static" name="_preloadLocalizations" visibility="internal">
        <parameters>
          <parameter name="bundlePrefix" type="String" usage="required"/>
          <parameter name="localesGenerated" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Load built, flattened resource bundles, if available for all locales used in the page. Only called by built layer files.</description>
      </method>
    </methods>
  </class>
  <class type="dojo.io" superclass="Object"/>
  <class type="dojo.io.iframe" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="doc"/>
      <property type="Object" access="read-write" scope="static" name="_currentDfd" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_dfdQueue" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_iframeName" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="create">
        <parameters>
          <parameter name="fname" type="String" usage="required">
            <description>The name of the iframe. Used for the name attribute on the iframe.</description>
          </parameter>
          <parameter name="onloadstr" type="String" usage="required">
            <description>A string of JavaScript that will be executed when the content in the iframe loads.</description>
          </parameter>
          <parameter name="uri" type="String" usage="optional">
            <description>The value of the src attribute on the iframe element. If a value is not given, then dojo/resources/blank.html will be used.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Creates a hidden iframe in the page. Used mostly for IO transports.  You do not need to call this to start a dojo.io.iframe request. Just call send().</description>
      </method>
      <method scope="static" name="setSrc">
        <parameters>
          <parameter name="iframe" type="DOMNode" usage="required"/>
          <parameter name="src" type="String" usage="required"/>
          <parameter name="replace" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets the URL that is loaded in an IFrame. The replace parameter indicates whether location.replace() should be used when changing the location of the iframe.</description>
      </method>
      <method scope="static" name="_iframeOnload" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojo.io.script" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_deadScripts" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_counter" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="get">
        <parameters>
          <parameter name="args" type="dojo.io.script.__ioArgs" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sends a get request using a dynamically created script tag.</description>
      </method>
      <method scope="static" name="attach">
        <parameters>
          <parameter name="id" type="String" usage="required"/>
          <parameter name="url" type="String" usage="required"/>
          <parameter name="frameDocument" type="Document" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>creates a new &amp;lt;script&amp;gt; tag pointing to the specified URL and adds it to the document.</description>
      </method>
      <method scope="static" name="remove">
        <parameters>
          <parameter name="id" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>removes the script element with the given id.</description>
      </method>
      <method scope="static" name="_makeScriptDeferred" visibility="internal">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo.Deferred"/>
        </return-types>
        <description>sets up a Deferred object for an IO request.</description>
      </method>
      <method scope="static" name="_deferredCancel" visibility="internal">
        <parameters>
          <parameter name="dfd" type="Deferred" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>canceller function for dojo._ioSetArgs call.</description>
      </method>
      <method scope="static" name="_deferredOk" visibility="internal">
        <parameters>
          <parameter name="dfd" type="Deferred" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>okHandler function for dojo._ioSetArgs call.</description>
      </method>
      <method scope="static" name="_deferredError" visibility="internal">
        <parameters>
          <parameter name="error" type="Error" usage="required"/>
          <parameter name="dfd" type="Deferred" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>errHandler function for dojo._ioSetArgs call.</description>
      </method>
      <method scope="static" name="_validCheck" visibility="internal">
        <parameters>
          <parameter name="dfd" type="Deferred" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>inflight check function to see if dfd is still valid.</description>
      </method>
      <method scope="static" name="_ioCheck" visibility="internal">
        <parameters>
          <parameter name="dfd" type="Deferred" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>inflight check function to see if IO finished.</description>
      </method>
      <method scope="static" name="_resHandle" visibility="internal">
        <parameters>
          <parameter name="dfd" type="Deferred" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>inflight function to handle a completed response.</description>
      </method>
      <method scope="static" name="__ioArgs" visibility="internal">
        <parameters>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>All the properties described in the dojo.__ioArgs type, apply to this type as well, EXCEPT &amp;quot;handleAs&amp;quot;. It is not applicable to dojo.io.script.get() calls, since it is implied by the usage of &amp;quot;callbackParamName&amp;quot; (response will be a JSONP call returning JSON) or &amp;quot;checkString&amp;quot; (response is pure JavaScript defined in the body of the script that was attached). The following additional properties are allowed for dojo.io.script.get(): callbackParamName: String The URL parameter name that indicates the JSONP callback string. For instance, when using Yahoo JSONP calls it is normally, callbackParamName: &amp;quot;callback&amp;quot;. For AOL JSONP calls it is normally callbackParamName: &amp;quot;c&amp;quot;. checkString: String A string of JavaScript that when evaluated like so: &amp;quot;typeof(&amp;quot; + checkString + &amp;quot;) != 'undefined'&amp;quot; being true means that the script fetched has been loaded. Do not use this if doing a JSONP type of call (use callbackParamName instead). frameDoc: Document. The Document object for a child iframe. If this is passed in, the script will be attached to that document. This can be helpful in some comet long-polling scenarios with Firefox and Opera.</description>
      </method>
    </methods>
  </class>
  <class type="dojo.NodeList" superclass="Object">
    <description>dojo.NodeList is as subclass of Array which adds syntactic sugar for chaining, common iteration operations, animation, and node manipulation. NodeLists are most often returned as the result of dojo.query() calls.</description>
    <constructors>
      <constructor scope="instance">
        <description>dojo.NodeList is as subclass of Array which adds syntactic sugar for chaining, common iteration operations, animation, and node manipulation. NodeLists are most often returned as the result of dojo.query() calls.</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="addClass"/>
      <property type="Object" access="read-write" scope="instance" name="attr"/>
      <property type="Object" access="read-write" scope="instance" name="connect"/>
      <property type="Object" access="read-write" scope="instance" name="removeClass"/>
      <property type="Object" access="read-write" scope="instance" name="style"/>
      <property type="Object" access="read-write" scope="instance" name="toggleClass"/>
      <property type="Object" access="read-write" scope="static" name="_wrap" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="addContent">
        <parameters>
          <parameter name="content" type="String" usage="required">
            <description>the HTML in string format to add at position to every item</description>
          </parameter>
          <parameter name="position" type="String|Number" usage="optional">
            <description>can be one of: * &amp;quot;last&amp;quot;||&amp;quot;end&amp;quot; (default) * &amp;quot;first||&amp;quot;start&amp;quot; * &amp;quot;before&amp;quot; * &amp;quot;after&amp;quot; or an offset in the childNodes property</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojo.NodeList"/>
        </return-types>
        <description>add a node or some HTML as a string to every item in the list. Returns the original list.</description>
      </method>
      <method scope="instance" name="adopt">
        <parameters>
          <parameter name="queryOrListOrNode" type="String|Array|DomNode" usage="required">
            <description>a DOM node or a query string or a query result. Represents the nodes to be adopted relative to the first element of this NodeList.</description>
          </parameter>
          <parameter name="position" type="String" usage="optional">
            <description>can be one of: * &amp;quot;last&amp;quot;||&amp;quot;end&amp;quot; (default) * &amp;quot;first||&amp;quot;start&amp;quot; * &amp;quot;before&amp;quot; * &amp;quot;after&amp;quot; or an offset in the childNodes property</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojo.NodeList"/>
        </return-types>
        <description>places any/all elements in queryOrListOrNode at a</description>
      </method>
      <method scope="instance" name="anim">
        <parameters>
          <parameter name="properties" type="Object" usage="required">
            <description>the properties to animate</description>
          </parameter>
          <parameter name="duration" type="Number" usage="optional">
            <description>Optional. The time to run the animations for</description>
          </parameter>
          <parameter name="easing" type="Function" usage="optional">
            <description>Optional. The easing function to use.</description>
          </parameter>
          <parameter name="onEnd" type="Function" usage="optional">
            <description>A function to be called when the animation ends</description>
          </parameter>
          <parameter name="delay" type="Number" usage="optional">
            <description>how long to delay playing the returned animation</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Animate one or more CSS properties for all nodes in this list. The returned animation object will already be playing when it is returned. See the docs for `dojo.anim` for full details.</description>
      </method>
      <method scope="instance" name="animateProperty">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>see dojo.animateProperty(). Animate all elements of this NodeList across the properties specified.</description>
      </method>
      <method scope="instance" name="concat">
        <parameters>
          <parameter name="item" type="Object" usage="optional">
            <description>Any number of optional parameters may be passed in to be spliced into the NodeList</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns a new NodeList comprised of items in this NodeList as well as items passed in as parameters</description>
      </method>
      <method scope="instance" name="coords">
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Returns the box objects all elements in a node list as an Array (*not* a NodeList)</description>
      </method>
      <method scope="instance" name="dtl">
        <parameters>
          <parameter name="template" type="Object" usage="required"/>
          <parameter name="context" type="args" usage="required">
            <description>dojox.dtl.__StringArgs|String The template string or location dojox.dtl.__ObjectArgs|Object The context object or location</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="empty">
        <return-types>
          <return-type type="dojo.NodeList"/>
        </return-types>
        <description>clears all content from each node in the list</description>
      </method>
      <method scope="instance" name="every">
        <parameters>
          <parameter name="callback" type="Function" usage="required"/>
          <parameter name="thisObject" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>see `dojo.every()` and: &amp;lt;http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:every&amp;gt; Takes the same structure of arguments and returns as dojo.every() with the caveat that the passed array is implicitly this NodeList</description>
      </method>
      <method scope="instance" name="fadeIn">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>fade in all elements of this NodeList. Returns an instance of dojo._Animation</description>
      </method>
      <method scope="instance" name="fadeOut">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>fade out all elements of this NodeList. Returns an instance of dojo._Animation</description>
      </method>
      <method scope="instance" name="fadeTo">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>fade all elements of the node list to a specified opacity</description>
      </method>
      <method scope="instance" name="filter">
        <parameters>
          <parameter name="simpleQuery" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo.NodeList"/>
        </return-types>
        <description>&amp;quot;masks&amp;quot; the built-in javascript filter() method to support passing a simple string filter in addition to supporting filtering function objects.</description>
      </method>
      <method scope="instance" name="forEach">
        <parameters>
          <parameter name="callback" type="Object" usage="required"/>
          <parameter name="thisObj" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo.NodeList"/>
        </return-types>
        <description>see dojo.forEach(). The primary difference is that the acted-on array is implicitly this NodeList</description>
      </method>
      <method scope="instance" name="highlight">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>highlight all elements of the node list. Returns an instance of dojo._Animation</description>
      </method>
      <method scope="instance" name="indexOf">
        <parameters>
          <parameter name="value" type="Object" usage="required">
            <description>The value to search for.</description>
          </parameter>
          <parameter name="fromIndex" type="Number" usage="optional">
            <description>The loction to start searching from. Optional. Defaults to 0.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>see dojo.indexOf(). The primary difference is that the acted-on array is implicitly this NodeList</description>
      </method>
      <method scope="instance" name="instantiate">
        <parameters>
          <parameter name="declaredClass" type="String|Object" usage="required"/>
          <parameter name="properties" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Create a new instance of a specified class, using the specified properties and each node in the nodeList as a srcNodeRef</description>
      </method>
      <method scope="instance" name="lastIndexOf">
        <parameters>
          <parameter name="value" type="Object" usage="required">
            <description>The value to search for.</description>
          </parameter>
          <parameter name="fromIndex" type="Number" usage="optional">
            <description>The loction to start searching from. Optional. Defaults to 0.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>see dojo.lastIndexOf(). The primary difference is that the acted-on array is implicitly this NodeList</description>
      </method>
      <method scope="instance" name="map">
        <parameters>
          <parameter name="func" type="Function" usage="required"/>
          <parameter name="obj" type="Function" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="dojo.NodeList"/>
        </return-types>
        <description>see dojo.map(). The primary difference is that the acted-on array is implicitly this NodeList and the return is a dojo.NodeList (a subclass of Array)</description>
      </method>
      <method scope="instance" name="orphan">
        <parameters>
          <parameter name="simpleFilter" type="String" usage="optional">
            <description>single-expression CSS filter return: `dojo.NodeList` the orpahned elements</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojo.NodeList"/>
        </return-types>
        <description>removes elements in this list that match the simple filter from their parents and returns them as a new NodeList.</description>
      </method>
      <method scope="instance" name="place">
        <parameters>
          <parameter name="queryOrNode" type="String|Node" usage="required">
            <description>may be a string representing any valid CSS3 selector or a DOM node. In the selector case, only the first matching element will be used for relative positioning.</description>
          </parameter>
          <parameter name="position" type="String" usage="required">
            <description>can be one of: * &amp;quot;last&amp;quot;||&amp;quot;end&amp;quot; (default) * &amp;quot;first||&amp;quot;start&amp;quot; * &amp;quot;before&amp;quot; * &amp;quot;after&amp;quot; or an offset in the childNodes property</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojo.NodeList"/>
        </return-types>
        <description>places elements of this node list relative to the first element matched by queryOrNode. Returns the original NodeList.</description>
      </method>
      <method scope="instance" name="query">
        <parameters>
          <parameter name="queryStr" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo.NodeList"/>
        </return-types>
        <description>Returns a new, flattened NodeList. Elements of the new list satisfy the passed query but use elements of the current NodeList as query roots.</description>
      </method>
      <method scope="instance" name="sizeTo">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>size all elements of this NodeList. Returns an instance of dojo._Animation</description>
      </method>
      <method scope="instance" name="slice">
        <parameters>
          <parameter name="begin" type="Number" usage="required">
            <description>Can be a positive or negative integer, with positive integers noting the offset to begin at, and negative integers denoting an offset from the end (i.e., to the left of the end)</description>
          </parameter>
          <parameter name="end" type="Number" usage="optional">
            <description>Optional parameter to describe what position relative to the NodeList's zero index to end the slice at. Like begin, can be positive or negative.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns a new NodeList, maintaining this one in place</description>
      </method>
      <method scope="instance" name="slideBy">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>slide all elements of this NodeList. Returns an instance of dojo._Animation</description>
      </method>
      <method scope="instance" name="slideTo">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>slide all elements of the node list to the specified place. Returns an instance of dojo._Animation</description>
      </method>
      <method scope="instance" name="some">
        <parameters>
          <parameter name="callback" type="Function" usage="required"/>
          <parameter name="thisObject" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>see dojo.some() and: http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:some Takes the same structure of arguments and returns as dojo.some() with the caveat that the passed array is implicitly this NodeList</description>
      </method>
      <method scope="instance" name="splice">
        <parameters>
          <parameter name="index" type="Number" usage="required">
            <description>begin can be a positive or negative integer, with positive integers noting the offset to begin at, and negative integers denoting an offset from the end (i.e., to the left of the end)</description>
          </parameter>
          <parameter name="howmany" type="Number" usage="optional">
            <description>Optional parameter to describe what position relative to the NodeList's zero index to end the slice at. Like begin, can be positive or negative.</description>
          </parameter>
          <parameter name="item" type="Object" usage="optional">
            <description>Any number of optional parameters may be passed in to be spliced into the NodeList</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns a new NodeList, manipulating this NodeList based on the arguments passed, potentially splicing in new elements at an offset, optionally deleting elements</description>
      </method>
      <method scope="instance" name="wipeIn">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>wipe in all elements of this NodeList. Returns an instance of dojo._Animation</description>
      </method>
      <method scope="instance" name="wipeOut">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>wipe out all elements of this NodeList. Returns an instance of dojo._Animation</description>
      </method>
      <method scope="instance" name="wipeTo">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Wipe all elements of the NodeList to a specified width: or height:</description>
      </method>
      <method scope="instance" name="_anim" visibility="internal">
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
          <parameter name="method" type="Object" usage="required"/>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojo.number" superclass="Object">
    <description>localized formatting and parsing routines for Number</description>
    <properties>
      <property type="Object" access="read-write" scope="static" name="_numberPatternRE" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="format">
        <parameters>
          <parameter name="value" type="Number" usage="required">
            <description>the number to be formatted.  If not a valid JavaScript number, return null.</description>
          </parameter>
          <parameter name="options" type="dojo.number.__FormatOptions" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="null"/>
          <return-type type="String"/>
        </return-types>
        <description>Format a Number as a String, using locale-specific settings</description>
      </method>
      <method scope="static" name="_applyPattern" visibility="internal">
        <parameters>
          <parameter name="value" type="Number" usage="required">
            <description>the number to be formatted.</description>
          </parameter>
          <parameter name="pattern" type="String" usage="required">
            <description>a pattern string as described by [unicode.org TR35](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)</description>
          </parameter>
          <parameter name="options" type="dojo.number.__FormatOptions" usage="optional">
            <description>_applyPattern is usually called via `dojo.number.format()` which populates an extra property in the options parameter, &amp;quot;customs&amp;quot;. The customs object specifies group and decimal parameters if set.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Apply pattern to format value as a string using options. Gives no consideration to local customs.</description>
      </method>
      <method scope="static" name="round">
        <parameters>
          <parameter name="value" type="Number" usage="required">
            <description>the number to round</description>
          </parameter>
          <parameter name="places" type="Number" usage="required">
            <description>the number of decimal places where rounding takes place</description>
          </parameter>
          <parameter name="multiple" type="Number" usage="optional">
            <description>rounds next place to nearest multiple</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Rounds the number at the given number of places</description>
      </method>
      <method scope="static" name="_formatAbsolute" visibility="internal">
        <parameters>
          <parameter name="value" type="Number" usage="required">
            <description>the number to be formatted, ignores sign</description>
          </parameter>
          <parameter name="pattern" type="String" usage="required">
            <description>the number portion of a pattern (e.g. `#,##0.00`)</description>
          </parameter>
          <parameter name="options" type="dojo.number.__FormatAbsoluteOptions" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Apply numeric pattern to absolute value using options. Gives no consideration to local customs.</description>
      </method>
      <method scope="static" name="regexp">
        <parameters>
          <parameter name="options" type="dojo.number.__RegexpOptions" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Builds the regular needed to parse a number</description>
      </method>
      <method scope="static" name="_parseInfo" visibility="internal">
        <parameters>
          <parameter name="options" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="parse">
        <parameters>
          <parameter name="expression" type="String" usage="required">
            <description>A string representation of a Number</description>
          </parameter>
          <parameter name="options" type="dojo.number.__ParseOptions" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="NaN"/>
          <return-type type="Number"/>
        </return-types>
        <description>Convert a properly formatted string to a primitive Number, using locale-specific settings.</description>
      </method>
      <method scope="static" name="_realNumberRegexp" visibility="internal">
        <parameters>
          <parameter name="flags" type="dojo.number.__RealNumberRegexpFlags" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Builds a regular expression to match a real number in exponential notation</description>
      </method>
      <method scope="static" name="_integerRegexp" visibility="internal">
        <parameters>
          <parameter name="flags" type="dojo.number.__IntegerRegexpFlags" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Builds a regular expression that matches an integer</description>
      </method>
    </methods>
  </class>
  <class type="dojo.number.__FormatAbsoluteOptions" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="decimal">
        <description>the decimal separator</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="group">
        <description>the group separator</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="places">
        <description>number of decimal places</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="round">
        <description>5 rounds to nearest .5; 0 rounds to nearest whole (default). -1 means don't round.</description>
      </property>
    </properties>
  </class>
  <class type="dojo.number.__FormatOptions" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="currency">
        <description>an [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code, a three letter sequence like &amp;quot;USD&amp;quot;</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="locale">
        <description>override the locale used to determine formatting rules</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="pattern">
        <description>override [formatting pattern](http://www.unicode.org/reports/tr35/#Number_Format_Patterns) with this string</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="places">
        <description>fixed number of decimal places to show.  This overrides any information in the provided pattern.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="round">
        <description>5 rounds to nearest .5; 0 rounds to nearest whole (default). -1 means don't round.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="symbol">
        <description>localized currency symbol</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="type">
        <description>choose a format type based on the locale from the following: decimal, scientific, percent, currency. decimal by default.</description>
      </property>
    </properties>
  </class>
  <class type="dojo.number.__IntegerRegexpFlags" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="groupSize">
        <description>group size between separators</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="groupSize2">
        <description>second grouping, where separators 2..n have a different interval than the first separator (for India)</description>
      </property>
      <property type="For" access="read-write" scope="instance" name="separator">
        <description>more than one symbol use an array, e.g. `[&amp;quot;,&amp;quot;, &amp;quot;&amp;quot;]`, makes ',' optional.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="signed">
        <description>The leading plus-or-minus sign. Can be true, false, or `[true,false]`. Default is `[true, false]`, (i.e. will match if it is signed or unsigned).</description>
      </property>
    </properties>
  </class>
  <class type="dojo.number.__ParseOptions" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="currency">
        <description>object with currency information</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="locale">
        <description>override the locale used to determine formatting rules</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="pattern">
        <description>override pattern with this string.  Default is provided based on</description>
      </property>
      <property type="parsing" access="read-write" scope="instance" name="strict">
        <description>false by default</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="type">
        <description>choose a format type based on the locale from the following: decimal, scientific, percent, currency. decimal by default.</description>
      </property>
    </properties>
  </class>
  <class type="dojo.number.__RealNumberRegexpFlags" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="decimal">
        <description>A string for the character used as the decimal point.  Default is &amp;quot;.&amp;quot;.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="eSigned">
        <description>The leading plus-or-minus sign on the exponent.  Can be true, false, or [true, false].  Default is [true, false], (i.e. will match if it is signed or unsigned).  flags in regexp.integer can be applied.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="exponent">
        <description>Express in exponential notation.  Can be true, false, or [true, false]. Default is [true, false], (i.e. will match if the exponential part is present are not).</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="fractional">
        <description>Whether decimal places are allowed.  Can be true, false, or [true, false].  Default is [true, false]</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="places">
        <description>The integer number of decimal places or a range given as &amp;quot;n,m&amp;quot;.  If not given, the decimal part is optional and the number of places is unlimited.</description>
      </property>
    </properties>
  </class>
  <class type="dojo.number.__RegexpOptions" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="locale">
        <description>override the locale used to determine formatting rules</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="pattern">
        <description>override pattern with this string.  Default is provided based on</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="places">
        <description>number of decimal places to accept: Infinity, a positive number, or a range &amp;quot;n,m&amp;quot;.  By default, defined by pattern.</description>
      </property>
      <property type="parsing" access="read-write" scope="instance" name="strict">
        <description>false by default</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="type">
        <description>choose a format type based on the locale from the following: decimal, scientific, percent, currency. decimal by default.</description>
      </property>
    </properties>
  </class>
  <class type="dojo.parser" superclass="Object">
    <description>The Dom/Widget parsing package</description>
    <constructors>
      <constructor scope="instance">
        <description>The Dom/Widget parsing package</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="static" name="_anon" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_anonCtr" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="instantiate">
        <parameters>
          <parameter name="nodes" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Takes array of nodes, and turns them into class instances and potentially calls a layout method to allow them to connect with any children</description>
      </method>
      <method scope="instance" name="parse">
        <parameters>
          <parameter name="rootNode" type="DomNode" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Search specified node (or root node) recursively for class instances, and instantiate them Searches for dojoType=&amp;quot;qualified.class.name&amp;quot;</description>
      </method>
      <method scope="instance" name="_functionFromScript" visibility="internal">
        <parameters>
          <parameter name="script" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_nameAnonFunc" visibility="internal">
        <parameters>
          <parameter name="anonFuncPtr" type="Function" usage="required"/>
          <parameter name="thisObj" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Creates a reference to anonFuncPtr in thisObj with a completely unique name. The new name is returned as a String.</description>
      </method>
    </methods>
  </class>
  <class type="dojo.regexp" superclass="Object">
    <description>Regular expressions and Builder resources</description>
    <methods>
      <method scope="static" name="escapeString">
        <parameters>
          <parameter name="str" type="String" usage="required"/>
          <parameter name="except" type="String" usage="optional">
            <description>a String with special characters to be left unescaped</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Adds escape sequences for special characters in regular expressions</description>
      </method>
      <method scope="static" name="buildGroupRE">
        <parameters>
          <parameter name="arr" type="Object|Array" usage="required">
            <description>A single value or an array of values.</description>
          </parameter>
          <parameter name="re" type="Function" usage="required">
            <description>A function. Takes one parameter and converts it to a regular expression.</description>
          </parameter>
          <parameter name="nonCapture" type="Boolean" usage="optional">
            <description>If true, uses non-capturing match, otherwise matches are retained by regular expression. Defaults to false</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Builds a regular expression that groups subexpressions</description>
      </method>
      <method scope="static" name="group">
        <parameters>
          <parameter name="expression" type="String" usage="required"/>
          <parameter name="nonCapture" type="Boolean" usage="optional">
            <description>If true, uses non-capturing match, otherwise matches are retained by regular expression.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>adds group match to expression</description>
      </method>
    </methods>
  </class>
  <class type="dojo.rpc" superclass="Object">
    <description>Dojo remote-procedure-call resources</description>
  </class>
  <class type="dojo.rpc.JsonpService" superclass="dojo.rpc.RpcService">
    <description>Generic JSONP service.  Minimally extends RpcService to allow easy definition of nearly any JSONP style service. Example SMD files exist in dojox.data</description>
    <constructors>
      <constructor scope="instance">
        <description>Generic JSONP service.  Minimally extends RpcService to allow easy definition of nearly any JSONP style service. Example SMD files exist in dojox.data</description>
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
          <parameter name="requiredArgs" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="strictArgChecks"/>
    </properties>
    <methods>
      <method scope="instance" name="bind">
        <parameters>
          <parameter name="method" type="String" usage="required">
            <description>The name of the method we are calling</description>
          </parameter>
          <parameter name="parameters" type="Array" usage="required">
            <description>The parameters we are passing off to the method</description>
          </parameter>
          <parameter name="deferredRequestHandler" type="deferred" usage="required">
            <description>The Deferred object for this particular request</description>
          </parameter>
          <parameter name="url" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>JSONP bind method. Takes remote method, parameters, deferred, and a url, calls createRequest to make a JSON-RPC envelope and passes that off with bind.</description>
      </method>
      <method scope="instance" name="createRequest">
        <parameters>
          <parameter name="parameters" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>create a JSONP req params: array The array of parameters for this request;</description>
      </method>
    </methods>
  </class>
  <class type="dojo.rpc.JsonService" superclass="dojo.rpc.RpcService">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="args" type="Object" usage="required">
            <description>Takes a number of properties as kwArgs for defining the service.  It also accepts a string.  When passed a string, it is treated as a url from which it should synchronously retrieve an smd file.  Otherwise it is a kwArgs object.  It accepts serviceUrl, to manually define a url for the rpc service allowing the rpc system to be used without an smd definition. strictArgChecks forces the system to verify that the # of arguments provided in a call matches those defined in the smd.  smdString allows a developer to pass a jsonString directly, which will be converted into an object or alternatively smdObject is accepts an smdObject directly.</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="bustCache"/>
      <property type="Object" access="read-write" scope="instance" name="contentType"/>
      <property type="Object" access="read-write" scope="instance" name="lastSubmissionId"/>
    </properties>
    <methods>
      <method scope="instance" name="bind">
        <parameters>
          <parameter name="method" type="String" usage="required">
            <description>The name of the method we are calling</description>
          </parameter>
          <parameter name="parameters" type="Array" usage="required">
            <description>The parameters we are passing off to the method</description>
          </parameter>
          <parameter name="deferredRequestHandler" type="deferred" usage="required">
            <description>The Deferred object for this particular request</description>
          </parameter>
          <parameter name="url" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>JSON-RPC bind method. Takes remote method, parameters, deferred, and a url, calls createRequest to make a JSON-RPC envelope and passes that off with bind.</description>
      </method>
      <method scope="instance" name="callRemote">
        <parameters>
          <parameter name="method" type="String" usage="required">
            <description>the name of the remote method you want to call.</description>
          </parameter>
          <parameter name="params" type="Array" usage="required">
            <description>of parameters to pass to method</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>call an arbitrary remote method without requiring it to be predefined with SMD</description>
      </method>
      <method scope="instance" name="createRequest">
        <parameters>
          <parameter name="method" type="String" usage="required">
            <description>The name of the method we are creating the requst for</description>
          </parameter>
          <parameter name="params" type="Array" usage="required">
            <description>The array of parameters for this request;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>create a JSON-RPC envelope for the request</description>
      </method>
      <method scope="instance" name="parseResults">
        <parameters>
          <parameter name="obj" type="anything" usage="required">
            <description>Object Object containing envelope of data we recieve from the server</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>parse the result envelope and pass the results back to the callback function</description>
      </method>
    </methods>
  </class>
  <class type="dojo.rpc.RpcService" superclass="Object">
    <description>Take a string as a url to retrieve an smd or an object that is an smd or partial smd to use as a definition for the service</description>
    <constructors>
      <constructor scope="instance">
        <description>Take a string as a url to retrieve an smd or an object that is an smd or partial smd to use as a definition for the service</description>
        <parameters>
          <parameter name="args" type="Object" usage="required">
            <description>Takes a number of properties as kwArgs for defining the service.  It also accepts a string.  When passed a string, it is treated as a url from which it should synchronously retrieve an smd file.  Otherwise it is a kwArgs object.  It accepts serviceUrl, to manually define a url for the rpc service allowing the rpc system to be used without an smd definition. strictArgChecks forces the system to verify that the # of arguments provided in a call matches those defined in the smd.  smdString allows a developer to pass a jsonString directly, which will be converted into an object or alternatively smdObject is accepts an smdObject directly.</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="required"/>
      <property type="Object" access="read-write" scope="instance" name="serviceUrl"/>
      <property type="Object" access="read-write" scope="instance" name="smd"/>
      <property type="Object" access="read-write" scope="instance" name="strictArgChecks"/>
      <property type="Object" access="read-write" scope="instance" name="timeout"/>
      <property type="Object" access="read-write" scope="instance" name="serviceUrl"/>
      <property type="Object" access="read-write" scope="instance" name="strictArgChecks"/>
    </properties>
    <methods>
      <method scope="instance" name="errorCallback">
        <parameters>
          <parameter name="deferredRequestHandler" type="dojo.Deferred" usage="required">
            <description>Deferred The deferred object handling a request.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>create callback that calls the Deferres errback method</description>
      </method>
      <method scope="instance" name="generateMethod">
        <parameters>
          <parameter name="method" type="String" usage="required">
            <description>The name of the method we are generating</description>
          </parameter>
          <parameter name="parameters" type="Array" usage="required">
            <description>the array of parameters for this call.</description>
          </parameter>
          <parameter name="url" type="String" usage="required">
            <description>the service url for this call</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>generate the local bind methods for the remote object</description>
      </method>
      <method scope="instance" name="parseResults">
        <parameters>
          <parameter name="obj" type="Object" usage="required">
            <description>that is the return results from an rpc request</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>parse the results coming back from an rpc request.  this base implementation, just returns the full object subclasses should parse and only return the actual results</description>
      </method>
      <method scope="instance" name="processSmd">
        <parameters>
          <parameter name="object" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>callback method for reciept of a smd object.  Parse the smd and generate functions based on the description</description>
      </method>
      <method scope="instance" name="resultCallback">
        <parameters>
          <parameter name="deferredRequestHandler" type="dojo.Deferred" usage="required">
            <description>Deferred The deferred object handling a request.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>create callback that calls the Deferred's callback method</description>
      </method>
    </methods>
  </class>
  <class type="dojo.string" superclass="Object">
    <description>String utilities for Dojo</description>
    <methods>
      <method scope="static" name="pad">
        <parameters>
          <parameter name="text" type="String" usage="required">
            <description>the string to pad</description>
          </parameter>
          <parameter name="size" type="Number" usage="required">
            <description>length to provide padding</description>
          </parameter>
          <parameter name="ch" type="String" usage="optional">
            <description>character to pad, defaults to '0'</description>
          </parameter>
          <parameter name="end" type="Boolean" usage="optional">
            <description>adds padding at the end if true, otherwise pads at start</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Pad a string to guarantee that it is at least `size` length by filling with the character `ch` at either the start or end of the string. Pads at the start, by default.</description>
      </method>
      <method scope="static" name="substitute">
        <parameters>
          <parameter name="template" type="String" usage="required">
            <description>a string with expressions in the form `${key}` to be replaced or `${key:format}` which specifies a format function.</description>
          </parameter>
          <parameter name="map" type="Object|Array" usage="required">
            <description>hash to search for substitutions</description>
          </parameter>
          <parameter name="transform" type="Function" usage="optional">
            <description>a function to process all parameters before substitution takes place, e.g. dojo.string.encodeXML</description>
          </parameter>
          <parameter name="thisObject" type="Object" usage="optional">
            <description>where to look for optional format function; default to the global namespace</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Performs parameterized substitutions on a string. Throws an exception if any parameter is unmatched.</description>
      </method>
      <method scope="static" name="trim">
        <parameters>
          <parameter name="str" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>trims whitespaces from both sides of the string</description>
      </method>
    </methods>
  </class>
  <class type="dojo._Animation" superclass="Object">
    <description>A generic animation class that fires callbacks into its handlers object at various states. Nearly all dojo animation functions return an instance of this method, usually without calling the .play() method beforehand. Therefore, you will likely need to call .play() on instances of dojo._Animation when one is returned.</description>
    <constructors>
      <constructor scope="instance">
        <description>A generic animation class that fires callbacks into its handlers object at various states. Nearly all dojo animation functions return an instance of this method, usually without calling the .play() method beforehand. Therefore, you will likely need to call .play() on instances of dojo._Animation when one is returned.</description>
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="dojo._Line|Array" access="read-write" scope="instance" name="curve">
        <description>A two element array of start and end values, or a dojo._Line instance to be used in the Animation.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_active" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_paused" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_percent" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_timer" visibility="internal"/>
      <property type="events" access="read-write" scope="instance" name="beforeBegin">
        <description>Event Synthetic event fired before a dojo._Animation begins playing (synchronous)</description>
      </property>
      <property type="dojo._Line|Array" access="read-write" scope="instance" name="curve">
        <description>A two element array of start and end values, or a dojo._Line instance to be used in the Animation.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="delay">
        <description>The time in milliseconds to wait before starting animation after it has been .play()'ed</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="duration">
        <description>The time in milliseonds the animation will take to run</description>
      </property>
      <property type="Event" access="read-write" scope="instance" name="onAnimate">
        <description>Synthetic event fired at each interval of a dojo._Animation</description>
      </property>
      <property type="Event" access="read-write" scope="instance" name="onBegin">
        <description>Synthetic event fired as a dojo._Animation begins playing (useful?)</description>
      </property>
      <property type="Event" access="read-write" scope="instance" name="onEnd">
        <description>Synthetic event fired after the final frame of a dojo._Animation</description>
      </property>
      <property type="Event" access="read-write" scope="instance" name="onPause">
        <description>Synthetic event fired when a dojo._Animation is paused</description>
      </property>
      <property type="Event" access="read-write" scope="instance" name="onPlay">
        <description>Synthetic event fired any time a dojo._Animation is play()'ed</description>
      </property>
      <property type="Event" access="read-write" scope="instance" name="onStop">
        <description>Synthetic event fires when a dojo._Animation is stopped</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="rate">
        <description>the time in milliseconds to wait before advancing to next frame (used as a fps timer: rate/1000 = fps)</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="repeat">
        <description>The number of times to loop the animation</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_percent" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_startRepeatCount" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="easing">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>A Function to adjust the acceleration (or deceleration) of the progress across a dojo._Line</description>
      </method>
      <method scope="instance" name="gotoPercent">
        <parameters>
          <parameter name="percent" type="Number" usage="required">
            <description>A percentage in decimal notation (between and including 0.0 and 1.0).</description>
          </parameter>
          <parameter name="andPlay" type="Boolean" usage="optional">
            <description>If true, play the animation after setting the progress.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Sets the progress of the animation.</description>
      </method>
      <method scope="instance" name="pause">
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Pauses a running animation.</description>
      </method>
      <method scope="instance" name="play">
        <parameters>
          <parameter name="delay" type="Number" usage="optional">
            <description>How many milliseconds to delay before starting.</description>
          </parameter>
          <parameter name="gotoStart" type="Boolean" usage="optional">
            <description>If true, starts the animation from the beginning; otherwise, starts it from its current position.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Start the animation.</description>
      </method>
      <method scope="instance" name="status">
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Returns a string token representation of the status of the animation, one of: &amp;quot;paused&amp;quot;, &amp;quot;playing&amp;quot;, &amp;quot;stopped&amp;quot;</description>
      </method>
      <method scope="instance" name="stop">
        <parameters>
          <parameter name="gotoEnd" type="Boolean" usage="optional">
            <description>If true, the animation will end.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Stops a running animation.</description>
      </method>
      <method scope="instance" name="_cycle" visibility="internal">
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
      </method>
      <method scope="instance" name="_fire" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required">
            <description>The event to fire.</description>
          </parameter>
          <parameter name="args" type="Array" usage="optional">
            <description>The arguments to pass to the event.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Convenience function.  Fire event &amp;quot;evt&amp;quot; and pass it the arguments specified in &amp;quot;args&amp;quot;.</description>
      </method>
      <method scope="instance" name="_play" visibility="internal">
        <parameters>
          <parameter name="gotoStart" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
      </method>
      <method scope="instance" name="_startTimer" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_stopTimer" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojo._contentHandlers" superclass="Object">
    <methods>
      <method scope="static" name="json-comment-optional">
        <parameters>
          <parameter name="xhr" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="text">
        <parameters>
          <parameter name="xhr" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="json">
        <parameters>
          <parameter name="xhr" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="json-comment-filtered">
        <parameters>
          <parameter name="xhr" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="javascript">
        <parameters>
          <parameter name="xhr" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="xml">
        <parameters>
          <parameter name="xhr" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="DOMDocument"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojo._event_listener" superclass="Object">
    <methods>
      <method scope="static" name="_fixCallback" visibility="internal">
        <parameters>
          <parameter name="fp" type="Object" usage="required"/>
          <parameter name="name" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="add">
        <parameters>
          <parameter name="node" type="DOMNode" usage="required"/>
          <parameter name="name" type="String" usage="required"/>
          <parameter name="fp" type="Function" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Handle"/>
        </return-types>
      </method>
      <method scope="static" name="remove">
        <parameters>
          <parameter name="node" type="DOMNode" usage="required">
            <description>DOM node to attach the event to</description>
          </parameter>
          <parameter name="event" type="String" usage="required">
            <description>the name of the handler to remove the function from</description>
          </parameter>
          <parameter name="handle" type="Handle" usage="required">
            <description>the handle returned from add</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>clobbers the listener from the node</description>
      </method>
      <method scope="static" name="_normalizeEventName" visibility="internal">
        <parameters>
          <parameter name="name" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_fixEvent" visibility="internal">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
          <parameter name="sender" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_setKeyChar" visibility="internal">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojo._ie_listener" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="handlers"/>
    </properties>
    <methods>
      <method scope="static" name="add">
        <parameters>
          <parameter name="source" type="Object" usage="required"/>
          <parameter name="method" type="String" usage="required"/>
          <parameter name="listener" type="Function" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Handle"/>
        </return-types>
      </method>
      <method scope="static" name="remove">
        <parameters>
          <parameter name="source" type="Object" usage="required"/>
          <parameter name="method" type="String" usage="required"/>
          <parameter name="handle" type="Handle" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojo._Line" superclass="Object">
    <description>dojo._Line is the object used to generate values from a start value to an end value</description>
    <constructors>
      <constructor scope="instance">
        <description>dojo._Line is the object used to generate values from a start value to an end value</description>
        <parameters>
          <parameter name="start" type="Number" usage="required">
            <description>Beginning value for range</description>
          </parameter>
          <parameter name="end" type="Number" usage="required">
            <description>Ending value for range</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Number" access="read-write" scope="instance" name="end">
        <description>Ending value for range</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="start">
        <description>Beginning value for range</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="n" type="Number" usage="required">
            <description>a floating point number greater than 0 and less than 1</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>returns the point on the line</description>
      </method>
    </methods>
  </class>
  <class type="dojo._listener" superclass="Object">
    <methods>
      <method scope="static" name="getDispatcher">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="add">
        <parameters>
          <parameter name="source" type="Object" usage="required"/>
          <parameter name="method" type="String" usage="required"/>
          <parameter name="listener" type="Function" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Handle"/>
        </return-types>
      </method>
      <method scope="static" name="remove">
        <parameters>
          <parameter name="source" type="Object" usage="required"/>
          <parameter name="method" type="String" usage="required"/>
          <parameter name="handle" type="Handle" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojo._Url" superclass="Object">
    <description>Constructor to create an object representing a URL. It is marked as private, since we might consider removing or simplifying it.</description>
    <constructors>
      <constructor scope="instance">
        <description>Constructor to create an object representing a URL. It is marked as private, since we might consider removing or simplifying it.</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="authority"/>
      <property type="Object" access="read-write" scope="instance" name="fragment"/>
      <property type="Object" access="read-write" scope="instance" name="host"/>
      <property type="Object" access="read-write" scope="instance" name="password"/>
      <property type="Object" access="read-write" scope="instance" name="path"/>
      <property type="Object" access="read-write" scope="instance" name="port"/>
      <property type="Object" access="read-write" scope="instance" name="query"/>
      <property type="Object" access="read-write" scope="instance" name="scheme"/>
      <property type="Object" access="read-write" scope="instance" name="uri"/>
      <property type="Object" access="read-write" scope="instance" name="user"/>
    </properties>
    <methods>
      <method scope="instance" name="toString">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojo.__AnimArgs" superclass="dojo.__FadeArgs">
    <properties>
      <property type="Object" access="read-write" scope="instance" name="properties"/>
    </properties>
  </class>
  <class type="dojo.__FadeArgs" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="node" type="DOMNode|String" usage="required">
            <description>The node referenced in the animation</description>
          </parameter>
          <parameter name="duration" type="Number" usage="optional">
            <description>Duration of the animation in milliseconds.</description>
          </parameter>
          <parameter name="easing" type="Function" usage="optional">
            <description>An easing function.</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="duration">
        <description>Duration of the animation in milliseconds.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="easing">
        <description>An easing function.</description>
      </property>
      <property type="DOMNode|String" access="read-write" scope="instance" name="node">
        <description>The node referenced in the animation</description>
      </property>
    </properties>
  </class>
  <class type="dojo.__IoArgs" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="content">
        <description>Contains properties with string values. These properties will be serialized as name1=value2 and passed in the request.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="error">
        <description>function(response, ioArgs){}. response is an Object, ioArgs is of type dojo.__IoCallbackArgs. The error function will be called in an error case.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="form">
        <description>DOM node for a form. Used to extract the form values and send to the server.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="handle">
        <description>function(response, ioArgs){}. response is an Object, ioArgs is of type dojo.__IoCallbackArgs. The handle function will be called in either the successful or error case.  For the load, error and handle functions, the ioArgs object will contain the following properties:</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="handleAs">
        <description>Acceptable values depend on the type of IO transport (see specific IO calls for more information).</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="load">
        <description>function(response, ioArgs){}. response is an Object, ioArgs is of type dojo.__IoCallbackArgs. The load function will be called on a successful response.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="preventCache">
        <description>Default is false. If true, then a &amp;quot;dojo.preventCache&amp;quot; parameter is sent in the request with a value that changes with each request (timestamp). Useful only with GET-type requests.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="timeout">
        <description>Milliseconds to wait for the response. If this time passes, the then error callbacks are called.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="url">
        <description>URL to server endpoint.</description>
      </property>
    </properties>
  </class>
  <class type="dojo.__IoCallbackArgs" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="args" type="Object" usage="required">
            <description>the original object argument to the IO call.</description>
          </parameter>
          <parameter name="xhr" type="XMLHttpRequest" usage="required">
            <description>For XMLHttpRequest calls only, the XMLHttpRequest object that was used for the request.</description>
          </parameter>
          <parameter name="url" type="String" usage="required">
            <description>The final URL used for the call. Many times it will be different than the original args.url value.</description>
          </parameter>
          <parameter name="query" type="String" usage="required">
            <description>For non-GET requests, the name1=value1&amp;amp;name2=value2 parameters sent up in the request.</description>
          </parameter>
          <parameter name="handleAs" type="String" usage="required">
            <description>The final indicator on how the response will be handled.</description>
          </parameter>
          <parameter name="id" type="String" usage="required">
            <description>For dojo.io.script calls only, the internal script ID used for the request.</description>
          </parameter>
          <parameter name="canDelete" type="Boolean" usage="required">
            <description>For dojo.io.script calls only, indicates whether the script tag that represents the request can be deleted after callbacks have been called. Used internally to know when cleanup can happen on JSONP-type requests.</description>
          </parameter>
          <parameter name="json" type="Object" usage="required">
            <description>For dojo.io.script calls only: holds the JSON response for JSONP-type requests. Used internally to hold on to the JSON responses. You should not need to access it directly -- the same object should be passed to the success callbacks directly.</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="args">
        <description>the original object argument to the IO call.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="canDelete">
        <description>For dojo.io.script calls only, indicates whether the script tag that represents the request can be deleted after callbacks have been called. Used internally to know when cleanup can happen on JSONP-type requests.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="handleAs">
        <description>The final indicator on how the response will be handled.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="id">
        <description>For dojo.io.script calls only, the internal script ID used for the request.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="json">
        <description>For dojo.io.script calls only: holds the JSON response for JSONP-type requests. Used internally to hold on to the JSON responses. You should not need to access it directly -- the same object should be passed to the success callbacks directly.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="query">
        <description>For non-GET requests, the name1=value1&amp;amp;name2=value2 parameters sent up in the request.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="url">
        <description>The final URL used for the call. Many times it will be different than the original args.url value.</description>
      </property>
      <property type="XMLHttpRequest" access="read-write" scope="instance" name="xhr">
        <description>For XMLHttpRequest calls only, the XMLHttpRequest object that was used for the request.</description>
      </property>
    </properties>
  </class>
  <class type="dojo.__XhrArgs" superclass="dojo.__IoArgs">
    <description>In addition to the properties listed for the dojo._IoArgs type, the following properties are allowed for dojo.xhr* methods.</description>
    <constructors>
      <constructor scope="instance">
        <description>In addition to the properties listed for the dojo._IoArgs type, the following properties are allowed for dojo.xhr* methods.</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="handleAs">
        <description>Acceptable values are: text (default), json, json-comment-optional, json-comment-filtered, javascript, xml</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="headers">
        <description>Additional HTTP headers to send in the request.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="sync">
        <description>false is default. Indicates whether the request should be a synchronous (blocking) request.</description>
      </property>
    </properties>
  </class>
  <class type="dojox" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="crypto">
        <description>Cryptography in JS.  DEPRECATED: use dojox.encoding instead.</description>
      </property>
      <property type="Object" access="read-write" scope="static" name="highlight">
        <description>A client-side syntax highlighting engine.</description>
      </property>
      <property type="Object" access="read-write" scope="static" name="resources"/>
      <property type="Object" access="read-write" scope="static" name="_newId" visibility="internal"/>
    </properties>
  </class>
  <class type="dojox.analytics.plugins" superclass="Object"/>
  <class type="dojox.analytics.plugins.idle" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="addData"/>
      <property type="Object" access="read-write" scope="instance" name="idle"/>
      <property type="Object" access="read-write" scope="instance" name="idleTime"/>
      <property type="Object" access="read-write" scope="instance" name="idleTimer"/>
    </properties>
    <methods>
      <method scope="instance" name="setIdle">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.analytics.plugins.mouseClick" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="addData"/>
    </properties>
    <methods>
      <method scope="instance" name="onClick">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="trimEvent">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.analytics.plugins.mouseOver" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="addData"/>
      <property type="Object" access="read-write" scope="instance" name="mouseSampleDelay"/>
      <property type="Object" access="read-write" scope="instance" name="targetProps"/>
      <property type="Object" access="read-write" scope="instance" name="watchMouse"/>
      <property type="Object" access="read-write" scope="instance" name="_lastMouseEvent" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_rateLimited" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="sampleMouse">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="toggleWatchMouse">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="trimMouseEvent">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.av" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_base" visibility="internal"/>
    </properties>
  </class>
  <class type="dojox.av.flash" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="minSupported"/>
      <property type="Object" access="read-write" scope="static" name="available"/>
      <property type="Object" access="read-write" scope="static" name="supported"/>
      <property type="Object" access="read-write" scope="static" name="version"/>
      <property type="Object" access="read-write" scope="static" name="initialized"/>
    </properties>
    <methods>
      <method scope="static" name="place">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="onInitialize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="__ie_markup__" visibility="internal">
        <parameters>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.av.quicktime" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="minSupported"/>
      <property type="Object" access="read-write" scope="static" name="available"/>
      <property type="Object" access="read-write" scope="static" name="supported"/>
      <property type="Object" access="read-write" scope="static" name="version"/>
      <property type="Object" access="read-write" scope="static" name="initialized"/>
    </properties>
    <methods>
      <method scope="static" name="onInitialize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="place">
        <parameters>
          <parameter name="node" type="DOMElement" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="QuickTimeObject"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="themes"/>
    </properties>
    <methods>
      <method scope="static" name="scaler">
        <parameters>
          <parameter name="min" type="Object" usage="required"/>
          <parameter name="max" type="Object" usage="required"/>
          <parameter name="span" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.axis2d" superclass="Object"/>
  <class type="dojox.charting.axis2d.Base" superclass="dojox.charting.Element">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="chart" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="vertical"/>
    </properties>
    <methods>
      <method scope="instance" name="calculate">
        <parameters>
          <parameter name="min" type="Object" usage="required"/>
          <parameter name="max" type="Object" usage="required"/>
          <parameter name="span" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="clear">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getOffsets">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getScaler">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="initialized">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
          <parameter name="offsets" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.axis2d.common" superclass="Object"/>
  <class type="dojox.charting.axis2d.common.createText" superclass="Object">
    <methods>
      <method scope="static" name="gfx">
        <parameters>
          <parameter name="chart" type="Object" usage="required"/>
          <parameter name="creator" type="Object" usage="required"/>
          <parameter name="x" type="Object" usage="required"/>
          <parameter name="y" type="Object" usage="required"/>
          <parameter name="align" type="Object" usage="required"/>
          <parameter name="text" type="Object" usage="required"/>
          <parameter name="font" type="Object" usage="required"/>
          <parameter name="fontColor" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="html">
        <parameters>
          <parameter name="chart" type="Object" usage="required"/>
          <parameter name="creator" type="Object" usage="required"/>
          <parameter name="x" type="Object" usage="required"/>
          <parameter name="y" type="Object" usage="required"/>
          <parameter name="align" type="Object" usage="required"/>
          <parameter name="text" type="Object" usage="required"/>
          <parameter name="font" type="Object" usage="required"/>
          <parameter name="fontColor" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.axis2d.Default" superclass="dojox.charting.axis2d.Base">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="chart" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="dirty"/>
      <property type="Object" access="read-write" scope="instance" name="labels"/>
      <property type="Object" access="read-write" scope="instance" name="opt"/>
      <property type="Object" access="read-write" scope="instance" name="scaler"/>
      <property type="Object" access="read-write" scope="instance" name="scaler.minMinorStep"/>
      <property type="Object" access="read-write" scope="instance" name="defaultParams"/>
      <property type="Object" access="read-write" scope="instance" name="optionalParams"/>
    </properties>
    <methods>
      <method scope="instance" name="calculate">
        <parameters>
          <parameter name="min" type="Object" usage="required"/>
          <parameter name="max" type="Object" usage="required"/>
          <parameter name="span" type="Object" usage="required"/>
          <parameter name="labels" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="clear">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="dependOnData">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getOffsets">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getScaler">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="initialized">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
          <parameter name="offsets" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getLabel" visibility="internal">
        <parameters>
          <parameter name="number" type="Object" usage="required"/>
          <parameter name="precision" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.Chart2D" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="axes"/>
      <property type="Object" access="read-write" scope="instance" name="coords"/>
      <property type="Object" access="read-write" scope="instance" name="dim"/>
      <property type="Object" access="read-write" scope="instance" name="dirty"/>
      <property type="Object" access="read-write" scope="instance" name="fill"/>
      <property type="Object" access="read-write" scope="instance" name="margins"/>
      <property type="Object" access="read-write" scope="instance" name="node"/>
      <property type="Object" access="read-write" scope="instance" name="offsets"/>
      <property type="Object" access="read-write" scope="instance" name="plotArea"/>
      <property type="Object" access="read-write" scope="instance" name="plots"/>
      <property type="Object" access="read-write" scope="instance" name="runs"/>
      <property type="Object" access="read-write" scope="instance" name="series"/>
      <property type="Object" access="read-write" scope="instance" name="stack"/>
      <property type="Object" access="read-write" scope="instance" name="stroke"/>
      <property type="Object" access="read-write" scope="instance" name="surface"/>
      <property type="Object" access="read-write" scope="instance" name="theme"/>
    </properties>
    <methods>
      <method scope="instance" name="addAxis">
        <parameters>
          <parameter name="name" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="addPlot">
        <parameters>
          <parameter name="name" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="addSeries">
        <parameters>
          <parameter name="name" type="Object" usage="required"/>
          <parameter name="data" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="fullRender">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getCoords">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="resize">
        <parameters>
          <parameter name="width" type="Object" usage="required"/>
          <parameter name="height" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setTheme">
        <parameters>
          <parameter name="theme" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="updateSeries">
        <parameters>
          <parameter name="name" type="Object" usage="required"/>
          <parameter name="data" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_makeClean" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_makeDirty" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.Chart3D" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
          <parameter name="lights" type="Object" usage="required"/>
          <parameter name="camera" type="Object" usage="required"/>
          <parameter name="theme" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="node"/>
      <property type="Object" access="read-write" scope="instance" name="plots"/>
      <property type="Object" access="read-write" scope="instance" name="surface"/>
      <property type="Object" access="read-write" scope="instance" name="theme"/>
      <property type="Object" access="read-write" scope="instance" name="view"/>
      <property type="Object" access="read-write" scope="instance" name="walls"/>
    </properties>
    <methods>
      <method scope="instance" name="addPlot">
        <parameters>
          <parameter name="plot" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="addWall">
        <parameters>
          <parameter name="wall" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="generate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="invalidate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="removePlot">
        <parameters>
          <parameter name="plot" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="removeWall">
        <parameters>
          <parameter name="wall" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_add" visibility="internal">
        <parameters>
          <parameter name="array" type="Object" usage="required"/>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_generatePlots" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_generateWalls" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_remove" visibility="internal">
        <parameters>
          <parameter name="array" type="Object" usage="required"/>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.Element" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="chart" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="chart"/>
      <property type="Object" access="read-write" scope="instance" name="dirty"/>
      <property type="Object" access="read-write" scope="instance" name="group"/>
      <property type="Object" access="read-write" scope="instance" name="htmlElements"/>
    </properties>
    <methods>
      <method scope="instance" name="cleanGroup">
        <parameters>
          <parameter name="creator" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="createGroup">
        <parameters>
          <parameter name="creator" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="destroyHtmlElements">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="purgeGroup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.plot2d" superclass="Object"/>
  <class type="dojox.charting.plot2d.Areas" superclass="dojox.charting.plot2d.Default">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="opt.areas"/>
      <property type="Object" access="read-write" scope="instance" name="opt.lines"/>
    </properties>
  </class>
  <class type="dojox.charting.plot2d.Bars" superclass="dojox.charting.plot2d.Base">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="chart" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="dirty"/>
      <property type="Object" access="read-write" scope="instance" name="hAxis"/>
      <property type="Object" access="read-write" scope="instance" name="opt"/>
      <property type="Object" access="read-write" scope="instance" name="series"/>
      <property type="Object" access="read-write" scope="instance" name="vAxis"/>
      <property type="Object" access="read-write" scope="instance" name="defaultParams"/>
      <property type="Object" access="read-write" scope="instance" name="optionalParams"/>
    </properties>
    <methods>
      <method scope="instance" name="calculateAxes">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
          <parameter name="offsets" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.plot2d.Base" superclass="dojox.charting.Element">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="chart" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="dirty"/>
      <property type="Object" access="read-write" scope="instance" name="series"/>
      <property type="Object" access="read-write" scope="instance" name="_hAxis" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_hScaler" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_vAxis" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_vScaler" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="addSeries">
        <parameters>
          <parameter name="run" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="calculateAxes">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="clear">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getRequiredColors">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
          <parameter name="offsets" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setAxis">
        <parameters>
          <parameter name="axis" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_calc" visibility="internal">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
          <parameter name="stats" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.plot2d.ClusteredBars" superclass="dojox.charting.plot2d.Bars">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="chart" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="dirty"/>
    </properties>
    <methods>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
          <parameter name="offsets" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.plot2d.ClusteredColumns" superclass="dojox.charting.plot2d.Columns">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="chart" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="dirty"/>
    </properties>
    <methods>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
          <parameter name="offsets" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.plot2d.Columns" superclass="dojox.charting.plot2d.Base">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="chart" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="dirty"/>
      <property type="Object" access="read-write" scope="instance" name="hAxis"/>
      <property type="Object" access="read-write" scope="instance" name="opt"/>
      <property type="Object" access="read-write" scope="instance" name="series"/>
      <property type="Object" access="read-write" scope="instance" name="vAxis"/>
      <property type="Object" access="read-write" scope="instance" name="defaultParams"/>
      <property type="Object" access="read-write" scope="instance" name="optionalParams"/>
    </properties>
    <methods>
      <method scope="instance" name="calculateAxes">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
          <parameter name="offsets" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.plot2d.common" superclass="Object">
    <methods>
      <method scope="static" name="makeStroke">
        <parameters>
          <parameter name="stroke" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="augmentColor">
        <parameters>
          <parameter name="target" type="Object" usage="required"/>
          <parameter name="color" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="augmentStroke">
        <parameters>
          <parameter name="stroke" type="Object" usage="required"/>
          <parameter name="color" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="augmentFill">
        <parameters>
          <parameter name="fill" type="Object" usage="required"/>
          <parameter name="color" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="collectSimpleStats">
        <parameters>
          <parameter name="series" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="collectStackedStats">
        <parameters>
          <parameter name="series" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.plot2d.common.defaultStats" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="hmin"/>
      <property type="Object" access="read-write" scope="static" name="hmax"/>
      <property type="Object" access="read-write" scope="static" name="vmin"/>
    </properties>
    <methods>
      <method scope="static" name="collectSimpleStats">
        <parameters>
          <parameter name="series" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="collectStackedStats">
        <parameters>
          <parameter name="series" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.plot2d.Default" superclass="dojox.charting.plot2d.Base">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="chart" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="dirty"/>
      <property type="Object" access="read-write" scope="instance" name="hAxis"/>
      <property type="Object" access="read-write" scope="instance" name="opt"/>
      <property type="Object" access="read-write" scope="instance" name="series"/>
      <property type="Object" access="read-write" scope="instance" name="vAxis"/>
      <property type="Object" access="read-write" scope="instance" name="defaultParams"/>
      <property type="Object" access="read-write" scope="instance" name="optionalParams"/>
    </properties>
    <methods>
      <method scope="instance" name="calculateAxes">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
          <parameter name="offsets" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.plot2d.Grid" superclass="dojox.charting.Element">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="chart" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="dirty"/>
      <property type="Object" access="read-write" scope="instance" name="hAxis"/>
      <property type="Object" access="read-write" scope="instance" name="opt"/>
      <property type="Object" access="read-write" scope="instance" name="vAxis"/>
      <property type="Object" access="read-write" scope="instance" name="_hAxis" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_vAxis" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="defaultParams"/>
      <property type="Object" access="read-write" scope="instance" name="optionalParams"/>
    </properties>
    <methods>
      <method scope="instance" name="addSeries">
        <parameters>
          <parameter name="run" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="calculateAxes">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="clear">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getRequiredColors">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
          <parameter name="offsets" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setAxis">
        <parameters>
          <parameter name="axis" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.plot2d.Lines" superclass="dojox.charting.plot2d.Default">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="opt.lines"/>
    </properties>
  </class>
  <class type="dojox.charting.plot2d.Markers" superclass="dojox.charting.plot2d.Default">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="opt.markers"/>
    </properties>
  </class>
  <class type="dojox.charting.plot2d.MarkersOnly" superclass="dojox.charting.plot2d.Default">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="opt.lines"/>
      <property type="Object" access="read-write" scope="instance" name="opt.markers"/>
    </properties>
  </class>
  <class type="dojox.charting.plot2d.Pie" superclass="dojox.charting.Element">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="chart" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="dirty"/>
      <property type="Object" access="read-write" scope="instance" name="dyn"/>
      <property type="Object" access="read-write" scope="instance" name="opt"/>
      <property type="Object" access="read-write" scope="instance" name="run"/>
      <property type="Object" access="read-write" scope="instance" name="defaultParams"/>
      <property type="Object" access="read-write" scope="instance" name="optionalParams"/>
      <property type="Object" access="read-write" scope="instance" name="render"/>
    </properties>
    <methods>
      <method scope="instance" name="addSeries">
        <parameters>
          <parameter name="run" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="calculateAxes">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="clear">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getRequiredColors">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setAxis">
        <parameters>
          <parameter name="axis" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.plot2d.Scatter" superclass="dojox.charting.plot2d.Default">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="opt.lines"/>
      <property type="Object" access="read-write" scope="instance" name="opt.markers"/>
    </properties>
  </class>
  <class type="dojox.charting.plot2d.Stacked" superclass="dojox.charting.plot2d.Default">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="chart" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="dirty"/>
      <property type="Object" access="read-write" scope="instance" name="_maxRunLength" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="calculateAxes">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
          <parameter name="offsets" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.plot2d.StackedAreas" superclass="dojox.charting.plot2d.Stacked">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="opt.areas"/>
      <property type="Object" access="read-write" scope="instance" name="opt.lines"/>
    </properties>
  </class>
  <class type="dojox.charting.plot2d.StackedBars" superclass="dojox.charting.plot2d.Bars">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="chart" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="dirty"/>
      <property type="Object" access="read-write" scope="instance" name="_maxRunLength" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="calculateAxes">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
          <parameter name="offsets" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.plot2d.StackedColumns" superclass="dojox.charting.plot2d.Columns">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="chart" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="dirty"/>
      <property type="Object" access="read-write" scope="instance" name="_maxRunLength" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="calculateAxes">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
          <parameter name="offsets" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.plot2d.StackedLines" superclass="dojox.charting.plot2d.Stacked">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="opt.lines"/>
    </properties>
  </class>
  <class type="dojox.charting.plot3d" superclass="Object"/>
  <class type="dojox.charting.plot3d.Bars" superclass="dojox.charting.plot3d.Base">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="width" type="Object" usage="required"/>
          <parameter name="height" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="data"/>
      <property type="Object" access="read-write" scope="instance" name="depth"/>
      <property type="Object" access="read-write" scope="instance" name="gap"/>
      <property type="Object" access="read-write" scope="instance" name="material"/>
      <property type="Object" access="read-write" scope="instance" name="material.color"/>
    </properties>
    <methods>
      <method scope="instance" name="generate">
        <parameters>
          <parameter name="chart" type="Object" usage="required"/>
          <parameter name="creator" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getDepth">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.plot3d.Base" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="width" type="Object" usage="required"/>
          <parameter name="height" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="data"/>
      <property type="Object" access="read-write" scope="instance" name="height"/>
      <property type="Object" access="read-write" scope="instance" name="width"/>
    </properties>
    <methods>
      <method scope="instance" name="generate">
        <parameters>
          <parameter name="chart" type="Object" usage="required"/>
          <parameter name="creator" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getDepth">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setData">
        <parameters>
          <parameter name="data" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.plot3d.Cylinders" superclass="dojox.charting.plot3d.Base">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="width" type="Object" usage="required"/>
          <parameter name="height" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="data"/>
      <property type="Object" access="read-write" scope="instance" name="depth"/>
      <property type="Object" access="read-write" scope="instance" name="gap"/>
      <property type="Object" access="read-write" scope="instance" name="material"/>
      <property type="Object" access="read-write" scope="instance" name="material.color"/>
      <property type="Object" access="read-write" scope="instance" name="outline"/>
    </properties>
    <methods>
      <method scope="instance" name="generate">
        <parameters>
          <parameter name="chart" type="Object" usage="required"/>
          <parameter name="creator" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getDepth">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.Series" superclass="dojox.charting.Element">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="chart" type="Object" usage="required"/>
          <parameter name="data" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="data"/>
      <property type="Object" access="read-write" scope="instance" name="dirty"/>
      <property type="Object" access="read-write" scope="instance" name="dyn"/>
      <property type="Object" access="read-write" scope="instance" name="plot"/>
    </properties>
    <methods>
      <method scope="instance" name="clear">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.Theme" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="kwArgs" type="Object" usage="optional"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="antiAlias"/>
      <property type="Object" access="read-write" scope="instance" name="assignColors"/>
      <property type="Object" access="read-write" scope="instance" name="assignMarkers"/>
      <property type="Object" access="read-write" scope="instance" name="colors"/>
      <property type="Object" access="read-write" scope="instance" name="markers"/>
      <property type="Object" access="read-write" scope="instance" name="_colorCache" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_current" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_current.marker"/>
      <property type="Object" access="read-write" scope="instance" name="_markers" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="addMarker"/>
      <property type="Object" access="read-write" scope="instance" name="setMarkers"/>
      <property type="Object" access="read-write" scope="static" name="Markers"/>
      <property type="Object" access="read-write" scope="static" name="_def" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clear">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>resets both marker and color counters back to the start. Subsequent calls to `next` will retrievie the first value of each depending on the passed type.</description>
      </method>
      <method scope="instance" name="defineColors">
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Generate a set of colors for the theme based on keyword arguments</description>
      </method>
      <method scope="instance" name="next">
        <parameters>
          <parameter name="type" type="String" usage="optional">
            <description>Optional. One of either &amp;quot;color&amp;quot; or &amp;quot;marker&amp;quot;. Defaults to &amp;quot;color&amp;quot;.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>get either the next color or the next marker, depending on what was passed. If type is not passed, it assumes color.</description>
      </method>
      <method scope="instance" name="_buildMarkerArray" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting.widget" superclass="Object"/>
  <class type="dojox.charting.widget.Chart2D" superclass="dijit._Widget">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="chart"/>
      <property type="Object" access="read-write" scope="instance" name="domNode"/>
      <property type="Object" access="read-write" scope="instance" name="fill"/>
      <property type="for" access="read-write" scope="instance" name="margins">
        <description>the chart: {l: 10, r: 10, t: 10, b: 10}</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="stroke"/>
      <property type="parameters" access="read-write" scope="instance" name="theme">
        <description>for the markup  for the chart</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="buildRendering">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="resize">
        <parameters>
          <parameter name="box" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.charting._color" superclass="Object">
    <methods>
      <method scope="static" name="fromHsb">
        <parameters>
          <parameter name="hue" type="Number" usage="required"/>
          <parameter name="saturation" type="Number" usage="required"/>
          <parameter name="brightness" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Creates an instance of dojo.Color based on HSB input (360, %, %)</description>
      </method>
      <method scope="static" name="toHsb">
        <parameters>
          <parameter name="red" type="Number|Object|dojo.Color" usage="required"/>
          <parameter name="green" type="Number" usage="optional"/>
          <parameter name="blue" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns the color in HSB representation (360, %, %)</description>
      </method>
    </methods>
  </class>
  <class type="dojox.collections" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="Set"/>
      <property type="Object" access="read-write" scope="static" name="_base" visibility="internal"/>
    </properties>
  </class>
  <class type="dojox.collections.ArrayList" superclass="Object">
    <description>Returns a new object of type dojox.collections.ArrayList</description>
    <constructors>
      <constructor scope="instance">
        <description>Returns a new object of type dojox.collections.ArrayList</description>
        <parameters>
          <parameter name="arr" type="Array" usage="optional"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="count"/>
    </properties>
    <methods>
      <method scope="instance" name="add">
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Add an element to the collection.</description>
      </method>
      <method scope="instance" name="addRange">
        <parameters>
          <parameter name="a" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Add a range of objects to the ArrayList</description>
      </method>
      <method scope="instance" name="clear">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Clear all elements out of the collection, and reset the count.</description>
      </method>
      <method scope="instance" name="clone">
        <return-types>
          <return-type type="dojox.collections.ArrayList"/>
        </return-types>
        <description>Clone the array list</description>
      </method>
      <method scope="instance" name="contains">
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Check to see if the passed object is a member in the ArrayList</description>
      </method>
      <method scope="instance" name="forEach">
        <parameters>
          <parameter name="fn" type="Function" usage="required"/>
          <parameter name="scope" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>functional iterator, following the mozilla spec.</description>
      </method>
      <method scope="instance" name="getIterator">
        <return-types>
          <return-type type="dojox.collections.Iterator"/>
        </return-types>
        <description>Get an Iterator for this object</description>
      </method>
      <method scope="instance" name="indexOf">
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Return the numeric index of the passed object; will return -1 if not found.</description>
      </method>
      <method scope="instance" name="insert">
        <parameters>
          <parameter name="i" type="Number" usage="required"/>
          <parameter name="obj" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Insert the passed object at index i</description>
      </method>
      <method scope="instance" name="item">
        <parameters>
          <parameter name="i" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>return the element at index i</description>
      </method>
      <method scope="instance" name="remove">
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Look for the passed object, and if found, remove it from the internal array.</description>
      </method>
      <method scope="instance" name="removeAt">
        <parameters>
          <parameter name="i" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>return an array with function applied to all elements</description>
      </method>
      <method scope="instance" name="reverse">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Reverse the internal array</description>
      </method>
      <method scope="instance" name="setByIndex">
        <parameters>
          <parameter name="i" type="Number" usage="required"/>
          <parameter name="obj" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Set an element in the array by the passed index.</description>
      </method>
      <method scope="instance" name="sort">
        <parameters>
          <parameter name="fn" type="Function" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sort the internal array</description>
      </method>
      <method scope="instance" name="toArray">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Return a new array with all of the items of the internal array concatenated.</description>
      </method>
      <method scope="instance" name="toString">
        <parameters>
          <parameter name="delim" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>implementation of toString, follows [].toString();</description>
      </method>
    </methods>
  </class>
  <class type="dojox.collections.BinaryTree" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="data" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="count"/>
      <property type="Object" access="read-write" scope="instance" name="left"/>
      <property type="Object" access="read-write" scope="instance" name="right"/>
      <property type="Object" access="read-write" scope="instance" name="root"/>
      <property type="Object" access="read-write" scope="instance" name="value"/>
      <property type="Object" access="read-write" scope="static" name="TraversalMethods"/>
    </properties>
    <methods>
      <method scope="instance" name="add">
        <parameters>
          <parameter name="data" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="clear">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="clone">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="compare">
        <parameters>
          <parameter name="n" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="compareData">
        <parameters>
          <parameter name="d" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="contains">
        <parameters>
          <parameter name="data" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="deleteData">
        <parameters>
          <parameter name="data" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getIterator">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="search">
        <parameters>
          <parameter name="data" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="toString">
        <parameters>
          <parameter name="order" type="Object" usage="required"/>
          <parameter name="sep" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.collections.Dictionary" superclass="Object">
    <description>Returns an object of type dojox.collections.Dictionary</description>
    <constructors>
      <constructor scope="instance">
        <description>Returns an object of type dojox.collections.Dictionary</description>
        <parameters>
          <parameter name="dictionary" type="dojox.collections.Dictionary" usage="optional"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contains"/>
      <property type="Object" access="read-write" scope="instance" name="count"/>
    </properties>
    <methods>
      <method scope="instance" name="add">
        <parameters>
          <parameter name="k" type="String" usage="required"/>
          <parameter name="v" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Add a new item to the Dictionary.</description>
      </method>
      <method scope="instance" name="clear">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Clears the internal dictionary.</description>
      </method>
      <method scope="instance" name="clone">
        <return-types>
          <return-type type="dojox.collections.Dictionary"/>
        </return-types>
        <description>Returns a new instance of dojox.collections.Dictionary; note the the dictionary is a clone but items might not be.</description>
      </method>
      <method scope="instance" name="containsKey">
        <parameters>
          <parameter name="k" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Check to see if the dictionary has an entry at key &amp;quot;k&amp;quot;.</description>
      </method>
      <method scope="instance" name="containsValue">
        <parameters>
          <parameter name="v" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Check to see if the dictionary has an entry with value &amp;quot;v&amp;quot;.</description>
      </method>
      <method scope="instance" name="entry">
        <parameters>
          <parameter name="k" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojox.collections.DictionaryEntry"/>
        </return-types>
        <description>Accessor method; similar to dojox.collections.Dictionary.item but returns the actual Entry object.</description>
      </method>
      <method scope="instance" name="forEach">
        <parameters>
          <parameter name="fn" type="Function" usage="required"/>
          <parameter name="scope" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>functional iterator, following the mozilla spec.</description>
      </method>
      <method scope="instance" name="getIterator">
        <return-types>
          <return-type type="dojox.collections.DictionaryIterator"/>
        </return-types>
        <description>Gets a dojox.collections.DictionaryIterator for iteration purposes.</description>
      </method>
      <method scope="instance" name="getKeyList">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns an array of the keys in the dictionary.</description>
      </method>
      <method scope="instance" name="getValueList">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns an array of the values in the dictionary.</description>
      </method>
      <method scope="instance" name="item">
        <parameters>
          <parameter name="k" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Accessor method.</description>
      </method>
      <method scope="instance" name="remove">
        <parameters>
          <parameter name="k" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Removes the item at k from the internal collection.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.collections.DictionaryEntry" superclass="Object">
    <description>return an object of type dojox.collections.DictionaryEntry</description>
    <constructors>
      <constructor scope="instance">
        <description>return an object of type dojox.collections.DictionaryEntry</description>
        <parameters>
          <parameter name="k" type="String" usage="required"/>
          <parameter name="v" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="key"/>
      <property type="Object" access="read-write" scope="instance" name="value"/>
    </properties>
    <methods>
      <method scope="instance" name="toString">
        <return-types>
          <return-type type="String"/>
        </return-types>
      </method>
      <method scope="instance" name="valueOf">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.collections.DictionaryIterator" superclass="Object">
    <description>return an object of type dojox.collections.DictionaryIterator</description>
    <constructors>
      <constructor scope="instance">
        <description>return an object of type dojox.collections.DictionaryIterator</description>
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="element"/>
    </properties>
    <methods>
      <method scope="instance" name="atEnd">
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Test to see if the internal cursor has reached the end of the internal collection.</description>
      </method>
      <method scope="instance" name="get">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Get the next member in the collection.</description>
      </method>
      <method scope="instance" name="map">
        <parameters>
          <parameter name="fn" type="Function" usage="required"/>
          <parameter name="scope" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Functional iteration with optional scope.</description>
      </method>
      <method scope="instance" name="reset">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>reset the internal cursor.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.collections.Iterator" superclass="Object">
    <description>return an object of type dojox.collections.Iterator</description>
    <constructors>
      <constructor scope="instance">
        <description>return an object of type dojox.collections.Iterator</description>
        <parameters>
          <parameter name="arr" type="Array" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="element"/>
    </properties>
    <methods>
      <method scope="instance" name="atEnd">
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Test to see if the internal cursor has reached the end of the internal collection.</description>
      </method>
      <method scope="instance" name="get">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Get the next member in the collection.</description>
      </method>
      <method scope="instance" name="map">
        <parameters>
          <parameter name="fn" type="Function" usage="required"/>
          <parameter name="scope" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Functional iteration with optional scope.</description>
      </method>
      <method scope="instance" name="reset">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>reset the internal cursor.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.collections.Queue" superclass="Object">
    <description>return an object of type dojox.collections.Queue</description>
    <constructors>
      <constructor scope="instance">
        <description>return an object of type dojox.collections.Queue</description>
        <parameters>
          <parameter name="arr" type="Array" usage="optional"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="count"/>
    </properties>
    <methods>
      <method scope="instance" name="clear">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>clears the internal collection</description>
      </method>
      <method scope="instance" name="clone">
        <return-types>
          <return-type type="dojox.collections.Queue"/>
        </return-types>
        <description>creates a new Queue based on this one</description>
      </method>
      <method scope="instance" name="contains">
        <parameters>
          <parameter name="o" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Check to see if the passed object is an element in this queue</description>
      </method>
      <method scope="instance" name="copyTo">
        <parameters>
          <parameter name="arr" type="Array" usage="required"/>
          <parameter name="i" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Copy the contents of this queue into the passed array at index i.</description>
      </method>
      <method scope="instance" name="dequeue">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>shift the first element off the queue and return it</description>
      </method>
      <method scope="instance" name="enqueue">
        <parameters>
          <parameter name="o" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>put the passed object at the end of the queue</description>
      </method>
      <method scope="instance" name="forEach">
        <parameters>
          <parameter name="fn" type="Function" usage="required"/>
          <parameter name="scope" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>functional iterator, following the mozilla spec.</description>
      </method>
      <method scope="instance" name="getIterator">
        <return-types>
          <return-type type="dojox.collections.Iterator"/>
        </return-types>
        <description>get an Iterator based on this queue.</description>
      </method>
      <method scope="instance" name="peek">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>get the next element in the queue without altering the queue.</description>
      </method>
      <method scope="instance" name="toArray">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>return an array based on the internal array of the queue.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.collections.SortedList" superclass="Object">
    <description>creates a collection that acts like a dictionary but is also internally sorted. Note that the act of adding any elements forces an internal resort, making this object potentially slow.</description>
    <constructors>
      <constructor scope="instance">
        <description>creates a collection that acts like a dictionary but is also internally sorted. Note that the act of adding any elements forces an internal resort, making this object potentially slow.</description>
        <parameters>
          <parameter name="dictionary" type="Object" usage="optional"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contains"/>
      <property type="Object" access="read-write" scope="instance" name="count"/>
    </properties>
    <methods>
      <method scope="instance" name="add">
        <parameters>
          <parameter name="k" type="String" usage="required"/>
          <parameter name="v" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>add the passed value to the dictionary at location k</description>
      </method>
      <method scope="instance" name="clear">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>clear the internal collections</description>
      </method>
      <method scope="instance" name="clone">
        <return-types>
          <return-type type="dojox.collections.SortedList"/>
        </return-types>
        <description>create a clone of this sorted list</description>
      </method>
      <method scope="instance" name="containsKey">
        <parameters>
          <parameter name="k" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Check to see if the list has a location k</description>
      </method>
      <method scope="instance" name="containsValue">
        <parameters>
          <parameter name="o" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Check to see if this list contains the passed object</description>
      </method>
      <method scope="instance" name="copyTo">
        <parameters>
          <parameter name="arr" type="Array" usage="required"/>
          <parameter name="i" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>copy the contents of the list into array arr at index i</description>
      </method>
      <method scope="instance" name="entry">
        <parameters>
          <parameter name="k" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojox.collections.DictionaryEntry"/>
        </return-types>
        <description>return the object at location k</description>
      </method>
      <method scope="instance" name="forEach">
        <parameters>
          <parameter name="fn" type="Function" usage="required"/>
          <parameter name="scope" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>functional iterator, following the mozilla spec.</description>
      </method>
      <method scope="instance" name="getByIndex">
        <parameters>
          <parameter name="i" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>return the item at index i</description>
      </method>
      <method scope="instance" name="getIterator">
        <return-types>
          <return-type type="dojox.collections.DictionaryIterator"/>
        </return-types>
        <description>get an iterator for this object</description>
      </method>
      <method scope="instance" name="getKey">
        <parameters>
          <parameter name="i" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>return the key of the item at index i</description>
      </method>
      <method scope="instance" name="getKeyList">
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>return an array of the keys set in this list</description>
      </method>
      <method scope="instance" name="getValueList">
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>return an array of values in this list</description>
      </method>
      <method scope="instance" name="indexOfKey">
        <parameters>
          <parameter name="k" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>return the index of the passed key.</description>
      </method>
      <method scope="instance" name="indexOfValue">
        <parameters>
          <parameter name="o" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>return the first index of object o</description>
      </method>
      <method scope="instance" name="item">
        <parameters>
          <parameter name="k" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>return the value of the object at location k.</description>
      </method>
      <method scope="instance" name="remove">
        <parameters>
          <parameter name="k" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>remove the item at location k and rebuild the internal collections.</description>
      </method>
      <method scope="instance" name="removeAt">
        <parameters>
          <parameter name="i" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>remove the item at index i, and rebuild the internal collections.</description>
      </method>
      <method scope="instance" name="replace">
        <parameters>
          <parameter name="k" type="String" usage="required"/>
          <parameter name="v" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Replace an existing item if it's there, and add a new one if not.</description>
      </method>
      <method scope="instance" name="setByIndex">
        <parameters>
          <parameter name="i" type="Number" usage="required"/>
          <parameter name="o" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set an item by index</description>
      </method>
    </methods>
  </class>
  <class type="dojox.collections.Stack" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="arr" type="Array" usage="optional"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="count"/>
    </properties>
    <methods>
      <method scope="instance" name="clear">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Clear the internal array and reset the count</description>
      </method>
      <method scope="instance" name="clone">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Create and return a clone of this Stack</description>
      </method>
      <method scope="instance" name="contains">
        <parameters>
          <parameter name="o" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>check to see if the stack contains object o</description>
      </method>
      <method scope="instance" name="copyTo">
        <parameters>
          <parameter name="arr" type="Array" usage="required"/>
          <parameter name="i" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>copy the stack into array arr at index i</description>
      </method>
      <method scope="instance" name="forEach">
        <parameters>
          <parameter name="fn" type="Function" usage="required"/>
          <parameter name="scope" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>functional iterator, following the mozilla spec.</description>
      </method>
      <method scope="instance" name="getIterator">
        <return-types>
          <return-type type="dojox.collections.Iterator"/>
        </return-types>
        <description>get an iterator for this collection</description>
      </method>
      <method scope="instance" name="peek">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Return the next item without altering the stack itself.</description>
      </method>
      <method scope="instance" name="pop">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>pop and return the next item on the stack</description>
      </method>
      <method scope="instance" name="push">
        <parameters>
          <parameter name="o" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Push object o onto the stack</description>
      </method>
      <method scope="instance" name="toArray">
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>create and return an array based on the internal collection</description>
      </method>
    </methods>
  </class>
  <class type="dojox.color" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="Color"/>
      <property type="Object" access="read-write" scope="static" name="blend"/>
      <property type="Object" access="read-write" scope="static" name="fromRgb"/>
      <property type="Object" access="read-write" scope="static" name="fromHex"/>
      <property type="Object" access="read-write" scope="static" name="fromArray"/>
      <property type="Object" access="read-write" scope="static" name="fromString"/>
      <property type="Object" access="read-write" scope="static" name="greyscale"/>
      <property type="Object" access="read-write" scope="static" name="_base" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="fromXYZ">
        <parameters>
          <parameter name="xyz" type="Object" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="fromCmy">
        <parameters>
          <parameter name="cyan" type="Object|Array|Number" usage="required"/>
          <parameter name="magenta" type="Number" usage="required"/>
          <parameter name="yellow" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojox.color.Color"/>
        </return-types>
        <description>Create a dojox.color.Color from a CMY defined color. All colors should be expressed as 0-100 (percentage)</description>
      </method>
      <method scope="static" name="fromCmyk">
        <parameters>
          <parameter name="cyan" type="Object|Array|Number" usage="required"/>
          <parameter name="magenta" type="Number" usage="required"/>
          <parameter name="yellow" type="Number" usage="required"/>
          <parameter name="black" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojox.color.Color"/>
        </return-types>
        <description>Create a dojox.color.Color from a CMYK defined color. All colors should be expressed as 0-100 (percentage)</description>
      </method>
      <method scope="static" name="fromHsl">
        <parameters>
          <parameter name="hue" type="Object|Array|Number" usage="required">
            <description>from 0-359 (degrees), saturation and luminosity 0-100.</description>
          </parameter>
          <parameter name="saturation" type="Number" usage="required"/>
          <parameter name="luminosity" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojox.color.Color"/>
        </return-types>
        <description>Create a dojox.color.Color from an HSL defined color.</description>
      </method>
      <method scope="static" name="fromHsv">
        <parameters>
          <parameter name="hue" type="Object|Array|Number" usage="required">
            <description>from 0-359 (degrees), saturation and value 0-100.</description>
          </parameter>
          <parameter name="saturation" type="Number" usage="required"/>
          <parameter name="value" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojox.color.Color"/>
        </return-types>
        <description>Create a dojox.color.Color from an HSV defined color.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.color.Colorspace" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <methods>
      <method scope="instance" name="adapt">
        <parameters>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="convert">
        <parameters>
          <parameter name="color" type="Object" usage="required"/>
          <parameter name="from" type="String" usage="required"/>
          <parameter name="to" type="String" usage="required"/>
          <parameter name="kwArgs" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="epsilon">
        <parameters>
          <parameter name="useApprox" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="kappa">
        <parameters>
          <parameter name="useApprox" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="matrix">
        <parameters>
          <parameter name="to" type="String" usage="required"/>
          <parameter name="primary" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="primaries">
        <parameters>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="tempToWhitepoint">
        <parameters>
          <parameter name="t" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="whitepoint">
        <parameters>
          <parameter name="wpName" type="String" usage="required"/>
          <parameter name="observer" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.color.Generator" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <methods>
      <method scope="instance" name="analogous">
        <parameters>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>generates n colors based on a base color, based on a fixed hue angle delta (relative to the base hue) with slight variations in saturation.</description>
      </method>
      <method scope="instance" name="complementary">
        <parameters>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>generates n colors from a base color, using complimentary rules.</description>
      </method>
      <method scope="instance" name="compound">
        <parameters>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>generates n colors from a base color, using a *very* rough approximation of the Compound rules at http://kuler.adobe.com</description>
      </method>
      <method scope="instance" name="monochromatic">
        <parameters>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>generates n colors based on a base color, using alterations to the RGB model only.</description>
      </method>
      <method scope="instance" name="shades">
        <parameters>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>generates n colors based on a base color using only changes in value.  Similar to monochromatic but a bit more linear.</description>
      </method>
      <method scope="instance" name="splitComplementary">
        <parameters>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>generates n colors from a base color, using split complimentary rules.</description>
      </method>
      <method scope="instance" name="triadic">
        <parameters>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>generates n colors from a base color, using the triadic rules, rough approximation from kuler.adobe.com.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.cometd" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="batch"/>
      <property type="Object" access="read-write" scope="instance" name="clientId"/>
      <property type="Object" access="read-write" scope="instance" name="CONNECTED"/>
      <property type="Object" access="read-write" scope="instance" name="CONNECTING"/>
      <property type="Object" access="read-write" scope="instance" name="connectionTypes"/>
      <property type="Object" access="read-write" scope="instance" name="connectTimeout"/>
      <property type="Object" access="read-write" scope="instance" name="currentTransport"/>
      <property type="Object" access="read-write" scope="instance" name="currentTransport.version"/>
      <property type="Object" access="read-write" scope="instance" name="currentTransport._cometd" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="DISCONNECTED"/>
      <property type="Object" access="read-write" scope="instance" name="DISCONNECTING"/>
      <property type="Object" access="read-write" scope="instance" name="expectedNetworkDelay"/>
      <property type="Object" access="read-write" scope="instance" name="handleAs"/>
      <property type="Object" access="read-write" scope="instance" name="handshakeReturn"/>
      <property type="Object" access="read-write" scope="instance" name="lastMessage"/>
      <property type="Object" access="read-write" scope="instance" name="messageId"/>
      <property type="Object" access="read-write" scope="instance" name="minimumVersion"/>
      <property type="Object" access="read-write" scope="instance" name="url"/>
      <property type="Object" access="read-write" scope="instance" name="version"/>
      <property type="Object" access="read-write" scope="instance" name="_advice" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_advice.interval"/>
      <property type="Object" access="read-write" scope="instance" name="_advice.reconnect"/>
      <property type="Object" access="read-write" scope="instance" name="_backoffIncrement" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_backoffInterval" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_backoffMax" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_connected" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_deferredSubscribes" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_deferredUnsubscribes" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_extendInList" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_extendOutList" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_initialized" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_isXD" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_messageQ" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_polling" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_props" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_props.channel"/>
      <property type="Object" access="read-write" scope="instance" name="_props.ext"/>
      <property type="Object" access="read-write" scope="instance" name="_props.ext.json-comment-filtered"/>
      <property type="Object" access="read-write" scope="instance" name="_props.id"/>
      <property type="Object" access="read-write" scope="instance" name="_props.minimumVersion"/>
      <property type="Object" access="read-write" scope="instance" name="_props.subscription"/>
      <property type="Object" access="read-write" scope="instance" name="_props.supportedConnectionTypes"/>
      <property type="Object" access="read-write" scope="instance" name="_props.version"/>
      <property type="Object" access="read-write" scope="instance" name="_subscriptions" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_base" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="timestamp"/>
    </properties>
    <methods>
      <method scope="instance" name="deliver">
        <parameters>
          <parameter name="messages" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="disconnect">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Disconnect from the server.</description>
      </method>
      <method scope="instance" name="endBatch">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="init">
        <parameters>
          <parameter name="root" type="String" usage="required">
            <description>The URL of the cometd server. If the root is absolute, the host is examined to determine if xd transport is needed. Otherwise the same domain is assumed.</description>
          </parameter>
          <parameter name="props" type="Object" usage="optional">
            <description>An optional object that is used as the basis of the handshake message</description>
          </parameter>
          <parameter name="bargs" type="Object" usage="optional">
            <description>An optional object of bind args mixed in with the send of the handshake</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>return: dojo.Deferred  Initialize the cometd implementation of the Bayeux protocol</description>
      </method>
      <method scope="instance" name="publish">
        <parameters>
          <parameter name="channel" type="String" usage="required">
            <description>the destination channel for the message</description>
          </parameter>
          <parameter name="data" type="Object" usage="required">
            <description>a JSON object containing the message &amp;quot;payload&amp;quot; properties: Optional. Other meta-data to be mixed into the top-level of the message</description>
          </parameter>
          <parameter name="props" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>publishes the passed message to the cometd server for delivery on the specified topic</description>
      </method>
      <method scope="instance" name="startBatch">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="state">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="subscribe">
        <parameters>
          <parameter name="channel" type="String" usage="required"/>
          <parameter name="objOrFunc" type="Object" usage="required">
            <description>an object scope for funcName or the name or reference to a function to be called when messages are delivered to the</description>
          </parameter>
          <parameter name="funcName" type="String" usage="required">
            <description>the second half of the objOrFunc/funcName pair for identifying a callback function to notifiy upon channel message delivery</description>
          </parameter>
          <parameter name="props" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="dojo.Deferred"/>
        </return-types>
        <description>return: dojo.Deferred  inform the server of this client's interest in channel</description>
      </method>
      <method scope="instance" name="subscribed">
        <parameters>
          <parameter name="channel" type="String" usage="required"/>
          <parameter name="message" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="tunnelCollapse">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="tunnelInit">
        <parameters>
          <parameter name="childLocation" type="Object" usage="required"/>
          <parameter name="childDomain" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unsubscribe">
        <parameters>
          <parameter name="channel" type="String" usage="required">
            <description>If null then all subscribers to the channel are unsubscribed.</description>
          </parameter>
          <parameter name="objOrFunc" type="Object" usage="optional">
            <description>an object scope for funcName or the name or reference to a function to be called when messages are delivered to the</description>
          </parameter>
          <parameter name="funcName" type="String" usage="optional">
            <description>the second half of the objOrFunc/funcName pair for identifying a callback function to notifiy upon channel message delivery</description>
          </parameter>
          <parameter name="props" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="dojo.Deferred"/>
        </return-types>
        <description>inform the server of this client's disinterest in channel</description>
      </method>
      <method scope="instance" name="unsubscribed">
        <parameters>
          <parameter name="channel" type="String" usage="required"/>
          <parameter name="message" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_backoff" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_backon" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_connectTimeout" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_deliver" visibility="internal">
        <parameters>
          <parameter name="message" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_extendIn" visibility="internal">
        <parameters>
          <parameter name="message" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_extendOut" visibility="internal">
        <parameters>
          <parameter name="message" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_finishInit" visibility="internal">
        <parameters>
          <parameter name="data" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Handle the handshake return from the server and initialize connection if all is OK</description>
      </method>
      <method scope="instance" name="_interval" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onUnload" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_sendMessage" visibility="internal">
        <parameters>
          <parameter name="message" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.cometd.callbackPollTransport" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="deliver"/>
      <property type="Object" access="read-write" scope="instance" name="tunnelCollapse"/>
      <property type="Object" access="read-write" scope="instance" name="_cometd" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_cometd._polling" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_connect" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_connectionType" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="cancelConnect">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="check">
        <parameters>
          <parameter name="types" type="Object" usage="required"/>
          <parameter name="version" type="Object" usage="required"/>
          <parameter name="xdomain" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="disconnect">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="openTunnelWith">
        <parameters>
          <parameter name="content" type="Object" usage="required"/>
          <parameter name="url" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="sendMessages">
        <parameters>
          <parameter name="messages" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="startup">
        <parameters>
          <parameter name="handshakeData" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="tunnelInit">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.cometd.longPollTransport" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_cometd" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_cometd._connected" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_cometd._polling" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_connectionType" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_initialized" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_poll" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="cancelConnect">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="check">
        <parameters>
          <parameter name="types" type="Object" usage="required"/>
          <parameter name="version" type="Object" usage="required"/>
          <parameter name="xdomain" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="deliver">
        <parameters>
          <parameter name="message" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="disconnect">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="openTunnelWith">
        <parameters>
          <parameter name="content" type="Object" usage="required"/>
          <parameter name="url" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="sendMessages">
        <parameters>
          <parameter name="messages" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="startup">
        <parameters>
          <parameter name="handshakeData" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="tunnelCollapse">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="tunnelInit">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_connect" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.cometd.timesync" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="offset"/>
      <property type="Object" access="read-write" scope="instance" name="samples"/>
      <property type="Object" access="read-write" scope="instance" name="_minWindow" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_offsets" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_window" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="getServerDate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getServerTime">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setTimeout">
        <parameters>
          <parameter name="call" type="Function" usage="required">
            <description>Summary Set a timeout function relative to server time  the function to call when the timeout occurs atTimeOrTime: a long timestamp or a Date representing the server time at which the timeout should occur.</description>
          </parameter>
          <parameter name="atTimeOrDate" type="long|Date" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_in" visibility="internal">
        <parameters>
          <parameter name="msg" type="Object" usage="required">
            <description>The incoming bayeux message</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_out" visibility="internal">
        <parameters>
          <parameter name="msg" type="The" usage="required">
            <description>outgoing bayeux message</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.data" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="ASYNC_MODE"/>
      <property type="Object" access="read-write" scope="static" name="SYNC_MODE"/>
      <property type="Object" access="read-write" scope="static" name="nextClientId"/>
    </properties>
  </class>
  <class type="dojox.data.AtomReadStore" superclass="Object">
    <description>Constructor for the AtomRead store.</description>
    <constructors>
      <constructor scope="instance">
        <description>Constructor for the AtomRead store.</description>
        <parameters>
          <parameter name="args" type="Object" usage="required">
            <description>An anonymous object to initialize properties.  It expects the following values:</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <mixins scope="instance">
      <mixin scope="static" type="dojo.data.util.simpleFetch"/>
    </mixins>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="label"/>
      <property type="Object" access="read-write" scope="instance" name="rewriteUrl"/>
      <property type="A" access="read-write" scope="instance" name="sendQuery">
        <description>boolean indicate to add a query string to the service URL</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="unescapeHTML">
        <description>boolean to specify whether or not to unescape HTML text</description>
      </property>
      <property type="The" access="read-write" scope="instance" name="url">
        <description>url to a service or an XML document that represents the store</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_feedMetaData" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_items" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="label"/>
      <property type="A" access="read-write" scope="instance" name="sendQuery">
        <description>boolean indicate to add a query string to the service URL</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="unescapeHTML">
        <description>boolean to specify whether or not to unescape HTML text</description>
      </property>
      <property type="The" access="read-write" scope="instance" name="url">
        <description>url to a service or an XML document that represents the store</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="close">
        <parameters>
          <parameter name="request" type="dojo.data.api.Request|keywordArgs|null" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.close()</description>
      </method>
      <method scope="instance" name="containsValue">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>must be an instance of a dojox.data.XmlItem from the store instance.</description>
          </parameter>
          <parameter name="attribute" type="attribute" usage="required">
            <description>A tag name of a child element, An XML attribute name or one of special names</description>
          </parameter>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Check whether the attribute values contain the value</description>
      </method>
      <method scope="instance" name="getAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>An XML element</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Return an array of attribute names</description>
      </method>
      <method scope="instance" name="getFeatures">
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Return supported data APIs</description>
      </method>
      <method scope="instance" name="getFeedValue">
        <parameters>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="defaultValue" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Non-API method for retrieving values regarding the Atom feed, rather than the Atom entries.</description>
      </method>
      <method scope="instance" name="getFeedValues">
        <parameters>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="defaultValue" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Non-API method for retrieving values regarding the Atom feed, rather than the Atom entries.</description>
      </method>
      <method scope="instance" name="getLabel">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="undefined"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabel()</description>
      </method>
      <method scope="instance" name="getLabelAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
          <return-type type="null"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabelAttributes()</description>
      </method>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>An item returned by a call to the 'fetch' method.</description>
          </parameter>
          <parameter name="attribute" type="attribute" usage="required">
            <description>A attribute of the Atom Entry</description>
          </parameter>
          <parameter name="defaultValue" type="value" usage="optional">
            <description>A default value</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Return an attribute value</description>
      </method>
      <method scope="instance" name="getValues">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>An item returned by a call to the 'fetch' method.</description>
          </parameter>
          <parameter name="attribute" type="attribute" usage="required">
            <description>A attribute of the Atom Entry defaultValue: A default value</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Return an attribute value</description>
      </method>
      <method scope="instance" name="hasAttribute">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>must be created by the AtomReadStore instance.</description>
          </parameter>
          <parameter name="attribute" type="attribute" usage="required">
            <description>An attribute of an Atom Entry item.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Check whether an element has the attribute</description>
      </method>
      <method scope="instance" name="isItem">
        <parameters>
          <parameter name="something" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
          <return-type type="boolran"/>
        </return-types>
        <description>Check whether the object is an item (XML element) item: An object to check</description>
      </method>
      <method scope="instance" name="isItemLoaded">
        <parameters>
          <parameter name="something" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Check whether the object is an item (XML element) and loaded item: An object to check</description>
      </method>
      <method scope="instance" name="loadItem">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required">
            <description>containing the args for loadItem.  See dojo.data.api.Read.loadItem()</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Load an item (XML element)</description>
      </method>
      <method scope="instance" name="_assertIsAttribute" visibility="internal">
        <parameters>
          <parameter name="attribute" type="Object" usage="required">
            <description>The attribute to test for being contained by the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.</description>
      </method>
      <method scope="instance" name="_assertIsItem" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item to test for being contained by the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function tests whether the item passed in is indeed an item in the store.</description>
      </method>
      <method scope="instance" name="_fetchItems" visibility="internal">
        <parameters>
          <parameter name="request" type="Object" usage="required"/>
          <parameter name="fetchHandler" type="Object" usage="required"/>
          <parameter name="errorHandler" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Retrieves the items from the Atom XML document.</description>
      </method>
      <method scope="instance" name="_getFetchUrl" visibility="internal">
        <parameters>
          <parameter name="request" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getItem" visibility="internal">
        <parameters>
          <parameter name="element" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getItems" visibility="internal">
        <parameters>
          <parameter name="document" type="Object" usage="required"/>
          <parameter name="request" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Parses the document in a first pass</description>
      </method>
      <method scope="instance" name="_initItem" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Initializes an item before it can be parsed.</description>
      </method>
      <method scope="instance" name="_parseItem" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_unescapeHTML" visibility="internal">
        <parameters>
          <parameter name="text" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.data.CouchDBRestStore" superclass="dojox.data.JsonRestStore">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="options" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <methods>
      <method scope="instance" name="fetch">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This only differs from JsonRestStore in that it, will put the query string the query part of the URL and it handles start and count</description>
      </method>
      <method scope="instance" name="_commitAppend" visibility="internal">
        <parameters>
          <parameter name="listId" type="Object" usage="required"/>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="generateSMD">
        <parameters>
          <parameter name="couchServerUrl" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.data.CsvStore" superclass="Object">
    <description>initializer</description>
    <constructors>
      <constructor scope="instance">
        <description>initializer</description>
        <parameters>
          <parameter name="keywordParameters" type="Object" usage="required">
            <description>label String} The column label for the column to use for the label returned by getLabel.</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <mixins scope="instance">
      <mixin scope="static" type="dojo.data.util.simpleFetch"/>
    </mixins>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="label"/>
      <property type="Object" access="read-write" scope="instance" name="url"/>
      <property type="Object" access="read-write" scope="instance" name="_arrayOfAllItems" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_attributeIndexes" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_attributes" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_csvData" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_dataArray" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_features" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_idProp" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_loadFinished" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_loadInProgress" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_queuedFetches" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_storeProp" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="label"/>
      <property type="Object" access="read-write" scope="instance" name="url"/>
    </properties>
    <methods>
      <method scope="instance" name="close">
        <parameters>
          <parameter name="request" type="dojo.data.api.Request|keywordArgs|null" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.close()</description>
      </method>
      <method scope="instance" name="containsValue">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="attribute" usage="required"/>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="boolean."/>
        </return-types>
        <description>See dojo.data.api.Read.containsValue()</description>
      </method>
      <method scope="instance" name="fetchItemByIdentity">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Identity.fetchItemByIdentity()</description>
      </method>
      <method scope="instance" name="getAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>See dojo.data.api.Read.getAttributes()</description>
      </method>
      <method scope="instance" name="getFeatures">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getFeatures()</description>
      </method>
      <method scope="instance" name="getIdentity">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
          <return-type type="null"/>
        </return-types>
        <description>See dojo.data.api.Identity.getIdentity()</description>
      </method>
      <method scope="instance" name="getIdentityAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Identity.getIdentifierAttributes()  Identity isn't a public attribute in the item, it's the row position index. So, return null.</description>
      </method>
      <method scope="instance" name="getLabel">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
          <return-type type="undefined"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabel()</description>
      </method>
      <method scope="instance" name="getLabelAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
          <return-type type="null"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabelAttributes()</description>
      </method>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="attribute" usage="required"/>
          <parameter name="defaultValue" type="value" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>See dojo.data.api.Read.getValue() Note that for the CsvStore, an empty string value is the same as no value, so the defaultValue would be returned instead of an empty string.</description>
      </method>
      <method scope="instance" name="getValues">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="attribute" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>See dojo.data.api.Read.getValues() CSV syntax does not support multi-valued attributes, so this is just a wrapper function for getValue().</description>
      </method>
      <method scope="instance" name="hasAttribute">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="attribute" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>See dojo.data.api.Read.hasAttribute() The hasAttribute test is true if attribute has an index number within the item's array length AND if the item has a value for that attribute. Note that for the CsvStore, an empty string value is the same as no value.</description>
      </method>
      <method scope="instance" name="isItem">
        <parameters>
          <parameter name="something" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>See dojo.data.api.Read.isItem()</description>
      </method>
      <method scope="instance" name="isItemLoaded">
        <parameters>
          <parameter name="something" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>See dojo.data.api.Read.isItemLoaded() The CsvStore always loads all items, so if it's an item, then it's loaded.</description>
      </method>
      <method scope="instance" name="loadItem">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.loadItem()</description>
      </method>
      <method scope="instance" name="_assertIsAttribute" visibility="internal">
        <parameters>
          <parameter name="attribute" type="item|String" usage="required">
            <description>The attribute to test for being contained by the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.</description>
      </method>
      <method scope="instance" name="_assertIsItem" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item to test for being contained by the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function tests whether the item passed in is indeed an item in the store.</description>
      </method>
      <method scope="instance" name="_containsValue" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The data item to examine for attribute values.</description>
          </parameter>
          <parameter name="attribute" type="attribute" usage="required">
            <description>The attribute to inspect.</description>
          </parameter>
          <parameter name="value" type="anything" usage="required">
            <description>The value to match.</description>
          </parameter>
          <parameter name="regexp" type="RegExp" usage="optional">
            <description>Optional regular expression generated off value if value was of string type to handle wildcarding. If present and attribute values are string, then it can be used for comparison instead of 'value'</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Internal function for looking at the values contained by the item.</description>
      </method>
      <method scope="instance" name="_createItemFromIdentity" visibility="internal">
        <parameters>
          <parameter name="identity" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_fetchItems" visibility="internal">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required"/>
          <parameter name="findCallback" type="Function" usage="required"/>
          <parameter name="errorCallback" type="Function" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.util.simpleFetch.fetch()</description>
      </method>
      <method scope="instance" name="_getArrayOfArraysFromCsvFileContents" visibility="internal">
        <parameters>
          <parameter name="csvFileContents" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="null"/>
        </return-types>
      </method>
      <method scope="instance" name="_handleQueuedFetches" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Internal function to execute delayed request in the store. Execute any deferred fetches now.</description>
      </method>
      <method scope="instance" name="_processData" visibility="internal">
        <parameters>
          <parameter name="data" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.data.demos" superclass="Object"/>
  <class type="dojox.data.demos.stores" superclass="Object"/>
  <class type="dojox.data.demos.stores.LazyLoadJSIStore" superclass="dojo.data.ItemFileReadStore">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="keywordParameters" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <methods>
      <method scope="instance" name="isItemLoaded">
        <parameters>
          <parameter name="item" type="Object" usage="required">
            <description>The item to examine.  For this store, if it has the value of stub for its type attribute, then the item basn't been fully loaded yet.  It's just a placeholder.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Overload of the isItemLoaded function to look for items of type 'stub', which indicate the data hasn't been loaded in yet.</description>
      </method>
      <method scope="instance" name="loadItem">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Overload of the loadItem function to fault in items.  This assumes the data for an item is laid out in a RESTful sort of pattern name0/name1/data.json and so on and uses that to load the data. It will also detect stub items in the newly loaded item and insert the stubs into the ItemFileReadStore list so they can also be loaded in on-demand.  item: The item to examine.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.data.demos.widgets" superclass="Object"/>
  <class type="dojox.data.demos.widgets.FlickrView" superclass="dijit._Widget dijit._Templated">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="author"/>
      <property type="Object" access="read-write" scope="instance" name="authorNode"/>
      <property type="Object" access="read-write" scope="instance" name="descriptionNode"/>
      <property type="Object" access="read-write" scope="instance" name="iconUrl"/>
      <property type="Object" access="read-write" scope="instance" name="imageNode"/>
      <property type="Object" access="read-write" scope="instance" name="imageUrl"/>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Object" access="read-write" scope="instance" name="title"/>
      <property type="Object" access="read-write" scope="instance" name="titleNode"/>
    </properties>
    <methods>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.data.demos.widgets.FlickrViewList" superclass="dijit._Widget dijit._Templated">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="fViewWidgets"/>
      <property type="Object" access="read-write" scope="instance" name="listNode"/>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
    </properties>
    <methods>
      <method scope="instance" name="addView">
        <parameters>
          <parameter name="viewData" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="clearList">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.data.demos.widgets.PicasaView" superclass="dijit._Widget dijit._Templated">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="author"/>
      <property type="Object" access="read-write" scope="instance" name="authorNode"/>
      <property type="Object" access="read-write" scope="instance" name="descriptionNode"/>
      <property type="Object" access="read-write" scope="instance" name="iconUrl"/>
      <property type="Object" access="read-write" scope="instance" name="imageNode"/>
      <property type="Object" access="read-write" scope="instance" name="imageUrl"/>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Object" access="read-write" scope="instance" name="title"/>
      <property type="Object" access="read-write" scope="instance" name="titleNode"/>
    </properties>
    <methods>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.data.demos.widgets.PicasaViewList" superclass="dijit._Widget dijit._Templated">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="fViewWidgets"/>
      <property type="Object" access="read-write" scope="instance" name="listNode"/>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
    </properties>
    <methods>
      <method scope="instance" name="addView">
        <parameters>
          <parameter name="viewData" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="clearList">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.data.dom" superclass="Object">
    <methods>
      <method scope="static" name="createDocument">
        <parameters>
          <parameter name="str" type="String" usage="optional">
            <description>Optional text to create the document from.  If not provided, an empty XML document will be created.</description>
          </parameter>
          <parameter name="mimetype" type="String" usage="optional">
            <description>Optional mimetype of the text.  Typically, this is text/xml.  Will be defaulted to text/xml if not provided.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="DOMDocument"/>
        </return-types>
        <description>cross-browser implementation of creating an XML document object.</description>
      </method>
      <method scope="static" name="textContent">
        <parameters>
          <parameter name="node" type="Node" usage="required">
            <description>The node to get the text off of or set the text on.</description>
          </parameter>
          <parameter name="text" type="String" usage="optional">
            <description>Optional argument of the text to apply to the node.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Implementation of the DOM Level 3 attribute; scan node for text</description>
      </method>
      <method scope="static" name="replaceChildren">
        <parameters>
          <parameter name="node" type="Element" usage="required">
            <description>The node to modify the children on</description>
          </parameter>
          <parameter name="newChildren" type="Node|Array" usage="required">
            <description>The children to add to the node.  It can either be a single Node or an array of Nodes.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Removes all children of node and appends newChild. All the existing children will be destroyed.</description>
      </method>
      <method scope="static" name="removeChildren">
        <parameters>
          <parameter name="node" type="Element" usage="required">
            <description>The node to remove all the children from.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>removes all children from node and returns the count of children removed. The children nodes are not destroyed. Be sure to call dojo._destroyElement on them after they are not used anymore.</description>
      </method>
      <method scope="static" name="innerXML">
        <parameters>
          <parameter name="node" type="Node" usage="required">
            <description>The node from which to generate the XML text representation.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Implementation of MS's innerXML function.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.data.FlickrRestStore" superclass="dojox.data.FlickrStore">
    <description>Initializer for the FlickrRestStore store.</description>
    <constructors>
      <constructor scope="instance">
        <description>Initializer for the FlickrRestStore store.</description>
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="label"/>
      <property type="String" access="read-write" scope="instance" name="_apikey" visibility="internal">
        <description>The users API key to be used when accessing Flickr REST services.</description>
      </property>
      <property type="Array" access="read-write" scope="instance" name="_cache" visibility="internal">
        <description>An Array of all previously downloaded picture info.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_handlers" visibility="internal">
        <description>A HashMap used to record the handlers registered for a single remote request.  Multiple requests may be made for the same information before the first request has finished. Each element of this Object is an array of handlers to call back when the request finishes. This prevents multiple requests being made for the same information.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="_id" visibility="internal">
        <description>A unique identifier for this store.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_maxPhotosPerUser" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_prevRequestRanges" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_prevRequests" visibility="internal">
        <description>A HashMap used to record the signature of a request to prevent duplicate request being made.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="_apikey" visibility="internal">
        <description>The users API key to be used when accessing Flickr REST services.</description>
      </property>
      <property type="Array" access="read-write" scope="instance" name="_cache" visibility="internal">
        <description>An Array of all previously downloaded picture info.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="_flickrRestUrl" visibility="internal">
        <description>The URL to the Flickr REST services.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_handlers" visibility="internal">
        <description>A HashMap used to record the handlers registered for a single remote request.  Multiple requests may be made for the same information before the first request has finished. Each element of this Object is an array of handlers to call back when the request finishes. This prevents multiple requests being made for the same information.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="_id" visibility="internal">
        <description>A unique identifier for this store.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_prevRequests" visibility="internal">
        <description>A HashMap used to record the signature of a request to prevent duplicate request being made.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="_requestCount" visibility="internal">
        <description>A counter for the number of requests made. This is used to define the callback function that Flickr will use.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_sortAttributes" visibility="internal">
        <description>A quick lookup of valid attribute names in a sort query.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="_storeRef" visibility="internal">
        <description>A key used to mark an data store item as belonging to this store.</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="getAttributes">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getAttributes()</description>
      </method>
      <method scope="instance" name="getValues">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>See dojo.data.api.Read.getValue()</description>
      </method>
      <method scope="instance" name="_checkPrevRanges" visibility="internal">
        <parameters>
          <parameter name="primaryKey" type="Object" usage="required"/>
          <parameter name="start" type="Object" usage="required"/>
          <parameter name="count" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_fetchItems" visibility="internal">
        <parameters>
          <parameter name="request" type="A" usage="required">
            <description>request object</description>
          </parameter>
          <parameter name="fetchHandler" type="A" usage="required">
            <description>function to call for fetched items</description>
          </parameter>
          <parameter name="errorHandler" type="A" usage="required">
            <description>function to call on error</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Fetch flickr items that match to a query</description>
      </method>
      <method scope="instance" name="_processFlickrData" visibility="internal">
        <parameters>
          <parameter name="data" type="Object" usage="required">
            <description>Data returned from Flickr</description>
          </parameter>
          <parameter name="request" type="Object" usage="required">
            <description>The original dojo.data.Request object passed in by the user.  If the data contains an 'item' object, it has not come from the REST services, so process it using the FlickrStore.</description>
          </parameter>
          <parameter name="cacheKey" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Processes the raw data from Flickr and updates the internal cache.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.data.FlickrStore" superclass="Object">
    <description>Initializer for the FlickrStore store.</description>
    <constructors>
      <constructor scope="instance">
        <description>Initializer for the FlickrStore store.</description>
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <mixins scope="instance">
      <mixin scope="static" type="dojo.data.util.simpleFetch"/>
    </mixins>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="label"/>
      <property type="Object" access="read-write" scope="instance" name="label"/>
      <property type="Object" access="read-write" scope="instance" name="_flickrUrl" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_storeRef" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="close">
        <parameters>
          <parameter name="request" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.close()</description>
      </method>
      <method scope="instance" name="containsValue">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.containsValue()</description>
      </method>
      <method scope="instance" name="getAttributes">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getAttributes()</description>
      </method>
      <method scope="instance" name="getFeatures">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getFeatures()</description>
      </method>
      <method scope="instance" name="getLabel">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabel()</description>
      </method>
      <method scope="instance" name="getLabelAttributes">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabelAttributes()</description>
      </method>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getValue()</description>
      </method>
      <method scope="instance" name="getValues">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getValue()</description>
      </method>
      <method scope="instance" name="hasAttribute">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.hasAttributes()</description>
      </method>
      <method scope="instance" name="isItem">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.isItem()</description>
      </method>
      <method scope="instance" name="isItemLoaded">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.isItemLoaded()</description>
      </method>
      <method scope="instance" name="loadItem">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.loadItem()</description>
      </method>
      <method scope="instance" name="_assertIsAttribute" visibility="internal">
        <parameters>
          <parameter name="attribute" type="Object" usage="required">
            <description>The attribute to test for being contained by the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.</description>
      </method>
      <method scope="instance" name="_assertIsItem" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item to test for being contained by the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function tests whether the item passed in is indeed an item in the store.</description>
      </method>
      <method scope="instance" name="_fetchItems" visibility="internal">
        <parameters>
          <parameter name="request" type="A" usage="required">
            <description>request object</description>
          </parameter>
          <parameter name="fetchHandler" type="A" usage="required">
            <description>function to call for fetched items</description>
          </parameter>
          <parameter name="errorHandler" type="A" usage="required">
            <description>function to call on error</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Fetch flickr items that match to a query</description>
      </method>
      <method scope="instance" name="_processFlickrData" visibility="internal">
        <parameters>
          <parameter name="data" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_unescapeHtml" visibility="internal">
        <parameters>
          <parameter name="str" type="String." usage="required">
            <description>The string to un-escape</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Utility function to un-escape XML special characters in an HTML string.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.data.HtmlStore" superclass="Object">
    <description>Initializer for the HTML table store.</description>
    <constructors>
      <constructor scope="instance">
        <description>Initializer for the HTML table store.</description>
        <parameters>
          <parameter name="args" type="Object" usage="required">
            <description>An anonymous object to initialize properties.  It expects the following values:</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <mixins scope="instance">
      <mixin scope="static" type="dojo.data.util.simpleFetch"/>
    </mixins>
    <properties>
      <property type="The" access="read-write" scope="instance" name="dataId">
        <description>id of the table element in the remote page</description>
      </property>
      <property type="The" access="read-write" scope="instance" name="url">
        <description>url of the remote page to load</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_headings" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_rootNode" visibility="internal"/>
      <property type="The" access="read-write" scope="instance" name="dataId">
        <description>id of the table element in the remote page</description>
      </property>
      <property type="The" access="read-write" scope="instance" name="url">
        <description>url of the remote page to load</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="close">
        <parameters>
          <parameter name="request" type="dojo.data.api.Request|keywordArgs|null" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.close() nothing to do here!</description>
      </method>
      <method scope="instance" name="containsValue">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="boolean."/>
        </return-types>
        <description>See dojo.data.api.Read.containsValue()</description>
      </method>
      <method scope="instance" name="fetchItemByIdentity">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
          <return-type type="null"/>
        </return-types>
        <description>See dojo.data.api.Identity.fetchItemByIdentity()</description>
      </method>
      <method scope="instance" name="getAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>See dojo.data.api.Read.getAttributes()</description>
      </method>
      <method scope="instance" name="getFeatures">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getFeatures()</description>
      </method>
      <method scope="instance" name="getIdentity">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Identity.getIdentity()</description>
      </method>
      <method scope="instance" name="getIdentityAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Identity.getIdentityAttributes() Identity isn't taken from a public attribute.</description>
      </method>
      <method scope="instance" name="getLabel">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabel()</description>
      </method>
      <method scope="instance" name="getLabelAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabelAttributes()</description>
      </method>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="defaultValue" type="value" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
          <return-type type="Number"/>
          <return-type type="Boolean"/>
        </return-types>
        <description>See dojo.data.api.Read.getValue()</description>
      </method>
      <method scope="instance" name="getValues">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>See dojo.data.api.Read.getValues()</description>
      </method>
      <method scope="instance" name="hasAttribute">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.hasAttribute()</description>
      </method>
      <method scope="instance" name="isItem">
        <parameters>
          <parameter name="something" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>See dojo.data.api.Read.isItem()</description>
      </method>
      <method scope="instance" name="isItemLoaded">
        <parameters>
          <parameter name="something" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.isItemLoaded()</description>
      </method>
      <method scope="instance" name="loadItem">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.loadItem()</description>
      </method>
      <method scope="instance" name="_assertIsAttribute" visibility="internal">
        <parameters>
          <parameter name="attribute" type="String" usage="required">
            <description>The attribute to test for being contained by the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.</description>
      </method>
      <method scope="instance" name="_assertIsItem" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item to test for being contained by the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function tests whether the item passed in is indeed an item in the store.</description>
      </method>
      <method scope="instance" name="_containsValue" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The data item to examine for attribute values.</description>
          </parameter>
          <parameter name="attribute" type="Object" usage="required">
            <description>The attribute to inspect.</description>
          </parameter>
          <parameter name="value" type="anything" usage="required">
            <description>The value to match.</description>
          </parameter>
          <parameter name="regexp" type="RegExp" usage="optional">
            <description>Optional regular expression generated off value if value was of string type to handle wildcarding. If present and attribute values are string, then it can be used for comparison instead of 'value'</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Internal function for looking at the values contained by the item.</description>
      </method>
      <method scope="instance" name="_fetchItems" visibility="internal">
        <parameters>
          <parameter name="request" type="A" usage="required">
            <description>request object</description>
          </parameter>
          <parameter name="fetchHandler" type="A" usage="required">
            <description>function to call for fetched items</description>
          </parameter>
          <parameter name="errorHandler" type="A" usage="required">
            <description>function to call on error</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
          <return-type type="null"/>
        </return-types>
        <description>Fetch items (XML elements) that match to a query</description>
      </method>
      <method scope="instance" name="_finishFetchItems" visibility="internal">
        <parameters>
          <parameter name="request" type="Object" usage="required"/>
          <parameter name="fetchHandler" type="Object" usage="required"/>
          <parameter name="errorHandler" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Internal function for processing the passed in request and locating the requested items.</description>
      </method>
      <method scope="instance" name="_getAllItems" visibility="internal">
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Function to return all rows in the table as an array of items.</description>
      </method>
      <method scope="instance" name="_getHeadings" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Function to load the attribute names from the table header so that the attributes (cells in a row), can have a reasonable name. For list items, returns single implicit heading, [&amp;quot;name&amp;quot;]</description>
      </method>
      <method scope="instance" name="_indexItems" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.data.HtmlTableStore" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <mixins scope="instance">
      <mixin scope="static" type="dojo.data.util.simpleFetch"/>
    </mixins>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="tableId"/>
      <property type="Object" access="read-write" scope="instance" name="url"/>
      <property type="Object" access="read-write" scope="instance" name="_headings" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_rootNode" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="tableId"/>
      <property type="Object" access="read-write" scope="instance" name="url"/>
    </properties>
    <methods>
      <method scope="instance" name="close">
        <parameters>
          <parameter name="request" type="dojo.data.api.Request|keywordArgs|null" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.close() nothing to do here!</description>
      </method>
      <method scope="instance" name="containsValue">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="boolean."/>
        </return-types>
        <description>See dojo.data.api.Read.containsValue()</description>
      </method>
      <method scope="instance" name="fetchItemByIdentity">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
          <return-type type="null"/>
        </return-types>
        <description>See dojo.data.api.Identity.fetchItemByIdentity()</description>
      </method>
      <method scope="instance" name="getAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>See dojo.data.api.Read.getAttributes()</description>
      </method>
      <method scope="instance" name="getFeatures">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getFeatures()</description>
      </method>
      <method scope="instance" name="getIdentity">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>See dojo.data.api.Identity.getIdentity()</description>
      </method>
      <method scope="instance" name="getIdentityAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Identity.getIdentityAttributes() Identity isn't taken from a public attribute.</description>
      </method>
      <method scope="instance" name="getLabel">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabel()</description>
      </method>
      <method scope="instance" name="getLabelAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabelAttributes()</description>
      </method>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="defaultValue" type="value" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
          <return-type type="Number"/>
          <return-type type="Boolean"/>
        </return-types>
        <description>See dojo.data.api.Read.getValue()</description>
      </method>
      <method scope="instance" name="getValues">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>See dojo.data.api.Read.getValues()</description>
      </method>
      <method scope="instance" name="hasAttribute">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.hasAttribute()</description>
      </method>
      <method scope="instance" name="isItem">
        <parameters>
          <parameter name="something" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>See dojo.data.api.Read.isItem()</description>
      </method>
      <method scope="instance" name="isItemLoaded">
        <parameters>
          <parameter name="something" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.isItemLoaded()</description>
      </method>
      <method scope="instance" name="loadItem">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.loadItem()</description>
      </method>
      <method scope="instance" name="_assertIsAttribute" visibility="internal">
        <parameters>
          <parameter name="attribute" type="String" usage="required">
            <description>The attribute to test for being contained by the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.</description>
      </method>
      <method scope="instance" name="_assertIsItem" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item to test for being contained by the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function tests whether the item passed in is indeed an item in the store.</description>
      </method>
      <method scope="instance" name="_containsValue" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The data item to examine for attribute values.</description>
          </parameter>
          <parameter name="attribute" type="Object" usage="required">
            <description>The attribute to inspect.</description>
          </parameter>
          <parameter name="value" type="anything" usage="required">
            <description>The value to match.</description>
          </parameter>
          <parameter name="regexp" type="RegExp" usage="optional">
            <description>Optional regular expression generated off value if value was of string type to handle wildcarding. If present and attribute values are string, then it can be used for comparison instead of 'value'</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Internal function for looking at the values contained by the item.</description>
      </method>
      <method scope="instance" name="_fetchItems" visibility="internal">
        <parameters>
          <parameter name="request" type="A" usage="required">
            <description>request object</description>
          </parameter>
          <parameter name="fetchHandler" type="A" usage="required">
            <description>function to call for fetched items</description>
          </parameter>
          <parameter name="errorHandler" type="A" usage="required">
            <description>function to call on error</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
          <return-type type="null"/>
        </return-types>
        <description>Fetch items (XML elements) that match to a query</description>
      </method>
      <method scope="instance" name="_finishFetchItems" visibility="internal">
        <parameters>
          <parameter name="request" type="Object" usage="required"/>
          <parameter name="fetchHandler" type="Object" usage="required"/>
          <parameter name="errorHandler" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Internal function for processing the passed in request and locating the requested items.</description>
      </method>
      <method scope="instance" name="_getAllItems" visibility="internal">
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Function to return all rows in the table as an array of items.</description>
      </method>
      <method scope="instance" name="_getHeadings" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Function to load the attribute names from the table header so that the attributes (cells in a row), can have a reasonable name.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.data.JsonRestStore" superclass="Object">
    <description>JsonRestStore constructor, instantiate a new JsonRestStore A JsonRestStore can be configured from a JSON Schema. Queries are just passed through as URLs for XHR requests, so there is nothing to configure, just plug n play. Of course there are some options to fiddle with if you want:  jsonSchema: /* object */  service: /* function */ This is the service object that is used to retrieve lazy data and save results The function should be directly callable with a single parameter of an object id to be loaded The function should also have the following methods: put(id,value) - puts the value at the given id post(id,value) - posts (appends) the value at the given id delete(id) - deletes the value corresponding to the given id</description>
    <constructors>
      <constructor scope="instance">
        <description>JsonRestStore constructor, instantiate a new JsonRestStore A JsonRestStore can be configured from a JSON Schema. Queries are just passed through as URLs for XHR requests, so there is nothing to configure, just plug n play. Of course there are some options to fiddle with if you want:  jsonSchema: /* object */  service: /* function */ This is the service object that is used to retrieve lazy data and save results The function should be directly callable with a single parameter of an object id to be loaded The function should also have the following methods: put(id,value) - puts the value at the given id post(id,value) - posts (appends) the value at the given id delete(id) - deletes the value corresponding to the given id</description>
        <parameters>
          <parameter name="options" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="byId"/>
      <property type="String" access="read-write" scope="instance" name="idAttribute">
        <description>*/ Defaults to 'id'. The name of the attribute that holds an objects id. This can be a preexisting id provided by the server. If an ID isn't already provided when an object is fetched or added to the store, the autoIdentity system will generate an id for it and add it to the index.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="service.serviceName"/>
      <property type="Object" access="read-write" scope="instance" name="_arrayModifyingMethods" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_deletedItems" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_dirtyItems" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="mode"/>
    </properties>
    <methods>
      <method scope="instance" name="containsValue">
        <parameters>
          <parameter name="item" type="Object" usage="required">
            <description>*/</description>
          </parameter>
          <parameter name="attribute" type="String" usage="required">
            <description>*/</description>
          </parameter>
          <parameter name="value" type="anything" usage="required">
            <description>*/</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Checks to see if 'item' has 'value' at 'attribute'</description>
      </method>
      <method scope="instance" name="deleteItem">
        <parameters>
          <parameter name="item" type="to" usage="required">
            <description>delete  removeFrom: This an item or items from which to remove references to this object. This store does not record references, so if this parameter the entire object graph from load items will be searched for references. Providing this parameter is vastly faster. An empty object or truthy primitive can be passed if no references need to be removed  If the desire is to delete only one reference, unsetAttribute or setValue is the way to go.</description>
          </parameter>
          <parameter name="parentInfo" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>deletes item any references to that item from the store.</description>
      </method>
      <method scope="instance" name="fetch">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>console.log(&amp;quot;fetch() &amp;quot;, args);   fetch takes either a string argument or a keywordArgs object containing the parameters for the search. If passed a string, fetch will interpret this string as the query to be performed and will do so in SYNC_MODE returning the results immediately. If an object is supplied as 'args', its options will be parsed and then contained query executed.  query: /* string or object */ Defaults to &amp;quot;&amp;quot;. This is basically passed to the XHR request as the URL to get the data  start: /* int */ Starting item in result set  count: /* int */ Maximum number of items to return  cache: /* boolean */  sort: /* function */ Not Implemented yet  The following only apply to ASYNC requests (the default)  onBegin: /* function */ called before any results are returned. Parameters will be the count and the original fetch request  onItem: /*function*/ called for each returned item.  Parameters will be the item and the fetch request  onComplete: /* function */ called on completion of the request.  Parameters will be the complete result set and the request  onError: /* function */ colled in the event of an error</description>
      </method>
      <method scope="instance" name="fetchItemByIdentity">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>fetch an item by its identity. fetch and fetchItemByIdentity work exactly the same</description>
      </method>
      <method scope="instance" name="getAttributes">
        <parameters>
          <parameter name="item" type="Object" usage="required">
            <description>*/</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Gets the available attributes of an item's 'property' and returns it as an array.</description>
      </method>
      <method scope="instance" name="getFeatures">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>return the store feature set</description>
      </method>
      <method scope="instance" name="getIdentity">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getIdentityAttributes">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getLabel">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getLabelAttributes">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="item" type="Object" usage="required">
            <description>*/</description>
          </parameter>
          <parameter name="property" type="to" usage="required">
            <description>look up value for</description>
          </parameter>
          <parameter name="lazyCallback" type="Object" usage="required">
            <description>not part of the API, but if you are using lazy loading properties, you may provide a callback to resume, in order to have asynchronous loading</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Gets the value of an item's 'property'</description>
      </method>
      <method scope="instance" name="getValues">
        <parameters>
          <parameter name="item" type="Object" usage="required">
            <description>*/</description>
          </parameter>
          <parameter name="property" type="to" usage="required">
            <description>look up value for</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Gets the value of an item's 'property' and returns it.  If this value is an array it is just returned, if not, the value is added to an array and that is returned.</description>
      </method>
      <method scope="instance" name="hasAttribute">
        <parameters>
          <parameter name="item" type="Object" usage="required">
            <description>*/</description>
          </parameter>
          <parameter name="attribute" type="String" usage="required">
            <description>*/</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Checks to see if item has attribute</description>
      </method>
      <method scope="instance" name="isDirty">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isItem">
        <parameters>
          <parameter name="item" type="Object" usage="required">
            <description>*/ attribute: /* string */</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Checks to see if a passed 'item' is really a JsonRestStore item.</description>
      </method>
      <method scope="instance" name="isItemLoaded">
        <parameters>
          <parameter name="item" type="Object" usage="required">
            <description>*/</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="loadItem">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Loads an item that has not been loaded yet. Lazy loading should happen through getValue, and if used properly, this should never need to be called</description>
      </method>
      <method scope="instance" name="newItem">
        <parameters>
          <parameter name="data" type="Object" usage="required">
            <description>*/ The data to be added in as an item.</description>
          </parameter>
          <parameter name="parentInfo" type="An" usage="required">
            <description>optional javascript object defining what item is the parent of this item (in a hierarchical store.  Not all stores do hierarchical items), and what attribute of that parent to assign the new item to.  If this is present, and the attribute specified is a multi-valued attribute, it will append this item into the array of values for that attribute.  The structure of the object is as follows: { parent: someItem, } or { parentId: someItemId, }</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>adds a new item to the store at the specified point. Takes two parameters, data, and options.</description>
      </method>
      <method scope="instance" name="onDelete">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onNew">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onRevert">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>notification of the revert event..not part of the notification api, but probably should be.</description>
      </method>
      <method scope="instance" name="onSave">
        <parameters>
          <parameter name="items" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>notification of the save event..not part of the notification api, but probably should be. console.log(&amp;quot;onSave() &amp;quot;, items);</description>
      </method>
      <method scope="instance" name="onSet">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="revert">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="save">
        <parameters>
          <parameter name="kwArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Saves the dirty data using REST Ajax methods</description>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sets 'attribute' on 'item' to 'value'</description>
      </method>
      <method scope="instance" name="setValues">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="values" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sets 'attribute' on 'item' to 'value' value must be an array.</description>
      </method>
      <method scope="instance" name="sort">
        <parameters>
          <parameter name="a" type="Object" usage="required"/>
          <parameter name="b" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unsetAttribute">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>unsets 'attribute' on 'item'</description>
      </method>
      <method scope="instance" name="_commitAppend" visibility="internal">
        <parameters>
          <parameter name="listId" type="Object" usage="required"/>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getParent" visibility="internal">
        <parameters>
          <parameter name="parentInfo" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_loadById" visibility="internal">
        <parameters>
          <parameter name="id" type="Object" usage="required"/>
          <parameter name="callback" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setDirty" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>adds an item to the list of dirty items.  This item contains a reference to the item itself as well as a cloned and trimmed version of old item for use with revert.</description>
      </method>
      <method scope="instance" name="_walk" visibility="internal">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="forEach" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.data.KeyValueStore" superclass="Object">
    <description>constructor</description>
    <constructors>
      <constructor scope="instance">
        <description>constructor</description>
        <parameters>
          <parameter name="keywordParameters" type="Object" usage="required">
            <description>dataVar jsonObject}</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <mixins scope="instance">
      <mixin scope="static" type="dojo.data.util.simpleFetch"/>
    </mixins>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="url"/>
      <property type="Object" access="read-write" scope="instance" name="_arrayOfAllItems" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_features" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_keyAttribute" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_keyValueString" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_keyValueVar" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_loadFinished" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_loadInProgress" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_queuedFetches" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_storeProp" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_valueAttribute" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="data"/>
      <property type="Object" access="read-write" scope="instance" name="url"/>
    </properties>
    <methods>
      <method scope="instance" name="close">
        <parameters>
          <parameter name="request" type="dojo.data.api.Request|keywordArgs|null" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.close()</description>
      </method>
      <method scope="instance" name="containsValue">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="boolean."/>
        </return-types>
        <description>See dojo.data.api.Read.containsValue()</description>
      </method>
      <method scope="instance" name="fetchItemByIdentity">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Identity.fetchItemByIdentity()</description>
      </method>
      <method scope="instance" name="getAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getAttributes()</description>
      </method>
      <method scope="instance" name="getFeatures">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getFeatures()</description>
      </method>
      <method scope="instance" name="getIdentity">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
          <return-type type="null"/>
        </return-types>
        <description>See dojo.data.api.Identity.getIdentity()</description>
      </method>
      <method scope="instance" name="getIdentityAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Identity.getIdentifierAttributes()</description>
      </method>
      <method scope="instance" name="getLabel">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabel()</description>
      </method>
      <method scope="instance" name="getLabelAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabelAttributes()</description>
      </method>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="defaultValue" type="value" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getValue()</description>
      </method>
      <method scope="instance" name="getValues">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>See dojo.data.api.Read.getValues() Key/Value syntax does not support multi-valued attributes, so this is just a wrapper function for getValue().</description>
      </method>
      <method scope="instance" name="hasAttribute">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.hasAttribute()</description>
      </method>
      <method scope="instance" name="isItem">
        <parameters>
          <parameter name="something" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>See dojo.data.api.Read.isItem()</description>
      </method>
      <method scope="instance" name="isItemLoaded">
        <parameters>
          <parameter name="something" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>See dojo.data.api.Read.isItemLoaded() The KeyValueStore always loads all items, so if it's an item, then it's loaded.</description>
      </method>
      <method scope="instance" name="loadItem">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.loadItem()</description>
      </method>
      <method scope="instance" name="_assertIsAttribute" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="String" usage="required">
            <description>The attribute to test for being contained by the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.</description>
      </method>
      <method scope="instance" name="_assertIsItem" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item to test for being contained by the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function tests whether the item passed in is indeed an item in the store.</description>
      </method>
      <method scope="instance" name="_containsValue" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The data item to examine for attribute values.</description>
          </parameter>
          <parameter name="attribute" type="attribute" usage="required">
            <description>The attribute to inspect.</description>
          </parameter>
          <parameter name="value" type="anything" usage="required">
            <description>The value to match.</description>
          </parameter>
          <parameter name="regexp" type="RegExp" usage="optional">
            <description>Optional regular expression generated off value if value was of string type to handle wildcarding. If present and attribute values are string, then it can be used for comparison instead of 'value'</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Internal function for looking at the values contained by the item.</description>
      </method>
      <method scope="instance" name="_createItem" visibility="internal">
        <parameters>
          <parameter name="something" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_fetchItems" visibility="internal">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required"/>
          <parameter name="findCallback" type="Function" usage="required"/>
          <parameter name="errorCallback" type="Function" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.util.simpleFetch.fetch()</description>
      </method>
      <method scope="instance" name="_finishFetchItemByIdentity" visibility="internal">
        <parameters>
          <parameter name="items" type="Array" usage="required"/>
          <parameter name="request" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_handleQueuedFetches" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Internal function to execute delayed request in the store. Execute any deferred fetches now.</description>
      </method>
      <method scope="instance" name="_processData" visibility="internal">
        <parameters>
          <parameter name="data" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.data.OpmlStore" superclass="Object">
    <description>constructor</description>
    <constructors>
      <constructor scope="instance">
        <description>constructor</description>
        <parameters>
          <parameter name="keywordParameters" type="Object" usage="required">
            <description>url String, label: String}  Where label is optional and configures what should be used as the return from getLabel()</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <mixins scope="instance">
      <mixin scope="static" type="dojo.data.util.simpleFetch"/>
    </mixins>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="label"/>
      <property type="Object" access="read-write" scope="instance" name="url"/>
      <property type="Object" access="read-write" scope="instance" name="_arrayOfAllItems" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_arrayOfTopLevelItems" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_identCount" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_identityMap" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_idProp" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_loadFinished" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_loadInProgress" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_metadataNodes" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_opmlData" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_queuedFetches" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_xmlData" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="label"/>
      <property type="Object" access="read-write" scope="instance" name="url"/>
    </properties>
    <methods>
      <method scope="instance" name="close">
        <parameters>
          <parameter name="request" type="dojo.data.api.Request|keywordArgs|null" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.close()</description>
      </method>
      <method scope="instance" name="containsValue">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="attribute" usage="required"/>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="boolean."/>
        </return-types>
        <description>See dojo.data.api.Read.containsValue()</description>
      </method>
      <method scope="instance" name="fetchItemByIdentity">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Identity.fetchItemByIdentity()</description>
      </method>
      <method scope="instance" name="getAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>See dojo.data.api.Read.getAttributes()</description>
      </method>
      <method scope="instance" name="getFeatures">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getFeatures()</description>
      </method>
      <method scope="instance" name="getIdentity">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="null"/>
        </return-types>
        <description>See dojo.data.api.Identity.getIdentity()</description>
      </method>
      <method scope="instance" name="getIdentityAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Identity.getIdentifierAttributes()  Identity isn't a public attribute in the item, it's the node count. So, return null.</description>
      </method>
      <method scope="instance" name="getLabel">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
          <return-type type="undefined"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabel()</description>
      </method>
      <method scope="instance" name="getLabelAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabelAttributes()</description>
      </method>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="attribute" usage="required"/>
          <parameter name="defaultValue" type="value" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getValue()</description>
      </method>
      <method scope="instance" name="getValues">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="attribute" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>See dojo.data.api.Read.getValues()</description>
      </method>
      <method scope="instance" name="hasAttribute">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="attribute" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>See dojo.data.api.Read.hasAttribute()</description>
      </method>
      <method scope="instance" name="isItem">
        <parameters>
          <parameter name="something" type="anything" usage="required">
            <description>can not be null, the nodeType must be an XML Element, the tagName must be &amp;quot;outline&amp;quot;, and the node must be a member of XML document for this datastore.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.isItem()</description>
      </method>
      <method scope="instance" name="isItemLoaded">
        <parameters>
          <parameter name="something" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>See dojo.data.api.Read.isItemLoaded() OpmlStore loads every item, so if it's an item, then it's loaded.</description>
      </method>
      <method scope="instance" name="loadItem">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.loadItem()</description>
      </method>
      <method scope="instance" name="_assertIsAttribute" visibility="internal">
        <parameters>
          <parameter name="attribute" type="item|String" usage="required">
            <description>The attribute to test for being contained by the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.</description>
      </method>
      <method scope="instance" name="_assertIsItem" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_checkChildNodes" visibility="internal">
        <parameters>
          <parameter name="node" type="Node" usage="required">
            <description>The child node to walk.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Internal function to recurse over all child nodes from the store and add them As non-toplevel items</description>
      </method>
      <method scope="instance" name="_containsValue" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The data item to examine for attribute values.</description>
          </parameter>
          <parameter name="attribute" type="attribute" usage="required">
            <description>The attribute to inspect.</description>
          </parameter>
          <parameter name="value" type="anything" usage="required">
            <description>The value to match.</description>
          </parameter>
          <parameter name="regexp" type="RegExp" usage="optional">
            <description>Optional regular expression generated off value if value was of string type to handle wildcarding. If present and attribute values are string, then it can be used for comparison instead of 'value'</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Internal function for looking at the values contained by the item.</description>
      </method>
      <method scope="instance" name="_fetchItems" visibility="internal">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required"/>
          <parameter name="findCallback" type="Function" usage="required"/>
          <parameter name="errorCallback" type="Function" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.util.simpleFetch.fetch()</description>
      </method>
      <method scope="instance" name="_getItemsArray" visibility="internal">
        <parameters>
          <parameter name="queryOptions" type="Object" usage="optional">
            <description>The query options parameter, if any.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Internal function to determine which list of items to search over.</description>
      </method>
      <method scope="instance" name="_handleQueuedFetches" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Internal function to execute delayed request in the store. Execute any deferred fetches now.</description>
      </method>
      <method scope="instance" name="_processRawXmlTree" visibility="internal">
        <parameters>
          <parameter name="rawXmlTree" type="xmlDoc" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_removeChildNodesThatAreNotElementNodes" visibility="internal">
        <parameters>
          <parameter name="node" type="node" usage="required"/>
          <parameter name="recursive" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.data.PersevereRestStore" superclass="dojox.data.JsonRestStore">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="options" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <methods>
      <method scope="instance" name="getIdentity">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.data.PicasaStore" superclass="Object">
    <description>Initializer for the PicasaStore store.</description>
    <constructors>
      <constructor scope="instance">
        <description>Initializer for the PicasaStore store.</description>
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <mixins scope="instance">
      <mixin scope="static" type="dojo.data.util.simpleFetch"/>
    </mixins>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="label"/>
      <property type="Object" access="read-write" scope="instance" name="label"/>
      <property type="Object" access="read-write" scope="instance" name="_picasaUrl" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_storeRef" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="close">
        <parameters>
          <parameter name="request" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.close()</description>
      </method>
      <method scope="instance" name="containsValue">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.containsValue()</description>
      </method>
      <method scope="instance" name="getAttributes">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getAttributes()</description>
      </method>
      <method scope="instance" name="getFeatures">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getFeatures()</description>
      </method>
      <method scope="instance" name="getLabel">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabel()</description>
      </method>
      <method scope="instance" name="getLabelAttributes">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabelAttributes()</description>
      </method>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getValue()</description>
      </method>
      <method scope="instance" name="getValues">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getValue()</description>
      </method>
      <method scope="instance" name="hasAttribute">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.hasAttributes()</description>
      </method>
      <method scope="instance" name="isItem">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.isItem()</description>
      </method>
      <method scope="instance" name="isItemLoaded">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.isItemLoaded()</description>
      </method>
      <method scope="instance" name="loadItem">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.loadItem()</description>
      </method>
      <method scope="instance" name="_assertIsAttribute" visibility="internal">
        <parameters>
          <parameter name="attribute" type="Object" usage="required">
            <description>The attribute to test for being contained by the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.</description>
      </method>
      <method scope="instance" name="_assertIsItem" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item to test for being contained by the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function tests whether the item passed in is indeed an item in the store.</description>
      </method>
      <method scope="instance" name="_fetchItems" visibility="internal">
        <parameters>
          <parameter name="request" type="A" usage="required">
            <description>request object</description>
          </parameter>
          <parameter name="fetchHandler" type="A" usage="required">
            <description>function to call for fetched items</description>
          </parameter>
          <parameter name="errorHandler" type="A" usage="required">
            <description>function to call on error</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Fetch picasa items that match to a query</description>
      </method>
      <method scope="instance" name="_processPicasaData" visibility="internal">
        <parameters>
          <parameter name="data" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_unescapeHtml" visibility="internal">
        <parameters>
          <parameter name="str" type="String." usage="required">
            <description>The string to un-escape</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Utility function to un-escape XML special characters in an HTML string.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.data.QueryReadStore" superclass="Object">
    <description>This class provides a store that is mainly intended to be used for loading data dynamically from the server, used i.e. for retreiving chunks of data from huge data stores on the server (by server-side filtering!). Upon calling the fetch() method of this store the data are requested from the server if they are not yet loaded for paging (or cached).  For example used for a combobox which works on lots of data. It can be used to retreive the data partially upon entering the letters &amp;quot;ac&amp;quot; it returns only items like &amp;quot;action&amp;quot;, &amp;quot;acting&amp;quot;, etc.  note: The field name &amp;quot;id&amp;quot; in a query is reserved for looking up data by id. This is necessary as before the first fetch, the store has no way of knowing which field the server will declare as identifier.  examples: 	// The parameter &amp;quot;query&amp;quot; contains the data that are sent to the server. 	var store = new dojox.data.QueryReadStore({url:'/search.php'}); 	store.fetch({query:{name:'a'}, queryOptions:{ignoreCase:false}});  	// Since &amp;quot;serverQuery&amp;quot; is given, it overrules and those data are 	// sent to the server. 	var store = new dojox.data.QueryReadStore({url:'/search.php'}); 	store.fetch({serverQuery:{name:'a'}, queryOptions:{ignoreCase:false}});  	&amp;lt;div dojoType=&amp;quot;dojox.data.QueryReadStore&amp;quot; 		jsId=&amp;quot;store2&amp;quot; 		url=&amp;quot;../tests/stores/QueryReadStore.php&amp;quot; 		requestMethod=&amp;quot;post&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; 	&amp;lt;div dojoType=&amp;quot;dojox.grid.data.DojoData&amp;quot; 		jsId=&amp;quot;model2&amp;quot; 		store=&amp;quot;store2&amp;quot; 		sortFields=&amp;quot;[{attribute: 'name', descending: true}]&amp;quot; 		rowsPerPage=&amp;quot;30&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; 	&amp;lt;div dojoType=&amp;quot;dojox.Grid&amp;quot; id=&amp;quot;grid2&amp;quot; 		model=&amp;quot;model2&amp;quot; 		structure=&amp;quot;gridLayout&amp;quot; 		style=&amp;quot;height:300px; width:800px;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;   todo: - there is a bug in the paging, when i set start:2, count:5 after an initial fetch() and doClientPaging:true it returns 6 elemetns, though count=5, try it in QueryReadStore.html - add optional caching - when the first query searched for &amp;quot;a&amp;quot; and the next for a subset of the first, i.e. &amp;quot;ab&amp;quot; then we actually dont need a server request, if we have client paging, we just need to filter the items we already have that might also be tooo much logic</description>
    <constructors>
      <constructor scope="instance">
        <description>This class provides a store that is mainly intended to be used for loading data dynamically from the server, used i.e. for retreiving chunks of data from huge data stores on the server (by server-side filtering!). Upon calling the fetch() method of this store the data are requested from the server if they are not yet loaded for paging (or cached).  For example used for a combobox which works on lots of data. It can be used to retreive the data partially upon entering the letters &amp;quot;ac&amp;quot; it returns only items like &amp;quot;action&amp;quot;, &amp;quot;acting&amp;quot;, etc.  note: The field name &amp;quot;id&amp;quot; in a query is reserved for looking up data by id. This is necessary as before the first fetch, the store has no way of knowing which field the server will declare as identifier.  examples: 	// The parameter &amp;quot;query&amp;quot; contains the data that are sent to the server. 	var store = new dojox.data.QueryReadStore({url:'/search.php'}); 	store.fetch({query:{name:'a'}, queryOptions:{ignoreCase:false}});  	// Since &amp;quot;serverQuery&amp;quot; is given, it overrules and those data are 	// sent to the server. 	var store = new dojox.data.QueryReadStore({url:'/search.php'}); 	store.fetch({serverQuery:{name:'a'}, queryOptions:{ignoreCase:false}});  	&amp;lt;div dojoType=&amp;quot;dojox.data.QueryReadStore&amp;quot; 		jsId=&amp;quot;store2&amp;quot; 		url=&amp;quot;../tests/stores/QueryReadStore.php&amp;quot; 		requestMethod=&amp;quot;post&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; 	&amp;lt;div dojoType=&amp;quot;dojox.grid.data.DojoData&amp;quot; 		jsId=&amp;quot;model2&amp;quot; 		store=&amp;quot;store2&amp;quot; 		sortFields=&amp;quot;[{attribute: 'name', descending: true}]&amp;quot; 		rowsPerPage=&amp;quot;30&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; 	&amp;lt;div dojoType=&amp;quot;dojox.Grid&amp;quot; id=&amp;quot;grid2&amp;quot; 		model=&amp;quot;model2&amp;quot; 		structure=&amp;quot;gridLayout&amp;quot; 		style=&amp;quot;height:300px; width:800px;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;   todo: - there is a bug in the paging, when i set start:2, count:5 after an initial fetch() and doClientPaging:true it returns 6 elemetns, though count=5, try it in QueryReadStore.html - add optional caching - when the first query searched for &amp;quot;a&amp;quot; and the next for a subset of the first, i.e. &amp;quot;ab&amp;quot; then we actually dont need a server request, if we have client paging, we just need to filter the items we already have that might also be tooo much logic</description>
        <parameters>
          <parameter name="params" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="lastRequestHash"/>
      <property type="Object" access="read-write" scope="instance" name="_identifier" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_items" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_itemsByIdentity" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_labelAttr" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_lastServerQuery" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="fetch"/>
      <property type="Object" access="read-write" scope="instance" name="requestMethod"/>
      <property type="Object" access="read-write" scope="instance" name="url"/>
      <property type="Object" access="read-write" scope="instance" name="_className" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_items" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_labelAttr" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="close">
        <parameters>
          <parameter name="request" type="dojo.data.api.Request|keywordArgs|null" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="containsValue">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="fetchItemByIdentity">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Identity.fetchItemByIdentity()  See if we have already loaded the item with that id In case there hasn't been a fetch yet, _itemsByIdentity is null and thus a fetch will be triggered below.</description>
      </method>
      <method scope="instance" name="getAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getFeatures">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getIdentity">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Identity.getIdentity()</description>
      </method>
      <method scope="instance" name="getIdentityAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Identity.getIdentityAttributes()</description>
      </method>
      <method scope="instance" name="getLabel">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
          <return-type type="undefined"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabel()</description>
      </method>
      <method scope="instance" name="getLabelAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
          <return-type type="null"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabelAttributes()</description>
      </method>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="defaultValue" type="value" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getValues">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="hasAttribute">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.hasAttribute()</description>
      </method>
      <method scope="instance" name="isItem">
        <parameters>
          <parameter name="something" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isItemLoaded">
        <parameters>
          <parameter name="something" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="loadItem">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_assertIsAttribute" visibility="internal">
        <parameters>
          <parameter name="attribute" type="Object" usage="required">
            <description>The attribute to test for being contained by the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.</description>
      </method>
      <method scope="instance" name="_assertIsItem" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item to test for being contained by the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>It throws an error if item is not valid, so you can call it in every method that needs to throw an error when item is invalid.</description>
      </method>
      <method scope="instance" name="_fetchItems" visibility="internal">
        <parameters>
          <parameter name="request" type="Object" usage="required"/>
          <parameter name="fetchHandler" type="Object" usage="required"/>
          <parameter name="errorHandler" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>The request contains the data as defined in the Read-API. Additionally there is following keyword &amp;quot;serverQuery&amp;quot;.  The *serverQuery* parameter, optional. This parameter contains the data that will be sent to the server. If this parameter is not given the parameter &amp;quot;query&amp;quot;'s data are sent to the server. This is done for some reasons: - to specify explicitly which data are sent to the server, they might also be a mix of what is contained in &amp;quot;query&amp;quot;, &amp;quot;queryOptions&amp;quot; and the paging parameters &amp;quot;start&amp;quot; and &amp;quot;count&amp;quot; or may be even completely different things. - don't modify the request.query data, so the interface using this store can rely on unmodified data, as the combobox dijit currently does it, it compares if the query has changed - request.query is required by the Read-API  I.e. the following examples might be sent via GET: fetch({query:{name:&amp;quot;abc&amp;quot;}, queryOptions:{ignoreCase:true}}) the URL will become:   /url.php?name=abc  fetch({serverQuery:{q:&amp;quot;abc&amp;quot;, c:true}, query:{name:&amp;quot;abc&amp;quot;}, queryOptions:{ignoreCase:true}}) the URL will become:   /url.php?q=abc&amp;amp;c=true // The serverQuery-parameter has overruled the query-parameter // but the query parameter stays untouched, but is not sent to the server! // The serverQuery contains more data than the query, so they might differ!</description>
      </method>
      <method scope="instance" name="_filterResponse" visibility="internal">
        <parameters>
          <parameter name="data" type="The" usage="required">
            <description>data received from server</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>If the data from servers needs to be processed before it can be processed by this store, then this function should be re-implemented in subclass. This default implementation just return the data unchanged.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.data.SnapLogicStore" superclass="Object">
    <description>Initialize a SnapLogicStore object.</description>
    <constructors>
      <constructor scope="instance">
        <description>Initialize a SnapLogicStore object.</description>
        <parameters>
          <parameter name="args" type="Object" usage="required">
            <description>An object that contains properties for initializing the new data store object. The following properties are understood:</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="A" access="read-write" scope="instance" name="url">
        <description>URL to the SnapLogic pipeline's output routed through PipeToHttp. Typically, this will look like &amp;quot;http://&amp;lt;server-host&amp;gt;:&amp;lt;port&amp;gt;/pipe/&amp;lt;pipeline-url&amp;gt;/&amp;lt;pipeline-output-view&amp;gt;&amp;quot;. parameters: An object whose properties define parameters to the pipeline. The values of these properties will be sent to the pipeline as parameters when it run.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_parameters" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="Parts"/>
      <property type="A" access="read-write" scope="instance" name="url">
        <description>URL to the SnapLogic pipeline's output routed through PipeToHttp. Typically, this will look like &amp;quot;http://&amp;lt;server-host&amp;gt;:&amp;lt;port&amp;gt;/pipe/&amp;lt;pipeline-url&amp;gt;/&amp;lt;pipeline-output-view&amp;gt;&amp;quot;. parameters: An object whose properties define parameters to the pipeline. The values of these properties will be sent to the pipeline as parameters when it run.</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="close">
        <parameters>
          <parameter name="request" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.close()</description>
      </method>
      <method scope="instance" name="containsValue">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>See dojo.data.api.Read.containsValue()</description>
      </method>
      <method scope="instance" name="fetch">
        <parameters>
          <parameter name="request" type="Object" usage="required">
            <description>See dojo.data.api.Read.close() for generic interface.  In addition to the standard Read API fetch support, this store supports an optimization for for retrieving the total count of records in the Pipeline without retrieving the data. To use this optimization, simply provide an onBegin handler without an onItem or onComplete handler.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.close()</description>
      </method>
      <method scope="instance" name="getAttributes">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getAttributes()</description>
      </method>
      <method scope="instance" name="getFeatures">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getFeatures()</description>
      </method>
      <method scope="instance" name="getLabel">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabel()</description>
      </method>
      <method scope="instance" name="getLabelAttributes">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabelAttributes()</description>
      </method>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.getValue()</description>
      </method>
      <method scope="instance" name="getValues">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>See dojo.data.api.Read.getValue()</description>
      </method>
      <method scope="instance" name="hasAttribute">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.hasAttributes()</description>
      </method>
      <method scope="instance" name="isItem">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.isItem()</description>
      </method>
      <method scope="instance" name="isItemLoaded">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>See dojo.data.api.Read.isItemLoaded()</description>
      </method>
      <method scope="instance" name="loadItem">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.loadItem()</description>
      </method>
      <method scope="instance" name="_assertIsAttribute" visibility="internal">
        <parameters>
          <parameter name="attribute" type="Object" usage="required">
            <description>The attribute to test for being contained by the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.</description>
      </method>
      <method scope="instance" name="_assertIsItem" visibility="internal">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>The item to test for being contained by the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function tests whether the item passed in is indeed an item in the store.</description>
      </method>
      <method scope="instance" name="_fetchHandler" visibility="internal">
        <parameters>
          <parameter name="request" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Process data retrieved via fetch and send it back to requester. response: The data returend from the I/O transport. In the normal case, it will be an array of result rows from the pipeline. In the special case for record count optimization, response will be an array with a single element containing the total pipeline result row count. See fetch() for details on this optimization.</description>
      </method>
      <method scope="instance" name="_partHandler" visibility="internal">
        <parameters>
          <parameter name="request" type="Object" usage="required">
            <description>The request/handle object used with the original fetch() call.</description>
          </parameter>
          <parameter name="part" type="String" usage="required">
            <description>A value indicating which request this handler call is for (this.Parts).</description>
          </parameter>
          <parameter name="response" type="Object" usage="required">
            <description>Response received from the underlying IO transport.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Handle the individual replies for both data and length requests.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.data.XmlItem" superclass="Object">
    <description>Initialize with an XML element</description>
    <constructors>
      <constructor scope="instance">
        <description>Initialize with an XML element</description>
        <parameters>
          <parameter name="element" type="An" usage="required">
            <description>XML element</description>
          </parameter>
          <parameter name="store" type="The" usage="required">
            <description>containing store, if any.</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="An" access="read-write" scope="instance" name="element">
        <description>XML element</description>
      </property>
      <property type="The" access="read-write" scope="instance" name="store">
        <description>containing store, if any.</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="toString">
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Return a value of the first text child of the element</description>
      </method>
    </methods>
  </class>
  <class type="dojox.data.XmlStore" superclass="Object">
    <description>Constructor for the XML store.</description>
    <constructors>
      <constructor scope="instance">
        <description>Constructor for the XML store.</description>
        <parameters>
          <parameter name="args" type="Object" usage="required">
            <description>An anonymous object to initialize properties.  It expects the following values:</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <mixins scope="instance">
      <mixin scope="static" type="dojo.data.util.simpleFetch"/>
    </mixins>
    <properties>
      <property type="An" access="read-write" scope="instance" name="keyAttribute">
        <description>attribute name for a key or an indentify attributeMap:   An anonymous object contains properties for attribute mapping, {&amp;quot;tag_name.item_attribute_name&amp;quot;: &amp;quot;@xml_attribute_name&amp;quot;, ...}</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="label"/>
      <property type="A" access="read-write" scope="instance" name="rootItem">
        <description>tag name for root items</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="sendQuery">
        <description>boolean indicate to add a query string to the service URL</description>
      </property>
      <property type="The" access="read-write" scope="instance" name="url">
        <description>url to a service or an XML document that represents the store</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_attributeMap" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_deletedItems" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_modifiedItems" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_newItems" visibility="internal"/>
      <property type="An" access="read-write" scope="instance" name="keyAttribute">
        <description>attribute name for a key or an indentify attributeMap:   An anonymous object contains properties for attribute mapping, {&amp;quot;tag_name.item_attribute_name&amp;quot;: &amp;quot;@xml_attribute_name&amp;quot;, ...}</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="label"/>
      <property type="A" access="read-write" scope="instance" name="rootItem">
        <description>tag name for root items</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="sendQuery">
        <description>boolean indicate to add a query string to the service URL</description>
      </property>
      <property type="The" access="read-write" scope="instance" name="url">
        <description>url to a service or an XML document that represents the store</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="close">
        <parameters>
          <parameter name="request" type="dojo.data.api.Request|keywordArgs|null" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>See dojo.data.api.Read.close()</description>
      </method>
      <method scope="instance" name="containsValue">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>must be an instance of a dojox.data.XmlItem from the store instance.</description>
          </parameter>
          <parameter name="attribute" type="attribute" usage="required">
            <description>A tag name of a child element, An XML attribute name or one of special names</description>
          </parameter>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Check whether the attribute values contain the value</description>
      </method>
      <method scope="instance" name="deleteItem">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>An XML element to delete</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Delete an dojox.data.XmlItem (wrapper to a XML element).</description>
      </method>
      <method scope="instance" name="getAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>An XML element</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Return an array of attribute names</description>
      </method>
      <method scope="instance" name="getFeatures">
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Return supported data APIs</description>
      </method>
      <method scope="instance" name="getLabel">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="undefined"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabel()</description>
      </method>
      <method scope="instance" name="getLabelAttributes">
        <parameters>
          <parameter name="item" type="item" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
          <return-type type="null"/>
        </return-types>
        <description>See dojo.data.api.Read.getLabelAttributes()</description>
      </method>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>An XML element that holds the attribute</description>
          </parameter>
          <parameter name="attribute" type="attribute" usage="required">
            <description>A tag name of a child element, An XML attribute name or one of special names</description>
          </parameter>
          <parameter name="defaultValue" type="value" usage="optional">
            <description>A default value</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
          <return-type type="String"/>
        </return-types>
        <description>Return an attribute value</description>
      </method>
      <method scope="instance" name="getValues">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>An XML element that holds the attribute</description>
          </parameter>
          <parameter name="attribute" type="attribute" usage="required">
            <description>A tag name of child elements, An XML attribute name or one of special names</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Return an array of attribute values</description>
      </method>
      <method scope="instance" name="hasAttribute">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>must be an instance of a dojox.data.XmlItem from the store instance.</description>
          </parameter>
          <parameter name="attribute" type="attribute" usage="required">
            <description>A tag name of a child element, An XML attribute name or one of special names</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Check whether an element has the attribute</description>
      </method>
      <method scope="instance" name="isDirty">
        <parameters>
          <parameter name="item" type="item" usage="optional">
            <description>An item (XML element) to check</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Check whether an item is new, modified or deleted</description>
      </method>
      <method scope="instance" name="isItem">
        <parameters>
          <parameter name="something" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
          <return-type type="boolran"/>
        </return-types>
        <description>Check whether the object is an item (XML element) item: An object to check</description>
      </method>
      <method scope="instance" name="isItemLoaded">
        <parameters>
          <parameter name="something" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Check whether the object is an item (XML element) and loaded item: An object to check</description>
      </method>
      <method scope="instance" name="loadItem">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required">
            <description>containing the args for loadItem.  See dojo.data.api.Read.loadItem()</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Load an item (XML element)</description>
      </method>
      <method scope="instance" name="newItem">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="optional">
            <description>An object containing initial attributes</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Return a new dojox.data.XmlItem</description>
      </method>
      <method scope="instance" name="revert">
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Invalidate changes (new and/or modified elements)</description>
      </method>
      <method scope="instance" name="save">
        <parameters>
          <parameter name="keywordArgs" type="Object" usage="required">
            <description>An object for callbacks</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Save new and/or modified items (XML elements)</description>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>An XML element that holds the attribute</description>
          </parameter>
          <parameter name="attribute" type="attribute|String" usage="required">
            <description>A tag name of a child element, An XML attribute name or one of special names</description>
          </parameter>
          <parameter name="value" type="Object" usage="required">
            <description>A attribute value to set</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Set an attribute value</description>
      </method>
      <method scope="instance" name="setValues">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>An XML element that holds the attribute</description>
          </parameter>
          <parameter name="attribute" type="attribute|String" usage="required">
            <description>A tag name of child elements, an XML attribute name or one of special names value: A attribute value to set</description>
          </parameter>
          <parameter name="values" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Set attribute values</description>
      </method>
      <method scope="instance" name="unsetAttribute">
        <parameters>
          <parameter name="item" type="item" usage="required">
            <description>An XML element that holds the attribute</description>
          </parameter>
          <parameter name="attribute" type="attribute|String" usage="required">
            <description>A tag name of child elements, an XML attribute name or one of special names</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Remove an attribute</description>
      </method>
      <method scope="instance" name="_backupItem" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_fetchItems" visibility="internal">
        <parameters>
          <parameter name="request" type="A" usage="required">
            <description>request object</description>
          </parameter>
          <parameter name="fetchHandler" type="A" usage="required">
            <description>function to call for fetched items</description>
          </parameter>
          <parameter name="errorHandler" type="A" usage="required">
            <description>function to call on error</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Fetch items (XML elements) that match to a query</description>
      </method>
      <method scope="instance" name="_forgetItem" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getAttribute" visibility="internal">
        <parameters>
          <parameter name="tagName" type="Object" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getDeleteUrl" visibility="internal">
        <parameters>
          <parameter name="item" type="An" usage="required">
            <description>item to delete</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Generate a URL for delete</description>
      </method>
      <method scope="instance" name="_getDocument" visibility="internal">
        <parameters>
          <parameter name="element" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="DOMDocument"/>
        </return-types>
      </method>
      <method scope="instance" name="_getFetchUrl" visibility="internal">
        <parameters>
          <parameter name="request" type="A" usage="required">
            <description>request object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Generate a URL for fetch</description>
      </method>
      <method scope="instance" name="_getItem" visibility="internal">
        <parameters>
          <parameter name="element" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getItemIndex" visibility="internal">
        <parameters>
          <parameter name="items" type="Object" usage="required"/>
          <parameter name="element" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
      </method>
      <method scope="instance" name="_getItems" visibility="internal">
        <parameters>
          <parameter name="document" type="An" usage="required">
            <description>XML document</description>
          </parameter>
          <parameter name="request" type="A" usage="required">
            <description>request object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Fetch items (XML elements) in an XML document based on a request</description>
      </method>
      <method scope="instance" name="_getPostContent" visibility="internal">
        <parameters>
          <parameter name="item" type="An" usage="required">
            <description>item to save</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Generate a content to post</description>
      </method>
      <method scope="instance" name="_getPostUrl" visibility="internal">
        <parameters>
          <parameter name="item" type="An" usage="required">
            <description>item to save</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Generate a URL for post</description>
      </method>
      <method scope="instance" name="_getPutContent" visibility="internal">
        <parameters>
          <parameter name="item" type="An" usage="required">
            <description>item to save</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Generate a content to put</description>
      </method>
      <method scope="instance" name="_getPutUrl" visibility="internal">
        <parameters>
          <parameter name="item" type="An" usage="required">
            <description>item to save</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Generate a URL for put</description>
      </method>
      <method scope="instance" name="_getRootElement" visibility="internal">
        <parameters>
          <parameter name="element" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="DOMElement"/>
        </return-types>
      </method>
      <method scope="instance" name="_restoreItems" visibility="internal">
        <parameters>
          <parameter name="items" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_saveItem" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="keywordArgs" type="Object" usage="required"/>
          <parameter name="method" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.date" superclass="Object"/>
  <class type="dojox.date.php" superclass="Object">
    <methods>
      <method scope="static" name="format">
        <parameters>
          <parameter name="date" type="Date" usage="required"/>
          <parameter name="format" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Get a formatted string for a given date object</description>
      </method>
    </methods>
  </class>
  <class type="dojox.date.php.DateFormat" superclass="Object">
    <description>Format the internal date object</description>
    <constructors>
      <constructor scope="instance">
        <description>Format the internal date object</description>
        <parameters>
          <parameter name="format" type="String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="constructor.prototype.regex"/>
      <property type="Object" access="read-write" scope="instance" name="date"/>
      <property type="Object" access="read-write" scope="instance" name="replacements"/>
      <property type="Object" access="read-write" scope="instance" name="tokens"/>
      <property type="Object" access="read-write" scope="instance" name="monthdays"/>
      <property type="Object" access="read-write" scope="instance" name="months"/>
      <property type="Object" access="read-write" scope="instance" name="months_3"/>
      <property type="Object" access="read-write" scope="instance" name="weekdays"/>
      <property type="Object" access="read-write" scope="instance" name="weekdays_3"/>
    </properties>
    <methods>
      <method scope="instance" name="a">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Lowercase Ante meridiem and Post meridiem</description>
      </method>
      <method scope="instance" name="b">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Uppercase Ante meridiem and Post meridiem</description>
      </method>
      <method scope="instance" name="c">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>ISO 8601 date (added in PHP 5)</description>
      </method>
      <method scope="instance" name="d">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Day of the month, 2 digits with leading zeros</description>
      </method>
      <method scope="instance" name="e">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Timezone identifier (added in PHP 5.1.0)</description>
      </method>
      <method scope="instance" name="format">
        <parameters>
          <parameter name="date" type="Date" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="g">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>12-hour format of an hour without leading zeros</description>
      </method>
      <method scope="instance" name="h">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>12-hour format of an hour with leading zeros</description>
      </method>
      <method scope="instance" name="i">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Minutes with leading zeros</description>
      </method>
      <method scope="instance" name="j">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Day of the month without leading zeros</description>
      </method>
      <method scope="instance" name="l">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>A full textual representation of the day of the week</description>
      </method>
      <method scope="instance" name="m">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Numeric representation of a month, with leading zeros</description>
      </method>
      <method scope="instance" name="n">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Numeric representation of a month, without leading zeros</description>
      </method>
      <method scope="instance" name="o">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>ISO-8601 year number. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead. (added in PHP 5.1.0) TODO: Figure out what this means</description>
      </method>
      <method scope="instance" name="r">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>RFC 2822 formatted date</description>
      </method>
      <method scope="instance" name="s">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Seconds, with leading zeros</description>
      </method>
      <method scope="instance" name="t">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Number of days in the given month</description>
      </method>
      <method scope="instance" name="w">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Numeric representation of the day of the week</description>
      </method>
      <method scope="instance" name="y">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>A two digit representation of a year</description>
      </method>
      <method scope="instance" name="z">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>The day of the year (starting from 0)</description>
      </method>
    </methods>
  </class>
  <class type="dojox.date.php.DateFormat.B" superclass="Object">
    <description>Swatch Internet time A day is 1,000 beats. All time is measured from GMT + 1</description>
    <constructors>
      <constructor scope="instance">
        <description>Swatch Internet time A day is 1,000 beats. All time is measured from GMT + 1</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.date.php.DateFormat.D" superclass="Object">
    <description>A textual representation of a day, three letters</description>
    <constructors>
      <constructor scope="instance">
        <description>A textual representation of a day, three letters</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.date.php.DateFormat.F" superclass="Object">
    <description>A full textual representation of a month, such as January or March</description>
    <constructors>
      <constructor scope="instance">
        <description>A full textual representation of a month, such as January or March</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.date.php.DateFormat.G" superclass="Object">
    <description>24-hour format of an hour without leading zeros</description>
    <constructors>
      <constructor scope="instance">
        <description>24-hour format of an hour without leading zeros</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.date.php.DateFormat.H" superclass="Object">
    <description>24-hour format of an hour with leading zeros</description>
    <constructors>
      <constructor scope="instance">
        <description>24-hour format of an hour with leading zeros</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.date.php.DateFormat.I" superclass="Object">
    <description>Whether or not the date is in daylight saving time TODO: Can dojo.date do this?</description>
    <constructors>
      <constructor scope="instance">
        <description>Whether or not the date is in daylight saving time TODO: Can dojo.date do this?</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.date.php.DateFormat.L" superclass="Object">
    <description>Whether it's a leap year</description>
    <constructors>
      <constructor scope="instance">
        <description>Whether it's a leap year</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.date.php.DateFormat.M" superclass="Object">
    <description>A short textual representation of a month, three letters</description>
    <constructors>
      <constructor scope="instance">
        <description>A short textual representation of a month, three letters</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.date.php.DateFormat.N" superclass="Object">
    <description>ISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)</description>
    <constructors>
      <constructor scope="instance">
        <description>ISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.date.php.DateFormat.O" superclass="Object">
    <description>Difference to Greenwich time (GMT) in hours</description>
    <constructors>
      <constructor scope="instance">
        <description>Difference to Greenwich time (GMT) in hours</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.date.php.DateFormat.P" superclass="Object">
    <description>Difference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)</description>
    <constructors>
      <constructor scope="instance">
        <description>Difference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.date.php.DateFormat.S" superclass="Object">
    <description>English ordinal suffix for the day of the month, 2 characters</description>
    <constructors>
      <constructor scope="instance">
        <description>English ordinal suffix for the day of the month, 2 characters</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.date.php.DateFormat.T" superclass="Object">
    <description>Timezone abbreviation</description>
    <constructors>
      <constructor scope="instance">
        <description>Timezone abbreviation</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.date.php.DateFormat.U" superclass="Object">
    <description>Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)</description>
    <constructors>
      <constructor scope="instance">
        <description>Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.date.php.DateFormat.W" superclass="Object">
    <description>ISO-8601 week number of year, weeks starting on Monday (added in PHP 4.1.0)</description>
    <constructors>
      <constructor scope="instance">
        <description>ISO-8601 week number of year, weeks starting on Monday (added in PHP 4.1.0)</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.date.php.DateFormat.Y" superclass="Object">
    <description>A full numeric representation of a year, 4 digits</description>
    <constructors>
      <constructor scope="instance">
        <description>A full numeric representation of a year, 4 digits</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.date.php.DateFormat.Z" superclass="Object">
    <description>Timezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive.</description>
    <constructors>
      <constructor scope="instance">
        <description>Timezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive.</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.date.posix" superclass="Object">
    <methods>
      <method scope="static" name="strftime">
        <parameters>
          <parameter name="dateObject" type="Date" usage="required"/>
          <parameter name="format" type="String" usage="required"/>
          <parameter name="locale" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Formats the date object using the specifications of the POSIX strftime function</description>
      </method>
      <method scope="static" name="getStartOfWeek">
        <parameters>
          <parameter name="dateObject" type="Date" usage="required"/>
          <parameter name="firstDay" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Date"/>
        </return-types>
        <description>Return a date object representing the first day of the given date's week.</description>
      </method>
      <method scope="static" name="setIsoWeekOfYear">
        <parameters>
          <parameter name="dateObject" type="Date" usage="required"/>
          <parameter name="week" type="Number" usage="required">
            <description>can be positive or negative: -1 is the year's last week.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Date"/>
        </return-types>
        <description>Set the ISO8601 week number of the given date. The week containing January 4th is the first week of the year.</description>
      </method>
      <method scope="static" name="getIsoWeekOfYear">
        <parameters>
          <parameter name="dateObject" type="Date" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Get the ISO8601 week number of the given date. The week containing January 4th is the first week of the year. See http://en.wikipedia.org/wiki/ISO_week_date</description>
      </method>
      <method scope="static" name="getIsoWeeksInYear">
        <parameters>
          <parameter name="dateObject" type="Date" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Determine the number of ISO8601 weeks in the year of the given date. Most years have 52 but some have 53. See http://www.phys.uu.nl/~vgent/calendar/isocalendar_text3.htm</description>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_TextNode" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_noOpNode" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_base" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="ext-dojo"/>
    </properties>
  </class>
  <class type="dojox.dtl.AttributeNode" superclass="Object">
    <description>Works on attributes</description>
    <constructors>
      <constructor scope="instance">
        <description>Works on attributes</description>
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="nodelist" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contents"/>
      <property type="Object" access="read-write" scope="instance" name="key"/>
      <property type="Object" access="read-write" scope="instance" name="nodelist"/>
      <property type="Object" access="read-write" scope="instance" name="value"/>
      <property type="Object" access="read-write" scope="instance" name="_rendered" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.ChangeNode" superclass="Object">
    <description>Changes the parent during render/unrender</description>
    <constructors>
      <constructor scope="instance">
        <description>Changes the parent during render/unrender</description>
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
          <parameter name="up" type="Boolean" usage="optional"/>
          <parameter name="root" type="Bookean" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contents"/>
      <property type="Object" access="read-write" scope="instance" name="root"/>
      <property type="Object" access="read-write" scope="instance" name="up"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.Context" superclass="Object dojox.dtl._Context">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="dict" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_this" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="extend">
        <parameters>
          <parameter name="obj" type="dojox.dtl.Context|Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns a clone of this context object, with the items from the passed objecct mixed in.</description>
      </method>
      <method scope="instance" name="filter">
        <parameters>
          <parameter name="filter" type="dojox.dtl.Context|Object|String" usage="one-or-more"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns a clone of this context, only containing the items defined in the filter.</description>
      </method>
      <method scope="instance" name="getThis">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="hasKey">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setThis">
        <parameters>
          <parameter name="_this" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.contrib" superclass="Object"/>
  <class type="dojox.dtl.contrib.data" superclass="Object"/>
  <class type="dojox.dtl.contrib.data.BindDataNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="items" type="Object" usage="required"/>
          <parameter name="store" type="Object" usage="required"/>
          <parameter name="alias" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="alias"/>
      <property type="Object" access="read-write" scope="instance" name="items"/>
      <property type="Object" access="read-write" scope="instance" name="store"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.contrib.data._BoundItem" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="store" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="item"/>
      <property type="Object" access="read-write" scope="instance" name="store"/>
    </properties>
    <methods>
      <method scope="instance" name="get">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.contrib.dijit" superclass="Object"/>
  <class type="dojox.dtl.contrib.dijit.AttachNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="keys" type="Object" usage="required"/>
          <parameter name="object" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_keys" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_object" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_rendered" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.contrib.dijit.DojoTypeNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
          <parameter name="parsed" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_attach" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_attach._object" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_dijit" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_events" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_events._object" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_node" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_parsed" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_rendered" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_template" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.contrib.dijit.EventNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="command" type="Object" usage="required"/>
          <parameter name="obj" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_clear" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_command" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_fns" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_object" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_rendered" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_types" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_clear" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.contrib.html" superclass="Object"/>
  <class type="dojox.dtl.contrib.html.HtmlNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="name" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contents"/>
      <property type="Object" access="read-write" scope="instance" name="_div" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_last" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_lasts" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_rendered" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.contrib.html.StyleNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="styles" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contents"/>
      <property type="Object" access="read-write" scope="instance" name="_styles" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.contrib.objects" superclass="Object">
    <methods>
      <method scope="static" name="key">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.filter" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="dates"/>
    </properties>
  </class>
  <class type="dojox.dtl.filter.htmlstrings" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_escapeamp" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_escapelt" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_escapegt" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_escapeqt" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_escapedblqt" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_linebreaksrn" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_linebreaksn" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_linebreakss" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_linebreaksbr" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_removetagsfind" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_striptags" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="escape">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Escapes a string's HTML</description>
      </method>
      <method scope="static" name="linebreaks">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Converts newlines into &amp;lt;p&amp;gt; and &amp;lt;br /&amp;gt;s</description>
      </method>
      <method scope="static" name="linebreaksbr">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Converts newlines into &amp;lt;br /&amp;gt;s</description>
      </method>
      <method scope="static" name="removetags">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Removes a space separated list of [X]HTML tags from the output&amp;quot;</description>
      </method>
      <method scope="static" name="striptags">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Strips all [X]HTML tags</description>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.filter.integers" superclass="Object">
    <methods>
      <method scope="static" name="add">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="get_digit">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Given a whole number, returns the 1-based requested digit of it desciprtion: 1 is the right-most digit, 2 is the second-right-most digit, etc. Returns the original value for invalid input (if input or argument is not an integer, or if argument is less than 1). Otherwise, output is always an integer.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.filter.lists" superclass="Object">
    <methods>
      <method scope="static" name="_dictsort" visibility="internal">
        <parameters>
          <parameter name="a" type="Object" usage="required"/>
          <parameter name="b" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="dictsort">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Takes a list of dicts, returns that list sorted by the property given in the argument.</description>
      </method>
      <method scope="static" name="dictsortreversed">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Takes a list of dicts, returns that list sorted in reverse order by the property given in the argument.</description>
      </method>
      <method scope="static" name="first">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns the first item in a list</description>
      </method>
      <method scope="static" name="join">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Joins a list with a string, like Python's ``str.join(list)``</description>
      </method>
      <method scope="static" name="length">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns the length of the value - useful for lists</description>
      </method>
      <method scope="static" name="length_is">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns a boolean of whether the value's length is the argument</description>
      </method>
      <method scope="static" name="random">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns a random item from the list</description>
      </method>
      <method scope="static" name="slice">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns a slice of the list.</description>
      </method>
      <method scope="static" name="_unordered_list" visibility="internal">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="tabs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="unordered_list">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Recursively takes a self-nested list and returns an HTML unordered list -- WITHOUT opening and closing &amp;lt;ul&amp;gt; tags.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.filter.logic" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_yesno" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="default_">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>If value is unavailable, use given default</description>
      </method>
      <method scope="static" name="default_if_none">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>If value is null, use given default</description>
      </method>
      <method scope="static" name="divisibleby">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns true if the value is devisible by the argument&amp;quot;</description>
      </method>
      <method scope="static" name="yesno">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="being" usage="required">
            <description>a comma-delimited string, value of true/false/none chooses the appropriate item from the string</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.filter.misc" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_phone2numeric" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="filesizeformat">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Format the value like a 'human-readable' file size (i.e. 13 KB, 4.1 MB, 102bytes, etc).</description>
      </method>
      <method scope="static" name="pluralize">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns a plural suffix if the value is not 1, for '1 vote' vs. '2 votes'</description>
      </method>
      <method scope="static" name="phone2numeric">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Takes a phone number and converts it in to its numerical equivalent</description>
      </method>
      <method scope="static" name="pprint">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>A wrapper around toJson unless something better comes along</description>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.filter.strings" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_fix_ampersands" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_strings" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_truncatewords" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_truncate_words" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_truncate_tag" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_truncate_singlets" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_urlize" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_urlize2" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="_urlquote" visibility="internal">
        <parameters>
          <parameter name="url" type="String" usage="required"/>
          <parameter name="safe" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="addslashes">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Adds slashes - useful for passing strings to JavaScript, for example.</description>
      </method>
      <method scope="static" name="capfirst">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Capitalizes the first character of the value</description>
      </method>
      <method scope="static" name="center">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Centers the value in a field of a given width</description>
      </method>
      <method scope="static" name="cut">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Removes all values of arg from the given string</description>
      </method>
      <method scope="static" name="fix_ampersands">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Replaces ampersands with ``&amp;amp;amp;`` entities</description>
      </method>
      <method scope="static" name="floatformat">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Format a number according to arg</description>
      </method>
      <method scope="static" name="iriencode">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="linenumbers">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Displays text with line numbers</description>
      </method>
      <method scope="static" name="ljust">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="lower">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Converts a string into all lowercase</description>
      </method>
      <method scope="static" name="make_list">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns the value turned into a list. For an integer, it's a list of digits. For a string, it's a list of characters.</description>
      </method>
      <method scope="static" name="rjust">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="slugify">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Converts to lowercase, removes non-alpha chars and converts spaces to hyphens</description>
      </method>
      <method scope="static" name="stringformat">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Formats the variable according to the argument, a string formatting specifier. This specifier uses Python string formating syntax, with the exception that the leading &amp;quot;%&amp;quot; is dropped.</description>
      </method>
      <method scope="static" name="title">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Converts a string into titlecase</description>
      </method>
      <method scope="static" name="truncatewords">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Number" usage="required">
            <description>Number of words to truncate after</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Truncates a string after a certain number of words</description>
      </method>
      <method scope="static" name="truncatewords_html">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="upper">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="urlencode">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="urlize">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="urlizetrunc">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="wordcount">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="wordwrap">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.html" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="types"/>
      <property type="Object" access="read-write" scope="static" name="_attributes" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_re4" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_swallowed" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="tokenize">
        <parameters>
          <parameter name="nodes" type="Node" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_tokenize" visibility="internal">
        <parameters>
          <parameter name="node" type="Node" usage="required"/>
          <parameter name="tokens" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="__tokenize" visibility="internal">
        <parameters>
          <parameter name="child" type="Object" usage="required"/>
          <parameter name="tokens" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.HtmlBuffer" superclass="Object">
    <description>Allows the manipulation of DOM</description>
    <constructors>
      <constructor scope="instance">
        <description>Allows the manipulation of DOM</description>
        <parameters>
          <parameter name="parent" type="Node" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="rootNode"/>
      <property type="Object" access="read-write" scope="instance" name="_cache" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_closed" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_parent" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_parent.className"/>
      <property type="Object" access="read-write" scope="instance" name="_parent.htmlFor"/>
      <property type="Object" access="read-write" scope="instance" name="_removed" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="addEvent">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="type" type="Object" usage="required"/>
          <parameter name="fn" type="Object" usage="required"/>
          <parameter name="args" type="Array|Function" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="concat">
        <parameters>
          <parameter name="node" type="DOMNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getParent">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getRootNode">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onAddEvent">
        <parameters>
          <parameter name="node" type="DOMNode" usage="required"/>
          <parameter name="type" type="String" usage="required"/>
          <parameter name="description" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Stub to call when you're adding an event</description>
      </method>
      <method scope="instance" name="onAddNode">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Stub called before new nodes are added</description>
      </method>
      <method scope="instance" name="onAddNodeComplete">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Stub called after new nodes are added</description>
      </method>
      <method scope="instance" name="onClone">
        <parameters>
          <parameter name="from" type="DOMNode" usage="required"/>
          <parameter name="to" type="DOMNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Stub called when a node is duplicated</description>
      </method>
      <method scope="instance" name="onRemoveNode">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Stub called when nodes are removed</description>
      </method>
      <method scope="instance" name="onSetParent">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
          <parameter name="up" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Stub called when setParent is used.</description>
      </method>
      <method scope="instance" name="remove">
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setAttribute">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setParent">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
          <parameter name="up" type="Boolean" usage="optional"/>
          <parameter name="root" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.HtmlTemplate" superclass="Object">
    <description>Use this object for HTML templating</description>
    <constructors>
      <constructor scope="instance">
        <description>Use this object for HTML templating</description>
        <parameters>
          <parameter name="obj" type="String|DOMNode|dojo._Url" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="nodelist"/>
      <property type="Object" access="read-write" scope="instance" name="rootNode"/>
      <property type="Object" access="read-write" scope="instance" name="tokens"/>
      <property type="Object" access="read-write" scope="instance" name="_count" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_re" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="getBuffer">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getRootNode">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setClass">
        <parameters>
          <parameter name="str" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.register" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_registry" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="get">
        <parameters>
          <parameter name="module" type="String" usage="required"/>
          <parameter name="name" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getAttributeTags">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_any" visibility="internal">
        <parameters>
          <parameter name="type" type="Object" usage="required"/>
          <parameter name="base" type="Object" usage="required"/>
          <parameter name="locations" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="tags">
        <parameters>
          <parameter name="base" type="String" usage="required"/>
          <parameter name="locations" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="filters">
        <parameters>
          <parameter name="base" type="String" usage="required"/>
          <parameter name="locations" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.render" superclass="Object"/>
  <class type="dojox.dtl.render.html" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="sensitivity">
        <description>Set conditions under which to buffer changes</description>
      </property>
    </properties>
  </class>
  <class type="dojox.dtl.render.html.Render" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="attachPoint" type="DOMNode" usage="optional"/>
          <parameter name="tpl" type="dojox.dtl.HtmlTemplate" usage="optional"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="domNode"/>
      <property type="Object" access="read-write" scope="instance" name="_swap" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_tpl" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="sensitivity"/>
    </properties>
    <methods>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="tpl" type="dojox.dtl.HtmlTemplate" usage="optional"/>
          <parameter name="buffer" type="dojox.dtl.HtmlBuffer" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setAttachPoint">
        <parameters>
          <parameter name="node" type="Node" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.tag" superclass="Object"/>
  <class type="dojox.dtl.tag.date" superclass="Object">
    <methods>
      <method scope="static" name="now">
        <parameters>
          <parameter name="parser" type="Object" usage="required"/>
          <parameter name="text" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.tag.date.NowNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="format" type="Object" usage="required"/>
          <parameter name="TextNode" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contents"/>
      <property type="Object" access="read-write" scope="instance" name="format"/>
    </properties>
    <methods>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.tag.loader" superclass="Object"/>
  <class type="dojox.dtl.tag.loader.BlockNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="name" type="Object" usage="required"/>
          <parameter name="nodelist" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="name"/>
      <property type="Object" access="read-write" scope="instance" name="nodelist"/>
      <property type="Object" access="read-write" scope="instance" name="override"/>
      <property type="Object" access="read-write" scope="instance" name="rendered"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setOverride">
        <parameters>
          <parameter name="nodelist" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>In a shared parent, we override, not overwrite</description>
      </method>
      <method scope="instance" name="toString">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.tag.loader.ExtendsNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="getTemplate" type="Object" usage="required"/>
          <parameter name="nodelist" type="Object" usage="required"/>
          <parameter name="shared" type="Object" usage="required"/>
          <parameter name="parent" type="Object" usage="required"/>
          <parameter name="key" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="getTemplate"/>
      <property type="Object" access="read-write" scope="instance" name="key"/>
      <property type="Object" access="read-write" scope="instance" name="nodelist"/>
      <property type="Object" access="read-write" scope="instance" name="parent"/>
      <property type="Object" access="read-write" scope="instance" name="rendered"/>
      <property type="Object" access="read-write" scope="instance" name="shared"/>
      <property type="Object" access="read-write" scope="instance" name="parents"/>
    </properties>
    <methods>
      <method scope="instance" name="getParent">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="toString">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.tag.loader.IncludeNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="path" type="Object" usage="required"/>
          <parameter name="constant" type="Object" usage="required"/>
          <parameter name="getTemplate" type="Object" usage="required"/>
          <parameter name="TextNode" type="Object" usage="required"/>
          <parameter name="parsed" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="constant"/>
      <property type="Object" access="read-write" scope="instance" name="getTemplate"/>
      <property type="Object" access="read-write" scope="instance" name="last"/>
      <property type="Object" access="read-write" scope="instance" name="nodelist"/>
      <property type="Object" access="read-write" scope="instance" name="parsed"/>
      <property type="Object" access="read-write" scope="instance" name="path"/>
      <property type="Object" access="read-write" scope="instance" name="rendered"/>
      <property type="Object" access="read-write" scope="instance" name="TextNode"/>
      <property type="Object" access="read-write" scope="instance" name="_path" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_cache" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.tag.logic" superclass="Object"/>
  <class type="dojox.dtl.tag.logic.ForNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="assign" type="Object" usage="required"/>
          <parameter name="loop" type="Object" usage="required"/>
          <parameter name="reversed" type="Object" usage="required"/>
          <parameter name="nodelist" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="assign"/>
      <property type="Object" access="read-write" scope="instance" name="loop"/>
      <property type="Object" access="read-write" scope="instance" name="nodelist"/>
      <property type="Object" access="read-write" scope="instance" name="pool"/>
      <property type="Object" access="read-write" scope="instance" name="reversed"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.tag.logic.IfEqualNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="var1" type="Object" usage="required"/>
          <parameter name="var2" type="Object" usage="required"/>
          <parameter name="trues" type="Object" usage="required"/>
          <parameter name="falses" type="Object" usage="required"/>
          <parameter name="negate" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="falses"/>
      <property type="Object" access="read-write" scope="instance" name="negate"/>
      <property type="Object" access="read-write" scope="instance" name="trues"/>
      <property type="Object" access="read-write" scope="instance" name="var1"/>
      <property type="Object" access="read-write" scope="instance" name="var2"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.tag.logic.IfNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="bools" type="Object" usage="required"/>
          <parameter name="trues" type="Object" usage="required"/>
          <parameter name="falses" type="Object" usage="required"/>
          <parameter name="type" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="bools"/>
      <property type="Object" access="read-write" scope="instance" name="falses"/>
      <property type="Object" access="read-write" scope="instance" name="trues"/>
      <property type="Object" access="read-write" scope="instance" name="type"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.tag.loop" superclass="Object"/>
  <class type="dojox.dtl.tag.loop.CycleNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="cyclevars" type="Object" usage="required"/>
          <parameter name="name" type="Object" usage="required"/>
          <parameter name="TextNode" type="Object" usage="required"/>
          <parameter name="shared" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contents"/>
      <property type="Object" access="read-write" scope="instance" name="cyclevars"/>
      <property type="Object" access="read-write" scope="instance" name="name"/>
      <property type="Object" access="read-write" scope="instance" name="shared"/>
      <property type="Object" access="read-write" scope="instance" name="shared.counter"/>
      <property type="Object" access="read-write" scope="instance" name="TextNode"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.tag.loop.IfChangedNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="nodes" type="Object" usage="required"/>
          <parameter name="vars" type="Object" usage="required"/>
          <parameter name="shared" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="nodes"/>
      <property type="Object" access="read-write" scope="instance" name="shared"/>
      <property type="Object" access="read-write" scope="instance" name="shared.last"/>
      <property type="Object" access="read-write" scope="instance" name="vars"/>
      <property type="Object" access="read-write" scope="instance" name="_vars" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.tag.loop.RegroupNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="expression" type="Object" usage="required"/>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="alias" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="alias"/>
      <property type="Object" access="read-write" scope="instance" name="expression"/>
      <property type="Object" access="read-write" scope="instance" name="key"/>
      <property type="Object" access="read-write" scope="instance" name="_expression" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_push" visibility="internal">
        <parameters>
          <parameter name="container" type="Object" usage="required"/>
          <parameter name="grouper" type="Object" usage="required"/>
          <parameter name="stack" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.tag.misc" superclass="Object"/>
  <class type="dojox.dtl.tag.misc.DebugNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="TextNode" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_TextNode" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="toString">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.tag.misc.FilterNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="varnode" type="Object" usage="required"/>
          <parameter name="nodelist" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_nodelist" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_varnode" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.tag.misc.FirstOfNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="vars" type="Object" usage="required"/>
          <parameter name="TextNode" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contents"/>
      <property type="Object" access="read-write" scope="instance" name="vars"/>
      <property type="Object" access="read-write" scope="instance" name="_vars" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.tag.misc.SpacelessNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="nodelist" type="Object" usage="required"/>
          <parameter name="TextNode" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contents"/>
      <property type="Object" access="read-write" scope="instance" name="nodelist"/>
      <property type="Object" access="read-write" scope="instance" name="TextNode"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_isEmpty" visibility="internal">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_watch" visibility="internal">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_watchParent" visibility="internal">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.tag.misc.TemplateTagNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="tag" type="Object" usage="required"/>
          <parameter name="TextNode" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contents"/>
      <property type="Object" access="read-write" scope="instance" name="tag"/>
      <property type="Object" access="read-write" scope="instance" name="mapping"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.tag.misc.WidthRatioNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="current" type="Object" usage="required"/>
          <parameter name="max" type="Object" usage="required"/>
          <parameter name="width" type="Object" usage="required"/>
          <parameter name="TextNode" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contents"/>
      <property type="Object" access="read-write" scope="instance" name="current"/>
      <property type="Object" access="read-write" scope="instance" name="max"/>
      <property type="Object" access="read-write" scope="instance" name="width"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.tag.misc.WithNode" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="target" type="Object" usage="required"/>
          <parameter name="alias" type="Object" usage="required"/>
          <parameter name="nodelist" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="alias"/>
      <property type="Object" access="read-write" scope="instance" name="nodelist"/>
      <property type="Object" access="read-write" scope="instance" name="target"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.Template" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="template" type="String|dojo._Url" usage="required">
            <description>The string or location of the string to use as a template</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="nodelist"/>
    </properties>
    <methods>
      <method scope="instance" name="getBuffer">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="concatenatable" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="update">
        <parameters>
          <parameter name="node" type="DOMNode|String|dojo.NodeList" usage="required">
            <description>A node reference or set of nodes</description>
          </parameter>
          <parameter name="context" type="dojo._Url|String|Object" usage="required">
            <description>The context object or location</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.text" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="types"/>
      <property type="Object" access="read-write" scope="static" name="_re" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="pySplit">
        <parameters>
          <parameter name="str" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Split a string according to Python's split function</description>
      </method>
      <method scope="static" name="_get" visibility="internal">
        <parameters>
          <parameter name="module" type="Object" usage="required"/>
          <parameter name="name" type="Object" usage="required"/>
          <parameter name="errorless" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Used to find both tags and filters</description>
      </method>
      <method scope="static" name="getTag">
        <parameters>
          <parameter name="name" type="Object" usage="required"/>
          <parameter name="errorless" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getFilter">
        <parameters>
          <parameter name="name" type="Object" usage="required"/>
          <parameter name="errorless" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getTemplate">
        <parameters>
          <parameter name="file" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getTemplateString">
        <parameters>
          <parameter name="file" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_resolveLazy" visibility="internal">
        <parameters>
          <parameter name="location" type="Object" usage="required"/>
          <parameter name="sync" type="Object" usage="required"/>
          <parameter name="json" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_resolveTemplateArg" visibility="internal">
        <parameters>
          <parameter name="arg" type="Object" usage="required"/>
          <parameter name="sync" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_isTemplate" visibility="internal">
        <parameters>
          <parameter name="arg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_resolveContextArg" visibility="internal">
        <parameters>
          <parameter name="arg" type="Object" usage="required"/>
          <parameter name="sync" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="tokenize">
        <parameters>
          <parameter name="str" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_parseDelims" visibility="internal">
        <parameters>
          <parameter name="varr" type="Object" usage="required"/>
          <parameter name="load" type="Object" usage="required"/>
          <parameter name="tag" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.utils" superclass="Object"/>
  <class type="dojox.dtl.utils.date" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_chunks" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_months_ap" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="format">
        <parameters>
          <parameter name="date" type="Date" usage="required"/>
          <parameter name="format" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="timesince">
        <parameters>
          <parameter name="d" type="Object" usage="required"/>
          <parameter name="now" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Takes two datetime objects and returns the time between then and now as a nicely formatted string, e.g &amp;quot;10 minutes&amp;quot;</description>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.utils.date.DateFormat" superclass="Object dojox.date.php.DateFormat">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="format" type="String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <methods>
      <method scope="instance" name="f">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Time, in 12-hour hours and minutes, with minutes left off if they're zero.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl.utils.date.DateFormat.N" superclass="Object">
    <description>Month abbreviation in Associated Press style. Proprietary extension.</description>
    <constructors>
      <constructor scope="instance">
        <description>Month abbreviation in Associated Press style. Proprietary extension.</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.dtl.utils.date.DateFormat.P" superclass="Object">
    <description>Time, in 12-hour hours, minutes and 'a.m.'/'p.m.', with minutes left off if they're zero and the strings 'midnight' and 'noon' if appropriate.</description>
    <constructors>
      <constructor scope="instance">
        <description>Time, in 12-hour hours, minutes and 'a.m.'/'p.m.', with minutes left off if they're zero and the strings 'midnight' and 'noon' if appropriate.</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.dtl._Context" superclass="Object">
    <description>Pass one of these when rendering a template to tell the template what values to use.</description>
    <constructors>
      <constructor scope="instance">
        <description>Pass one of these when rendering a template to tell the template what values to use.</description>
        <parameters>
          <parameter name="dict" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_dicts" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="get">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="otherwise" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getKeys">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="pop">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="push">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="update">
        <parameters>
          <parameter name="dict" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_normalize" visibility="internal">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl._Filter" superclass="Object">
    <description>Uses a string to find (and manipulate) a variable</description>
    <constructors>
      <constructor scope="instance">
        <description>Uses a string to find (and manipulate) a variable</description>
        <parameters>
          <parameter name="token" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contents"/>
      <property type="Object" access="read-write" scope="instance" name="filters"/>
      <property type="Object" access="read-write" scope="instance" name="key"/>
      <property type="Object" access="read-write" scope="instance" name="_args" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_cache" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_re" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_values" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="getExpression">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="resolve">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="resolvePath">
        <parameters>
          <parameter name="path" type="Object" usage="required"/>
          <parameter name="context" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_tokenize" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl._HtmlNode" superclass="Object">
    <description>Places a node into DOM</description>
    <constructors>
      <constructor scope="instance">
        <description>Places a node into DOM</description>
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contents"/>
      <property type="Object" access="read-write" scope="instance" name="_rendered" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl._HtmlNodeList" superclass="Object">
    <description>A list of any HTML-specific node object</description>
    <constructors>
      <constructor scope="instance">
        <description>A list of any HTML-specific node object</description>
        <parameters>
          <parameter name="nodes" type="Node[]" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contents"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Used to create an identical copy of a NodeList, useful for things like the for tag.</description>
      </method>
      <method scope="instance" name="dummyRender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
          <parameter name="asNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>A really expensive way of checking to see how a rendering will look. Used in the ifchanged tag</description>
      </method>
      <method scope="instance" name="push">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
          <parameter name="instance" type="Node" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unshift">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl._HtmlParser" superclass="Object">
    <description>Turn a simple array into a set of objects</description>
    <constructors>
      <constructor scope="instance">
        <description>Turn a simple array into a set of objects</description>
        <parameters>
          <parameter name="tokens" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contents"/>
      <property type="Object" access="read-write" scope="instance" name="i"/>
    </properties>
    <methods>
      <method scope="instance" name="getTemplate">
        <parameters>
          <parameter name="loc" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getTextNodeConstructor">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getVarNodeConstructor">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="next">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Used by tags to discover what token was found</description>
      </method>
      <method scope="instance" name="parse">
        <parameters>
          <parameter name="stop_at" type="Array" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="skipPast">
        <parameters>
          <parameter name="endtag" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl._HtmlTemplated" superclass="Object"/>
  <class type="dojox.dtl._HtmlTemplated.prototype" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_dijitTemplateCompat" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="render">
        <parameters>
          <parameter name="context" type="dojox.dtl.Context" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_getContext" visibility="internal">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl._HtmlTextNode" superclass="Object">
    <description>Adds a straight text node without any processing</description>
    <constructors>
      <constructor scope="instance">
        <description>Adds a straight text node without any processing</description>
        <parameters>
          <parameter name="str" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contents"/>
      <property type="Object" access="read-write" scope="instance" name="contents.data"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="set">
        <parameters>
          <parameter name="data" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl._HtmlVarNode" superclass="Object">
    <description>A node to be processed as a variable</description>
    <constructors>
      <constructor scope="instance">
        <description>A node to be processed as a variable</description>
        <parameters>
          <parameter name="str" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contents"/>
      <property type="Object" access="read-write" scope="instance" name="_curr" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_lists" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_rendered" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_txt" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_txt.data"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="unrender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl._Node" superclass="Object">
    <description>Basic catch-all node</description>
    <constructors>
      <constructor scope="instance">
        <description>Basic catch-all node</description>
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contents"/>
    </properties>
    <methods>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Adds content onto the buffer</description>
      </method>
      <method scope="instance" name="set">
        <parameters>
          <parameter name="data" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl._NodeList" superclass="Object">
    <description>Allows us to render a group of nodes</description>
    <constructors>
      <constructor scope="instance">
        <description>Allows us to render a group of nodes</description>
        <parameters>
          <parameter name="nodes" type="Node[]" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contents"/>
      <property type="Object" access="read-write" scope="instance" name="last"/>
    </properties>
    <methods>
      <method scope="instance" name="clone">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="dummyRender">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="push">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Add a new node to the list</description>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Adds all content onto the buffer</description>
      </method>
      <method scope="instance" name="unrender">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl._Parser" superclass="Object">
    <description>Parser used during initialization and for tag groups.</description>
    <constructors>
      <constructor scope="instance">
        <description>Parser used during initialization and for tag groups.</description>
        <parameters>
          <parameter name="tokens" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contents"/>
      <property type="Object" access="read-write" scope="instance" name="contents.length"/>
      <property type="Object" access="read-write" scope="instance" name="i"/>
    </properties>
    <methods>
      <method scope="instance" name="getTemplate">
        <parameters>
          <parameter name="file" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getTextNodeConstructor">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getVarNodeConstructor">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="next">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns the next token in the list.</description>
      </method>
      <method scope="instance" name="parse">
        <parameters>
          <parameter name="stop_at" type="Array" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Turns tokens into nodes</description>
      </method>
      <method scope="instance" name="skipPast">
        <parameters>
          <parameter name="endtag" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl._Templated" superclass="dijit._Templated">
    <properties>
      <property type="Object" access="read-write" scope="instance" name="domNode"/>
      <property type="Object" access="read-write" scope="instance" name="_template" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_dijitTemplateCompat" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_templateCache" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="buildRendering">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getCachedTemplate">
        <parameters>
          <parameter name="templatePath" type="Object" usage="required"/>
          <parameter name="templateString" type="Object" usage="required"/>
          <parameter name="alwaysUseString" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Layer for dijit._Templated.getCachedTemplate</description>
      </method>
      <method scope="instance" name="render">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.dtl._VarNode" superclass="Object">
    <description>A node to be processed as a variable</description>
    <constructors>
      <constructor scope="instance">
        <description>A node to be processed as a variable</description>
        <parameters>
          <parameter name="str" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contents"/>
    </properties>
    <methods>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="context" type="Object" usage="required"/>
          <parameter name="buffer" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.encoding" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_base" visibility="internal"/>
    </properties>
  </class>
  <class type="dojox.encoding.ascii85" superclass="Object">
    <methods>
      <method scope="static" name="encode">
        <parameters>
          <parameter name="input" type="Array" usage="required">
            <description>an array of numbers (0-255) to encode</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>encodes input data in ascii85 string</description>
      </method>
      <method scope="static" name="decode">
        <parameters>
          <parameter name="input" type="String" usage="required">
            <description>the input string to decode</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>decodes the input string back to array of numbers</description>
      </method>
    </methods>
  </class>
  <class type="dojox.encoding.base64" superclass="Object">
    <methods>
      <method scope="static" name="encode">
        <parameters>
          <parameter name="ba" type="byte[]" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Encode an array of bytes as a base64-encoded string</description>
      </method>
      <method scope="static" name="decode">
        <parameters>
          <parameter name="str" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="byte[]"/>
        </return-types>
        <description>Convert a base64-encoded string to an array of bytes</description>
      </method>
    </methods>
  </class>
  <class type="dojox.encoding.bits" superclass="Object"/>
  <class type="dojox.encoding.bits.InputStream" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
          <parameter name="width" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="bbyte"/>
      <property type="Object" access="read-write" scope="instance" name="bit"/>
      <property type="Object" access="read-write" scope="instance" name="buffer"/>
      <property type="Object" access="read-write" scope="instance" name="width"/>
    </properties>
    <methods>
      <method scope="instance" name="getBits">
        <parameters>
          <parameter name="width" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getWidth">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.encoding.bits.OutputStream" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="accumulator"/>
      <property type="Object" access="read-write" scope="instance" name="available"/>
      <property type="Object" access="read-write" scope="instance" name="buffer"/>
    </properties>
    <methods>
      <method scope="instance" name="getBuffer">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getWidth">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="putBits">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="width" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="reset">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.encoding.compression" superclass="Object"/>
  <class type="dojox.encoding.compression.lzw" superclass="Object"/>
  <class type="dojox.encoding.compression.lzw.Decoder" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="n" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="codes"/>
      <property type="Object" access="read-write" scope="instance" name="p"/>
      <property type="Object" access="read-write" scope="instance" name="size"/>
      <property type="Object" access="read-write" scope="instance" name="width"/>
    </properties>
    <methods>
      <method scope="instance" name="decode">
        <parameters>
          <parameter name="stream" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="init">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.encoding.compression.lzw.Encoder" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="n" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="dict"/>
      <property type="Object" access="read-write" scope="instance" name="p"/>
      <property type="Object" access="read-write" scope="instance" name="p.length"/>
      <property type="Object" access="read-write" scope="instance" name="size"/>
      <property type="Object" access="read-write" scope="instance" name="width"/>
    </properties>
    <methods>
      <method scope="instance" name="encode">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="stream" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="flush">
        <parameters>
          <parameter name="stream" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="init">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.encoding.compression.splay" superclass="Object"/>
  <class type="dojox.encoding.compression.Splay" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="n" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="left"/>
      <property type="Object" access="read-write" scope="instance" name="right"/>
      <property type="Object" access="read-write" scope="instance" name="up"/>
    </properties>
    <methods>
      <method scope="instance" name="decode">
        <parameters>
          <parameter name="stream" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="encode">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="stream" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="reset">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="splay">
        <parameters>
          <parameter name="i" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.encoding.crypto" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_base" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="cipherModes">
        <description>Enumeration for various cipher modes.</description>
      </property>
      <property type="Object" access="read-write" scope="static" name="outputTypes">
        <description>Enumeration for input and output encodings.</description>
      </property>
    </properties>
  </class>
  <class type="dojox.encoding.crypto.Blowfish" superclass="Object">
    <description>Object for doing Blowfish encryption/decryption.</description>
    <constructors>
      <constructor scope="instance">
        <description>Object for doing Blowfish encryption/decryption.</description>
      </constructor>
    </constructors>
    <methods>
      <method scope="instance" name="decrypt">
        <parameters>
          <parameter name="ciphertext" type="String" usage="required"/>
          <parameter name="key" type="String" usage="required"/>
          <parameter name="ao" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>decrypts ciphertext using key; allows specification of how ciphertext is encoded via ao.</description>
      </method>
      <method scope="instance" name="encrypt">
        <parameters>
          <parameter name="plaintext" type="String" usage="required"/>
          <parameter name="key" type="String" usage="required"/>
          <parameter name="ao" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
          <return-type type="Array"/>
        </return-types>
        <description>encrypts plaintext using key; allows user to specify output type and cipher mode via keyword object &amp;quot;ao&amp;quot;</description>
      </method>
      <method scope="instance" name="getIV">
        <parameters>
          <parameter name="outputType" type="dojox.encoding.crypto.outputTypes" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
          <return-type type="Array"/>
        </return-types>
      </method>
      <method scope="instance" name="setIV">
        <parameters>
          <parameter name="data" type="String" usage="required"/>
          <parameter name="inputType" type="dojox.encoding.crypto.outputTypes" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sets the initialization vector to data (as interpreted as inputType)</description>
      </method>
    </methods>
  </class>
  <class type="dojox.encoding.digests" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="outputTypes">
        <description>Enumeration for input and output encodings.</description>
      </property>
      <property type="Object" access="read-write" scope="static" name="_base" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="addWords">
        <parameters>
          <parameter name="a" type="word" usage="required"/>
          <parameter name="b" type="word" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="word"/>
        </return-types>
        <description>add a pair of words together with rollover</description>
      </method>
      <method scope="static" name="stringToWord">
        <parameters>
          <parameter name="s" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="word[]"/>
        </return-types>
        <description>convert a string to a word array</description>
      </method>
      <method scope="static" name="wordToString">
        <parameters>
          <parameter name="wa" type="word[]" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>convert an array of words to a string</description>
      </method>
      <method scope="static" name="wordToHex">
        <parameters>
          <parameter name="wa" type="word[]" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>convert an array of words to a hex tab</description>
      </method>
      <method scope="static" name="wordToBase64">
        <parameters>
          <parameter name="wa" type="word[]" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>convert an array of words to base64 encoding, should be more efficient than using dojox.encoding.base64</description>
      </method>
    </methods>
  </class>
  <class type="dojox.encoding.digests.MD5" superclass="Object">
    <description>computes the digest of data, and returns the result according to type outputType</description>
    <constructors>
      <constructor scope="instance">
        <description>computes the digest of data, and returns the result according to type outputType</description>
        <parameters>
          <parameter name="data" type="String" usage="required"/>
          <parameter name="outputType" type="dojox.encoding.digests.outputTypes" usage="optional"/>
        </parameters>
      </constructor>
    </constructors>
    <methods>
      <method scope="static" name="_hmac" visibility="internal">
        <parameters>
          <parameter name="data" type="String" usage="required"/>
          <parameter name="key" type="String" usage="required"/>
          <parameter name="outputType" type="dojox.encoding.digests.outputTypes" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="word[]"/>
          <return-type type="String"/>
        </return-types>
        <description>computes the digest of data, and returns the result according to type outputType</description>
      </method>
    </methods>
  </class>
  <class type="dojox.encoding.easy64" superclass="Object">
    <methods>
      <method scope="static" name="encode">
        <parameters>
          <parameter name="input" type="Array" usage="required">
            <description>an array of numbers (0-255) to encode</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>encodes input data in easy64 string</description>
      </method>
      <method scope="static" name="decode">
        <parameters>
          <parameter name="input" type="String" usage="required">
            <description>the input string to decode</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>decodes the input string back to array of numbers</description>
      </method>
    </methods>
  </class>
  <class type="dojox.flash.Communicator" superclass="Object">
    <description>A class that is used to communicate between Flash and JavaScript.</description>
    <constructors>
      <constructor scope="instance">
        <description>A class that is used to communicate between Flash and JavaScript.</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.flash.Communicator.prototype" superclass="Object">
    <methods>
      <method scope="static" name="_addExternalInterfaceCallback" visibility="internal">
        <parameters>
          <parameter name="methodName" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_encodeData" visibility="internal">
        <parameters>
          <parameter name="data" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_decodeData" visibility="internal">
        <parameters>
          <parameter name="data" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_execFlash" visibility="internal">
        <parameters>
          <parameter name="methodName" type="Object" usage="required"/>
          <parameter name="methodArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.flash.Embed" superclass="Object">
    <description>A class that is used to write out the Flash object into the page.</description>
    <constructors>
      <constructor scope="instance">
        <description>A class that is used to write out the Flash object into the page.</description>
        <parameters>
          <parameter name="visible" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_visible" visibility="internal"/>
    </properties>
  </class>
  <class type="dojox.flash.Embed.prototype" superclass="Object">
    <properties>
      <property type="Number" access="read-write" scope="static" name="width">
        <description>The width of this Flash applet. The default is the minimal width necessary to show the Flash settings dialog. Current value is 215 pixels.</description>
      </property>
      <property type="Number" access="read-write" scope="static" name="height">
        <description>The height of this Flash applet. The default is the minimal height necessary to show the Flash settings dialog. Current value is 138 pixels.</description>
      </property>
      <property type="String" access="read-write" scope="static" name="id">
        <description>The id of the Flash object. Current value is 'flashObject'.</description>
      </property>
      <property type="Object" access="read-write" scope="static" name="_visible" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="protocol">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="write">
        <parameters>
          <parameter name="doExpressInstall" type="Boolean" usage="optional">
            <description>Whether to write out Express Install information. Optional value; defaults to false.  determine our container div's styling</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Writes the Flash into the page.</description>
      </method>
      <method scope="static" name="get">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Object Gets the Flash object DOM node.</description>
      </method>
      <method scope="static" name="setVisible">
        <parameters>
          <parameter name="visible" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>console.debug(&amp;quot;setVisible, visible=&amp;quot;+visible);  Sets the visibility of this Flash object.</description>
      </method>
      <method scope="static" name="center">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Centers the flash applet on the page.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.flash.Info" superclass="Object">
    <description>A class that helps us determine whether Flash is available.</description>
    <constructors>
      <constructor scope="instance">
        <description>A class that helps us determine whether Flash is available.</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.flash.Info.prototype" superclass="Object">
    <properties>
      <property type="JavaScript" access="read-write" scope="static" name="version">
        <description>helper required to detect Flash Player PlugIn version information. Internet Explorer uses a corresponding Visual Basic to interact with the Flash ActiveX control.</description>
      </property>
      <property type="versionMinor" access="read-write" scope="static" name="versionMajor">
        <description>versionRevision: String The major, minor, and revisions of the plugin. For example, if the plugin is 8r22, then the major version is 8, the minor version is 0, and the revision is 22.</description>
      </property>
      <property type="Object" access="read-write" scope="static" name="versionMinor"/>
      <property type="Object" access="read-write" scope="static" name="versionRevision"/>
      <property type="Boolean" access="read-write" scope="static" name="capable">
        <description>Whether this platform has Flash already installed.</description>
      </property>
      <property type="Boolean" access="read-write" scope="static" name="installing">
        <description>Set if we are in the middle of a Flash installation session.</description>
      </property>
    </properties>
    <methods>
      <method scope="static" name="isVersionOrAbove">
        <parameters>
          <parameter name="reqMajorVer" type="Number" usage="required"/>
          <parameter name="reqMinorVer" type="Number" usage="required"/>
          <parameter name="reqVer" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Boolean  Asserts that this environment has the given major, minor, and revision numbers for the Flash player.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.flash.Info.prototype._JSFlashInfo" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="testVersion" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.flash.Install" superclass="Object">
    <description>Helps install Flash plugin if needed.</description>
    <constructors>
      <constructor scope="instance">
        <description>Helps install Flash plugin if needed.</description>
      </constructor>
    </constructors>
  </class>
  <class type="dojox.flash.Install.prototype" superclass="Object">
    <methods>
      <method scope="static" name="needed">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Boolean  Determines if installation or revving of the current plugin is needed.  do we even have flash?</description>
      </method>
      <method scope="static" name="install">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Performs installation or revving of the Flash plugin.  indicate that we are installing</description>
      </method>
      <method scope="static" name="_onInstallStatus" visibility="internal">
        <parameters>
          <parameter name="msg" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.form" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="nls"/>
    </properties>
  </class>
  <class type="dojox.form.CheckedMultiSelect" superclass="dijit.form.MultiSelect">
    <description>Extends the core dijit MultiSelect to provide a &amp;quot;checkbox&amp;quot; selector</description>
    <constructors>
      <constructor scope="instance">
        <description>Extends the core dijit MultiSelect to provide a &amp;quot;checkbox&amp;quot; selector</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="dojox.form._CheckedMultiSelectItem[]" access="read-write" scope="instance" name="children">
        <description>Array of all our children (for updating them)</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="options"/>
      <property type="Object" access="read-write" scope="instance" name="_started" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="baseClass"/>
      <property type="dojox.form._CheckedMultiSelectItem[]" access="read-write" scope="instance" name="children">
        <description>Array of all our children (for updating them)</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
    </properties>
    <methods>
      <method scope="instance" name="addOption">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="label" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Adds the given option to the select</description>
      </method>
      <method scope="instance" name="addSelected">
        <parameters>
          <parameter name="select" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="removeOption">
        <parameters>
          <parameter name="optionId" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setAttribute">
        <parameters>
          <parameter name="attr" type="Object" usage="required"/>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Disable (or enable) all the children as well</description>
      </method>
      <method scope="instance" name="setOptionLabel">
        <parameters>
          <parameter name="optionId" type="String" usage="required"/>
          <parameter name="label" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_addChild" visibility="internal">
        <parameters>
          <parameter name="option" type="Element" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Adds and returns a child for the given option.</description>
      </method>
      <method scope="instance" name="_loadChildren" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Reloads the children to match our box.</description>
      </method>
      <method scope="instance" name="_mouseDown" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Cancels the mousedown event to prevent others from stealing focus</description>
      </method>
      <method scope="instance" name="_updateChildren" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called to update the checked states of my children to match me</description>
      </method>
    </methods>
  </class>
  <class type="dojox.form.DropDownSelect" superclass="dijit.form.DropDownButton">
    <description>This is a &amp;quot;Styleable&amp;quot; select box - it is basically a DropDownButton which can take as its input a &amp;lt;select&amp;gt;.</description>
    <constructors>
      <constructor scope="instance">
        <description>This is a &amp;quot;Styleable&amp;quot; select box - it is basically a DropDownButton which can take as its input a &amp;lt;select&amp;gt;.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="dropDown"/>
      <property type="Object" access="read-write" scope="instance" name="options"/>
      <property type="Object" access="read-write" scope="instance" name="value"/>
      <property type="Boolean" access="read-write" scope="instance" name="_isPopulated" visibility="internal">
        <description>Whether or not we have been populated</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_labelHackHandle" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="baseClass"/>
      <property type="String" access="read-write" scope="instance" name="emptyLabel">
        <description>What to display in an &amp;quot;empty&amp;quot; dropdown</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="_isPopulated" visibility="internal">
        <description>Whether or not we have been populated</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="addOption">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="label" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Adds an option to the end of the select.  If value is empty or missing, a separator is created instead.</description>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Clear out an outstanding hack handle</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sets up our event handling that we need for functioning as a select</description>
      </method>
      <method scope="instance" name="removeOption">
        <parameters>
          <parameter name="valueOrIdx" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Removes the given option</description>
      </method>
      <method scope="instance" name="setAttribute">
        <parameters>
          <parameter name="attr" type="String" usage="required"/>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sometime we get called to set our value - we need to make sure and route those requests through _setValue() instead.</description>
      </method>
      <method scope="instance" name="setLabel">
        <parameters>
          <parameter name="content" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Wraps our label in a div - that way, our rich text can work correctly.</description>
      </method>
      <method scope="instance" name="setOptionLabel">
        <parameters>
          <parameter name="value" type="String" usage="required"/>
          <parameter name="label" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>FF2 has layout problems if the reset call isn't done on a slight delay</description>
      </method>
      <method scope="instance" name="_addMenuItem" visibility="internal">
        <parameters>
          <parameter name="option" type="dojox.form.__SelectOption" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>For the given option, add a menu item to our dropdown If the option doesn't have a value, then a separator is added in that place.</description>
      </method>
      <method scope="instance" name="_fillContent" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Loads our options and sets up our dropdown correctly.  We don't want any content, so we don't call any inherit chain function.</description>
      </method>
      <method scope="instance" name="_populate" visibility="internal">
        <parameters>
          <parameter name="callback" type="Function" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>populates the menu (and does the callback, if passed)</description>
      </method>
      <method scope="instance" name="_resetButtonState" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Resets the menu and the length attribute of the button - and ensures that the label is appropriately set.</description>
      </method>
      <method scope="instance" name="_toggleDropDown" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Overrides DropDownButton's toggle function to make sure that the values are correctly populated.</description>
      </method>
      <method scope="instance" name="_updateSelectedState" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets the &amp;quot;selected&amp;quot; class on the item for styling purposes</description>
      </method>
    </methods>
  </class>
  <class type="dojox.form.PasswordValidator" superclass="dijit.form._FormValueWidget">
    <description>A password validation widget that simplifies the &amp;quot;old/new/verify&amp;quot; style of requesting passwords.  You will probably want to override this class and implement your own pwCheck function.</description>
    <constructors>
      <constructor scope="instance">
        <description>A password validation widget that simplifies the &amp;quot;old/new/verify&amp;quot; style of requesting passwords.  You will probably want to override this class and implement your own pwCheck function.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_hasBeenBlurred" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_inputWidgets" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="oldName">
        <description>The name to send our old password as (when form is posted)</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="required">
        <description>Whether or not it is required for form submission</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Object" access="read-write" scope="instance" name="_hasBeenBlurred" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_inputWidgets" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="focus">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>places focus on the first invalid input widget - if all input widgets are valid, the first widget is focused.</description>
      </method>
      <method scope="instance" name="getValue">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>overridden to return an empty string if we aren't valid.</description>
      </method>
      <method scope="instance" name="isValid">
        <parameters>
          <parameter name="isFocused" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>we are valid if ALL our children are valid</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets up the correct widgets.  You *MUST* specify one child text box (a simple HTML &amp;lt;input&amp;gt; element) with pwType=&amp;quot;new&amp;quot; *and* one child text box with pwType=&amp;quot;verify&amp;quot;.  You *MAY* specify a third child text box with pwType=&amp;quot;old&amp;quot; in order to prompt the user to enter in their old password before the widget returns that it is valid.</description>
      </method>
      <method scope="instance" name="pwCheck">
        <parameters>
          <parameter name="password" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Overridable function for validation of the old password box.  This function is called and passed the old password.  Return true if it's OK to continue, and false if it is not.  IMPORTANT SECURITY NOTE:  Do NOT EVER EVER EVER check this in HTML or JavaScript!!!  You will probably want to override this function to callback to a server to verify the password (the callback will need to be syncronous) - and it's probably a good idea to validate it again on form submission before actually doing anything destructive - that's why the &amp;quot;oldName&amp;quot; value is available.  And don't just fetch the password from the server either :)  Send the test password (probably hashed, for security) and return from the server a status instead.  Again - DON'T BE INSECURE!!!  Security is left as an exercise for the reader :)</description>
      </method>
      <method scope="instance" name="reset">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Resetting this widget resets all our children</description>
      </method>
      <method scope="instance" name="setAttribute">
        <parameters>
          <parameter name="attr" type="String" usage="required"/>
          <parameter name="value" type="anything" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="validate">
        <parameters>
          <parameter name="isFocused" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Validating this widget validates all our children</description>
      </method>
      <method scope="instance" name="_createSubWidgets" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Turns the inputs inside this widget into &amp;quot;real&amp;quot; validation widgets - and sets up the needed connections.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.form._CheckedMultiSelectItem" superclass="dijit._Widget dijit._Templated">
    <description>The individual items for a CheckedMultiSelect</description>
    <constructors>
      <constructor scope="instance">
        <description>The individual items for a CheckedMultiSelect</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="option.selected"/>
      <property type="Object" access="read-write" scope="instance" name="baseClass"/>
      <property type="Boolean" access="read-write" scope="instance" name="disabled">
        <description>Whether or not this widget is disabled</description>
      </property>
      <property type="Element" access="read-write" scope="instance" name="option">
        <description>The option that is associated with this item</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="parent"/>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Object" access="read-write" scope="instance" name="widgetsInTemplate"/>
    </properties>
    <methods>
      <method scope="instance" name="setAttribute">
        <parameters>
          <parameter name="attr" type="Object" usage="required"/>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Disables (or enables) all the children as well</description>
      </method>
      <method scope="instance" name="_changeBox" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called to force the select to match the state of the check box (only on click of the checkbox)</description>
      </method>
      <method scope="instance" name="_labelClick" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called when the label portion is clicked</description>
      </method>
      <method scope="instance" name="_onClick" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets the click state (passes through to the check box)</description>
      </method>
      <method scope="instance" name="_onMouse" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets the hover state depending on mouse state (passes through to the check box)</description>
      </method>
      <method scope="instance" name="_updateBox" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called to force the box to match the state of the select</description>
      </method>
    </methods>
  </class>
  <class type="dojox.form._ChildTextBox" superclass="dijit.form.ValidationTextBox">
    <description>A class that is shared between all our children - extends ValidationTextBox and provides some shared functionality</description>
    <constructors>
      <constructor scope="instance">
        <description>A class that is shared between all our children - extends ValidationTextBox and provides some shared functionality</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_hasBeenBlurred" visibility="internal"/>
      <property type="widget" access="read-write" scope="instance" name="containerWidget">
        <description>Our parent (the PasswordValidator)</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="type">
        <description>Don't override this - we are all &amp;quot;password&amp;quot; types</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="reset">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Force-set to empty string (we don't save passwords EVER)...and since _OldPWBox overrides setValue to check for empty string, call our parent class directly (not this.inherited())</description>
      </method>
    </methods>
  </class>
  <class type="dojox.form._NewPWBox" superclass="dojox.form._ChildTextBox">
    <description>A class representing our new password textbox</description>
    <constructors>
      <constructor scope="instance">
        <description>A class representing our new password textbox</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="required"/>
    </properties>
    <methods>
      <method scope="instance" name="onChange">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Validates our verify box - to make sure that a change to me is reflected there</description>
      </method>
    </methods>
  </class>
  <class type="dojox.form._OldPWBox" superclass="dojox.form._ChildTextBox">
    <description>A class representing our &amp;quot;old password&amp;quot; box.</description>
    <constructors>
      <constructor scope="instance">
        <description>A class representing our &amp;quot;old password&amp;quot; box.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Boolean" access="read-write" scope="instance" name="_isPWValid" visibility="internal">
        <description>Whether or not the password is valid</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="_isPWValid" visibility="internal">
        <description>Whether or not the password is valid</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="getValue">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Only returns a value if our container widget is valid.  This is to prevent exposure of &amp;quot;oldPW&amp;quot; too early.</description>
      </method>
      <method scope="instance" name="isValid">
        <parameters>
          <parameter name="isFocused" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="newVal" type="anything" usage="required"/>
          <parameter name="priority" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Updates _isPWValid if this isn't our initial update by calling our PasswordValidator's pwCheck function</description>
      </method>
      <method scope="instance" name="_update" visibility="internal">
        <parameters>
          <parameter name="e" type="event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.form._VerifyPWBox" superclass="dojox.form._ChildTextBox">
    <description>A class representing our verify textbox</description>
    <constructors>
      <constructor scope="instance">
        <description>A class representing our verify textbox</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <methods>
      <method scope="instance" name="isValid">
        <parameters>
          <parameter name="isFocused" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Validates that we match the &amp;quot;real&amp;quot; password</description>
      </method>
    </methods>
  </class>
  <class type="dojox.fx" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_base" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_core" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="ext-dojo"/>
      <property type="Object" access="read-write" scope="static" name="scroll">
        <description>Module to provide scroll-related FX</description>
      </property>
      <property type="Object" access="read-write" scope="static" name="_allowedProperties" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="style">
        <description>Module to provide CSS animations</description>
      </property>
    </properties>
    <methods>
      <method scope="static" name="sizeTo">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Create an animation that will size a node</description>
      </method>
      <method scope="static" name="slideBy">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Returns an animation to slide a node by a defined offset.</description>
      </method>
      <method scope="static" name="crossFade">
        <parameters>
          <parameter name="args" type="Object" usage="required">
            <description>nodes Array - two element array of domNodes, or id's  all other standard animation args mixins apply. args.node ignored.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
          <return-type type="Boolean"/>
        </return-types>
        <description>Returns an animation cross fading two element simultaneously</description>
      </method>
      <method scope="static" name="highlight">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Highlight a node</description>
      </method>
      <method scope="static" name="wipeTo">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Animate a node wiping to a specific width or height</description>
      </method>
      <method scope="static" name="smoothScroll">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Returns an animation that will smooth-scroll to a node (specified in etup())</description>
      </method>
      <method scope="static" name="addClass">
        <parameters>
          <parameter name="args" type="dojox.fx._arg.StyleArgs" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Animate the effects of adding a class to a node</description>
      </method>
      <method scope="static" name="removeClass">
        <parameters>
          <parameter name="args" type="dojox.fx._arg.StyleArgs" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Animate the effects of removing a class from a node</description>
      </method>
      <method scope="static" name="toggleClass">
        <parameters>
          <parameter name="node" type="DomNode|String" usage="required">
            <description>The domNode (or string of the id) to toggle</description>
          </parameter>
          <parameter name="cssClass" type="String" usage="required">
            <description>of the classname to add to the node</description>
          </parameter>
          <parameter name="condition" type="Boolean" usage="optional">
            <description>If passed, true means to add the class, false means to remove.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojo._Animation"/>
        </return-types>
        <description>Animate the effects of Toggling a class on a Node</description>
      </method>
      <method scope="static" name="_getStyleSnapshot" visibility="internal">
        <parameters>
          <parameter name="cache" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>uses a dojo.getComputedStyle(node) cache reference and iterates through the 'documented/supported animate-able' properties.</description>
      </method>
      <method scope="static" name="_getCalculatedStyleChanges" visibility="internal">
        <parameters>
          <parameter name="args" type="dojox.fx._arg.StyleArgs" usage="required"/>
          <parameter name="addClass" type="Boolean" usage="required">
            <description>true to calculate what adding a class would do, false to calculate what removing the class would do</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>calclate the difference in style properties between two states</description>
      </method>
    </methods>
  </class>
  <class type="dojox.fx.easing" superclass="Object">
    <description>Collection of easing functions to use beyond the default dojo._defaultEasing</description>
    <methods>
      <method scope="static" name="linear">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>A linear easing function</description>
      </method>
      <method scope="static" name="quadIn">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="quadOut">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="quadInOut">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="cubicIn">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="cubicOut">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="cubicInOut">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="quartIn">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="quartOut">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="quartInOut">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="quintIn">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="quintOut">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="quintInOut">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="sineIn">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="sineOut">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="sineInOut">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="expoIn">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="expoOut">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="expoInOut">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="circIn">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="circOut">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="circInOut">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="backIn">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="backOut">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>an easing function that pops past the range briefly, and slowly comes back.</description>
      </method>
      <method scope="static" name="backInOut">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="elasticIn">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="elasticOut">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>An easing function that elasticly snaps around the target value, near the end of the Animation</description>
      </method>
      <method scope="static" name="elasticInOut">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>An easing function that elasticly snaps around the value, near the beginning and end of the Animation</description>
      </method>
      <method scope="static" name="bounceIn">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>An easing function that &amp;quot;bounces&amp;quot; near the beginning of an Animation</description>
      </method>
      <method scope="static" name="bounceOut">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>An easing function that &amp;quot;bounces&amp;quot; near the end of an Animation</description>
      </method>
      <method scope="static" name="bounceInOut">
        <parameters>
          <parameter name="n" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>An easing function that &amp;quot;bounces&amp;quot; at the beginning and end of the Animation</description>
      </method>
    </methods>
  </class>
  <class type="dojox.fx.Shadow" superclass="dijit._Widget">
    <description>Adds a drop-shadow to a node.</description>
    <constructors>
      <constructor scope="instance">
        <description>Adds a drop-shadow to a node.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="disabled"/>
      <property type="Object" access="read-write" scope="instance" name="node.style.position"/>
      <property type="Object" access="read-write" scope="instance" name="nodeList"/>
      <property type="Object" access="read-write" scope="instance" name="pieces"/>
      <property type="Boolean" access="read-write" scope="instance" name="animate">
        <description>A toggle to disable animated transitions</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="node"/>
      <property type="Number" access="read-write" scope="instance" name="opacity">
        <description>Overall opacity of the shadow</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="shadowOffset">
        <description>How deep to make the shadow appear to be</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="shadowPng">
        <description>Base location for drop-shadow images</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="shadowThickness">
        <description>How wide (in px) to make the shadow</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="resize">
        <parameters>
          <parameter name="args" type="dojox.fx._arg.ShadowResizeArgs" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Resizes the shadow based on width and height.</description>
      </method>
      <method scope="instance" name="setDisabled">
        <parameters>
          <parameter name="disabled" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>enable / disable the shadow</description>
      </method>
      <method scope="instance" name="setOpacity">
        <parameters>
          <parameter name="n" type="Number" usage="required"/>
          <parameter name="animArgs" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set the opacity of the underlay note: does not work in IE? FIXME.</description>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Initializes the shadow.</description>
      </method>
      <method scope="instance" name="_makePiece" visibility="internal">
        <parameters>
          <parameter name="name" type="Object" usage="required"/>
          <parameter name="vertAttach" type="Object" usage="required"/>
          <parameter name="vertCoord" type="Object" usage="required"/>
          <parameter name="horzAttach" type="Object" usage="required"/>
          <parameter name="horzCoord" type="Object" usage="required"/>
          <parameter name="sizing" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>append a shadow pieces to the node, and position it</description>
      </method>
    </methods>
  </class>
  <class type="dojox.fx._arg" superclass="Object"/>
  <class type="dojox.fx._arg.ShadowResizeArgs" superclass="Object">
    <description>The odd way to document object parameters.</description>
    <constructors>
      <constructor scope="instance">
        <description>The odd way to document object parameters.</description>
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Number" access="read-write" scope="instance" name="x">
        <description>the width to set</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="y">
        <description>the height to set</description>
      </property>
    </properties>
  </class>
  <class type="dojox.fx._arg.StyleArgs" superclass="Object">
    <description>The node and CSS class to use for style manipulations.</description>
    <constructors>
      <constructor scope="instance">
        <description>The node and CSS class to use for style manipulations.</description>
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="String" access="read-write" scope="instance" name="cssClass">
        <description>The class to use during the manipulation</description>
      </property>
      <property type="DOMNode" access="read-write" scope="instance" name="node">
        <description>The node to manipulate</description>
      </property>
    </properties>
  </class>
  <class type="dojox.fx._Line" superclass="Object">
    <description>a custom _Line to accomodate multi-dimensional values</description>
    <constructors>
      <constructor scope="instance">
        <description>a custom _Line to accomodate multi-dimensional values</description>
        <parameters>
          <parameter name="start" type="Number|Array" usage="required">
            <description>An Integer (or an Array of integers) to use as a starting point</description>
          </parameter>
          <parameter name="end" type="Number|Array" usage="required">
            <description>An Integer (or an Array of integers) to use as an ending point</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Number|Array" access="read-write" scope="instance" name="end">
        <description>An Integer (or an Array of integers) to use as an ending point</description>
      </property>
      <property type="Number|Array" access="read-write" scope="instance" name="start">
        <description>An Integer (or an Array of integers) to use as a starting point</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="n" type="Number" usage="required">
            <description>a floating point number greater than 0 and less than 1</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Returns the point on the line, or an array of points</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="defaultPath"/>
      <property type="Object" access="read-write" scope="static" name="defaultPolyline"/>
      <property type="Object" access="read-write" scope="static" name="defaultRect"/>
      <property type="Object" access="read-write" scope="static" name="defaultEllipse"/>
      <property type="Object" access="read-write" scope="static" name="defaultCircle"/>
      <property type="Object" access="read-write" scope="static" name="defaultLine"/>
      <property type="Object" access="read-write" scope="static" name="defaultImage"/>
      <property type="Object" access="read-write" scope="static" name="defaultStroke"/>
      <property type="Object" access="read-write" scope="static" name="defaultLinearGradient"/>
      <property type="Object" access="read-write" scope="static" name="defaultRadialGradient"/>
      <property type="Object" access="read-write" scope="static" name="defaultPattern"/>
      <property type="Object" access="read-write" scope="static" name="defaultFont"/>
      <property type="Object" access="read-write" scope="static" name="cm_in_pt"/>
      <property type="Object" access="read-write" scope="static" name="mm_in_pt"/>
      <property type="Object" access="read-write" scope="static" name="pathVmlRegExp"/>
      <property type="Object" access="read-write" scope="static" name="pathSvgRegExp"/>
      <property type="Object" access="read-write" scope="static" name="_base" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="attach"/>
      <property type="Object" access="read-write" scope="static" name="canvas"/>
      <property type="Object" access="read-write" scope="static" name="canvas_attach"/>
      <property type="Object" access="read-write" scope="static" name="fx"/>
      <property type="Object" access="read-write" scope="static" name="Matrix2D"/>
      <property type="Object" access="read-write" scope="static" name="move"/>
      <property type="Object" access="read-write" scope="static" name="Shape"/>
      <property type="Object" access="read-write" scope="static" name="silverlight_attach"/>
      <property type="Object" access="read-write" scope="static" name="svg_attach"/>
      <property type="Object" access="read-write" scope="static" name="vml_attach"/>
    </properties>
    <methods>
      <method scope="static" name="normalizeColor">
        <parameters>
          <parameter name="color" type="Color" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo.Color"/>
        </return-types>
        <description>converts any legal color representation to normalized dojo.Color object</description>
      </method>
      <method scope="static" name="normalizeParameters">
        <parameters>
          <parameter name="existed" type="Object" usage="required">
            <description>the &amp;quot;target&amp;quot; object to be updated</description>
          </parameter>
          <parameter name="update" type="Object" usage="required">
            <description>the &amp;quot;update&amp;quot; object, whose properties will be used to update the existed object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>updates an existing object with properties from an &amp;quot;update&amp;quot; object</description>
      </method>
      <method scope="static" name="makeParameters">
        <parameters>
          <parameter name="defaults" type="Object" usage="required">
            <description>the object to be cloned before updating</description>
          </parameter>
          <parameter name="update" type="Object" usage="required">
            <description>the object, which properties are to be cloned during updating</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>copies the original object, and all copied properties from the &amp;quot;update&amp;quot; object</description>
      </method>
      <method scope="static" name="formatNumber">
        <parameters>
          <parameter name="x" type="Number" usage="required">
            <description>number to be converted</description>
          </parameter>
          <parameter name="addSpace" type="Boolean" usage="optional">
            <description>if it is true, add a space before a positive number</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>converts a number to a string using a fixed notation</description>
      </method>
      <method scope="static" name="makeFontString">
        <parameters>
          <parameter name="font" type="Object" usage="required">
            <description>font object (see dojox.gfx.defaultFont)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>converts a font object to a CSS font string</description>
      </method>
      <method scope="static" name="splitFontString">
        <parameters>
          <parameter name="str" type="String" usage="required">
            <description>a CSS font string</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>converts a CSS font string to a font object</description>
      </method>
      <method scope="static" name="px_in_pt">
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>returns a number of pixels per point</description>
      </method>
      <method scope="static" name="pt2px">
        <parameters>
          <parameter name="len" type="Number" usage="required">
            <description>a value in points</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>converts points to pixels</description>
      </method>
      <method scope="static" name="px2pt">
        <parameters>
          <parameter name="len" type="Number" usage="required">
            <description>a value in pixels</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>converts pixels to points</description>
      </method>
      <method scope="static" name="normalizedLength">
        <parameters>
          <parameter name="len" type="String" usage="required">
            <description>a length, e.g., &amp;quot;12pc&amp;quot;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>converts any length value to pixels</description>
      </method>
      <method scope="static" name="equalSources">
        <parameters>
          <parameter name="a" type="Object" usage="required"/>
          <parameter name="b" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="attachNode">
        <parameters>
          <parameter name="node" type="Node" usage="required">
            <description>an VML node</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx.Shape"/>
        </return-types>
        <description>creates a shape from a Node</description>
      </method>
      <method scope="static" name="decompose">
        <parameters>
          <parameter name="matrix" type="dojox.gfx.matrix.Matrix2D" usage="required">
            <description>a 2D matrix-like object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>decompose a 2D matrix into translation, scaling, and rotation components</description>
      </method>
      <method scope="static" name="createSurface">
        <parameters>
          <parameter name="parentNode" type="Node" usage="required">
            <description>a parent node</description>
          </parameter>
          <parameter name="width" type="String" usage="required">
            <description>width of surface, e.g., &amp;quot;100px&amp;quot;</description>
          </parameter>
          <parameter name="height" type="String" usage="required">
            <description>height of surface, e.g., &amp;quot;100px&amp;quot;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx.Surface"/>
        </return-types>
        <description>creates a surface (VML)</description>
      </method>
      <method scope="static" name="attachSurface">
        <parameters>
          <parameter name="node" type="Node" usage="required">
            <description>an VML node</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx.Surface"/>
        </return-types>
        <description>creates a surface from a Node</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.arc" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="unitArcAsBezier"/>
      <property type="Object" access="read-write" scope="static" name="curvePI4"/>
    </properties>
    <methods>
      <method scope="static" name="arcAsBezier">
        <parameters>
          <parameter name="last" type="Object" usage="required">
            <description>a point-like object as a start of the arc</description>
          </parameter>
          <parameter name="rx" type="Number" usage="required">
            <description>a horizontal radius for the virtual ellipse</description>
          </parameter>
          <parameter name="ry" type="Number" usage="required">
            <description>a vertical radius for the virtual ellipse</description>
          </parameter>
          <parameter name="xRotg" type="Number" usage="required">
            <description>a rotation of an x axis of the virtual ellipse in degrees</description>
          </parameter>
          <parameter name="large" type="Boolean" usage="required">
            <description>which part of the ellipse will be used (the larger arc if true)</description>
          </parameter>
          <parameter name="sweep" type="Boolean" usage="required">
            <description>direction of the arc (CW if true)</description>
          </parameter>
          <parameter name="x" type="Number" usage="required">
            <description>the x coordinate of the end point of the arc</description>
          </parameter>
          <parameter name="y" type="Number" usage="required">
            <description>the y coordinate of the end point of the arc  calculate parameters</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>calculates an arc as a series of Bezier curves given the last point and a standard set of SVG arc parameters, it returns an array of arrays of parameters to form a series of absolute Bezier curves.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.Circle" superclass="gs.Circle">
    <description>a circle shape (Canvas)</description>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="bbox"/>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
      <property type="Object" access="read-write" scope="static" name="nodeType"/>
    </properties>
    <methods>
      <method scope="instance" name="setShape">
        <parameters>
          <parameter name="newShape" type="Object" usage="required">
            <description>a circle shape object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets a circle shape object (VML)</description>
      </method>
      <method scope="instance" name="_renderShape" visibility="internal">
        <parameters>
          <parameter name="ctx" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.defaultText" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="type"/>
      <property type="Object" access="read-write" scope="static" name="x"/>
      <property type="Object" access="read-write" scope="static" name="y"/>
      <property type="Object" access="read-write" scope="static" name="text"/>
      <property type="Object" access="read-write" scope="static" name="align"/>
      <property type="Object" access="read-write" scope="static" name="defaultStroke"/>
      <property type="Object" access="read-write" scope="static" name="defaultLinearGradient"/>
      <property type="Object" access="read-write" scope="static" name="defaultRadialGradient"/>
      <property type="Object" access="read-write" scope="static" name="defaultPattern"/>
      <property type="Object" access="read-write" scope="static" name="defaultFont"/>
      <property type="Object" access="read-write" scope="static" name="cm_in_pt"/>
      <property type="Object" access="read-write" scope="static" name="mm_in_pt"/>
      <property type="Object" access="read-write" scope="static" name="pathVmlRegExp"/>
      <property type="Object" access="read-write" scope="static" name="pathSvgRegExp"/>
    </properties>
    <methods>
      <method scope="static" name="normalizeColor">
        <parameters>
          <parameter name="color" type="Color" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo.Color"/>
        </return-types>
        <description>converts any legal color representation to normalized dojo.Color object</description>
      </method>
      <method scope="static" name="normalizeParameters">
        <parameters>
          <parameter name="existed" type="Object" usage="required">
            <description>the &amp;quot;target&amp;quot; object to be updated</description>
          </parameter>
          <parameter name="update" type="Object" usage="required">
            <description>the &amp;quot;update&amp;quot; object, whose properties will be used to update the existed object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>updates an existing object with properties from an &amp;quot;update&amp;quot; object</description>
      </method>
      <method scope="static" name="makeParameters">
        <parameters>
          <parameter name="defaults" type="Object" usage="required">
            <description>the object to be cloned before updating</description>
          </parameter>
          <parameter name="update" type="Object" usage="required">
            <description>the object, which properties are to be cloned during updating</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>copies the original object, and all copied properties from the &amp;quot;update&amp;quot; object</description>
      </method>
      <method scope="static" name="formatNumber">
        <parameters>
          <parameter name="x" type="Number" usage="required">
            <description>number to be converted</description>
          </parameter>
          <parameter name="addSpace" type="Boolean" usage="optional">
            <description>if it is true, add a space before a positive number</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>converts a number to a string using a fixed notation</description>
      </method>
      <method scope="static" name="makeFontString">
        <parameters>
          <parameter name="font" type="Object" usage="required">
            <description>font object (see dojox.gfx.defaultFont)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>converts a font object to a CSS font string</description>
      </method>
      <method scope="static" name="splitFontString">
        <parameters>
          <parameter name="str" type="String" usage="required">
            <description>a CSS font string</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>converts a CSS font string to a font object</description>
      </method>
      <method scope="static" name="px_in_pt">
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>returns a number of pixels per point</description>
      </method>
      <method scope="static" name="pt2px">
        <parameters>
          <parameter name="len" type="Number" usage="required">
            <description>a value in points</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>converts points to pixels</description>
      </method>
      <method scope="static" name="px2pt">
        <parameters>
          <parameter name="len" type="Number" usage="required">
            <description>a value in pixels</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>converts pixels to points</description>
      </method>
      <method scope="static" name="normalizedLength">
        <parameters>
          <parameter name="len" type="String" usage="required">
            <description>a length, e.g., &amp;quot;12pc&amp;quot;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>converts any length value to pixels</description>
      </method>
      <method scope="static" name="equalSources">
        <parameters>
          <parameter name="a" type="Object" usage="required"/>
          <parameter name="b" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>compares event sources, returns true if they are equal</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.defaultText.defaultTextPath" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="type"/>
      <property type="Object" access="read-write" scope="static" name="text"/>
      <property type="Object" access="read-write" scope="static" name="align"/>
      <property type="Object" access="read-write" scope="static" name="defaultStroke"/>
      <property type="Object" access="read-write" scope="static" name="defaultLinearGradient"/>
      <property type="Object" access="read-write" scope="static" name="defaultRadialGradient"/>
      <property type="Object" access="read-write" scope="static" name="defaultPattern"/>
      <property type="Object" access="read-write" scope="static" name="defaultFont"/>
      <property type="Object" access="read-write" scope="static" name="cm_in_pt"/>
      <property type="Object" access="read-write" scope="static" name="mm_in_pt"/>
      <property type="Object" access="read-write" scope="static" name="pathVmlRegExp"/>
      <property type="Object" access="read-write" scope="static" name="pathSvgRegExp"/>
    </properties>
    <methods>
      <method scope="static" name="normalizeColor">
        <parameters>
          <parameter name="color" type="Color" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo.Color"/>
        </return-types>
        <description>converts any legal color representation to normalized dojo.Color object</description>
      </method>
      <method scope="static" name="normalizeParameters">
        <parameters>
          <parameter name="existed" type="Object" usage="required">
            <description>the &amp;quot;target&amp;quot; object to be updated</description>
          </parameter>
          <parameter name="update" type="Object" usage="required">
            <description>the &amp;quot;update&amp;quot; object, whose properties will be used to update the existed object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>updates an existing object with properties from an &amp;quot;update&amp;quot; object</description>
      </method>
      <method scope="static" name="makeParameters">
        <parameters>
          <parameter name="defaults" type="Object" usage="required">
            <description>the object to be cloned before updating</description>
          </parameter>
          <parameter name="update" type="Object" usage="required">
            <description>the object, which properties are to be cloned during updating</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>copies the original object, and all copied properties from the &amp;quot;update&amp;quot; object</description>
      </method>
      <method scope="static" name="formatNumber">
        <parameters>
          <parameter name="x" type="Number" usage="required">
            <description>number to be converted</description>
          </parameter>
          <parameter name="addSpace" type="Boolean" usage="optional">
            <description>if it is true, add a space before a positive number</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>converts a number to a string using a fixed notation</description>
      </method>
      <method scope="static" name="makeFontString">
        <parameters>
          <parameter name="font" type="Object" usage="required">
            <description>font object (see dojox.gfx.defaultFont)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>converts a font object to a CSS font string</description>
      </method>
      <method scope="static" name="splitFontString">
        <parameters>
          <parameter name="str" type="String" usage="required">
            <description>a CSS font string</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>converts a CSS font string to a font object</description>
      </method>
      <method scope="static" name="px_in_pt">
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>returns a number of pixels per point</description>
      </method>
      <method scope="static" name="pt2px">
        <parameters>
          <parameter name="len" type="Number" usage="required">
            <description>a value in points</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>converts points to pixels</description>
      </method>
      <method scope="static" name="px2pt">
        <parameters>
          <parameter name="len" type="Number" usage="required">
            <description>a value in pixels</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>converts pixels to points</description>
      </method>
      <method scope="static" name="normalizedLength">
        <parameters>
          <parameter name="len" type="String" usage="required">
            <description>a length, e.g., &amp;quot;12pc&amp;quot;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>converts any length value to pixels</description>
      </method>
      <method scope="static" name="equalSources">
        <parameters>
          <parameter name="a" type="Object" usage="required"/>
          <parameter name="b" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>compares event sources, returns true if they are equal</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.defaultTextPath" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="type"/>
      <property type="Object" access="read-write" scope="static" name="text"/>
      <property type="Object" access="read-write" scope="static" name="align"/>
      <property type="Object" access="read-write" scope="static" name="defaultStroke"/>
      <property type="Object" access="read-write" scope="static" name="defaultLinearGradient"/>
      <property type="Object" access="read-write" scope="static" name="defaultRadialGradient"/>
      <property type="Object" access="read-write" scope="static" name="defaultPattern"/>
      <property type="Object" access="read-write" scope="static" name="defaultFont"/>
      <property type="Object" access="read-write" scope="static" name="cm_in_pt"/>
      <property type="Object" access="read-write" scope="static" name="mm_in_pt"/>
      <property type="Object" access="read-write" scope="static" name="pathVmlRegExp"/>
      <property type="Object" access="read-write" scope="static" name="pathSvgRegExp"/>
    </properties>
    <methods>
      <method scope="static" name="normalizeColor">
        <parameters>
          <parameter name="color" type="Color" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojo.Color"/>
        </return-types>
        <description>converts any legal color representation to normalized dojo.Color object</description>
      </method>
      <method scope="static" name="normalizeParameters">
        <parameters>
          <parameter name="existed" type="Object" usage="required">
            <description>the &amp;quot;target&amp;quot; object to be updated</description>
          </parameter>
          <parameter name="update" type="Object" usage="required">
            <description>the &amp;quot;update&amp;quot; object, whose properties will be used to update the existed object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>updates an existing object with properties from an &amp;quot;update&amp;quot; object</description>
      </method>
      <method scope="static" name="makeParameters">
        <parameters>
          <parameter name="defaults" type="Object" usage="required">
            <description>the object to be cloned before updating</description>
          </parameter>
          <parameter name="update" type="Object" usage="required">
            <description>the object, which properties are to be cloned during updating</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>copies the original object, and all copied properties from the &amp;quot;update&amp;quot; object</description>
      </method>
      <method scope="static" name="formatNumber">
        <parameters>
          <parameter name="x" type="Number" usage="required">
            <description>number to be converted</description>
          </parameter>
          <parameter name="addSpace" type="Boolean" usage="optional">
            <description>if it is true, add a space before a positive number</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>converts a number to a string using a fixed notation</description>
      </method>
      <method scope="static" name="makeFontString">
        <parameters>
          <parameter name="font" type="Object" usage="required">
            <description>font object (see dojox.gfx.defaultFont)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>converts a font object to a CSS font string</description>
      </method>
      <method scope="static" name="splitFontString">
        <parameters>
          <parameter name="str" type="String" usage="required">
            <description>a CSS font string</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>converts a CSS font string to a font object</description>
      </method>
      <method scope="static" name="px_in_pt">
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>returns a number of pixels per point</description>
      </method>
      <method scope="static" name="pt2px">
        <parameters>
          <parameter name="len" type="Number" usage="required">
            <description>a value in points</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>converts points to pixels</description>
      </method>
      <method scope="static" name="px2pt">
        <parameters>
          <parameter name="len" type="Number" usage="required">
            <description>a value in pixels</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>converts pixels to points</description>
      </method>
      <method scope="static" name="normalizedLength">
        <parameters>
          <parameter name="len" type="String" usage="required">
            <description>a length, e.g., &amp;quot;12pc&amp;quot;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>converts any length value to pixels</description>
      </method>
      <method scope="static" name="equalSources">
        <parameters>
          <parameter name="a" type="Object" usage="required"/>
          <parameter name="b" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>compares event sources, returns true if they are equal</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.Ellipse" superclass="gs.Ellipse">
    <description>an ellipse shape (Canvas)</description>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="bbox"/>
      <property type="Object" access="read-write" scope="instance" name="canvasEllipse"/>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
      <property type="Object" access="read-write" scope="static" name="nodeType"/>
    </properties>
    <methods>
      <method scope="instance" name="setShape">
        <parameters>
          <parameter name="newShape" type="Object" usage="required">
            <description>an ellipse shape object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets an ellipse shape object (VML)</description>
      </method>
      <method scope="instance" name="_renderShape" visibility="internal">
        <parameters>
          <parameter name="ctx" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.Group" superclass="g.Shape">
    <description>a group shape (Canvas), which can be used to logically group shapes (e.g, to propagate matricies)</description>
    <constructors>
      <constructor scope="instance">
        <description>a group shape (Canvas), which can be used to logically group shapes (e.g, to propagate matricies)</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="rawNode"/>
      <property type="Object" access="read-write" scope="static" name="nodeType"/>
    </properties>
    <methods>
      <method scope="instance" name="setRawNode">
        <parameters>
          <parameter name="rawNode" type="Node" usage="required">
            <description>an SVG node</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sets a raw SVG node to be used by this shape</description>
      </method>
      <method scope="instance" name="_applyTransform" visibility="internal">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>applies a transformation matrix to a group</description>
      </method>
      <method scope="instance" name="_render" visibility="internal">
        <parameters>
          <parameter name="ctx" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>render the group</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.Image" superclass="gs.Image">
    <description>an image shape (Canvas)</description>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="bbox"/>
      <property type="Object" access="read-write" scope="instance" name="canvasImage"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode.firstChild.src"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode.style.filter"/>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
      <property type="Object" access="read-write" scope="static" name="nodeType"/>
    </properties>
    <methods>
      <method scope="instance" name="getEventSource">
        <return-types>
          <return-type type="Node"/>
        </return-types>
        <description>returns a Node, which is used as a source of events for this shape</description>
      </method>
      <method scope="instance" name="setRawNode">
        <parameters>
          <parameter name="rawNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>assigns and clears the underlying node that will represent this shape. Once set, transforms, gradients, etc, can be applied. (no fill &amp;amp; stroke by default)</description>
      </method>
      <method scope="instance" name="setShape">
        <parameters>
          <parameter name="newShape" type="Object" usage="required">
            <description>an image shape object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets an image shape object (VML)</description>
      </method>
      <method scope="instance" name="_applyTransform" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_renderShape" visibility="internal">
        <parameters>
          <parameter name="ctx" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_resetImage" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setDimensions" visibility="internal">
        <parameters>
          <parameter name="s" type="Object" usage="required"/>
          <parameter name="w" type="Object" usage="required"/>
          <parameter name="h" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.Line" superclass="gs.Line">
    <description>a line shape (Canvas)</description>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="bbox"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode.path.v"/>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
      <property type="Object" access="read-write" scope="static" name="nodeType"/>
    </properties>
    <methods>
      <method scope="instance" name="setShape">
        <parameters>
          <parameter name="newShape" type="Object" usage="required">
            <description>a line shape object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets a line shape object (VML)</description>
      </method>
      <method scope="instance" name="_renderShape" visibility="internal">
        <parameters>
          <parameter name="ctx" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.matrix" superclass="Object">
    <methods>
      <method scope="static" name="_degToRad" visibility="internal">
        <parameters>
          <parameter name="degree" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_radToDeg" visibility="internal">
        <parameters>
          <parameter name="radian" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.matrix.Matrix2D" superclass="Object">
    <description>a 2D matrix object</description>
    <constructors>
      <constructor scope="instance">
        <description>a 2D matrix object</description>
        <parameters>
          <parameter name="arg" type="Object" usage="required">
            <description>a 2D matrix-like object, a number, or an array of such objects</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="xx"/>
      <property type="Object" access="read-write" scope="instance" name="dx"/>
      <property type="Object" access="read-write" scope="instance" name="dy"/>
      <property type="Object" access="read-write" scope="instance" name="xx"/>
      <property type="Object" access="read-write" scope="instance" name="xy"/>
      <property type="Object" access="read-write" scope="instance" name="yx"/>
      <property type="Object" access="read-write" scope="instance" name="yy"/>
    </properties>
  </class>
  <class type="dojox.gfx.Moveable" superclass="Object">
    <description>an object, which makes a shape moveable</description>
    <constructors>
      <constructor scope="instance">
        <description>an object, which makes a shape moveable</description>
        <parameters>
          <parameter name="shape" type="dojox.gfx.Shape" usage="required">
            <description>a shape object to be moved</description>
          </parameter>
          <parameter name="params" type="Object" usage="required">
            <description>an optional object with additional parameters; following parameters are recognized:</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Number" access="read-write" scope="instance" name="delay">
        <description>delay move by this number of pixels</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="events"/>
      <property type="Object" access="read-write" scope="instance" name="mover">
        <description>a constructor of custom Mover</description>
      </property>
      <property type="dojox.gfx.Shape" access="read-write" scope="instance" name="shape">
        <description>a shape object to be moved</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_lastX" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_lastY" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>stops watching for possible move, deletes all references, so the object can be garbage-collected</description>
      </method>
      <method scope="instance" name="onFirstMove">
        <parameters>
          <parameter name="mover" type="dojox.gfx.Mover" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called during the very first move notification, can be used to initialize coordinates, can be overwritten.  default implementation does nothing</description>
      </method>
      <method scope="instance" name="onMouseDown">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onmousedown, creates a Mover for the shape</description>
      </method>
      <method scope="instance" name="onMouseMove">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onmousemove, used only for delayed drags</description>
      </method>
      <method scope="instance" name="onMouseUp">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onmouseup, used only for delayed delayed drags</description>
      </method>
      <method scope="instance" name="onMove">
        <parameters>
          <parameter name="mover" type="dojox.gfx.Mover" usage="required"/>
          <parameter name="shift" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called during every move notification, should actually move the node, can be overwritten.</description>
      </method>
      <method scope="instance" name="onMoved">
        <parameters>
          <parameter name="mover" type="dojox.gfx.Mover" usage="required"/>
          <parameter name="shift" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called after every incremental move, can be overwritten.  default implementation does nothing</description>
      </method>
      <method scope="instance" name="onMoveStart">
        <parameters>
          <parameter name="mover" type="dojox.gfx.Mover" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called before every move operation</description>
      </method>
      <method scope="instance" name="onMoveStop">
        <parameters>
          <parameter name="mover" type="dojox.gfx.Mover" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called after every move operation</description>
      </method>
      <method scope="instance" name="onMoving">
        <parameters>
          <parameter name="mover" type="dojox.gfx.Mover" usage="required"/>
          <parameter name="shift" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called before every incremental move, can be overwritten.  default implementation does nothing</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.Mover" superclass="Object">
    <description>an object, which makes a shape follow the mouse, used as a default mover, and as a base class for custom movers</description>
    <constructors>
      <constructor scope="instance">
        <description>an object, which makes a shape follow the mouse, used as a default mover, and as a base class for custom movers</description>
        <parameters>
          <parameter name="shape" type="dojox.gfx.Shape" usage="required">
            <description>a shape object to be moved</description>
          </parameter>
          <parameter name="e" type="Event" usage="required">
            <description>a mouse event, which started the move; only clientX and clientY properties are used</description>
          </parameter>
          <parameter name="host" type="Object" usage="optional">
            <description>object which implements the functionality of the move, and defines proper events (onMoveStart and onMoveStop)</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="events"/>
      <property type="Object" access="read-write" scope="instance" name="host">
        <description>object which implements the functionality of the move, and defines proper events (onMoveStart and onMoveStop)</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="lastX"/>
      <property type="Object" access="read-write" scope="instance" name="lastY"/>
      <property type="dojox.gfx.Shape" access="read-write" scope="instance" name="shape">
        <description>a shape object to be moved</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>stops the move, deletes all references, so the object can be garbage-collected</description>
      </method>
      <method scope="instance" name="onFirstMove">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>it is meant to be called only once</description>
      </method>
      <method scope="instance" name="onMouseMove">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>mouse event</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event processor for onmousemove</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.path" superclass="Object">
    <methods>
      <method scope="static" name="_calcArc" visibility="internal">
        <parameters>
          <parameter name="alpha" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.Path" superclass="g.path.Path">
    <description>a path shape (Canvas)</description>
    <constructors>
      <constructor scope="instance">
        <description>a path shape (Canvas)</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="canvasPath"/>
      <property type="Object" access="read-write" scope="instance" name="last"/>
      <property type="Object" access="read-write" scope="instance" name="last.x"/>
      <property type="Object" access="read-write" scope="instance" name="last.y"/>
      <property type="Object" access="read-write" scope="instance" name="lastControl"/>
      <property type="Object" access="read-write" scope="instance" name="lastControl.type"/>
      <property type="Object" access="read-write" scope="instance" name="lastControl.x"/>
      <property type="Object" access="read-write" scope="instance" name="lastControl.y"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode.data"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode.path.v"/>
      <property type="Object" access="read-write" scope="instance" name="vmlPath"/>
      <property type="Object" access="read-write" scope="instance" name="renderers"/>
      <property type="Object" access="read-write" scope="instance" name="_pathVmlToSvgMap" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="nodeType"/>
    </properties>
    <methods>
      <method scope="instance" name="setShape">
        <parameters>
          <parameter name="newShape" type="Object" usage="required">
            <description>an VML path string or a path object (see dojox.gfx.defaultPath)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>forms a path using a shape (VML)</description>
      </method>
      <method scope="instance" name="_addArgs" visibility="internal">
        <parameters>
          <parameter name="path" type="Object" usage="required"/>
          <parameter name="args" type="Object" usage="required"/>
          <parameter name="from" type="Object" usage="required"/>
          <parameter name="upto" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_addArgsAdjusted" visibility="internal">
        <parameters>
          <parameter name="path" type="Object" usage="required"/>
          <parameter name="last" type="Object" usage="required"/>
          <parameter name="args" type="Object" usage="required"/>
          <parameter name="from" type="Object" usage="required"/>
          <parameter name="upto" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_arcTo" visibility="internal">
        <parameters>
          <parameter name="segment" type="Object" usage="required"/>
          <parameter name="last" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_closePath" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_curveToA" visibility="internal">
        <parameters>
          <parameter name="segment" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_curveToR" visibility="internal">
        <parameters>
          <parameter name="segment" type="Object" usage="required"/>
          <parameter name="last" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_hLineToA" visibility="internal">
        <parameters>
          <parameter name="segment" type="Object" usage="required"/>
          <parameter name="last" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_hLineToR" visibility="internal">
        <parameters>
          <parameter name="segment" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_lineToA" visibility="internal">
        <parameters>
          <parameter name="segment" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_lineToR" visibility="internal">
        <parameters>
          <parameter name="segment" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_moveToA" visibility="internal">
        <parameters>
          <parameter name="segment" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_moveToR" visibility="internal">
        <parameters>
          <parameter name="segment" type="Object" usage="required"/>
          <parameter name="last" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_qCurveToA" visibility="internal">
        <parameters>
          <parameter name="segment" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_qCurveToR" visibility="internal">
        <parameters>
          <parameter name="segment" type="Object" usage="required"/>
          <parameter name="last" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_qSmoothCurveToA" visibility="internal">
        <parameters>
          <parameter name="segment" type="Object" usage="required"/>
          <parameter name="last" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_qSmoothCurveToR" visibility="internal">
        <parameters>
          <parameter name="segment" type="Object" usage="required"/>
          <parameter name="last" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_renderShape" visibility="internal">
        <parameters>
          <parameter name="ctx" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_smoothCurveToA" visibility="internal">
        <parameters>
          <parameter name="segment" type="Object" usage="required"/>
          <parameter name="last" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_smoothCurveToR" visibility="internal">
        <parameters>
          <parameter name="segment" type="Object" usage="required"/>
          <parameter name="last" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_updateWithSegment" visibility="internal">
        <parameters>
          <parameter name="segment" type="Object" usage="required">
            <description>a segment</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>updates the bounding box of path with new segment</description>
      </method>
      <method scope="instance" name="_vLineToA" visibility="internal">
        <parameters>
          <parameter name="segment" type="Object" usage="required"/>
          <parameter name="last" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_vLineToR" visibility="internal">
        <parameters>
          <parameter name="segment" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.path.Path" superclass="dojox.gfx.Shape">
    <description>a path constructor</description>
    <constructors>
      <constructor scope="instance">
        <description>a path constructor</description>
        <parameters>
          <parameter name="rawNode" type="Node" usage="required">
            <description>a DOM node to be used by this path object</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="absolute"/>
      <property type="Object" access="read-write" scope="instance" name="bbox"/>
      <property type="Object" access="read-write" scope="instance" name="bbox.b"/>
      <property type="Object" access="read-write" scope="instance" name="bbox.l"/>
      <property type="Object" access="read-write" scope="instance" name="bbox.r"/>
      <property type="Object" access="read-write" scope="instance" name="bbox.t"/>
      <property type="Object" access="read-write" scope="instance" name="last"/>
      <property type="Object" access="read-write" scope="instance" name="last.x"/>
      <property type="Object" access="read-write" scope="instance" name="last.y"/>
      <property type="Node" access="read-write" scope="instance" name="rawNode">
        <description>a DOM node to be used by this path object</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="segments"/>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
      <property type="Object" access="read-write" scope="instance" name="shape.path"/>
      <property type="Object" access="read-write" scope="instance" name="setShape"/>
      <property type="Object" access="read-write" scope="instance" name="_2PI" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_validSegments" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="arcTo">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>formes an elliptic arc segment</description>
      </method>
      <method scope="instance" name="closePath">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>closes a path</description>
      </method>
      <method scope="instance" name="curveTo">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>formes a curve segment</description>
      </method>
      <method scope="instance" name="getAbsoluteMode">
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>returns a current value of the absolute mode</description>
      </method>
      <method scope="instance" name="getBoundingBox">
        <return-types>
          <return-type type="dojox.gfx.Rectangle"/>
        </return-types>
        <description>returns the bounding box {x, y, width, height} or null</description>
      </method>
      <method scope="instance" name="getLastPosition">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>returns the last point in the path, or null</description>
      </method>
      <method scope="instance" name="hLineTo">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>formes a horizontal line segment</description>
      </method>
      <method scope="instance" name="lineTo">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>formes a line segment</description>
      </method>
      <method scope="instance" name="moveTo">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>formes a move segment</description>
      </method>
      <method scope="instance" name="qCurveTo">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>formes a quadratic curve segment</description>
      </method>
      <method scope="instance" name="qSmoothCurveTo">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>formes a quadratic smooth curve segment</description>
      </method>
      <method scope="instance" name="setAbsoluteMode">
        <parameters>
          <parameter name="mode" type="Boolean" usage="required">
            <description>true/false or &amp;quot;absolute&amp;quot;/&amp;quot;relative&amp;quot; to specify the mode</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets an absolute or relative mode for path points</description>
      </method>
      <method scope="instance" name="smoothCurveTo">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>formes a smooth curve segment</description>
      </method>
      <method scope="instance" name="vLineTo">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>formes a vertical line segment</description>
      </method>
      <method scope="instance" name="_collectArgs" visibility="internal">
        <parameters>
          <parameter name="array" type="Array" usage="required">
            <description>an output argument (array of numbers)</description>
          </parameter>
          <parameter name="args" type="Array" usage="required">
            <description>an input argument (can be values of Boolean, Number, dojox.gfx.Point, or an embedded array of them)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>converts an array of arguments to plain numeric values</description>
      </method>
      <method scope="instance" name="_pushSegment" visibility="internal">
        <parameters>
          <parameter name="action" type="String" usage="required">
            <description>valid SVG code for a segment's type</description>
          </parameter>
          <parameter name="args" type="Array" usage="required">
            <description>a list of parameters for this segment</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>adds a segment</description>
      </method>
      <method scope="instance" name="_setPath" visibility="internal">
        <parameters>
          <parameter name="path" type="String" usage="required">
            <description>an SVG path string</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>forms a path using an SVG path string</description>
      </method>
      <method scope="instance" name="_updateBBox" visibility="internal">
        <parameters>
          <parameter name="x" type="Number" usage="required">
            <description>an x coordinate</description>
          </parameter>
          <parameter name="y" type="Number" usage="required">
            <description>a y coordinate  we use {l, b, r, t} representation of a bbox</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>updates the bounding box of path with new point</description>
      </method>
      <method scope="instance" name="_updateWithSegment" visibility="internal">
        <parameters>
          <parameter name="segment" type="Object" usage="required">
            <description>a segment</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>updates the bounding box of path with new segment</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.path.TextPath" superclass="dojox.gfx.path.Path">
    <description>a TextPath shape constructor</description>
    <constructors>
      <constructor scope="instance">
        <description>a TextPath shape constructor</description>
        <parameters>
          <parameter name="rawNode" type="Node" usage="required">
            <description>a DOM node to be used by this TextPath object</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="fontStyle"/>
      <property type="Object" access="read-write" scope="instance" name="text"/>
    </properties>
    <methods>
      <method scope="instance" name="getFont">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>returns the current font object or null</description>
      </method>
      <method scope="instance" name="getText">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>returns the current text object or null</description>
      </method>
      <method scope="instance" name="setFont">
        <parameters>
          <parameter name="newFont" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets a font for text</description>
      </method>
      <method scope="instance" name="setText">
        <parameters>
          <parameter name="newText" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets a text to be drawn along the path</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.Point" superclass="Object">
    <description>a hypothetical 2D point to be used for drawings - {x, y}</description>
  </class>
  <class type="dojox.gfx.Polyline" superclass="gs.Polyline">
    <description>a polyline/polygon shape (Canvas)</description>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="bbox"/>
      <property type="Object" access="read-write" scope="instance" name="box"/>
      <property type="Object" access="read-write" scope="instance" name="canvasPolyline"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode.path.v"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode.points"/>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
      <property type="Object" access="read-write" scope="static" name="nodeType"/>
    </properties>
    <methods>
      <method scope="instance" name="setShape">
        <parameters>
          <parameter name="points" type="Object" usage="required">
            <description>a polyline/polygon shape object</description>
          </parameter>
          <parameter name="closed" type="Boolean" usage="optional">
            <description>if true, close the polyline explicitely</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets a polyline/polygon shape object (VML)</description>
      </method>
      <method scope="instance" name="_renderShape" visibility="internal">
        <parameters>
          <parameter name="ctx" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.Rect" superclass="gs.Rect">
    <description>a rectangle shape (Canvas)</description>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="bbox"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode.arcsize"/>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
      <property type="Object" access="read-write" scope="static" name="nodeType"/>
    </properties>
    <methods>
      <method scope="instance" name="setShape">
        <parameters>
          <parameter name="newShape" type="Object" usage="required">
            <description>a rectangle shape object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets a rectangle shape object (VML)</description>
      </method>
      <method scope="instance" name="_renderShape" visibility="internal">
        <parameters>
          <parameter name="ctx" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.Rectangle" superclass="Object">
    <description>a hypothetical rectangle - {x, y, width, height}</description>
  </class>
  <class type="dojox.gfx.shape" superclass="Object"/>
  <class type="dojox.gfx.Shape" superclass="Object">
    <description>a Shape object, which knows how to apply graphical attributes and transformations</description>
    <constructors>
      <constructor scope="instance">
        <description>a Shape object, which knows how to apply graphical attributes and transformations</description>
      </constructor>
    </constructors>
    <mixins scope="instance">
      <mixin scope="static" type="dojox.gfx.shape._eventsProcessing"/>
    </mixins>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="bbox"/>
      <property type="Object" access="read-write" scope="instance" name="fillStyle"/>
      <property type="Object" access="read-write" scope="instance" name="fillStyle.type"/>
      <property type="Object" access="read-write" scope="instance" name="matrix"/>
      <property type="Object" access="read-write" scope="instance" name="parent"/>
      <property type="Object" access="read-write" scope="instance" name="parentMatrix"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode.fill"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode.fill.method"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode.fill.opacity"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode.fill.type"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode.fillcolor"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode.filled"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode.stroked"/>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
      <property type="Object" access="read-write" scope="instance" name="strokeStyle"/>
      <property type="Object" access="read-write" scope="instance" name="_capMap" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_capMapReversed" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="applyLeftTransform">
        <parameters>
          <parameter name="matrix" type="dojox.gfx.Matrix2D" usage="required">
            <description>a matrix or a matrix-like object (see an argument of dojox.gfx.Matrix2D constructor for a list of acceptable arguments)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>multiplies the existing matrix with an argument on left side (matrix * this.matrix)</description>
      </method>
      <method scope="instance" name="applyRightTransform">
        <parameters>
          <parameter name="matrix" type="dojox.gfx.Matrix2D" usage="required">
            <description>a matrix or a matrix-like object (see an argument of dojox.gfx.Matrix2D constructor for a list of acceptable arguments)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>multiplies the existing matrix with an argument on right side (this.matrix * matrix)</description>
      </method>
      <method scope="instance" name="applyTransform">
        <parameters>
          <parameter name="matrix" type="dojox.gfx.Matrix2D" usage="required">
            <description>a matrix or a matrix-like object (see an argument of dojox.gfx.Matrix2D constructor for a list of acceptable arguments)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>a shortcut for dojox.gfx.Shape.applyRightTransform</description>
      </method>
      <method scope="instance" name="getBoundingBox">
        <return-types>
          <return-type type="dojox.gfx.Rectangle"/>
        </return-types>
        <description>returns the bounding box or null (see dojox.gfx.defaultRect)</description>
      </method>
      <method scope="instance" name="getEventSource">
        <return-types>
          <return-type type="Node"/>
        </return-types>
        <description>returns a Node, which is used as a source of events for this shape</description>
      </method>
      <method scope="instance" name="getFill">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>returns the current fill object or null (see dojox.gfx.defaultLinearGradient, dojox.gfx.defaultRadialGradient, dojox.gfx.defaultPattern, or dojo.Color)</description>
      </method>
      <method scope="instance" name="getNode">
        <return-types>
          <return-type type="Node"/>
        </return-types>
        <description>returns the current DOM Node or null</description>
      </method>
      <method scope="instance" name="getParent">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>returns the parent or null (see dojox.gfx.Surface, dojox.gfx.shape.VirtualGroup, or dojox.gfx.Group)</description>
      </method>
      <method scope="instance" name="getShape">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>returns the current shape object or null (see dojox.gfx.defaultPath, dojox.gfx.defaultPolyline, dojox.gfx.defaultRect, dojox.gfx.defaultEllipse, dojox.gfx.defaultCircle, dojox.gfx.defaultLine, or dojox.gfx.defaultImage)</description>
      </method>
      <method scope="instance" name="getStroke">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>returns the current stroke object or null (see dojox.gfx.defaultStroke)</description>
      </method>
      <method scope="instance" name="getTransform">
        <return-types>
          <return-type type="dojox.gfx.Matrix2D"/>
        </return-types>
        <description>returns the current transformation matrix or null</description>
      </method>
      <method scope="instance" name="getTransformedBoundingBox">
        <return-types>
          <return-type type="null"/>
          <return-type type="Array"/>
        </return-types>
        <description>returns an array of four points or null four points represent four corners of the untransformed bounding box</description>
      </method>
      <method scope="instance" name="moveToBack">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>moves a shape to back of its parent's list of shapes</description>
      </method>
      <method scope="instance" name="moveToFront">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>moves a shape to front of its parent's list of shapes</description>
      </method>
      <method scope="instance" name="removeShape">
        <parameters>
          <parameter name="silently" type="Boolean" usage="optional">
            <description>if true, do not redraw a picture yet</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>removes the shape from its parent's list of shapes</description>
      </method>
      <method scope="instance" name="setFill">
        <parameters>
          <parameter name="fill" type="Object" usage="required">
            <description>a fill object (see dojox.gfx.defaultLinearGradient, dojox.gfx.defaultRadialGradient, dojox.gfx.defaultPattern, or dojo.Color)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets a fill object (VML)</description>
      </method>
      <method scope="instance" name="setRawNode">
        <parameters>
          <parameter name="rawNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>assigns and clears the underlying node that will represent this shape. Once set, transforms, gradients, etc, can be applied. (no fill &amp;amp; stroke by default)</description>
      </method>
      <method scope="instance" name="setShape">
        <parameters>
          <parameter name="newShape" type="Object" usage="required">
            <description>a shape object (see dojox.gfx.defaultPath, dojox.gfx.defaultPolyline, dojox.gfx.defaultRect, dojox.gfx.defaultEllipse, dojox.gfx.defaultCircle, dojox.gfx.defaultLine, or dojox.gfx.defaultImage)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets a shape object (SVG)</description>
      </method>
      <method scope="instance" name="setStroke">
        <parameters>
          <parameter name="stroke" type="Object" usage="required">
            <description>a stroke object (see dojox.gfx.defaultStroke)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets a stroke object (VML)</description>
      </method>
      <method scope="instance" name="setTransform">
        <parameters>
          <parameter name="matrix" type="dojox.gfx.Matrix2D" usage="required">
            <description>a matrix or a matrix-like object (see an argument of dojox.gfx.Matrix2D constructor for a list of acceptable arguments)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets a transformation matrix</description>
      </method>
      <method scope="instance" name="_applyTransform" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getParentSurface" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getRealMatrix" visibility="internal">
        <return-types>
          <return-type type="dojox.gfx.Matrix2D"/>
        </return-types>
        <description>returns the cumulative (&amp;quot;real&amp;quot;) transformation matrix by combining the shape's matrix with its parent's matrix</description>
      </method>
      <method scope="instance" name="_moveToBack" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>moves a shape to back of its parent's list of shapes (VML)</description>
      </method>
      <method scope="instance" name="_moveToFront" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>moves a shape to front of its parent's list of shapes (VML)</description>
      </method>
      <method scope="instance" name="_setFillAttr" visibility="internal">
        <parameters>
          <parameter name="f" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setFillObject" visibility="internal">
        <parameters>
          <parameter name="f" type="Object" usage="required"/>
          <parameter name="nodeType" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setParent" visibility="internal">
        <parameters>
          <parameter name="parent" type="Object" usage="required">
            <description>a parent or null (see dojox.gfx.Surface, dojox.gfx.shape.VirtualGroup, or dojox.gfx.Group)</description>
          </parameter>
          <parameter name="matrix" type="dojox.gfx.Matrix2D" usage="required">
            <description>a 2D matrix or a matrix-like object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets a parent</description>
      </method>
      <method scope="instance" name="_translate" visibility="internal">
        <parameters>
          <parameter name="dict" type="Object" usage="required"/>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_updateParentMatrix" visibility="internal">
        <parameters>
          <parameter name="matrix" type="dojox.gfx.Matrix2D" usage="required">
            <description>a 2D matrix or a matrix-like object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>updates the parent matrix with new matrix</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.shape.Circle" superclass="dojox.gfx.Shape">
    <description>a generic circle (this is a helper object, which is defined for convenience)</description>
    <constructors>
      <constructor scope="instance">
        <description>a generic circle (this is a helper object, which is defined for convenience)</description>
        <parameters>
          <parameter name="rawNode" type="Node" usage="required">
            <description>a DOM Node</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="bbox"/>
      <property type="Node" access="read-write" scope="instance" name="rawNode">
        <description>a DOM Node</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
    </properties>
    <methods>
      <method scope="instance" name="getBoundingBox">
        <return-types>
          <return-type type="dojox.gfx.Rectangle"/>
        </return-types>
        <description>returns the bounding box</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.shape.Container" superclass="Object">
    <description>a container of shapes, which can be used as a foundation for renderer-specific groups, or as a way to logically group shapes (e.g, to propagate matricies)</description>
    <methods>
      <method scope="static" name="add">
        <parameters>
          <parameter name="shape" type="dojox.gfx.Shape" usage="required">
            <description>a shape</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>adds a shape to the list</description>
      </method>
      <method scope="static" name="remove">
        <parameters>
          <parameter name="shape" type="Object" usage="required"/>
          <parameter name="silently" type="Boolean" usage="optional">
            <description>if true, do not redraw a picture yet</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>removes a shape from the list</description>
      </method>
      <method scope="static" name="_moveChildToFront" visibility="internal">
        <parameters>
          <parameter name="shape" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>moves a shape to front of the list of shapes</description>
      </method>
      <method scope="static" name="_moveChildToBack" visibility="internal">
        <parameters>
          <parameter name="shape" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>moves a shape to back of the list of shapes</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.shape.Creator" superclass="Object">
    <description>shape creators</description>
    <methods>
      <method scope="static" name="createShape">
        <parameters>
          <parameter name="shape" type="Object" usage="required">
            <description>a shape descriptor object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>creates a shape object based on its type; it is meant to be used by group-like objects</description>
      </method>
      <method scope="static" name="createGroup">
        <return-types>
          <return-type type="dojox.gfx.Group"/>
        </return-types>
        <description>creates a VML group shape</description>
      </method>
      <method scope="static" name="createRect">
        <parameters>
          <parameter name="rect" type="Object" usage="required">
            <description>a path object (see dojox.gfx.defaultRect)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx.Rect"/>
        </return-types>
        <description>creates an SVG rectangle shape</description>
      </method>
      <method scope="static" name="createEllipse">
        <parameters>
          <parameter name="ellipse" type="Object" usage="required">
            <description>an ellipse object (see dojox.gfx.defaultEllipse)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx.Ellipse"/>
        </return-types>
        <description>creates an SVG ellipse shape</description>
      </method>
      <method scope="static" name="createCircle">
        <parameters>
          <parameter name="circle" type="Object" usage="required">
            <description>a circle object (see dojox.gfx.defaultCircle)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx.Circle"/>
        </return-types>
        <description>creates an SVG circle shape</description>
      </method>
      <method scope="static" name="createLine">
        <parameters>
          <parameter name="line" type="Object" usage="required">
            <description>a line object (see dojox.gfx.defaultLine)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx.Line"/>
        </return-types>
        <description>creates an SVG line shape</description>
      </method>
      <method scope="static" name="createPolyline">
        <parameters>
          <parameter name="points" type="Object" usage="required">
            <description>a points object (see dojox.gfx.defaultPolyline) or an Array of points</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx.Polyline"/>
        </return-types>
        <description>creates an SVG polyline/polygon shape</description>
      </method>
      <method scope="static" name="createImage">
        <parameters>
          <parameter name="image" type="Object" usage="required">
            <description>an image object (see dojox.gfx.defaultImage)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx.Image"/>
        </return-types>
        <description>creates a VML image shape</description>
      </method>
      <method scope="static" name="createText">
        <parameters>
          <parameter name="text" type="Object" usage="required">
            <description>a text object (see dojox.gfx.defaultText)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx.Text"/>
        </return-types>
        <description>creates an SVG text shape</description>
      </method>
      <method scope="static" name="createPath">
        <parameters>
          <parameter name="path" type="Object" usage="required">
            <description>a path object (see dojox.gfx.defaultPath)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx.Path"/>
        </return-types>
        <description>creates an SVG path shape</description>
      </method>
      <method scope="static" name="createTextPath">
        <parameters>
          <parameter name="text" type="Object" usage="required">
            <description>a textpath object (see dojox.gfx.defaultTextPath)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx.TextPath"/>
        </return-types>
        <description>creates an SVG text shape</description>
      </method>
      <method scope="static" name="createObject">
        <parameters>
          <parameter name="shapeType" type="Function" usage="required">
            <description>a class constructor to create an instance of</description>
          </parameter>
          <parameter name="rawShape" type="Object" usage="required">
            <description>properties to be passed in to the classes &amp;quot;setShape&amp;quot; method overrideSize: Boolean: set the size explicitly, if true</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx.Shape"/>
        </return-types>
        <description>creates an instance of the passed shapeType class</description>
      </method>
      <method scope="static" name="_overrideSize" visibility="internal">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.shape.Ellipse" superclass="dojox.gfx.Shape">
    <description>a generic ellipse</description>
    <constructors>
      <constructor scope="instance">
        <description>a generic ellipse</description>
        <parameters>
          <parameter name="rawNode" type="Node" usage="required">
            <description>a DOM Node</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="bbox"/>
      <property type="Node" access="read-write" scope="instance" name="rawNode">
        <description>a DOM Node</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
    </properties>
    <methods>
      <method scope="instance" name="getBoundingBox">
        <return-types>
          <return-type type="dojox.gfx.Rectangle"/>
        </return-types>
        <description>returns the bounding box</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.shape.Image" superclass="dojox.gfx.Shape">
    <description>a generic image (this is a helper object, which is defined for convenience)</description>
    <constructors>
      <constructor scope="instance">
        <description>a generic image (this is a helper object, which is defined for convenience)</description>
        <parameters>
          <parameter name="rawNode" type="Node" usage="required">
            <description>a DOM Node</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Node" access="read-write" scope="instance" name="rawNode">
        <description>a DOM Node</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
    </properties>
    <methods>
      <method scope="instance" name="getBoundingBox">
        <return-types>
          <return-type type="dojox.gfx.Rectangle"/>
        </return-types>
        <description>returns the bounding box (its shape in this case)</description>
      </method>
      <method scope="instance" name="setFill">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>ignore setting a fill style</description>
      </method>
      <method scope="instance" name="setStroke">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>ignore setting a stroke style</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.shape.Line" superclass="dojox.gfx.Shape">
    <description>a generic line (this is a helper object, which is defined for convenience)</description>
    <constructors>
      <constructor scope="instance">
        <description>a generic line (this is a helper object, which is defined for convenience)</description>
        <parameters>
          <parameter name="rawNode" type="Node" usage="required">
            <description>a DOM Node</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="bbox"/>
      <property type="Node" access="read-write" scope="instance" name="rawNode">
        <description>a DOM Node</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
    </properties>
    <methods>
      <method scope="instance" name="getBoundingBox">
        <return-types>
          <return-type type="dojox.gfx.Rectangle"/>
        </return-types>
        <description>returns the bounding box</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.shape.Polyline" superclass="dojox.gfx.Shape">
    <description>a generic polyline/polygon (this is a helper object, which is defined for convenience)</description>
    <constructors>
      <constructor scope="instance">
        <description>a generic polyline/polygon (this is a helper object, which is defined for convenience)</description>
        <parameters>
          <parameter name="rawNode" type="Node" usage="required">
            <description>a DOM Node</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="bbox"/>
      <property type="Node" access="read-write" scope="instance" name="rawNode">
        <description>a DOM Node</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
    </properties>
    <methods>
      <method scope="instance" name="getBoundingBox">
        <return-types>
          <return-type type="dojox.gfx.Rectangle"/>
        </return-types>
        <description>returns the bounding box</description>
      </method>
      <method scope="instance" name="setShape">
        <parameters>
          <parameter name="points" type="Object" usage="required">
            <description>a polyline/polygon shape object</description>
          </parameter>
          <parameter name="closed" type="Boolean" usage="required">
            <description>close the polyline to make a polygon</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets a polyline/polygon shape object</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.shape.Rect" superclass="dojox.gfx.Shape">
    <description>a generic rectangle</description>
    <constructors>
      <constructor scope="instance">
        <description>a generic rectangle</description>
        <parameters>
          <parameter name="rawNode" type="Node" usage="required">
            <description>a DOM Node</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Node" access="read-write" scope="instance" name="rawNode">
        <description>a DOM Node</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
    </properties>
    <methods>
      <method scope="instance" name="getBoundingBox">
        <return-types>
          <return-type type="dojox.gfx.Rectangle"/>
        </return-types>
        <description>returns the bounding box (its shape in this case)</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.shape.Surface" superclass="Object">
    <description>a surface object to be used for drawings</description>
    <constructors>
      <constructor scope="instance">
        <description>a surface object to be used for drawings</description>
      </constructor>
    </constructors>
    <mixins scope="instance">
      <mixin scope="static" type="dojox.gfx.shape._eventsProcessing"/>
    </mixins>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="rawNode"/>
    </properties>
    <methods>
      <method scope="instance" name="getEventSource">
        <return-types>
          <return-type type="Node"/>
        </return-types>
        <description>returns a node, which can be used to attach event listeners</description>
      </method>
      <method scope="instance" name="_getRealMatrix" visibility="internal">
        <return-types>
          <return-type type="dojox.gfx.Matrix2D"/>
        </return-types>
        <description>always returns the identity matrix</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.shape.Text" superclass="dojox.gfx.Shape">
    <description>a generic text</description>
    <constructors>
      <constructor scope="instance">
        <description>a generic text</description>
        <parameters>
          <parameter name="rawNode" type="Node" usage="required">
            <description>a DOM Node</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="fontStyle"/>
      <property type="Node" access="read-write" scope="instance" name="rawNode">
        <description>a DOM Node</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
    </properties>
    <methods>
      <method scope="instance" name="getFont">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>returns the current font object or null</description>
      </method>
      <method scope="instance" name="setFont">
        <parameters>
          <parameter name="newFont" type="Object" usage="required">
            <description>a font object (see dojox.gfx.defaultFont) or a font string</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets a font for text</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.shape._eventsProcessing" superclass="Object">
    <methods>
      <method scope="static" name="connect">
        <parameters>
          <parameter name="name" type="Object" usage="required"/>
          <parameter name="object" type="Object" usage="required"/>
          <parameter name="method" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>connects a handler to an event on this shape</description>
      </method>
      <method scope="static" name="disconnect">
        <parameters>
          <parameter name="token" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>connects a handler by token from an event on this shape</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.silverlight" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="dasharray"/>
      <property type="Object" access="read-write" scope="static" name="fontweight"/>
      <property type="Object" access="read-write" scope="static" name="caps"/>
      <property type="Object" access="read-write" scope="static" name="joins"/>
      <property type="Object" access="read-write" scope="static" name="fonts"/>
      <property type="Object" access="read-write" scope="static" name="surfaces"/>
    </properties>
    <methods>
      <method scope="static" name="hexColor">
        <parameters>
          <parameter name="color" type="String|Array|dojo.Color" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>converts a color object to a Silverlight hex color string (#aarrggbb)</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.silverlight.Container" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_moveChildToFront" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_moveChildToBack" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="_init" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="add">
        <parameters>
          <parameter name="shape" type="dojox.gfx.Shape" usage="required">
            <description>an VML shape object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>adds a shape to a group/surface</description>
      </method>
      <method scope="static" name="remove">
        <parameters>
          <parameter name="shape" type="dojox.gfx.Shape" usage="required">
            <description>an VML shape object</description>
          </parameter>
          <parameter name="silently" type="Boolean" usage="optional">
            <description>if true, regenerate a picture</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>remove a shape from a group/surface</description>
      </method>
      <method scope="static" name="clear">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>removes all shapes from a group/surface</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.silverlight.Font" superclass="Object">
    <methods>
      <method scope="static" name="_setFont" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sets a font object (Silverlight)</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.Surface" superclass="gs.Surface">
    <description>a surface object to be used for drawings (Canvas)</description>
    <constructors>
      <constructor scope="instance">
        <description>a surface object to be used for drawings (Canvas)</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="height"/>
      <property type="Object" access="read-write" scope="instance" name="pendingImageCount"/>
      <property type="Object" access="read-write" scope="instance" name="pendingRender"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode.height"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode.width"/>
      <property type="Object" access="read-write" scope="instance" name="width"/>
    </properties>
    <methods>
      <method scope="instance" name="connect">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="createViewport">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="disconnect">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="downloadImage">
        <parameters>
          <parameter name="img" type="Image" usage="required">
            <description>the image object</description>
          </parameter>
          <parameter name="url" type="String" usage="required">
            <description>the url of the image</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>internal method, which starts an image download and renders, when it is ready</description>
      </method>
      <method scope="instance" name="getDimensions">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>returns an object with properties &amp;quot;width&amp;quot; and &amp;quot;height&amp;quot;</description>
      </method>
      <method scope="instance" name="getEventSource">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="makeDirty">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>internal method, which is called when we may need to redraw</description>
      </method>
      <method scope="instance" name="onImageLoad">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setDimensions">
        <parameters>
          <parameter name="width" type="String" usage="required">
            <description>width of surface, e.g., &amp;quot;100px&amp;quot;</description>
          </parameter>
          <parameter name="height" type="String" usage="required">
            <description>height of surface, e.g., &amp;quot;100px&amp;quot;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets the width and height of the rawNode</description>
      </method>
      <method scope="instance" name="_render" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>render the all shapes</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.svg" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="xmlns"/>
      <property type="Object" access="read-write" scope="static" name="dasharray"/>
    </properties>
    <methods>
      <method scope="static" name="getRef">
        <parameters>
          <parameter name="name" type="String" usage="required">
            <description>an SVG external reference</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Node"/>
        </return-types>
        <description>returns a DOM Node specified by the name argument or null</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.svg.Container" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_moveChildToFront" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_moveChildToBack" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="_init" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="add">
        <parameters>
          <parameter name="shape" type="dojox.gfx.Shape" usage="required">
            <description>an VML shape object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>adds a shape to a group/surface</description>
      </method>
      <method scope="static" name="clear">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>removes all shapes from a group/surface</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.svg.Font" superclass="Object">
    <methods>
      <method scope="static" name="_setFont" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sets a font object (SVG)</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.Text" superclass="gs.Text">
    <description>a text shape (Canvas)</description>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="bbox"/>
      <property type="Object" access="read-write" scope="instance" name="fontStyle"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode.foreground"/>
      <property type="Object" access="read-write" scope="instance" name="rawNode.path.v"/>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
      <property type="Object" access="read-write" scope="instance" name="_alignment" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="nodeType"/>
    </properties>
    <methods>
      <method scope="instance" name="getTextWidth">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>get the text width, in px</description>
      </method>
      <method scope="instance" name="setRawNode">
        <parameters>
          <parameter name="rawNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>assigns and clears the underlying node that will represent this shape. Once set, transforms, gradients, etc, can be applied. (no fill &amp;amp; stroke by default)</description>
      </method>
      <method scope="instance" name="setShape">
        <parameters>
          <parameter name="newShape" type="Object" usage="required">
            <description>a text shape object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets a text shape object (VML)</description>
      </method>
      <method scope="instance" name="setStroke">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>ignore setting a stroke style</description>
      </method>
      <method scope="instance" name="_applyTransform" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_delayAlignment" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getRealMatrix" visibility="internal">
        <return-types>
          <return-type type="dojox.gfx.Matrix2D"/>
        </return-types>
        <description>returns the cumulative (&amp;quot;real&amp;quot;) transformation matrix by combining the shape's matrix with its parent's matrix; it makes a correction for a font size</description>
      </method>
      <method scope="instance" name="_renderShape" visibility="internal">
        <parameters>
          <parameter name="ctx" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setFillAttr" visibility="internal">
        <parameters>
          <parameter name="f" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setFont" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sets a font object (VML)</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.TextPath" superclass="g.path.TextPath">
    <description>a text shape (Canvas)</description>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="bbox"/>
      <property type="Object" access="read-write" scope="instance" name="fontStyle"/>
      <property type="Object" access="read-write" scope="instance" name="text"/>
      <property type="Object" access="read-write" scope="static" name="nodeType"/>
    </properties>
    <methods>
      <method scope="instance" name="setFont">
        <parameters>
          <parameter name="newFont" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets a font for text</description>
      </method>
      <method scope="instance" name="setShape">
        <parameters>
          <parameter name="newShape" type="Object" usage="required">
            <description>an SVG path string or a path object (see dojox.gfx.defaultPath)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>forms a path using a shape (SVG)</description>
      </method>
      <method scope="instance" name="setText">
        <parameters>
          <parameter name="newText" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets a text to be drawn along the path</description>
      </method>
      <method scope="instance" name="_renderShape" visibility="internal">
        <parameters>
          <parameter name="ctx" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setFont" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sets a font object (VML)</description>
      </method>
      <method scope="instance" name="_setText" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sets a text shape object (VML)</description>
      </method>
      <method scope="instance" name="_setTextPath" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_updateWithSegment" visibility="internal">
        <parameters>
          <parameter name="segment" type="Object" usage="required">
            <description>a segment</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>updates the bounding box of path with new segment</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.utils" superclass="Object">
    <methods>
      <method scope="static" name="serialize">
        <parameters>
          <parameter name="object" type="dojox.gfx.Surface|dojox.gfx.Shape" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="toJson">
        <parameters>
          <parameter name="object" type="dojox.gfx.Surface|dojox.gfx.Shape" usage="required"/>
          <parameter name="prettyPrint" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
      </method>
      <method scope="static" name="deserialize">
        <parameters>
          <parameter name="parent" type="dojox.gfx.Surface|dojox.gfx.Shape" usage="required"/>
          <parameter name="object" type="dojox.gfx.Shape|Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
          <return-type type="dojox.gfx.Shape"/>
        </return-types>
      </method>
      <method scope="static" name="fromJson">
        <parameters>
          <parameter name="parent" type="dojox.gfx.Surface|dojox.gfx.Shape" usage="required"/>
          <parameter name="json" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
          <return-type type="dojox.gfx.Shape"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.vml" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="text_alignment"/>
      <property type="Object" access="read-write" scope="static" name="_bool" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="xmlns"/>
    </properties>
    <methods>
      <method scope="static" name="_parseFloat" visibility="internal">
        <parameters>
          <parameter name="str" type="String" usage="required">
            <description>a representation of a floating-point number</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>a helper function to parse VML-specific floating-point values</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx.vml.Container" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_moveChildToFront" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_moveChildToBack" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="_init" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="add">
        <parameters>
          <parameter name="shape" type="dojox.gfx.Shape" usage="required">
            <description>an VML shape object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>adds a shape to a group/surface</description>
      </method>
      <method scope="static" name="clear">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>removes all shapes from a group/surface</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx3d" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="defaultEdges"/>
      <property type="Object" access="read-write" scope="static" name="defaultTriangles"/>
      <property type="Object" access="read-write" scope="static" name="defaultQuads"/>
      <property type="Object" access="read-write" scope="static" name="defaultOrbit"/>
      <property type="Object" access="read-write" scope="static" name="defaultPath3d"/>
      <property type="Object" access="read-write" scope="static" name="defaultPolygon"/>
      <property type="Object" access="read-write" scope="static" name="defaultCube"/>
      <property type="Object" access="read-write" scope="static" name="defaultCylinder"/>
      <property type="Object" access="read-write" scope="static" name="_base" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="Matrix3D"/>
    </properties>
    <methods>
      <method scope="static" name="gradient">
        <parameters>
          <parameter name="model" type="dojox.gfx3d.lighting.Model" usage="required">
            <description>color model</description>
          </parameter>
          <parameter name="material" type="Object" usage="required">
            <description>defines visual properties</description>
          </parameter>
          <parameter name="center" type="Object" usage="required">
            <description>center of the cylinder's bottom</description>
          </parameter>
          <parameter name="radius" type="Number" usage="required">
            <description>radius of the cylinder</description>
          </parameter>
          <parameter name="from" type="Number" usage="required">
            <description>from position in radians</description>
          </parameter>
          <parameter name="to" type="Number" usage="required">
            <description>from position in radians</description>
          </parameter>
          <parameter name="matrix" type="dojox.gfx3d.Matrix3D" usage="required">
            <description>the cumulative transformation matrix tolerance: Number: tolerable diffirence in colors between gradient steps</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>calculate a cylindrical gradient</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx3d.Cube" superclass="dojox.gfx3d.Object">
    <description>a generic triangle (this is a helper object, which is defined for convenience)</description>
    <constructors>
      <constructor scope="instance">
        <description>a generic triangle (this is a helper object, which is defined for convenience)</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="cache"/>
      <property type="Object" access="read-write" scope="instance" name="object"/>
      <property type="Object" access="read-write" scope="instance" name="polygons"/>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
    </properties>
    <methods>
      <method scope="instance" name="draw">
        <parameters>
          <parameter name="lighting" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getZOrder">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="camera" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setObject">
        <parameters>
          <parameter name="newObject" type="Array" usage="required">
            <description>of points || Object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>setup the object</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx3d.Cylinder" superclass="dojox.gfx3d.Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="cache"/>
      <property type="Object" access="read-write" scope="instance" name="fillStyle.type"/>
      <property type="Object" access="read-write" scope="instance" name="object"/>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
    </properties>
    <methods>
      <method scope="instance" name="draw">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="camera" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx3d.Edges" superclass="dojox.gfx3d.Object">
    <description>a generic edge in 3D viewport</description>
    <constructors>
      <constructor scope="instance">
        <description>a generic edge in 3D viewport</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="cache"/>
      <property type="Object" access="read-write" scope="instance" name="object"/>
      <property type="Object" access="read-write" scope="instance" name="object.style"/>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
    </properties>
    <methods>
      <method scope="instance" name="draw">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getZOrder">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="camera" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setObject">
        <parameters>
          <parameter name="newObject" type="Array" usage="required">
            <description>of points || Object</description>
          </parameter>
          <parameter name="style" type="Object" usage="required">
            <description>String optional</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>setup the object</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx3d.lighting" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="finish"/>
    </properties>
    <methods>
      <method scope="static" name="black">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="white">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="toStdColor">
        <parameters>
          <parameter name="c" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="fromStdColor">
        <parameters>
          <parameter name="c" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="scaleColor">
        <parameters>
          <parameter name="s" type="Object" usage="required"/>
          <parameter name="c" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="addColor">
        <parameters>
          <parameter name="a" type="Object" usage="required"/>
          <parameter name="b" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="multiplyColor">
        <parameters>
          <parameter name="a" type="Object" usage="required"/>
          <parameter name="b" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="saturateColor">
        <parameters>
          <parameter name="c" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="mixColor">
        <parameters>
          <parameter name="c1" type="Object" usage="required"/>
          <parameter name="c2" type="Object" usage="required"/>
          <parameter name="s" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="diff2Color">
        <parameters>
          <parameter name="c1" type="Object" usage="required"/>
          <parameter name="c2" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="length2Color">
        <parameters>
          <parameter name="c" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="dot">
        <parameters>
          <parameter name="a" type="Object" usage="required"/>
          <parameter name="b" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="scale">
        <parameters>
          <parameter name="s" type="Object" usage="required"/>
          <parameter name="v" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="add">
        <parameters>
          <parameter name="a" type="Object" usage="required"/>
          <parameter name="b" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="saturate">
        <parameters>
          <parameter name="v" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="length">
        <parameters>
          <parameter name="v" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="normalize">
        <parameters>
          <parameter name="v" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="faceforward">
        <parameters>
          <parameter name="n" type="Object" usage="required"/>
          <parameter name="i" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="reflect">
        <parameters>
          <parameter name="i" type="Object" usage="required"/>
          <parameter name="n" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="diffuse">
        <parameters>
          <parameter name="normal" type="Object" usage="required"/>
          <parameter name="lights" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="specular">
        <parameters>
          <parameter name="normal" type="Object" usage="required"/>
          <parameter name="v" type="Object" usage="required"/>
          <parameter name="roughness" type="Object" usage="required"/>
          <parameter name="lights" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="phong">
        <parameters>
          <parameter name="normal" type="Object" usage="required"/>
          <parameter name="v" type="Object" usage="required"/>
          <parameter name="size" type="Object" usage="required"/>
          <parameter name="lights" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx3d.lighting.Model" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="incident" type="Object" usage="required"/>
          <parameter name="lights" type="Object" usage="required"/>
          <parameter name="ambient" type="Object" usage="required"/>
          <parameter name="specular" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="ambient"/>
      <property type="Object" access="read-write" scope="instance" name="ambient.a"/>
      <property type="Object" access="read-write" scope="instance" name="incident"/>
      <property type="Object" access="read-write" scope="instance" name="lights"/>
      <property type="Object" access="read-write" scope="instance" name="npr_alpha"/>
      <property type="Object" access="read-write" scope="instance" name="npr_beta"/>
      <property type="Object" access="read-write" scope="instance" name="npr_cool"/>
      <property type="Object" access="read-write" scope="instance" name="npr_scale"/>
      <property type="Object" access="read-write" scope="instance" name="npr_warm"/>
      <property type="Object" access="read-write" scope="instance" name="specular"/>
      <property type="Object" access="read-write" scope="instance" name="specular.a"/>
    </properties>
    <methods>
      <method scope="instance" name="constant">
        <parameters>
          <parameter name="normal" type="Object" usage="required"/>
          <parameter name="finish" type="Object" usage="required"/>
          <parameter name="pigment" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="matte">
        <parameters>
          <parameter name="normal" type="Object" usage="required"/>
          <parameter name="finish" type="Object" usage="required"/>
          <parameter name="pigment" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="metal">
        <parameters>
          <parameter name="normal" type="Object" usage="required"/>
          <parameter name="finish" type="Object" usage="required"/>
          <parameter name="pigment" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="npr">
        <parameters>
          <parameter name="normal" type="Object" usage="required"/>
          <parameter name="finish" type="Object" usage="required"/>
          <parameter name="pigment" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="plastic">
        <parameters>
          <parameter name="normal" type="Object" usage="required"/>
          <parameter name="finish" type="Object" usage="required"/>
          <parameter name="pigment" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx3d.matrix" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="identity"/>
    </properties>
    <methods>
      <method scope="static" name="_degToRad" visibility="internal">
        <parameters>
          <parameter name="degree" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_radToDeg" visibility="internal">
        <parameters>
          <parameter name="radian" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="translate">
        <parameters>
          <parameter name="a" type="Number" usage="required">
            <description>an x coordinate value</description>
          </parameter>
          <parameter name="b" type="Number" usage="required">
            <description>a y coordinate value</description>
          </parameter>
          <parameter name="c" type="Number" usage="required">
            <description>a z coordinate value</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.matrix.Matrix3D"/>
        </return-types>
        <description>forms a translation matrix</description>
      </method>
      <method scope="static" name="scale">
        <parameters>
          <parameter name="a" type="Number" usage="required">
            <description>a scaling factor used for the x coordinate</description>
          </parameter>
          <parameter name="b" type="Number" usage="required">
            <description>a scaling factor used for the y coordinate</description>
          </parameter>
          <parameter name="c" type="Number" usage="required">
            <description>a scaling factor used for the z coordinate</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.matrix.Matrix3D"/>
        </return-types>
        <description>forms a scaling matrix</description>
      </method>
      <method scope="static" name="rotateX">
        <parameters>
          <parameter name="angle" type="Number" usage="required">
            <description>an angle of rotation in radians (&amp;gt;0 for CW)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.matrix.Matrix3D"/>
        </return-types>
        <description>forms a rotating matrix (about the x axis)</description>
      </method>
      <method scope="static" name="rotateXg">
        <parameters>
          <parameter name="degree" type="Number" usage="required">
            <description>an angle of rotation in degrees (&amp;gt;0 for CW)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.matrix.Matrix3D"/>
        </return-types>
        <description>forms a rotating matrix (about the x axis)</description>
      </method>
      <method scope="static" name="rotateY">
        <parameters>
          <parameter name="angle" type="Number" usage="required">
            <description>an angle of rotation in radians (&amp;gt;0 for CW)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.matrix.Matrix3D"/>
        </return-types>
        <description>forms a rotating matrix (about the y axis)</description>
      </method>
      <method scope="static" name="rotateYg">
        <parameters>
          <parameter name="degree" type="Number" usage="required">
            <description>an angle of rotation in degrees (&amp;gt;0 for CW)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.matrix.Matrix3D"/>
        </return-types>
        <description>forms a rotating matrix (about the y axis)</description>
      </method>
      <method scope="static" name="rotateZ">
        <parameters>
          <parameter name="angle" type="Number" usage="required">
            <description>an angle of rotation in radians (&amp;gt;0 for CW)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.matrix.Matrix3D"/>
        </return-types>
        <description>forms a rotating matrix (about the z axis)</description>
      </method>
      <method scope="static" name="rotateZg">
        <parameters>
          <parameter name="degree" type="Number" usage="required">
            <description>an angle of rotation in degrees (&amp;gt;0 for CW)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.matrix.Matrix3D"/>
        </return-types>
        <description>forms a rotating matrix (about the z axis)</description>
      </method>
      <method scope="static" name="cameraTranslate">
        <parameters>
          <parameter name="a" type="Number" usage="required">
            <description>an x coordinate value</description>
          </parameter>
          <parameter name="b" type="Number" usage="required">
            <description>a y coordinate value</description>
          </parameter>
          <parameter name="c" type="Number" usage="required">
            <description>a z coordinate value</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.matrix.Matrix3D"/>
        </return-types>
        <description>forms a translation matrix</description>
      </method>
      <method scope="static" name="cameraRotateX">
        <parameters>
          <parameter name="angle" type="Number" usage="required">
            <description>an angle of rotation in radians (&amp;gt;0 for CW)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.matrix.Matrix3D"/>
        </return-types>
        <description>forms a rotating matrix (about the x axis) in cameraTransform manner</description>
      </method>
      <method scope="static" name="cameraRotateXg">
        <parameters>
          <parameter name="degree" type="Number" usage="required">
            <description>an angle of rotation in degrees (&amp;gt;0 for CW)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.matrix.Matrix3D"/>
        </return-types>
        <description>forms a rotating matrix (about the x axis)in cameraTransform manner</description>
      </method>
      <method scope="static" name="cameraRotateY">
        <parameters>
          <parameter name="angle" type="Number" usage="required">
            <description>an angle of rotation in radians (&amp;gt;0 for CW)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.matrix.Matrix3D"/>
        </return-types>
        <description>forms a rotating matrix (about the y axis) in cameraTransform manner</description>
      </method>
      <method scope="static" name="cameraRotateYg">
        <parameters>
          <parameter name="degree" type="Number" usage="required">
            <description>an angle of rotation in degrees (&amp;gt;0 for CW)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.matrix.Matrix3D"/>
        </return-types>
        <description>forms a rotating matrix (about the y axis) in cameraTransform manner</description>
      </method>
      <method scope="static" name="cameraRotateZ">
        <parameters>
          <parameter name="angle" type="Number" usage="required">
            <description>an angle of rotation in radians (&amp;gt;0 for CW)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.matrix.Matrix3D"/>
        </return-types>
        <description>forms a rotating matrix (about the z axis) in cameraTransform manner</description>
      </method>
      <method scope="static" name="cameraRotateZg">
        <parameters>
          <parameter name="degree" type="Number" usage="required">
            <description>an angle of rotation in degrees (&amp;gt;0 for CW)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.matrix.Matrix3D"/>
        </return-types>
        <description>forms a rotating matrix (about the z axis) in cameraTransform manner</description>
      </method>
      <method scope="static" name="normalize">
        <parameters>
          <parameter name="matrix" type="Object" usage="required">
            <description>an object, which is converted to a matrix, if necessary</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.matrix.Matrix3D"/>
        </return-types>
        <description>converts an object to a matrix, if necessary</description>
      </method>
      <method scope="static" name="clone">
        <parameters>
          <parameter name="matrix" type="dojox.gfx3d.matrix.Matrix3D" usage="required">
            <description>a 3D matrix-like object to be cloned</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.matrix.Matrix3D"/>
        </return-types>
        <description>creates a copy of a 3D matrix</description>
      </method>
      <method scope="static" name="invert">
        <parameters>
          <parameter name="matrix" type="dojox.gfx.matrix.Matrix3D" usage="required">
            <description>a 2D matrix-like object to be inverted</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.matrix.Matrix3D"/>
        </return-types>
        <description>inverts a 2D matrix</description>
      </method>
      <method scope="static" name="_multiplyPoint" visibility="internal">
        <parameters>
          <parameter name="m" type="Object" usage="required"/>
          <parameter name="x" type="Number" usage="required">
            <description>an x coordinate of a point</description>
          </parameter>
          <parameter name="y" type="Number" usage="required">
            <description>a y coordinate of a point</description>
          </parameter>
          <parameter name="z" type="Number" usage="required">
            <description>a z coordinate of a point</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>applies a matrix to a point matrix: dojox.gfx3d.matrix.Matrix3D: a 3D matrix object to be applied</description>
      </method>
      <method scope="static" name="multiplyPoint">
        <parameters>
          <parameter name="matrix" type="dojox.gfx3d.matrix.Matrix3D" usage="required">
            <description>a 3D matrix object to be applied</description>
          </parameter>
          <parameter name="a" type="Number|Point" usage="required">
            <description>Number an x coordinate of a point</description>
          </parameter>
          <parameter name="b" type="Object" usage="required">
            <description>Number a y coordinate of a point</description>
          </parameter>
          <parameter name="c" type="Object" usage="required">
            <description>Number a z coordinate of a point</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>applies a matrix to a point</description>
      </method>
      <method scope="static" name="multiply">
        <parameters>
          <parameter name="matrix" type="dojox.gfx3d.matrix.Matrix3D" usage="one-or-more">
            <description>a 3D matrix-like object, all subsequent arguments are matrix-like objects too</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.matrix.Matrix3D"/>
        </return-types>
        <description>combines matrices by multiplying them sequentially in the given order</description>
      </method>
      <method scope="static" name="_project" visibility="internal">
        <parameters>
          <parameter name="m" type="Object" usage="required"/>
          <parameter name="x" type="Number" usage="required">
            <description>an x coordinate of a point</description>
          </parameter>
          <parameter name="y" type="Number" usage="required">
            <description>a y coordinate of a point</description>
          </parameter>
          <parameter name="z" type="Number" usage="required">
            <description>a z coordinate of a point</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>applies a matrix to a point matrix: dojox.gfx3d.matrix.Matrix3D: a 3D matrix object to be applied</description>
      </method>
      <method scope="static" name="project">
        <parameters>
          <parameter name="matrix" type="dojox.gfx3d.matrix.Matrix3D" usage="required">
            <description>a 3D matrix object to be applied</description>
          </parameter>
          <parameter name="a" type="Number|Point" usage="required">
            <description>Number an x coordinate of a point</description>
          </parameter>
          <parameter name="b" type="Object" usage="required">
            <description>Number a y coordinate of a point</description>
          </parameter>
          <parameter name="c" type="Object" usage="required">
            <description>Number a z coordinate of a point</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>applies a matrix to a point</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx3d.matrix.Matrix3D" superclass="Object">
    <description>a 3D matrix object</description>
    <constructors>
      <constructor scope="instance">
        <description>a 3D matrix object</description>
        <parameters>
          <parameter name="arg" type="Object" usage="required">
            <description>a 3D matrix-like object, a number, or an array of such objects</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="xx"/>
      <property type="Object" access="read-write" scope="instance" name="dx"/>
      <property type="Object" access="read-write" scope="instance" name="dy"/>
      <property type="Object" access="read-write" scope="instance" name="dz"/>
      <property type="Object" access="read-write" scope="instance" name="xx"/>
      <property type="Object" access="read-write" scope="instance" name="xy"/>
      <property type="Object" access="read-write" scope="instance" name="xz"/>
      <property type="Object" access="read-write" scope="instance" name="yx"/>
      <property type="Object" access="read-write" scope="instance" name="yy"/>
      <property type="Object" access="read-write" scope="instance" name="yz"/>
      <property type="Object" access="read-write" scope="instance" name="zx"/>
      <property type="Object" access="read-write" scope="instance" name="zy"/>
      <property type="Object" access="read-write" scope="instance" name="zz"/>
    </properties>
  </class>
  <class type="dojox.gfx3d.Object" superclass="Object">
    <description>a Object object, which knows how to map 3D objects to 2D shapes.</description>
    <constructors>
      <constructor scope="instance">
        <description>a Object object, which knows how to map 3D objects to 2D shapes.</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="cache"/>
      <property type="Object" access="read-write" scope="instance" name="fillStyle"/>
      <property type="Object" access="read-write" scope="instance" name="matrix"/>
      <property type="Object" access="read-write" scope="instance" name="object"/>
      <property type="Object" access="read-write" scope="instance" name="parent"/>
      <property type="Object" access="read-write" scope="instance" name="renderer"/>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
      <property type="Object" access="read-write" scope="instance" name="strokeStyle"/>
      <property type="All" access="read-write" scope="instance" name="render">
        <description>the 3D objects need to override the following virtual functions: getZOrder, getOutline, draw, redraw if necessary.</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="applyLeftTransform">
        <parameters>
          <parameter name="matrix" type="dojox.gfx3d.matrix.Matrix" usage="required">
            <description>a matrix or a matrix-like object (see an argument of dojox.gfx.matrix.Matrix constructor for a list of acceptable arguments)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>multiplies the existing matrix with an argument on left side (matrix * this.matrix)</description>
      </method>
      <method scope="instance" name="applyRightTransform">
        <parameters>
          <parameter name="matrix" type="dojox.gfx3d.matrix.Matrix" usage="required">
            <description>a matrix or a matrix-like object (see an argument of dojox.gfx.matrix.Matrix constructor for a list of acceptable arguments)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>multiplies the existing matrix with an argument on right side (this.matrix * matrix)</description>
      </method>
      <method scope="instance" name="applyTransform">
        <parameters>
          <parameter name="matrix" type="dojox.gfx3d.matrix.Matrix" usage="required">
            <description>a matrix or a matrix-like object (see an argument of dojox.gfx.matrix.Matrix constructor for a list of acceptable arguments)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>a shortcut for dojox.gfx.Shape.applyRightTransform</description>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="draw">
        <parameters>
          <parameter name="lighting" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getOutline">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getZOrder">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="invalidate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setFill">
        <parameters>
          <parameter name="fill" type="Object" usage="required">
            <description>a fill object (see dojox.gfx.defaultLinearGradient, dojox.gfx.defaultRadialGradient, dojox.gfx.defaultPattern, dojo.Color or dojox.gfx.MODEL)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sets a fill object (the default implementation is to delegate to the underlying 2D shape).</description>
      </method>
      <method scope="instance" name="setObject">
        <parameters>
          <parameter name="newObject" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sets a Object object</description>
      </method>
      <method scope="instance" name="setStroke">
        <parameters>
          <parameter name="stroke" type="Object" usage="required">
            <description>a stroke object (see dojox.gfx.defaultStroke)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sets a stroke object (the default implementation simply ignores it)</description>
      </method>
      <method scope="instance" name="setTransform">
        <parameters>
          <parameter name="matrix" type="dojox.gfx3d.matrix.Matrix" usage="required">
            <description>a matrix or a matrix-like object (see an argument of dojox.gfx3d.matrix.Matrix constructor for a list of acceptable arguments)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets a transformation matrix</description>
      </method>
      <method scope="instance" name="toStdFill">
        <parameters>
          <parameter name="lighting" type="Object" usage="required"/>
          <parameter name="normal" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx3d.object" superclass="Object"/>
  <class type="dojox.gfx3d.Orbit" superclass="dojox.gfx3d.Object">
    <description>a generic edge in 3D viewport</description>
    <constructors>
      <constructor scope="instance">
        <description>a generic edge in 3D viewport</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="cache"/>
      <property type="Object" access="read-write" scope="instance" name="object"/>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
    </properties>
    <methods>
      <method scope="instance" name="draw">
        <parameters>
          <parameter name="lighting" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="camera" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx3d.Path3d" superclass="dojox.gfx3d.Object">
    <description>a generic line (this is a helper object, which is defined for convenience)</description>
    <constructors>
      <constructor scope="instance">
        <description>a generic line (this is a helper object, which is defined for convenience)</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="absolute"/>
      <property type="Object" access="read-write" scope="instance" name="cache"/>
      <property type="Object" access="read-write" scope="instance" name="last"/>
      <property type="Object" access="read-write" scope="instance" name="object"/>
      <property type="Object" access="read-write" scope="instance" name="path"/>
      <property type="Object" access="read-write" scope="instance" name="segments"/>
      <property type="Object" access="read-write" scope="instance" name="_validSegments" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="closePath">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>closes a path</description>
      </method>
      <method scope="instance" name="lineTo">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>formes a line segment</description>
      </method>
      <method scope="instance" name="moveTo">
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>formes a move segment</description>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="camera" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_collectArgs" visibility="internal">
        <parameters>
          <parameter name="array" type="Array" usage="required">
            <description>an output argument (array of numbers)</description>
          </parameter>
          <parameter name="args" type="Array" usage="required">
            <description>an input argument (can be values of Boolean, Number, dojox.gfx.Point, or an embedded array of them)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>converts an array of arguments to plain numeric values</description>
      </method>
      <method scope="instance" name="_draw" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_pushSegment" visibility="internal">
        <parameters>
          <parameter name="action" type="String" usage="required">
            <description>valid SVG code for a segment's type</description>
          </parameter>
          <parameter name="args" type="Array" usage="required">
            <description>a list of parameters for this segment</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>adds a segment</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx3d.Polygon" superclass="dojox.gfx3d.Object">
    <description>a generic triangle (this is a helper object, which is defined for convenience)</description>
    <constructors>
      <constructor scope="instance">
        <description>a generic triangle (this is a helper object, which is defined for convenience)</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="cache"/>
      <property type="Object" access="read-write" scope="instance" name="object"/>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
    </properties>
    <methods>
      <method scope="instance" name="draw">
        <parameters>
          <parameter name="lighting" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getOutline">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getZOrder">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="camera" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setObject">
        <parameters>
          <parameter name="newObject" type="Array" usage="required">
            <description>of points || Object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>setup the object</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx3d.Quads" superclass="dojox.gfx3d.Object">
    <description>a generic triangle (this is a helper object, which is defined for convenience)</description>
    <constructors>
      <constructor scope="instance">
        <description>a generic triangle (this is a helper object, which is defined for convenience)</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="cache"/>
      <property type="Object" access="read-write" scope="instance" name="object"/>
      <property type="Object" access="read-write" scope="instance" name="object.style"/>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
    </properties>
    <methods>
      <method scope="instance" name="draw">
        <parameters>
          <parameter name="lighting" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getZOrder">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="camera" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setObject">
        <parameters>
          <parameter name="newObject" type="Array" usage="required">
            <description>of points || Object</description>
          </parameter>
          <parameter name="style" type="Object" usage="required">
            <description>String optional</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>setup the object</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx3d.Scene" superclass="dojox.gfx3d.Object">
    <description>a containter of other 3D objects</description>
    <constructors>
      <constructor scope="instance">
        <description>a containter of other 3D objects</description>
      </constructor>
    </constructors>
    <mixins scope="instance">
      <mixin scope="static" type="dojox.gfx3d._creators"/>
    </mixins>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="fillStyle"/>
      <property type="Object" access="read-write" scope="instance" name="objects"/>
      <property type="Object" access="read-write" scope="instance" name="schedule"/>
      <property type="Object" access="read-write" scope="instance" name="strokeStyle"/>
      <property type="Object" access="read-write" scope="instance" name="todos"/>
      <property type="Object" access="read-write" scope="instance" name="_draw" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="addTodo">
        <parameters>
          <parameter name="newObject" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="draw">
        <parameters>
          <parameter name="lighting" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getZOrder">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="invalidate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="camera" type="Object" usage="required"/>
          <parameter name="deep" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setFill">
        <parameters>
          <parameter name="fill" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setStroke">
        <parameters>
          <parameter name="stroke" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx3d.scheduler" superclass="Object">
    <methods>
      <method scope="static" name="zOrder">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
          <parameter name="order" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="bsp">
        <parameters>
          <parameter name="buffer" type="Object" usage="required"/>
          <parameter name="outline" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="order">
        <parameters>
          <parameter name="it" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="outline">
        <parameters>
          <parameter name="it" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx3d.scheduler.BinarySearchTree" superclass="Object">
    <description>build the binary search tree, using binary space partition algorithm. The idea is for any polygon, for example, (a, b, c), the space is divided by the plane into two space: plus and minus.  for any arbitary vertex p, if(p - a) dotProduct n = 0, p is inside the plane, &amp;gt; 0, p is in the plus space, vice versa for minus space. n is the normal vector that is perpendicular the plate, defined as: n = ( b - a) crossProduct ( c - a )  in this implementation, n is declared as normal, ,a is declared as orient.</description>
    <constructors>
      <constructor scope="instance">
        <description>build the binary search tree, using binary space partition algorithm. The idea is for any polygon, for example, (a, b, c), the space is divided by the plane into two space: plus and minus.  for any arbitary vertex p, if(p - a) dotProduct n = 0, p is inside the plane, &amp;gt; 0, p is in the plus space, vice versa for minus space. n is the normal vector that is perpendicular the plate, defined as: n = ( b - a) crossProduct ( c - a )  in this implementation, n is declared as normal, ,a is declared as orient.</description>
        <parameters>
          <parameter name="obj" type="Object" usage="required">
            <description>dojox.gfx3d.Object</description>
          </parameter>
          <parameter name="outline" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="minus"/>
      <property type="Object" access="read-write" scope="instance" name="normal"/>
      <property type="Object" access="read-write" scope="instance" name="object"/>
      <property type="Object" access="read-write" scope="instance" name="orient"/>
      <property type="Object" access="read-write" scope="instance" name="plus"/>
    </properties>
    <methods>
      <method scope="instance" name="add">
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
          <parameter name="outline" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="iterate">
        <parameters>
          <parameter name="outline" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx3d.Triangles" superclass="dojox.gfx3d.Object">
    <description>a generic triangle (this is a helper object, which is defined for convenience)</description>
    <constructors>
      <constructor scope="instance">
        <description>a generic triangle (this is a helper object, which is defined for convenience)</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="cache"/>
      <property type="Object" access="read-write" scope="instance" name="object"/>
      <property type="Object" access="read-write" scope="instance" name="object.style"/>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
    </properties>
    <methods>
      <method scope="instance" name="draw">
        <parameters>
          <parameter name="lighting" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getZOrder">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <parameters>
          <parameter name="camera" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setObject">
        <parameters>
          <parameter name="newObject" type="Array" usage="required">
            <description>of points || Object</description>
          </parameter>
          <parameter name="style" type="Object" usage="required">
            <description>String optional</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>setup the object</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx3d.vector" superclass="Object">
    <methods>
      <method scope="static" name="sum">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sum of the vectors</description>
      </method>
      <method scope="static" name="center">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>center of the vectors</description>
      </method>
      <method scope="static" name="substract">
        <parameters>
          <parameter name="a" type="Pointer" usage="required"/>
          <parameter name="b" type="Pointer" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_crossProduct" visibility="internal">
        <parameters>
          <parameter name="x" type="Number" usage="required">
            <description>an x coordinate of a point</description>
          </parameter>
          <parameter name="y" type="Number" usage="required">
            <description>a y coordinate of a point</description>
          </parameter>
          <parameter name="z" type="Number" usage="required">
            <description>a z coordinate of a point</description>
          </parameter>
          <parameter name="u" type="Number" usage="required">
            <description>an x coordinate of a point</description>
          </parameter>
          <parameter name="v" type="Number" usage="required">
            <description>a y coordinate of a point</description>
          </parameter>
          <parameter name="w" type="Number" usage="required">
            <description>a z coordinate of a point</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>applies a cross product of two vectorss, (x, y, z) and (u, v, w)</description>
      </method>
      <method scope="static" name="crossProduct">
        <parameters>
          <parameter name="a" type="Number|Point" usage="required">
            <description>Number an x coordinate of a point</description>
          </parameter>
          <parameter name="b" type="Number|Point" usage="required">
            <description>Number a y coordinate of a point</description>
          </parameter>
          <parameter name="c" type="Object" usage="required">
            <description>Number a z coordinate of a point</description>
          </parameter>
          <parameter name="d" type="Object" usage="required">
            <description>Number an x coordinate of a point</description>
          </parameter>
          <parameter name="e" type="Object" usage="required">
            <description>Number a y coordinate of a point</description>
          </parameter>
          <parameter name="f" type="Object" usage="required">
            <description>Number a z coordinate of a point</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>applies a matrix to a point matrix: dojox.gfx3d.matrix.Matrix3D: a 3D matrix object to be applied</description>
      </method>
      <method scope="static" name="_dotProduct" visibility="internal">
        <parameters>
          <parameter name="x" type="Number" usage="required">
            <description>an x coordinate of a point</description>
          </parameter>
          <parameter name="y" type="Number" usage="required">
            <description>a y coordinate of a point</description>
          </parameter>
          <parameter name="z" type="Number" usage="required">
            <description>a z coordinate of a point</description>
          </parameter>
          <parameter name="u" type="Number" usage="required">
            <description>an x coordinate of a point</description>
          </parameter>
          <parameter name="v" type="Number" usage="required">
            <description>a y coordinate of a point</description>
          </parameter>
          <parameter name="w" type="Number" usage="required">
            <description>a z coordinate of a point</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>applies a cross product of two vectorss, (x, y, z) and (u, v, w)</description>
      </method>
      <method scope="static" name="dotProduct">
        <parameters>
          <parameter name="a" type="Number|Point" usage="required">
            <description>Number an x coordinate of a point</description>
          </parameter>
          <parameter name="b" type="Number|Point" usage="required">
            <description>Number a y coordinate of a point</description>
          </parameter>
          <parameter name="c" type="Object" usage="required">
            <description>Number a z coordinate of a point</description>
          </parameter>
          <parameter name="d" type="Object" usage="required">
            <description>Number an x coordinate of a point</description>
          </parameter>
          <parameter name="e" type="Object" usage="required">
            <description>Number a y coordinate of a point</description>
          </parameter>
          <parameter name="f" type="Object" usage="required">
            <description>Number a z coordinate of a point</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>applies a matrix to a point matrix: dojox.gfx3d.matrix.Matrix3D: a 3D matrix object to be applied</description>
      </method>
      <method scope="static" name="normalize">
        <parameters>
          <parameter name="a" type="Point|Array" usage="required">
            <description>Object a point</description>
          </parameter>
          <parameter name="b" type="Point" usage="required">
            <description>Object a point</description>
          </parameter>
          <parameter name="c" type="Point" usage="required">
            <description>Object a point</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>find the normal of the implicit surface</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx3d.Viewport" superclass="dojox.gfx.Group">
    <description>a viewport/container for 3D objects, which knows the camera and lightings</description>
    <constructors>
      <constructor scope="instance">
        <description>a viewport/container for 3D objects, which knows the camera and lightings</description>
      </constructor>
    </constructors>
    <mixins scope="instance">
      <mixin scope="static" type="dojox.gfx3d._creators"/>
    </mixins>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="camera"/>
      <property type="Object" access="read-write" scope="instance" name="deep"/>
      <property type="Object" access="read-write" scope="instance" name="dimension"/>
      <property type="Object" access="read-write" scope="instance" name="draw"/>
      <property type="Object" access="read-write" scope="instance" name="lighting"/>
      <property type="Object" access="read-write" scope="instance" name="lights"/>
      <property type="Object" access="read-write" scope="instance" name="objects"/>
      <property type="Object" access="read-write" scope="instance" name="renderer"/>
      <property type="Object" access="read-write" scope="instance" name="schedule"/>
      <property type="Object" access="read-write" scope="instance" name="todos"/>
      <property type="Object" access="read-write" scope="static" name="nodeType"/>
    </properties>
    <methods>
      <method scope="instance" name="addLights">
        <parameters>
          <parameter name="lights" type="Array" usage="required">
            <description>|| light object: light object(s)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>add new light/lights to the viewport.</description>
      </method>
      <method scope="instance" name="addTodo">
        <parameters>
          <parameter name="newObject" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="applyCameraLeftTransform">
        <parameters>
          <parameter name="matrix" type="dojox.gfx3d.matrix.Matrix" usage="required">
            <description>a matrix or a matrix-like object (see an argument of dojox.gfx3d.matrix.Matrix constructor for a list of acceptable arguments)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>multiplies the existing matrix with an argument on left side (matrix * this.matrix)</description>
      </method>
      <method scope="instance" name="applyCameraRightTransform">
        <parameters>
          <parameter name="matrix" type="dojox.gfx3d.matrix.Matrix" usage="required">
            <description>a matrix or a matrix-like object (see an argument of dojox.gfx3d.matrix.Matrix constructor for a list of acceptable arguments)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>multiplies the existing matrix with an argument on right side (this.matrix * matrix)</description>
      </method>
      <method scope="instance" name="applyCameraTransform">
        <parameters>
          <parameter name="matrix" type="dojox.gfx3d.matrix.Matrix" usage="required">
            <description>a matrix or a matrix-like object (see an argument of dojox.gfx3d.matrix.Matrix constructor for a list of acceptable arguments)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>a shortcut for dojox.gfx3d.Object.applyRightTransform</description>
      </method>
      <method scope="instance" name="invalidate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>iterate all children and call their render callback function.</description>
      </method>
      <method scope="instance" name="setCameraTransform">
        <parameters>
          <parameter name="matrix" type="dojox.gfx3d.matrix.Matrix" usage="required">
            <description>a matrix or a matrix-like object (see an argument of dojox.gfx.matrix.Matrix constructor for a list of acceptable arguments)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>sets a transformation matrix</description>
      </method>
      <method scope="instance" name="setDimensions">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setLights">
        <parameters>
          <parameter name="lights" type="Array|Object" usage="required">
            <description>Array an array of light object or lights object</description>
          </parameter>
          <parameter name="ambient" type="Object" usage="required">
            <description>Color an ambient object</description>
          </parameter>
          <parameter name="specular" type="Object" usage="required">
            <description>Color an specular object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set the lights</description>
      </method>
    </methods>
  </class>
  <class type="dojox.gfx3d._creators" superclass="Object">
    <description>object creators</description>
    <methods>
      <method scope="static" name="createEdges">
        <parameters>
          <parameter name="edges" type="Object" usage="required"/>
          <parameter name="style" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.Edge"/>
        </return-types>
        <description>creates an edge object line: Object: a edge object (see dojox.gfx3d.defaultPath)</description>
      </method>
      <method scope="static" name="createTriangles">
        <parameters>
          <parameter name="tris" type="Object" usage="required"/>
          <parameter name="style" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.Edge"/>
        </return-types>
        <description>creates an edge object line: Object: a edge object (see dojox.gfx3d.defaultPath)</description>
      </method>
      <method scope="static" name="createQuads">
        <parameters>
          <parameter name="quads" type="Object" usage="required"/>
          <parameter name="style" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.Edge"/>
        </return-types>
        <description>creates an edge object line: Object: a edge object (see dojox.gfx3d.defaultPath)</description>
      </method>
      <method scope="static" name="createPolygon">
        <parameters>
          <parameter name="points" type="Array" usage="required">
            <description>of points || Object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.Polygon"/>
        </return-types>
        <description>creates an triangle object</description>
      </method>
      <method scope="static" name="createOrbit">
        <parameters>
          <parameter name="orbit" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.Cube"/>
        </return-types>
        <description>creates an triangle object points: Array of points || Object</description>
      </method>
      <method scope="static" name="createCube">
        <parameters>
          <parameter name="cube" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.Cube"/>
        </return-types>
        <description>creates an triangle object points: Array of points || Object</description>
      </method>
      <method scope="static" name="createCylinder">
        <parameters>
          <parameter name="cylinder" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.Cube"/>
        </return-types>
        <description>creates an triangle object points: Array of points || Object</description>
      </method>
      <method scope="static" name="createPath3d">
        <parameters>
          <parameter name="path" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.Edge"/>
        </return-types>
        <description>creates an edge object line: Object: a edge object (see dojox.gfx3d.defaultPath)</description>
      </method>
      <method scope="static" name="createScene">
        <return-types>
          <return-type type="dojox.gfx3d.Scene"/>
        </return-types>
        <description>creates an triangle object line: Object: a triangle object (see dojox.gfx3d.defaultPath)</description>
      </method>
      <method scope="static" name="create3DObject">
        <parameters>
          <parameter name="objectType" type="Object" usage="required"/>
          <parameter name="rawObject" type="Object" usage="required"/>
          <parameter name="style" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojox.gfx3d.Object"/>
        </return-types>
        <description>creates an instance of the passed shapeType class shapeType: Function: a class constructor to create an instance of rawShape: Object: properties to be passed in to the classes &amp;quot;setShape&amp;quot; method</description>
      </method>
      <method scope="static" name="adopt">
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>adds a shape to the list shape: dojox.gfx.Shape: a shape</description>
      </method>
      <method scope="static" name="abandon">
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
          <parameter name="silently" type="Boolean" usage="optional">
            <description>if true, do not redraw a picture yet</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="self"/>
        </return-types>
        <description>removes a shape from the list</description>
      </method>
    </methods>
  </class>
  <class type="dojox.grid" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="Grid"/>
      <property type="Object" access="read-write" scope="static" name="VirtualGrid"/>
      <property type="Object" access="read-write" scope="static" name="_data" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="rowIndexTag"/>
      <property type="Object" access="read-write" scope="static" name="gridViewTag"/>
      <property type="Object" access="read-write" scope="static" name="_grid" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="drag"/>
      <property type="Object" access="read-write" scope="static" name="na"/>
      <property type="Object" access="read-write" scope="static" name="mouseEvents"/>
      <property type="Object" access="read-write" scope="static" name="keyEvents"/>
    </properties>
    <methods>
      <method scope="static" name="nop">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>a null function?</description>
      </method>
      <method scope="static" name="getTdIndex">
        <parameters>
          <parameter name="td" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getTrIndex">
        <parameters>
          <parameter name="tr" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getTr">
        <parameters>
          <parameter name="rowOwner" type="Object" usage="required"/>
          <parameter name="index" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getTd">
        <parameters>
          <parameter name="rowOwner" type="Object" usage="required"/>
          <parameter name="rowIndex" type="Object" usage="required"/>
          <parameter name="cellIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="findTable">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="ascendDom">
        <parameters>
          <parameter name="inNode" type="Object" usage="required"/>
          <parameter name="inWhile" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="makeNotTagName">
        <parameters>
          <parameter name="inTagName" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="fire">
        <parameters>
          <parameter name="ob" type="Object" usage="required"/>
          <parameter name="ev" type="Object" usage="required"/>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="setStyleText">
        <parameters>
          <parameter name="inNode" type="Object" usage="required"/>
          <parameter name="inStyleText" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getStyleText">
        <parameters>
          <parameter name="inNode" type="Object" usage="required"/>
          <parameter name="inStyleText" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="setStyle">
        <parameters>
          <parameter name="inElement" type="Object" usage="required"/>
          <parameter name="inStyle" type="Object" usage="required"/>
          <parameter name="inValue" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="setStyleHeightPx">
        <parameters>
          <parameter name="inElement" type="Object" usage="required"/>
          <parameter name="inHeight" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="funnelEvents">
        <parameters>
          <parameter name="inNode" type="Object" usage="required"/>
          <parameter name="inObject" type="Object" usage="required"/>
          <parameter name="inMethod" type="Object" usage="required"/>
          <parameter name="inEvents" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="removeNode">
        <parameters>
          <parameter name="inNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getRef">
        <parameters>
          <parameter name="name" type="Object" usage="required"/>
          <parameter name="create" type="Object" usage="required"/>
          <parameter name="context" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getProp">
        <parameters>
          <parameter name="name" type="Object" usage="required"/>
          <parameter name="create" type="Object" usage="required"/>
          <parameter name="context" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="indexInParent">
        <parameters>
          <parameter name="inNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="cleanNode">
        <parameters>
          <parameter name="inNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getTagName">
        <parameters>
          <parameter name="inNodeOrId" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="nodeKids">
        <parameters>
          <parameter name="inNode" type="Object" usage="required"/>
          <parameter name="inTag" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="divkids">
        <parameters>
          <parameter name="inNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="focusSelectNode">
        <parameters>
          <parameter name="inNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="whenIdle">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="arrayCompare">
        <parameters>
          <parameter name="inA" type="Object" usage="required"/>
          <parameter name="inB" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="arrayInsert">
        <parameters>
          <parameter name="inArray" type="Object" usage="required"/>
          <parameter name="inIndex" type="Object" usage="required"/>
          <parameter name="inValue" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="arrayRemove">
        <parameters>
          <parameter name="inArray" type="Object" usage="required"/>
          <parameter name="inIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="arraySwap">
        <parameters>
          <parameter name="inArray" type="Object" usage="required"/>
          <parameter name="inI" type="Object" usage="required"/>
          <parameter name="inJ" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="initTextSizePoll">
        <parameters>
          <parameter name="inInterval" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="textSizeChanged">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.Grid" superclass="dojox.VirtualGrid">
    <description>A grid widget with virtual scrolling, cell editing, complex rows, sorting, fixed columns, sizeable columns, etc.</description>
    <constructors>
      <constructor scope="instance">
        <description>A grid widget with virtual scrolling, cell editing, complex rows, sorting, fixed columns, sizeable columns, etc.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="removal" access="read-write" scope="instance" name="model"/>
      <property type="Object" access="read-write" scope="instance" name="rowCount"/>
      <property type="removal" access="read-write" scope="instance" name="model"/>
    </properties>
    <methods>
      <method scope="instance" name="addRow">
        <parameters>
          <parameter name="inRowData" type="Object" usage="required"/>
          <parameter name="inIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="canEdit">
        <parameters>
          <parameter name="inCell" type="Object" usage="required">
            <description>A grid cell</description>
          </parameter>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>Grid row index</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Determines if a given cell may be edited</description>
      </method>
      <method scope="instance" name="canSort">
        <parameters>
          <parameter name="inSortInfo" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="doApplyCellEdit">
        <parameters>
          <parameter name="inValue" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inFieldIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="doApplyEdit">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="doCancelEdit">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="doStartEdit">
        <parameters>
          <parameter name="inCell" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="get">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>data socket (called in cell's context)</description>
      </method>
      <method scope="instance" name="getCellName">
        <parameters>
          <parameter name="inCell" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getSortField">
        <parameters>
          <parameter name="inSortInfo" type="Number" usage="required">
            <description>1-based grid column index; positive if sort is ascending, otherwise negative</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Retrieves the model field on which to sort data.</description>
      </method>
      <method scope="instance" name="indexCellFields">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="modelAllChange">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="modelDatumChange">
        <parameters>
          <parameter name="inDatum" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inFieldIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="modelFieldsChange">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="modelInsertion">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="modelRemoval">
        <parameters>
          <parameter name="inKeys" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="modelRowChange">
        <parameters>
          <parameter name="inData" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onStyleRow">
        <parameters>
          <parameter name="inRow" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="refresh">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Re-render the grid, getting new data from the model</description>
      </method>
      <method scope="instance" name="removeSelectedRows">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setModel">
        <parameters>
          <parameter name="inModel" type="Object" usage="required">
            <description>Model object, usually an instance of a dojox.grid.data.Model subclass</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Set the grid's data model</description>
      </method>
      <method scope="instance" name="sort">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="styleRowState">
        <parameters>
          <parameter name="inRow" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Perform row styling</description>
      </method>
      <method scope="instance" name="_setModel" visibility="internal">
        <parameters>
          <parameter name="inModel" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_structureChanged" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="markupFactory">
        <parameters>
          <parameter name="props" type="Object" usage="required"/>
          <parameter name="node" type="Object" usage="required"/>
          <parameter name="ctor" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.grid.Builder" superclass="Object">
    <description>Base class to produce html for grid content. Also provide event decoration, providing grid related information inside the event object passed to grid events.</description>
    <constructors>
      <constructor scope="instance">
        <description>Base class to produce html for grid content. Also provide event decoration, providing grid related information inside the event object passed to grid events.</description>
        <parameters>
          <parameter name="inView" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="grid"/>
      <property type="Object" access="read-write" scope="instance" name="lastOverCellNode"/>
      <property type="Object" access="read-write" scope="instance" name="view"/>
      <property type="Object" access="read-write" scope="instance" name="view"/>
      <property type="Object" access="read-write" scope="instance" name="_table" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="baseDecorateEvent">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="dispatchEvent">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="domousedown">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="domouseout">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="domouseover">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="findCellTarget">
        <parameters>
          <parameter name="inSourceNode" type="Object" usage="required"/>
          <parameter name="inTopNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="findRowTarget">
        <parameters>
          <parameter name="inSource" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="findTarget">
        <parameters>
          <parameter name="inSource" type="Object" usage="required"/>
          <parameter name="inTag" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="generateCellMarkup">
        <parameters>
          <parameter name="inCell" type="Object" usage="required"/>
          <parameter name="inMoreStyles" type="Object" usage="required"/>
          <parameter name="inMoreClasses" type="Object" usage="required"/>
          <parameter name="isHeader" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
      </method>
      <method scope="instance" name="getCellNode">
        <parameters>
          <parameter name="inRowNode" type="Object" usage="required"/>
          <parameter name="inCellIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getCellNodeIndex">
        <parameters>
          <parameter name="inCellNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isCellNode">
        <parameters>
          <parameter name="inNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isIntraNodeEvent">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isIntraRowEvent">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.grid.data.DojoData" superclass="dojox.grid.data.Dynamic">
    <description>A grid data model for dynamic data retreived from a store which implements the dojo.data API set. Retrieves data automatically when requested and provides notification when data is received</description>
    <constructors>
      <constructor scope="instance">
        <description>A grid data model for dynamic data retreived from a store which implements the dojo.data API set. Retrieves data automatically when requested and provides notification when data is received</description>
        <parameters>
          <parameter name="inFields" type="Object" usage="required"/>
          <parameter name="inData" type="Object" usage="required"/>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="bop"/>
      <property type="Object" access="read-write" scope="instance" name="count"/>
      <property type="Object" access="read-write" scope="instance" name="data"/>
      <property type="Object" access="read-write" scope="instance" name="fields._nameMaps" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="pages"/>
      <property type="Object" access="read-write" scope="instance" name="sortFields"/>
      <property type="Object" access="read-write" scope="instance" name="store"/>
      <property type="Object" access="read-write" scope="instance" name="_canIdentify" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_canNotify" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_canWrite" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_currentlyProcessing" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_disableNew" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_rowIdentities" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="clientSort"/>
      <property type="Object" access="read-write" scope="instance" name="query"/>
      <property type="Object" access="read-write" scope="instance" name="queryOptions"/>
      <property type="Object" access="read-write" scope="instance" name="sortFields"/>
      <property type="Object" access="read-write" scope="instance" name="store"/>
      <property type="Object" access="read-write" scope="instance" name="_canIdentify" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_canNotify" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_canWrite" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_currentlyProcessing" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_rowIdentities" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="beginReturn">
        <parameters>
          <parameter name="inCount" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="cancelModifyRow">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="canSort">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="clearData">
        <parameters>
          <parameter name="keepStore" type="Boolean" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="copyRow">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="datumChange">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="rowIdx" type="Object" usage="required"/>
          <parameter name="colIdx" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="endModifyRow">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getDatum">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inColIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="insert">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="index" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="insertion">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="markupFactory">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
          <parameter name="node" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="processError">
        <parameters>
          <parameter name="error" type="The" usage="required">
            <description>error object returned by the store when a problem occurred.</description>
          </parameter>
          <parameter name="request" type="The" usage="required">
            <description>request object that caused the error.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Hook function to trap error messages from the store and emit them. Intended for connecting to and handling the error object or at least reporting it.</description>
      </method>
      <method scope="instance" name="processRows">
        <parameters>
          <parameter name="items" type="Object" usage="required"/>
          <parameter name="request" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="refresh">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Function to cause the model to re-query the store and rebuild the current viewport.</description>
      </method>
      <method scope="instance" name="removal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="remove">
        <parameters>
          <parameter name="inRowIndexes" type="An" usage="required">
            <description>array of row indexes from the grid to remove from the store. Call delete on the store</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Function to remove a set of items from the store based on the row index.</description>
      </method>
      <method scope="instance" name="requestRows">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inCount" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setData">
        <parameters>
          <parameter name="inData" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setDatum">
        <parameters>
          <parameter name="inDatum" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inColIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setRowCount">
        <parameters>
          <parameter name="inCount" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="sort">
        <parameters>
          <parameter name="colIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_attrCompare" visibility="internal">
        <parameters>
          <parameter name="cache" type="Object" usage="required"/>
          <parameter name="data" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_createRow" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getRowFromItem" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getRowId" visibility="internal">
        <parameters>
          <parameter name="item" type="The" usage="required">
            <description>store item to examine to determine row index.</description>
          </parameter>
          <parameter name="isNotItem" type="Boolean" usage="required">
            <description>flag to indicate if the item passed is a store item or not.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Function determine the row index for a particular item</description>
      </method>
      <method scope="instance" name="_insertItem" visibility="internal">
        <parameters>
          <parameter name="storeItem" type="Object" usage="required"/>
          <parameter name="index" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_removeItems" visibility="internal">
        <parameters>
          <parameter name="inRowIndexes" type="Array" usage="required">
            <description>An array of row indexes from the grid to remove from the store.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Function to remove a set of items from the store based on the row index.</description>
      </method>
      <method scope="instance" name="_setRowId" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="offset" type="Object" usage="required"/>
          <parameter name="idx" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setupFields" visibility="internal">
        <parameters>
          <parameter name="dataItem" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_storeDatumChange" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
          <parameter name="attr" type="Object" usage="required"/>
          <parameter name="oldVal" type="Object" usage="required"/>
          <parameter name="newVal" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_storeDatumDelete" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_storeDatumNew" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.grid.data.Dynamic" superclass="dojox.grid.data.Table">
    <description>Grid data model for dynamic data such as data retrieved from a server. Retrieves data automatically when requested and provides notification when data is received</description>
    <constructors>
      <constructor scope="instance">
        <description>Grid data model for dynamic data such as data retrieved from a server. Retrieves data automatically when requested and provides notification when data is received</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="bop"/>
      <property type="Object" access="read-write" scope="instance" name="count"/>
      <property type="Object" access="read-write" scope="instance" name="eop"/>
      <property type="Object" access="read-write" scope="instance" name="page"/>
      <property type="Object" access="read-write" scope="instance" name="pages"/>
      <property type="Object" access="read-write" scope="instance" name="requests"/>
      <property type="Object" access="read-write" scope="instance" name="bop"/>
      <property type="Object" access="read-write" scope="instance" name="eop"/>
      <property type="Object" access="read-write" scope="instance" name="page"/>
      <property type="Object" access="read-write" scope="instance" name="pages"/>
      <property type="Object" access="read-write" scope="instance" name="requests"/>
      <property type="Object" access="read-write" scope="instance" name="rowsPerPage"/>
    </properties>
    <methods>
      <method scope="instance" name="canSort">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="clearData">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getColCount">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getDatum">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inColIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getRow">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getRowCount">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isRowLoaded">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="needPage">
        <parameters>
          <parameter name="inPageIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="pageToRow">
        <parameters>
          <parameter name="inPageIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="preparePage">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inColIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="remove">
        <parameters>
          <parameter name="inRowIndexes" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="removePages">
        <parameters>
          <parameter name="inRowIndexes" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="requestPage">
        <parameters>
          <parameter name="inPageIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="requestRows">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inCount" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>stub. Fill in to perform actual data row fetching logic. The returning logic must provide the data back to the system via setRow</description>
      </method>
      <method scope="instance" name="requestsPending">
        <parameters>
          <parameter name="inBoolean" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="rowsProvided">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inCount" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="rowToPage">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setDatum">
        <parameters>
          <parameter name="inDatum" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inColIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setRowCount">
        <parameters>
          <parameter name="inCount" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.grid.data.Field" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="inName" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="compare"/>
      <property type="Object" access="read-write" scope="instance" name="name"/>
      <property type="Object" access="read-write" scope="instance" name="na"/>
    </properties>
  </class>
  <class type="dojox.grid.data.Fields" superclass="dojox.grid.data.Mixer">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="inFieldClass" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="defaultValue"/>
    </properties>
    <methods>
      <method scope="instance" name="indexOf">
        <parameters>
          <parameter name="inKey" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.grid.data.Mixer" superclass="Object">
    <description>basic collection class that provides a default value for items</description>
    <constructors>
      <constructor scope="instance">
        <description>basic collection class that provides a default value for items</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="defaultValue"/>
      <property type="Object" access="read-write" scope="instance" name="values"/>
    </properties>
    <methods>
      <method scope="instance" name="build">
        <parameters>
          <parameter name="inIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="clear">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="count">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="get">
        <parameters>
          <parameter name="inIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getDefault">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="insert">
        <parameters>
          <parameter name="inIndex" type="Object" usage="required"/>
          <parameter name="inProps" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="move">
        <parameters>
          <parameter name="inFromIndex" type="Object" usage="required"/>
          <parameter name="inToIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="remove">
        <parameters>
          <parameter name="inIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="set">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setDefault">
        <parameters>
          <parameter name="inField" type="Object" usage="one-or-more"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="swap">
        <parameters>
          <parameter name="inIndexA" type="Object" usage="required"/>
          <parameter name="inIndexB" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_set" visibility="internal">
        <parameters>
          <parameter name="inIndex" type="Object" usage="required"/>
          <parameter name="inField" type="Object" usage="one-or-more"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.grid.data.Model" superclass="Object">
    <description>Base abstract grid data model. Makes no assumptions about the structure of grid data.</description>
    <constructors>
      <constructor scope="instance">
        <description>Base abstract grid data model. Makes no assumptions about the structure of grid data.</description>
        <parameters>
          <parameter name="inFields" type="Object" usage="required"/>
          <parameter name="inData" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="fields"/>
      <property type="Object" access="read-write" scope="instance" name="observers"/>
      <property type="Object" access="read-write" scope="instance" name="count"/>
      <property type="Object" access="read-write" scope="instance" name="dummy"/>
      <property type="Object" access="read-write" scope="instance" name="insert"/>
      <property type="events" access="read-write" scope="instance" name="observer"/>
      <property type="Object" access="read-write" scope="instance" name="remove"/>
      <property type="Object" access="read-write" scope="instance" name="sort"/>
      <property type="Object" access="read-write" scope="instance" name="updating"/>
    </properties>
    <methods>
      <method scope="instance" name="beginUpdate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="canSort">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="change">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="clear">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="clearData">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="endUpdate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="generateComparator">
        <parameters>
          <parameter name="inCompare" type="Object" usage="required"/>
          <parameter name="inField" type="Object" usage="required"/>
          <parameter name="inTrueForAscend" type="Object" usage="required"/>
          <parameter name="inSubCompare" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="insertion">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isUpdating">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="makeComparator">
        <parameters>
          <parameter name="inIndices" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="notify">
        <parameters>
          <parameter name="inMsg" type="Object" usage="required"/>
          <parameter name="inArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="notObserver">
        <parameters>
          <parameter name="inObserver" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="removal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.grid.data.Objects" superclass="dojox.grid.data.Table">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="inFields" type="Object" usage="required"/>
          <parameter name="inData" type="Object" usage="required"/>
          <parameter name="inKey" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="data"/>
    </properties>
    <methods>
      <method scope="instance" name="allChange">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="autoAssignFields">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getDatum">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inColIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setData">
        <parameters>
          <parameter name="inData" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.grid.data.Rows" superclass="dojox.grid.data.Model">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="inFields" type="Object" usage="required"/>
          <parameter name="inData" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <methods>
      <method scope="instance" name="allChange">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="beginModifyRow">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="cancelModifyRow">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="datumChange">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="endModifyRow">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="rowChange">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.grid.data.Table" superclass="dojox.grid.data.Rows">
    <description>Basic grid data model for static data in the form of an array of rows that are arrays of cell data</description>
    <constructors>
      <constructor scope="instance">
        <description>Basic grid data model for static data in the form of an array of rows that are arrays of cell data</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="cache"/>
      <property type="Object" access="read-write" scope="instance" name="colCount"/>
      <property type="Object" access="read-write" scope="instance" name="count"/>
      <property type="Object" access="read-write" scope="instance" name="data"/>
      <property type="Object" access="read-write" scope="instance" name="cache"/>
      <property type="Object" access="read-write" scope="instance" name="colCount"/>
      <property type="Object" access="read-write" scope="instance" name="data"/>
      <property type="Object" access="read-write" scope="instance" name="dummy"/>
      <property type="Object" access="read-write" scope="instance" name="sort"/>
      <property type="Object" access="read-write" scope="instance" name="update"/>
    </properties>
    <methods>
      <method scope="instance" name="badIndex">
        <parameters>
          <parameter name="inCaller" type="Object" usage="required"/>
          <parameter name="inDescriptor" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="copyRow">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="get">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getColCount">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getDatum">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inColIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getRow">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getRowCount">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isGoodIndex">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inColIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="measure">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="set">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setData">
        <parameters>
          <parameter name="inData" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setDatum">
        <parameters>
          <parameter name="inDatum" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inColIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setRow">
        <parameters>
          <parameter name="inData" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setRows">
        <parameters>
          <parameter name="inData" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="swap">
        <parameters>
          <parameter name="inIndexA" type="Object" usage="required"/>
          <parameter name="inIndexB" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_insert" visibility="internal">
        <parameters>
          <parameter name="inData" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_remove" visibility="internal">
        <parameters>
          <parameter name="inKeys" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.grid.editors.AlwaysOn" superclass="dojox.grid.editors.Input">
    <description>grid cell editor that is always on, regardless of grid editing state</description>
    <constructors>
      <constructor scope="instance">
        <description>grid cell editor that is always on, regardless of grid editing state</description>
        <parameters>
          <parameter name="inCell" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Boolean" access="read-write" scope="instance" name="alwaysOn">
        <description>flag to use editor to format grid cell regardless of editing state.</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="applyStaticValue">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_formatNode" visibility="internal">
        <parameters>
          <parameter name="inDatum" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.grid.editors.Base" superclass="Object">
    <description>base grid editor class. Other grid editors should inherited from this class.</description>
    <constructors>
      <constructor scope="instance">
        <description>base grid editor class. Other grid editors should inherited from this class.</description>
        <parameters>
          <parameter name="inCell" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="cell"/>
      <property type="Object" access="read-write" scope="instance" name="value"/>
      <property type="Object" access="read-write" scope="instance" name="_formatPending" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_formatPending" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_valueProp" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="apply">
        <parameters>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>grid row index</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>apply edit from cell editor</description>
      </method>
      <method scope="instance" name="cancel">
        <parameters>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>grid row index</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>cancel cell edit</description>
      </method>
      <method scope="instance" name="cancelFormatNode">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="dispatchEvent">
        <parameters>
          <parameter name="m" type="Object" usage="required"/>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="focus">
        <parameters>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>grid row index</description>
          </parameter>
          <parameter name="inNode" type="dom" usage="required">
            <description>node editor node</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>focus the grid editor</description>
      </method>
      <method scope="instance" name="format">
        <parameters>
          <parameter name="inDatum" type="anything" usage="required">
            <description>cell data to edit</description>
          </parameter>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>grid row index</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>formats the cell for editing</description>
      </method>
      <method scope="instance" name="formatNode">
        <parameters>
          <parameter name="inNode" type="dom" usage="required">
            <description>node dom node for the editor</description>
          </parameter>
          <parameter name="inDatum" type="anything" usage="required">
            <description>cell data to edit</description>
          </parameter>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>grid row index</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>format the editing dom node. Use when editor is a widget.</description>
      </method>
      <method scope="instance" name="getNode">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>grid row index</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="needFormatNode">
        <parameters>
          <parameter name="inDatum" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="restore">
        <parameters>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>grid row index</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>restore editor state</description>
      </method>
      <method scope="instance" name="save">
        <parameters>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>grid row index</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>save editor state</description>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>grid row index</description>
          </parameter>
          <parameter name="inValue" type="anything" usage="required">
            <description>value of editor</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set the value of the grid editor</description>
      </method>
      <method scope="instance" name="_finish" visibility="internal">
        <parameters>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>grid row index</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called when editing is completed to clean up editor</description>
      </method>
      <method scope="instance" name="_formatNode" visibility="internal">
        <parameters>
          <parameter name="inDatum" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.grid.editors.Bool" superclass="dojox.grid.editors.AlwaysOn">
    <description>grid cell editor that provides a standard checkbox that is always on</description>
    <constructors>
      <constructor scope="instance">
        <description>grid cell editor that provides a standard checkbox that is always on</description>
        <parameters>
          <parameter name="inCell" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_valueProp" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="doclick">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="format">
        <parameters>
          <parameter name="inDatum" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.grid.editors.CheckBox" superclass="dojox.grid.editors.Dijit">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="inCell" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="editorClass"/>
    </properties>
    <methods>
      <method scope="instance" name="getValue">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inValue" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="sizeEditor">
        <parameters>
          <parameter name="inNode" type="Object" usage="required"/>
          <parameter name="inDatum" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.grid.editors.ComboBox" superclass="dojox.grid.editors.Dijit">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="inCell" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="editorClass"/>
    </properties>
    <methods>
      <method scope="instance" name="getEditorProps">
        <parameters>
          <parameter name="inDatum" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getValue">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.grid.editors.DateTextBox" superclass="dojox.grid.editors.Dijit">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="inCell" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="editorClass"/>
    </properties>
    <methods>
      <method scope="instance" name="getEditorProps">
        <parameters>
          <parameter name="inDatum" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inValue" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.grid.editors.Dijit" superclass="dojox.grid.editors.base">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="inCell" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="editor"/>
      <property type="Object" access="read-write" scope="instance" name="editorClass"/>
      <property type="Object" access="read-write" scope="instance" name="editorClass"/>
    </properties>
    <methods>
      <method scope="instance" name="attachEditor">
        <parameters>
          <parameter name="inNode" type="Object" usage="required"/>
          <parameter name="inDatum" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="createEditor">
        <parameters>
          <parameter name="inNode" type="Object" usage="required"/>
          <parameter name="inDatum" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="focus">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="format">
        <parameters>
          <parameter name="inDatum" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="formatNode">
        <parameters>
          <parameter name="inNode" type="Object" usage="required"/>
          <parameter name="inDatum" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getEditorProps">
        <parameters>
          <parameter name="inDatum" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inValue" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="sizeEditor">
        <parameters>
          <parameter name="inNode" type="Object" usage="required"/>
          <parameter name="inDatum" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_finish" visibility="internal">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.grid.editors.Editor" superclass="dojox.grid.editors.Dijit">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="inCell" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="editorClass"/>
    </properties>
    <methods>
      <method scope="instance" name="createEditor">
        <parameters>
          <parameter name="inNode" type="Object" usage="required"/>
          <parameter name="inDatum" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="formatNode">
        <parameters>
          <parameter name="inNode" type="Object" usage="required"/>
          <parameter name="inDatum" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getEditorProps">
        <parameters>
          <parameter name="inDatum" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.grid.editors.Input" superclass="dojox.grid.editors.Base">
    <description>grid cell editor that provides a standard text input box</description>
    <constructors>
      <constructor scope="instance">
        <description>grid cell editor that provides a standard text input box</description>
        <parameters>
          <parameter name="inCell" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="keyFilter">
        <description>optional regex for disallowing keypresses</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="keyFilter">
        <description>optional regex for disallowing keypresses</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="doKey">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="format">
        <parameters>
          <parameter name="inDatum" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="formatNode">
        <parameters>
          <parameter name="inNode" type="Object" usage="required"/>
          <parameter name="inDatum" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_finish" visibility="internal">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.grid.editors.Select" superclass="dojox.grid.editors.Input">
    <description>grid cell editor that provides a standard select options: text of each item values: value for each item returnIndex: editor returns only the index of the selected option and not the value</description>
    <constructors>
      <constructor scope="instance">
        <description>grid cell editor that provides a standard select options: text of each item values: value for each item returnIndex: editor returns only the index of the selected option and not the value</description>
        <parameters>
          <parameter name="inCell" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="options"/>
      <property type="Object" access="read-write" scope="instance" name="values"/>
    </properties>
    <methods>
      <method scope="instance" name="format">
        <parameters>
          <parameter name="inDatum" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.grid.jobs" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="jobs"/>
    </properties>
    <methods>
      <method scope="static" name="cancel">
        <parameters>
          <parameter name="inHandle" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="job">
        <parameters>
          <parameter name="inName" type="Object" usage="required"/>
          <parameter name="inDelay" type="Object" usage="required"/>
          <parameter name="inJob" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="cancelJob">
        <parameters>
          <parameter name="inName" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.grid.publicEvents" superclass="Object">
    <description>VirtualGrid mixin that provides default implementations for grid events.</description>
    <properties>
      <property type="String" access="read-write" scope="static" name="cellOverClass">
        <description>css class to apply to grid cells over which the cursor is placed.</description>
      </property>
    </properties>
    <methods>
      <method scope="static" name="onKeyEvent">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>top level handler for Key Events</description>
      </method>
      <method scope="static" name="onContentEvent">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Top level handler for Content events</description>
      </method>
      <method scope="static" name="onHeaderEvent">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Top level handler for header events</description>
      </method>
      <method scope="static" name="onStyleRow">
        <parameters>
          <parameter name="inRow" type="Object" usage="required">
            <description>containing row state information: selected, true if the row is selcted; over: true of the mouse is over the row; odd: true if the row is odd. Use customClasses and customStyles to control row css classes and styles; both properties are strings.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Perform row styling on a given row. Called whenever row styling is updated.</description>
      </method>
      <method scope="static" name="onKeyDown">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Grid key event handler. By default enter begins editing and applies edits, escape cancels and edit, tab, shift-tab, and arrow keys move grid cell focus.</description>
      </method>
      <method scope="static" name="onMouseOver">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when mouse is over the grid.</description>
      </method>
      <method scope="static" name="onMouseOut">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object that contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when mouse moves out of the grid.</description>
      </method>
      <method scope="static" name="onMouseDown">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object that contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when mouse is down inside grid.</description>
      </method>
      <method scope="static" name="onMouseOverRow">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when mouse is over any row (data or header).</description>
      </method>
      <method scope="static" name="onMouseOutRow">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when mouse moves out of any row (data or header).</description>
      </method>
      <method scope="static" name="onMouseDownRow">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object that contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when mouse is down inside grid row</description>
      </method>
      <method scope="static" name="onCellMouseOver">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when mouse is over a cell.</description>
      </method>
      <method scope="static" name="onCellMouseOut">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object which contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when mouse moves out of a cell.</description>
      </method>
      <method scope="static" name="onCellMouseDown">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object which contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when mouse is down in a header cell.</description>
      </method>
      <method scope="static" name="onCellClick">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object which contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when a cell is clicked.</description>
      </method>
      <method scope="static" name="onCellDblClick">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when a cell is double-clicked.</description>
      </method>
      <method scope="static" name="onCellContextMenu">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object which contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when a cell context menu is accessed via mouse right click.</description>
      </method>
      <method scope="static" name="onCellFocus">
        <parameters>
          <parameter name="inCell" type="Object" usage="required">
            <description>Cell object containing properties of the grid column.</description>
          </parameter>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>Index of the grid row</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when a cell receives focus.</description>
      </method>
      <method scope="static" name="onRowClick">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object which contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when a row is clicked.</description>
      </method>
      <method scope="static" name="onRowDblClick">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>decorated event object which contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when a row is double clicked.</description>
      </method>
      <method scope="static" name="onRowMouseOver">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object which contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when mouse moves over a data row.</description>
      </method>
      <method scope="static" name="onRowMouseOut">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when mouse moves out of a data row.</description>
      </method>
      <method scope="static" name="onRowMouseDown">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object which contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when mouse is down in a row.</description>
      </method>
      <method scope="static" name="onRowContextMenu">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object which contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when a row context menu is accessed via mouse right click.</description>
      </method>
      <method scope="static" name="onHeaderMouseOver">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when mouse moves over the grid header.</description>
      </method>
      <method scope="static" name="onHeaderMouseOut">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object which contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when mouse moves out of the grid header.</description>
      </method>
      <method scope="static" name="onHeaderCellMouseOver">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object which contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when mouse moves over a header cell.</description>
      </method>
      <method scope="static" name="onHeaderCellMouseOut">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object which contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when mouse moves out of a header cell.</description>
      </method>
      <method scope="static" name="onHeaderCellMouseDown">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object which contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when mouse is down in a header cell.</description>
      </method>
      <method scope="static" name="onHeaderClick">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object which contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when the grid header is clicked.</description>
      </method>
      <method scope="static" name="onHeaderCellClick">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object which contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when a header cell is clicked.</description>
      </method>
      <method scope="static" name="onHeaderDblClick">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object which contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when the grid header is double clicked.</description>
      </method>
      <method scope="static" name="onHeaderCellDblClick">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object which contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when a header cell is double clicked.</description>
      </method>
      <method scope="static" name="onHeaderCellContextMenu">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object which contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when a header cell context menu is accessed via mouse right click.</description>
      </method>
      <method scope="static" name="onHeaderContextMenu">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>Decorated event object which contains reference to grid, cell, and rowIndex</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when the grid header context menu is accessed via mouse right click.</description>
      </method>
      <method scope="static" name="onStartEdit">
        <parameters>
          <parameter name="inCell" type="Object" usage="required">
            <description>Cell object containing properties of the grid column.</description>
          </parameter>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>Index of the grid row</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when editing is started for a given grid cell</description>
      </method>
      <method scope="static" name="onApplyCellEdit">
        <parameters>
          <parameter name="inValue" type="String" usage="required">
            <description>Value from cell editor</description>
          </parameter>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>Index of the grid row</description>
          </parameter>
          <parameter name="inFieldIndex" type="Number" usage="required">
            <description>Index in the grid's data model</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when editing is applied for a given grid cell</description>
      </method>
      <method scope="static" name="onCancelEdit">
        <parameters>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>Index of the grid row</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when editing is cancelled for a given grid cell</description>
      </method>
      <method scope="static" name="onApplyEdit">
        <parameters>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>Index of the grid row</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when editing is applied for a given grid row</description>
      </method>
      <method scope="static" name="onCanSelect">
        <parameters>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>Index of the grid row</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event to determine if a grid row may be selected</description>
      </method>
      <method scope="static" name="onCanDeselect">
        <parameters>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>Index of the grid row</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event to determine if a grid row may be deselected</description>
      </method>
      <method scope="static" name="onSelected">
        <parameters>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>Index of the grid row</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when a grid row is selected</description>
      </method>
      <method scope="static" name="onDeselected">
        <parameters>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>Index of the grid row</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Event fired when a grid row is deselected</description>
      </method>
      <method scope="static" name="onSelectionChanged">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.GridRowView" superclass="dojox.GridView">
    <description>Custom grid view. If used in a grid structure, provides a small selectable region for grid rows.</description>
    <constructors>
      <constructor scope="instance">
        <description>Custom grid view. If used in a grid structure, provides a small selectable region for grid rows.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="headerNode.style.visibility"/>
      <property type="Object" access="read-write" scope="instance" name="scrollboxNode.style.overflow"/>
      <property type="Object" access="read-write" scope="instance" name="defaultWidth"/>
      <property type="Object" access="read-write" scope="instance" name="noscroll"/>
      <property type="Object" access="read-write" scope="instance" name="padBorderWidth"/>
    </properties>
    <methods>
      <method scope="instance" name="adaptWidth">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="buildRendering">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="buildRowContent">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inRowNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="domouseout">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="domouseover">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="doStyleRowNode">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inRowNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getWidth">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="renderHeader">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="resize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.GridView" superclass="dijit._Widget dijit._Templated">
    <description>A collection of grid columns. A grid is comprised of a set of views that stack horizontally. Grid creates views automatically based on grid's layout structure. Users should typically not need to access individual views directly.</description>
    <constructors>
      <constructor scope="instance">
        <description>A collection of grid columns. A grid is comprised of a set of views that stack horizontally. Grid creates views automatically based on grid's layout structure. Users should typically not need to access individual views directly.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="content"/>
      <property type="Object" access="read-write" scope="instance" name="contentWidth"/>
      <property type="Object" access="read-write" scope="instance" name="firstScroll"/>
      <property type="Object" access="read-write" scope="instance" name="flexCells"/>
      <property type="Object" access="read-write" scope="instance" name="header"/>
      <property type="Object" access="read-write" scope="instance" name="headerContentNode.firstChild.style.width"/>
      <property type="Object" access="read-write" scope="instance" name="headerContentNode.innerHTML"/>
      <property type="Object" access="read-write" scope="instance" name="headerNode.scrollLeft"/>
      <property type="Object" access="read-write" scope="instance" name="headerNodeContainer.style.width"/>
      <property type="Object" access="read-write" scope="instance" name="lastTop"/>
      <property type="Object" access="read-write" scope="instance" name="noscroll"/>
      <property type="Object" access="read-write" scope="instance" name="onBeforeRow"/>
      <property type="Object" access="read-write" scope="instance" name="rowNodes"/>
      <property type="Object" access="read-write" scope="instance" name="scrollboxNode.scrollLeft"/>
      <property type="Object" access="read-write" scope="instance" name="scrollboxNode.scrollTop"/>
      <property type="Object" access="read-write" scope="instance" name="scrollboxNode.style.height"/>
      <property type="Object" access="read-write" scope="instance" name="scrollboxNode.style.overflow"/>
      <property type="Object" access="read-write" scope="instance" name="structure"/>
      <property type="String" access="read-write" scope="instance" name="viewWidth">
        <description>Width for the view, in valid css unit</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="classTag"/>
      <property type="String" access="read-write" scope="instance" name="defaultWidth">
        <description>Default widget of the view</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="firstScroll"/>
      <property type="Object" access="read-write" scope="instance" name="focus"/>
      <property type="Object" access="read-write" scope="instance" name="lastTop"/>
      <property type="Object" access="read-write" scope="instance" name="marginBottom"/>
      <property type="Object" access="read-write" scope="instance" name="rowPad"/>
      <property type="Object" access="read-write" scope="instance" name="rowRemoved"/>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Object" access="read-write" scope="instance" name="themeable"/>
      <property type="String" access="read-write" scope="instance" name="viewWidth">
        <description>Width for the view, in valid css unit</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="adaptHeight">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="adaptWidth">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="buildRow">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inRowNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="buildRowContent">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inRowNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="createRowNode">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="dispatchContentEvent">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="dispatchHeaderEvent">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="doContentEvent">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="doHeaderEvent">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="doscroll">
        <parameters>
          <parameter name="inEvent" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="doStyleRowNode">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inRowNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getCellNode">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inCellIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getColumnsWidth">
        <return-types>
          <return-type type="Number"/>
        </return-types>
      </method>
      <method scope="instance" name="getContentWidth">
        <return-types>
          <return-type type="String"/>
        </return-types>
      </method>
      <method scope="instance" name="getRowNode">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getScrollbarWidth">
        <return-types>
          <return-type type="Number"/>
        </return-types>
      </method>
      <method scope="instance" name="getWidth">
        <return-types>
          <return-type type="String"/>
        </return-types>
      </method>
      <method scope="instance" name="hasScrollbar">
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postMixInProperties">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="render">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="renderHeader">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="renderRow">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inHeightPx" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="resize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setColWidth">
        <parameters>
          <parameter name="inIndex" type="Object" usage="required"/>
          <parameter name="inWidth" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setScrollTop">
        <parameters>
          <parameter name="inTop" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setSize">
        <parameters>
          <parameter name="w" type="Object" usage="required"/>
          <parameter name="h" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setStructure">
        <parameters>
          <parameter name="inStructure" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="styleRow">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inRowNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="styleRowNode">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inRowNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="testFlexCells">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="update">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="updateRow">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inHeightPx" type="Object" usage="required"/>
          <parameter name="inPageNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="updateRowStyles">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="updateStructure">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getHeaderContent" visibility="internal">
        <parameters>
          <parameter name="inCell" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.help" superclass="Object">
    <description>Adds the help function to all variables.</description>
    <properties>
      <property type="Object" access="read-write" scope="static" name="_namespaces" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_rpc" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_attributes" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_toStrings" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_overrides" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_recursions" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_names" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_base" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="console"/>
    </properties>
    <methods>
      <method scope="static" name="locate">
        <parameters>
          <parameter name="searchFor" type="String" usage="required">
            <description>The string to search for.</description>
          </parameter>
          <parameter name="searchIn" type="String|Object|String[]|Object[]" usage="required">
            <description>The namespaces to search in. Defaults to dojox.help._namespaces</description>
          </parameter>
          <parameter name="maxResults" type="Number" usage="required">
            <description>The maximum number of results.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Search for dojo functionality that has something to do with the given string.</description>
      </method>
      <method scope="static" name="refresh">
        <parameters>
          <parameter name="namespace" type="String" usage="optional">
            <description>The string-representation of a namespace.</description>
          </parameter>
          <parameter name="recursive" type="Boolean" usage="optional">
            <description>Whether to recurse through the namespace.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Useful if you reset some values, and want to restore their help function</description>
      </method>
      <method scope="static" name="noConflict">
        <parameters>
          <parameter name="item" type="Object" usage="optional">
            <description>If you pass an item, only that item will be cleaned</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Use this function when you want to resolve the problems created by including a dojox.help package.</description>
      </method>
      <method scope="static" name="init">
        <parameters>
          <parameter name="namespaces" type="String[]" usage="required">
            <description>Any namespaces to add to the default (dojox.help._namespaces)</description>
          </parameter>
          <parameter name="noConflict" type="Boolen" usage="optional">
            <description>Whether to start in noConflict mode</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Should be called by one of the implementations. Runs startup code</description>
      </method>
      <method scope="static" name="_noConflict" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_clean" visibility="internal">
        <parameters>
          <parameter name="self" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_displayLocated" visibility="internal">
        <parameters>
          <parameter name="located" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_displayHelp" visibility="internal">
        <parameters>
          <parameter name="loading" type="Object" usage="required"/>
          <parameter name="obj" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_addVersion" visibility="internal">
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_stripPrototype" visibility="internal">
        <parameters>
          <parameter name="original" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="__toString" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_recurse" visibility="internal">
        <parameters>
          <parameter name="namespace" type="String" usage="optional"/>
          <parameter name="recursive" type="Boolean" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="__recurse" visibility="internal">
        <parameters>
          <parameter name="namespace" type="Object" usage="required"/>
          <parameter name="root" type="Object" usage="required"/>
          <parameter name="name" type="Object" usage="required"/>
          <parameter name="items" type="Object" usage="required"/>
          <parameter name="recursive" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_plainText" visibility="internal">
        <parameters>
          <parameter name="str" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.image" superclass="Object"/>
  <class type="dojox.image.Gallery" superclass="dijit._Widget dijit._Templated">
    <description>Gallery widget that wraps a dojox.image.ThumbnailPicker and dojox.image.SlideShow widget</description>
    <constructors>
      <constructor scope="instance">
        <description>Gallery widget that wraps a dojox.image.ThumbnailPicker and dojox.image.SlideShow widget</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="slideShow"/>
      <property type="Object" access="read-write" scope="instance" name="thumbPicker"/>
      <property type="Object" access="read-write" scope="instance" name="widgetid"/>
      <property type="Boolean" access="read-write" scope="instance" name="autoLoad">
        <description>If true, images are loaded before the user views them. If false, an image is loaded when the user displays it.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="imageHeight">
        <description>Maximum height of an image in the SlideShow widget</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="imageLargeAttr">
        <description>Defines the name of the attribute to request from the store to retrieve the URL to the image.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="imageThumbAttr">
        <description>Defines the name of the attribute to request from the store to retrieve the URL to the thumbnail image.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="imageWidth">
        <description>Maximum width of an image in the SlideShow widget</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="linkAttr">
        <description>Defines the name of the attribute to request from the store to retrieve the URL to link to from an image, if any.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="pageSize">
        <description>The number of records to retrieve from the data store per request.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="slideshowInterval">
        <description>time in seconds, between image changes in the slide show.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="String" access="read-write" scope="instance" name="titleAttr">
        <description>Defines the name of the attribute to request from the store to retrieve the title of the picture, if any.</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Initializes the widget, creates the ThumbnailPicker and SlideShow widgets</description>
      </method>
      <method scope="instance" name="reset">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Resets the widget to its initial state</description>
      </method>
      <method scope="instance" name="setDataStore">
        <parameters>
          <parameter name="dataStore" type="An" usage="required">
            <description>implementation of the dojo.data.api.Read API. This accesses the image data.</description>
          </parameter>
          <parameter name="request" type="An" usage="required">
            <description>implementation of the dojo.data.api.Request API. This specifies the query and paging information to be used by the data store</description>
          </parameter>
          <parameter name="paramNames" type="optional" usage="required">
            <description>An object defining the names of the item attributes to fetch from the data store.  The four attributes allowed are 'linkAttr', 'imageLargeAttr', 'imageThumbAttr' and 'titleAttr'</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets the data store and request objects to read data from.</description>
      </method>
      <method scope="instance" name="showImage">
        <parameters>
          <parameter name="index" type="Object" usage="required"/>
          <parameter name="callback" type="optional" usage="required">
            <description>Function Optional callback function to call when the image has finished displaying.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Shows the image at index 'idx'. idx: Number The position of the image in the data store to display</description>
      </method>
      <method scope="instance" name="showNextImage">
        <parameters>
          <parameter name="inTimer" type="Boolean" usage="required">
            <description>If true, a slideshow is active, otherwise the slideshow is inactive.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Changes the image being displayed in the SlideShow to the next image in the data store</description>
      </method>
      <method scope="instance" name="toggleSlideshow">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Switches the slideshow mode on and off.</description>
      </method>
      <method scope="instance" name="_centerChildren" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Ensures that the ThumbnailPicker and the SlideShow widgets are centered.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.image.Lightbox" superclass="dijit._Widget">
    <description>A dojo-based Lightbox implementation.</description>
    <constructors>
      <constructor scope="instance">
        <description>A dojo-based Lightbox implementation.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Boolean" access="read-write" scope="instance" name="_allowPassthru" visibility="internal">
        <description>Privately set this to disable/enable natural link of anchor tags</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_attachedDialog" visibility="internal"/>
      <property type="Number" access="read-write" scope="instance" name="duration">
        <description>Generic time in MS to adjust the feel of widget. could possibly add various durations for the various actions (dialog fadein, sizeing, img fadein ...)</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="group">
        <description>Grouping images in a page with similar tags will provide a 'slideshow' like grouping of images</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="href">
        <description>Link to image to use for this Lightbox node (empty if using a store).</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="title">
        <description>A string of text to be shown in the Lightbox beneath the image (empty if using a store)</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="_allowPassthru" visibility="internal">
        <description>Privately set this to disable/enable natural link of anchor tags</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_attachedDialog" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="disable">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Disables event clobbering and dialog, and follows natural link</description>
      </method>
      <method scope="instance" name="enable">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Enables the dialog (prevents default link)</description>
      </method>
      <method scope="instance" name="show">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Show the Lightbox with this instance as the starting point</description>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_addSelf" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Add this instance to the master LightBoxDialog</description>
      </method>
      <method scope="instance" name="_handleClick" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Handle the click on the link</description>
      </method>
    </methods>
  </class>
  <class type="dojox.image.Magnifier" superclass="dojox.image.MagnifierLite">
    <description>Adds magnification on a portion of an image element, using dojox.gfx</description>
    <constructors>
      <constructor scope="instance">
        <description>Adds magnification on a portion of an image element, using dojox.gfx</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="glassNode"/>
      <property type="Object" access="read-write" scope="instance" name="img"/>
      <property type="Object" access="read-write" scope="instance" name="surface"/>
      <property type="Object" access="read-write" scope="instance" name="surfaceNode"/>
    </properties>
    <methods>
      <method scope="instance" name="_createGlass" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>create the glassNode, and an img on a dojox.gfx surface</description>
      </method>
      <method scope="instance" name="_placeGlass" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>position the overlay centered under the cursor</description>
      </method>
      <method scope="instance" name="_setImage" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set the image's offset in the clipping window relative to the mouse position</description>
      </method>
    </methods>
  </class>
  <class type="dojox.image.MagnifierLite" superclass="dijit._Widget">
    <description>Adds magnification on a portion of an image element</description>
    <constructors>
      <constructor scope="instance">
        <description>Adds magnification on a portion of an image element</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="glassNode"/>
      <property type="Object" access="read-write" scope="instance" name="glassNode.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="glassNode.style.visibility"/>
      <property type="Object" access="read-write" scope="instance" name="img"/>
      <property type="Object" access="read-write" scope="instance" name="img.src"/>
      <property type="Object" access="read-write" scope="instance" name="offset"/>
      <property type="Object" access="read-write" scope="instance" name="surfaceNode"/>
      <property type="Object" access="read-write" scope="instance" name="_imageSize" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_zoomSize" visibility="internal"/>
      <property type="Number" access="read-write" scope="instance" name="glassSize">
        <description>the width and height of the bounding box</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="scale">
        <description>the multiplier of the Mangification.</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_adjustScale" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>update the calculations should this.scale change</description>
      </method>
      <method scope="instance" name="_createGlass" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>make img and glassNode elements as children of the body</description>
      </method>
      <method scope="instance" name="_hideGlass" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>hide the overlay</description>
      </method>
      <method scope="instance" name="_placeGlass" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>position the overlay centered under the cursor</description>
      </method>
      <method scope="instance" name="_setImage" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set the image's offset in the clipping window relative to the mouse position</description>
      </method>
      <method scope="instance" name="_showGlass" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>show the overlay</description>
      </method>
    </methods>
  </class>
  <class type="dojox.image.SlideShow" superclass="dijit._Widget dijit._Templated">
    <description>A Slideshow Widget</description>
    <constructors>
      <constructor scope="instance">
        <description>A Slideshow Widget</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="imageIndex"/>
      <property type="Array" access="read-write" scope="instance" name="images">
        <description>Contains the DOM nodes that individual images are stored in when loaded or loading.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="imageStore">
        <description>Implementation of the dojo.data.api.Read API, which provides data on the images to be displayed.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="isInitialized"/>
      <property type="Object" access="read-write" scope="instance" name="navNext._size" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="navPlay._size" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="navPrev._size" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="outerNode.style.width"/>
      <property type="Object" access="read-write" scope="instance" name="titleNode.innerHTML"/>
      <property type="Number" access="read-write" scope="instance" name="_imageCounter" visibility="internal">
        <description>A counter to keep track of which index image is to be loaded next</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_navAnim" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_navShowing" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_request" visibility="internal">
        <description>Implementation of the dojo.data.api.Request API, which defines the query parameters for accessing the store.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_request.onComplete"/>
      <property type="Object" access="read-write" scope="instance" name="_request.start"/>
      <property type="Object" access="read-write" scope="instance" name="_slideId" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_timerCancelled" visibility="internal"/>
      <property type="DomNode" access="read-write" scope="instance" name="_tmpImage" visibility="internal">
        <description>The temporary image to show when a picture is loading.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="autoLoad">
        <description>If true, then images are preloaded, before the user navigates to view them. If false, an image is not loaded until the user views it.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="autoStart">
        <description>If true, the SlideShow begins playing immediately</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="fixedHeight">
        <description>If true, the widget does not resize itself to fix the displayed image.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="hasNav">
        <description>toggle to enable/disable the visual navigation controls</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="imageHeight"/>
      <property type="String" access="read-write" scope="instance" name="imageLargeAttr">
        <description>Defines the name of the attribute to request from the store to retrieve the URL to the image.</description>
      </property>
      <property type="Array" access="read-write" scope="instance" name="images">
        <description>Contains the DOM nodes that individual images are stored in when loaded or loading.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="imageStore">
        <description>Implementation of the dojo.data.api.Read API, which provides data on the images to be displayed.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="imageWidth">
        <description>The maximum width of an image.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="linkAttr">
        <description>Defines the name of the attribute to request from the store to retrieve the URL to link to from an image, if any.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="loop">
        <description>true/false - make the slideshow loop</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="noLink">
        <description>Prevents the slideshow from putting an anchor link around the displayed image enables if true, though still will not link in absence of a url to link to</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="pageSize">
        <description>The number of images to request each time.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="slideshowInterval">
        <description>Time, in seconds, between image transitions during a slideshow.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="of" access="read-write" scope="instance" name="title">
        <description>the picture, if any.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="titleAttr">
        <description>Defines the name of the attribute to request from the store to retrieve the</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="titleTemplate">
        <description>a way to customize the wording in the title. supported parameters to be populated are: ${title} = the passed title of the image ${current} = the current index of the image ${total} = the total number of images in the SlideShow  should add more?</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="_imageCounter" visibility="internal">
        <description>A counter to keep track of which index image is to be loaded next</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_request" visibility="internal">
        <description>Implementation of the dojo.data.api.Request API, which defines the query parameters for accessing the store.</description>
      </property>
      <property type="URL" access="read-write" scope="instance" name="_tempImgPath" visibility="internal">
        <description>URL to the image to display when an image is not yet fully loaded.</description>
      </property>
      <property type="DomNode" access="read-write" scope="instance" name="_tmpImage" visibility="internal">
        <description>The temporary image to show when a picture is loading.</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Cleans up the widget when it is being destroyed</description>
      </method>
      <method scope="instance" name="getLoadTopicName">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns the topic id published to when an image finishes loading.</description>
      </method>
      <method scope="instance" name="getShowTopicName">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns the topic id published to when an image is shown</description>
      </method>
      <method scope="instance" name="isImageLoaded">
        <parameters>
          <parameter name="index" type="The" usage="required">
            <description>number index in the data store to check if it is loaded.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns true if image at the specified index is loaded, false otherwise.</description>
      </method>
      <method scope="instance" name="moveImageLoadingPointer">
        <parameters>
          <parameter name="index" type="The" usage="required">
            <description>number index in the data store to start loading images from.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>If 'autoload' is true, this tells the widget to start loading images from the specified pointer.</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Initilizes the widget, sets up listeners and shows the first image</description>
      </method>
      <method scope="instance" name="reset">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Resets the widget to its initial state</description>
      </method>
      <method scope="instance" name="setDataStore">
        <parameters>
          <parameter name="dataStore" type="An" usage="required">
            <description>implementation of the dojo.data.api.Read API. This accesses the image data.</description>
          </parameter>
          <parameter name="request" type="An" usage="required">
            <description>implementation of the dojo.data.api.Request API. This specifies the query and paging information to be used by the data store</description>
          </parameter>
          <parameter name="paramNames" type="optional" usage="required">
            <description>An object defining the names of the item attributes to fetch from the data store.  The three attributes allowed are 'linkAttr', 'imageLargeAttr' and 'titleAttr'</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets the data store and request objects to read data from.</description>
      </method>
      <method scope="instance" name="showImage">
        <parameters>
          <parameter name="index" type="Number" usage="required">
            <description>The position of the image in the data store to display</description>
          </parameter>
          <parameter name="callback" type="Function" usage="optional">
            <description>Optional callback function to call when the image has finished displaying.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Shows the image at index 'index'.</description>
      </method>
      <method scope="instance" name="showNextImage">
        <parameters>
          <parameter name="inTimer" type="Boolean" usage="required">
            <description>If true, a slideshow is active, otherwise the slideshow is inactive.</description>
          </parameter>
          <parameter name="forceLoop" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Changes the image being displayed to the next image in the data store</description>
      </method>
      <method scope="instance" name="toggleSlideShow">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Switches the slideshow mode on and off.</description>
      </method>
      <method scope="instance" name="_calcNavDimensions" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Calculates the dimensions of the navigation controls</description>
      </method>
      <method scope="instance" name="_fitImage" visibility="internal">
        <parameters>
          <parameter name="img" type="Node" usage="required">
            <description>The image DOM node to optionally resize</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Ensures that the image width and height do not exceed the maximum.</description>
      </method>
      <method scope="instance" name="_fitSize" visibility="internal">
        <parameters>
          <parameter name="force" type="Boolean" usage="required">
            <description>If true, the widget is always resized, regardless of the value of 'fixedHeight'</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Fits the widget size to the size of the image being shown, or centers the image, depending on the value of 'fixedHeight'</description>
      </method>
      <method scope="instance" name="_getTopPadding" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_handleClick" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>An Event object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Performs navigation on the images based on users mouse clicks</description>
      </method>
      <method scope="instance" name="_hideNav" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required">
            <description>The DOM Event that triggered this function</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Hides the navigation controls</description>
      </method>
      <method scope="instance" name="_loadNextImage" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Load the next unloaded image.</description>
      </method>
      <method scope="instance" name="_next" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Show the next image</description>
      </method>
      <method scope="instance" name="_overElement" visibility="internal">
        <parameters>
          <parameter name="element" type="DomNode" usage="required"/>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns whether the mouse is over the passed element. Element must be display:block (ie, not a &amp;lt;span&amp;gt;)  When the page is unloading, if this method runs it will throw an exception.</description>
      </method>
      <method scope="instance" name="_prev" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Show the previous image. FIXME: either pull code from showNext/prev, or call it here</description>
      </method>
      <method scope="instance" name="_setTitle" visibility="internal">
        <parameters>
          <parameter name="title" type="String" usage="required">
            <description>The String title of the image</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets the title of the image to be displayed</description>
      </method>
      <method scope="instance" name="_showNav" visibility="internal">
        <parameters>
          <parameter name="force" type="Boolean" usage="required">
            <description>If true, the navigation controls are repositioned even if they are currently visible.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Shows the navigation controls</description>
      </method>
      <method scope="instance" name="_startTimer" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Starts a timeout to show the next image when a slide show is active</description>
      </method>
      <method scope="instance" name="_stop" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Stops a running slide show.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.image.ThumbnailPicker" superclass="dijit._Widget dijit._Templated">
    <description>A scrolling Thumbnail Picker widget</description>
    <constructors>
      <constructor scope="instance">
        <description>A scrolling Thumbnail Picker widget</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="String" access="read-write" scope="instance" name="hyperlinkTarget">
        <description>If hyperlinkTarget is set to &amp;quot;new&amp;quot;, clicking on a thumb will open a new window If it is set to anything else, clicking a thumbnail will open the url in the current window.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="imageStore">
        <description>A data store that implements the dojo.data Read API.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="isInitialized"/>
      <property type="Number" access="read-write" scope="instance" name="pageSize">
        <description>The number of images to request each time.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="request">
        <description>A dojo.data Read API Request object.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="request.count"/>
      <property type="Object" access="read-write" scope="instance" name="request.onComplete"/>
      <property type="Object" access="read-write" scope="instance" name="request.onError"/>
      <property type="Object" access="read-write" scope="instance" name="request.start"/>
      <property type="Object" access="read-write" scope="instance" name="thumbScroller.scrollLeft"/>
      <property type="Object" access="read-write" scope="instance" name="thumbScroller.scrollTop"/>
      <property type="Object" access="read-write" scope="instance" name="widgetid"/>
      <property type="Object" access="read-write" scope="instance" name="_loadedImages" visibility="internal">
        <description>Stores the indices of images that have been marked as loaded using the</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_loadingImages" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_loadInProgress" visibility="internal"/>
      <property type="Number" access="read-write" scope="instance" name="_maxPhotos" visibility="internal">
        <description>The total number of photos in the image store</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_noImages" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_offsetAttr" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_scrollAttr" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_scrollerSize" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_sizeAttr" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_sizeProperty" visibility="internal"/>
      <property type="Number" access="read-write" scope="instance" name="_thumbIndex" visibility="internal">
        <description>The index of the first thumbnail shown</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_thumbs" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_totalSize" visibility="internal"/>
      <property type="Boolean" access="read-write" scope="instance" name="autoLoad"/>
      <property type="String" access="read-write" scope="instance" name="hyperlinkTarget">
        <description>If hyperlinkTarget is set to &amp;quot;new&amp;quot;, clicking on a thumb will open a new window If it is set to anything else, clicking a thumbnail will open the url in the current window.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="imageLargeAttr">
        <description>The attribute name for accessing the large image url from the data store</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="imageStore">
        <description>A data store that implements the dojo.data Read API.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="imageThumbAttr">
        <description>The attribute name for accessing the thumbnail image url from the data store</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="isClickable">
        <description>When set to true, the cursor over a thumbnail changes.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="isHorizontal">
        <description>If true, the thumbnails are displayed horizontally. Otherwise they are displayed vertically</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="isScrollable">
        <description>When true, uses smoothScroll to move between pages</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="linkAttr">
        <description>The attribute name for accessing the url from the data store</description>
      </property>
      <property type="function." access="read-write" scope="instance" name="markImageLoaded"/>
      <property type="Number" access="read-write" scope="instance" name="pageSize">
        <description>The number of images to request each time.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="request">
        <description>A dojo.data Read API Request object.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="size">
        <description>Width or height in pixels, depending if horizontal or vertical.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="tempImgPath"/>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Number" access="read-write" scope="instance" name="thumbHeight">
        <description>Default height of a thumbnail image</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="thumbWidth">
        <description>Default width of an image</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="titleAttr">
        <description>The attribute name for accessing the title from the data store</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="useHyperlink">
        <description>Setting useHyperlink to true causes a click on a thumbnail to open a link.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="useLoadNotifier">
        <description>Setting useLoadNotifier to true makes a colored DIV appear under each thumbnail image, which is used to display the loading status of each image in the data store.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_loadedImages" visibility="internal">
        <description>Stores the indices of images that have been marked as loaded using the</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="_maxPhotos" visibility="internal">
        <description>The total number of photos in the image store</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="_thumbIndex" visibility="internal">
        <description>The index of the first thumbnail shown</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_thumbs" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="getClickTopicName">
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Returns the name of the dojo topic that can be subscribed to in order to receive notifications on which thumbnail was selected.</description>
      </method>
      <method scope="instance" name="getShowTopicName">
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Returns the name of the dojo topic that can be subscribed to in order to receive notifications on which thumbnail is now visible</description>
      </method>
      <method scope="instance" name="init">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Creates DOM nodes for thumbnail images and initializes their listeners</description>
      </method>
      <method scope="instance" name="isVisible">
        <parameters>
          <parameter name="index" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns true if the image at the specified index is currently visible. False otherwise.</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Initializes styles and listeners</description>
      </method>
      <method scope="instance" name="reset">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Resets the widget back to its original state.</description>
      </method>
      <method scope="instance" name="setDataStore">
        <parameters>
          <parameter name="dataStore" type="An" usage="required">
            <description>implementation of the dojo.data.api.Read API. This accesses the image data.</description>
          </parameter>
          <parameter name="request" type="An" usage="required">
            <description>implementation of the dojo.data.api.Request API. This specifies the query and paging information to be used by the data store</description>
          </parameter>
          <parameter name="paramNames" type="optional" usage="required">
            <description>An object defining the names of the item attributes to fetch from the data store.  The four attributes allowed are 'linkAttr', 'imageLargeAttr', 'imageThumbAttr' and 'titleAttr'</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets the data store and request objects to read data from.</description>
      </method>
      <method scope="instance" name="_checkLoad" visibility="internal">
        <parameters>
          <parameter name="img" type="Object" usage="required"/>
          <parameter name="index" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_loadImage" visibility="internal">
        <parameters>
          <parameter name="data" type="Object" usage="required"/>
          <parameter name="index" type="Object" usage="required"/>
          <parameter name="callback" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_loadNextPage" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Loads the next page of thumbnail images</description>
      </method>
      <method scope="instance" name="_next" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Displays the next page of images</description>
      </method>
      <method scope="instance" name="_prev" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Displays the next page of images</description>
      </method>
      <method scope="instance" name="_setThumbClass" visibility="internal">
        <parameters>
          <parameter name="thumb" type="DomNode" usage="required">
            <description>The thumbnail DOM node to set the class on</description>
          </parameter>
          <parameter name="className" type="String" usage="required">
            <description>The CSS class to add to the DOM node.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Adds a CSS class to a thumbnail, only if 'autoLoad' is true</description>
      </method>
      <method scope="instance" name="_showThumbs" visibility="internal">
        <parameters>
          <parameter name="index" type="Number" usage="required">
            <description>The index of the first thumbnail</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Displays thumbnail images, starting at position 'index'</description>
      </method>
      <method scope="instance" name="_updateNavControls" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Updates the navigation controls to hide/show them when at the first or last images.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.image._LightboxDialog" superclass="dijit.Dialog">
    <description>The &amp;quot;dialog&amp;quot; shared  between any Lightbox instances on the page</description>
    <constructors>
      <constructor scope="instance">
        <description>The &amp;quot;dialog&amp;quot; shared  between any Lightbox instances on the page</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="imgNode.src"/>
      <property type="Object" access="read-write" scope="instance" name="inGroup"/>
      <property type="Object" access="read-write" scope="instance" name="_animConnects" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_clone" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_imageReady" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_loadingAnim" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_positionIndex" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_showImageAnim" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_showNavAnim" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_vp" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_wasStyled" visibility="internal"/>
      <property type="Boolean" access="read-write" scope="instance" name="adjust">
        <description>If true, ensure the image always stays within the viewport more difficult than necessary to disable, but enabled by default seems sane in most use cases.</description>
      </property>
      <property type="Url" access="read-write" scope="instance" name="errorImg">
        <description>Path to the image used when a 404 is encountered</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="errorMessage">
        <description>The text to display when an unreachable image is linked</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="imgUrl"/>
      <property type="Object" access="read-write" scope="instance" name="inGroup"/>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="String" access="read-write" scope="instance" name="title">
        <description>The current title, read from object passed to show()</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_animConnects" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_blankImg" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_clone" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_groups" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_imageReady" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_loadingAnim" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_showImageAnim" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_showNavAnim" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_wasStyled" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="addImage">
        <parameters>
          <parameter name="child" type="Object" usage="required">
            <description>The image information to add. href: String - link to image (required) title: String - title to display</description>
          </parameter>
          <parameter name="group" type="String" usage="optional">
            <description>attach to group of similar tag or null for individual image instance</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Add an image to this Master Lightbox</description>
      </method>
      <method scope="instance" name="hide">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Hide the Master Lightbox</description>
      </method>
      <method scope="instance" name="resizeTo">
        <parameters>
          <parameter name="size" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Resize our dialog container, and fire _showImage</description>
      </method>
      <method scope="instance" name="show">
        <parameters>
          <parameter name="groupData" type="Object" usage="required">
            <description>needs href and title attributes. the values for this image.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Show the Master Dialog. Starts the chain of events to show an image in the dialog, including showing the dialog if it is not already visible</description>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Add some extra event handlers, and startup our superclass.</description>
      </method>
      <method scope="instance" name="_handleKey" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Handle keyboard navigation internally</description>
      </method>
      <method scope="instance" name="_loadImage" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Do the prep work before we can show another image</description>
      </method>
      <method scope="instance" name="_makeAnims" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>make and cleanup animation and animation connections</description>
      </method>
      <method scope="instance" name="_nextImage" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Load next image in group</description>
      </method>
      <method scope="instance" name="_position" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>we want to know the viewport size any time it changes</description>
      </method>
      <method scope="instance" name="_prepNodes" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>A localized hook to accompany _loadImage</description>
      </method>
      <method scope="instance" name="_prevImage" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Load previous image in group</description>
      </method>
      <method scope="instance" name="_scaleToFit" visibility="internal">
        <parameters>
          <parameter name="size" type="Object" usage="required">
            <description>The 'size' object passed around for this image</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>resize an image to fit within the bounds of the viewport</description>
      </method>
      <method scope="instance" name="_showImage" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Fade in the image, and fire showNav</description>
      </method>
      <method scope="instance" name="_showNav" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Fade in the footer, and setup our connections.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.io" superclass="Object">
    <methods>
      <method scope="static" name="xhrMultiPart">
        <parameters>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.io.proxy" superclass="Object"/>
  <class type="dojox.io.proxy.xip" superclass="Object">
    <description>Object that implements the iframe handling for XMLHttpRequest IFrame Proxying.</description>
    <properties>
      <property type="Object" access="read-write" scope="static" name="xipClientUrl"/>
      <property type="Object" access="read-write" scope="static" name="urlLimit"/>
      <property type="Object" access="read-write" scope="static" name="_callbackName" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_state" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_stateIdCounter" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_isWebKit" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_xhrObjOld" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="_realSend" visibility="internal">
        <parameters>
          <parameter name="facade" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>starts the actual xdomain request using the provided facade.</description>
      </method>
      <method scope="static" name="receive">
        <parameters>
          <parameter name="stateId" type="String" usage="required"/>
          <parameter name="urlEncodedData" type="String" usage="required">
            <description>should have the following params:      Decode response data.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="frameLoaded">
        <parameters>
          <parameter name="stateId" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="destroyState">
        <parameters>
          <parameter name="stateId" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="createFacade">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="sendRequest">
        <parameters>
          <parameter name="stateId" type="Object" usage="required"/>
          <parameter name="encodedData" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="sendRequestStart">
        <parameters>
          <parameter name="stateId" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="sendRequestPart">
        <parameters>
          <parameter name="stateId" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="setServerUrl">
        <parameters>
          <parameter name="stateId" type="Object" usage="required"/>
          <parameter name="cmd" type="Object" usage="required"/>
          <parameter name="message" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="makeServerUrl">
        <parameters>
          <parameter name="stateId" type="Object" usage="required"/>
          <parameter name="cmd" type="Object" usage="required"/>
          <parameter name="message" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="fragmentReceivedEvent">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>HTML5 document messaging endpoint. Unpack the event to see if we want to use it.</description>
      </method>
      <method scope="static" name="fragmentReceived">
        <parameters>
          <parameter name="frag" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="unpackMessage">
        <parameters>
          <parameter name="encodedMessage" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.io.proxy.xip.XhrIframeFacade" superclass="Object">
    <description>XMLHttpRequest facade object used by dojox.io.proxy.xip.</description>
    <constructors>
      <constructor scope="instance">
        <description>XMLHttpRequest facade object used by dojox.io.proxy.xip.</description>
        <parameters>
          <parameter name="ifpServerUrl" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="readyState"/>
      <property type="Object" access="read-write" scope="instance" name="responseText"/>
      <property type="Object" access="read-write" scope="instance" name="responseXML"/>
      <property type="Object" access="read-write" scope="instance" name="status"/>
      <property type="Object" access="read-write" scope="instance" name="statusText"/>
      <property type="Object" access="read-write" scope="instance" name="_allResponseHeaders" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_bodyData" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_ifpServerUrl" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_method" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_requestHeaders" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_responseHeaders" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_stateId" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_uri" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="abort">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getAllResponseHeaders">
        <return-types>
          <return-type type="String"/>
        </return-types>
      </method>
      <method scope="instance" name="getResponseHeader">
        <parameters>
          <parameter name="header" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
      </method>
      <method scope="instance" name="open">
        <parameters>
          <parameter name="method" type="String" usage="required"/>
          <parameter name="uri" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="send">
        <parameters>
          <parameter name="stringData" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setRequestHeader">
        <parameters>
          <parameter name="header" type="String" usage="required"/>
          <parameter name="value" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setResponseHeaders" visibility="internal">
        <parameters>
          <parameter name="allHeaders" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.jsonPath" superclass="Object">
    <methods>
      <method scope="static" name="query">
        <parameters>
          <parameter name="obj" type="Object" usage="required">
            <description>summaRy Perform jsonPath query `expr` on javascript object or json string `obj` object || json string to perform query on</description>
          </parameter>
          <parameter name="expr" type="String" usage="required">
            <description>jsonPath expression (string) to be evaluated</description>
          </parameter>
          <parameter name="arg" type="Object" usage="required">
            <description>special arugments. resultType: &amp;quot;VALUE&amp;quot;||&amp;quot;BOTH&amp;quot;||&amp;quot;PATH&amp;quot;} (defaults to value) evalType: &amp;quot;RESULT&amp;quot;||&amp;quot;ITEM&amp;quot;} (defaults to ?)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.lang" superclass="Object"/>
  <class type="dojox.lang.functional" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="array"/>
      <property type="Object" access="read-write" scope="static" name="curry"/>
      <property type="Object" access="read-write" scope="static" name="fold"/>
      <property type="Object" access="read-write" scope="static" name="lambda"/>
      <property type="Object" access="read-write" scope="static" name="object"/>
      <property type="Object" access="read-write" scope="static" name="reversed"/>
      <property type="Object" access="read-write" scope="static" name="scan"/>
      <property type="Object" access="read-write" scope="static" name="sequence"/>
      <property type="Object" access="read-write" scope="static" name="zip"/>
    </properties>
    <methods>
      <method scope="static" name="buildListcomp">
        <parameters>
          <parameter name="s" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>builds a function from a text snippet, which represents a valid JS 1.7 list comprehension, returns a string, which represents the function.</description>
      </method>
      <method scope="static" name="compileListcomp">
        <parameters>
          <parameter name="s" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Function"/>
        </return-types>
        <description>builds a function from a text snippet, which represents a valid JS 1.7 list comprehension, returns a function object.</description>
      </method>
      <method scope="static" name="listcomp">
        <parameters>
          <parameter name="s" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>executes the list comprehension building an array.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.lang.utils" superclass="Object">
    <methods>
      <method scope="static" name="coerceType">
        <parameters>
          <parameter name="target" type="Object" usage="required"/>
          <parameter name="source" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="updateWithObject">
        <parameters>
          <parameter name="target" type="Object" usage="required">
            <description>the &amp;quot;target&amp;quot; object to be updated</description>
          </parameter>
          <parameter name="source" type="Object" usage="required">
            <description>the &amp;quot;source&amp;quot; object, whose properties will be used to source the existed object.</description>
          </parameter>
          <parameter name="conv" type="Boolean" usage="optional">
            <description>force conversion to the original type</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>updates an existing object in place with properties from an &amp;quot;source&amp;quot; object.</description>
      </method>
      <method scope="static" name="updateWithPattern">
        <parameters>
          <parameter name="target" type="Object" usage="required">
            <description>the &amp;quot;target&amp;quot; object to be updated</description>
          </parameter>
          <parameter name="source" type="Object" usage="required">
            <description>the &amp;quot;source&amp;quot; object, whose properties will be used to source the existed object.</description>
          </parameter>
          <parameter name="pattern" type="Array" usage="required">
            <description>an array of properties to be copied</description>
          </parameter>
          <parameter name="conv" type="Boolean" usage="optional">
            <description>force conversion to the original type</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>updates an existing object in place with properties from an &amp;quot;source&amp;quot; object.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.layout" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="BorderContainer"/>
    </properties>
  </class>
  <class type="dojox.layout.ContentPane" superclass="dijit.layout.ContentPane">
    <description>cleans content to make it less likly to generate DOM/JS errors.</description>
    <constructors>
      <constructor scope="instance">
        <description>cleans content to make it less likly to generate DOM/JS errors.</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="ioArgs">
        <description>makes it possible to add custom args to xhrGet, like ioArgs.headers['X-myHeader'] = 'true'</description>
      </property>
      <property type="dojo.xhrGet|dojo.xhrPost" access="read-write" scope="instance" name="ioMethod">
        <description>reference to the method that should grab the content</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="isLoaded"/>
      <property type="dojo.Deferred" access="read-write" scope="instance" name="onLoadDeferred">
        <description>callbackchain will start when onLoad occurs</description>
      </property>
      <property type="dojo.Deferred" access="read-write" scope="instance" name="onUnloadDeferred">
        <description>callbackchain will start when onUnload occurs</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_styleNodes" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_xhrDfd.fired"/>
      <property type="Object" access="read-write" scope="instance" name="adjustPaths"/>
      <property type="Boolean" access="read-write" scope="instance" name="cleanContent"/>
      <property type="Boolean" access="read-write" scope="instance" name="executeScripts">
        <description>Execute (eval) scripts that is found in the content</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="ioArgs">
        <description>makes it possible to add custom args to xhrGet, like ioArgs.headers['X-myHeader'] = 'true'</description>
      </property>
      <property type="dojo.xhrGet|dojo.xhrPost" access="read-write" scope="instance" name="ioMethod">
        <description>reference to the method that should grab the content</description>
      </property>
      <property type="dojo.Deferred" access="read-write" scope="instance" name="onLoadDeferred">
        <description>callbackchain will start when onLoad occurs</description>
      </property>
      <property type="dojo.Deferred" access="read-write" scope="instance" name="onUnloadDeferred">
        <description>callbackchain will start when onUnload occurs</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="renderStyles">
        <description>trigger/load styles in the content</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="scriptHasHooks">
        <description>replace keyword '_container_' in scripts with 'dijit.byId(this.id)' NOTE this name might change in the near future</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="cancel">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>cancels a inflight download</description>
      </method>
      <method scope="instance" name="onExecError">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>event callback, called on script error or on java handler error overide and return your own html string if you want a some text displayed within the ContentPane</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="refresh">
        <return-types>
          <return-type type="dojox.layout.ContentPane.DeferredHandle"/>
        </return-types>
      </method>
      <method scope="instance" name="setContent">
        <parameters>
          <parameter name="data" type="String|DomNode|NodeList|dojo.NodeList" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojox.layout.ContentPane.DeferredHandle"/>
        </return-types>
        <description>set data as new content, sort of like innerHTML</description>
      </method>
      <method scope="instance" name="setHref">
        <parameters>
          <parameter name="url" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojox.layout.ContentPane.DeferredHandle"/>
        </return-types>
        <description>replace current content with url's content</description>
      </method>
      <method scope="instance" name="_onError" visibility="internal">
        <parameters>
          <parameter name="type" type="Object" usage="required"/>
          <parameter name="err" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onLoadHandler" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onUnloadHandler" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_prepareLoad" visibility="internal">
        <parameters>
          <parameter name="forceLoad" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_renderStyles" visibility="internal">
        <parameters>
          <parameter name="styles" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setContent" visibility="internal">
        <parameters>
          <parameter name="cont" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setUpDeferreds" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.layout.ContentPane.DeferredHandle" superclass="Object">
    <methods>
      <method scope="static" name="cancel">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>cancel a in flight download</description>
      </method>
      <method scope="static" name="addOnLoad">
        <parameters>
          <parameter name="func" type="Function" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>add a callback to the onLoad chain</description>
      </method>
      <method scope="static" name="addOnUnload">
        <parameters>
          <parameter name="func" type="Function" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>add a callback to the onUnload chain</description>
      </method>
    </methods>
  </class>
  <class type="dojox.layout.Dock" superclass="dijit._Widget dijit._Templated">
    <description>A widget that attaches to a node and keeps track of incoming / outgoing FloatingPanes and handles layout</description>
    <constructors>
      <constructor scope="instance">
        <description>A widget that attaches to a node and keeps track of incoming / outgoing FloatingPanes and handles layout</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="autoPosition"/>
      <property type="Object" access="read-write" scope="instance" name="id"/>
      <property type="Object" access="read-write" scope="instance" name="_inPositioning" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_inPositiononing" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="autoPosition"/>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
      <property type="Object" access="read-write" scope="instance" name="_docked" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_inPositioning" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="addNode">
        <parameters>
          <parameter name="refNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Instert a dockNode refernce into the dock</description>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_positionDock" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.layout.DragPane" superclass="dijit._Widget">
    <description>Makes a pane's content dragable by/within it's surface</description>
    <constructors>
      <constructor scope="instance">
        <description>Makes a pane's content dragable by/within it's surface</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_mover" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_x" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_y" visibility="internal"/>
      <property type="Boolean" access="read-write" scope="instance" name="invert">
        <description>Naturally, the behavior is to invert the axis of the drag. Setting invert:false will make the pane drag in the same direction as the mouse.</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_down" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>mousedown handler, start the dragging</description>
      </method>
      <method scope="instance" name="_move" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>mousemove listener, offset the scroll amount by the delta since our last call.</description>
      </method>
      <method scope="instance" name="_up" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>mouseup handler, stop the dragging</description>
      </method>
    </methods>
  </class>
  <class type="dojox.layout.ExpandoPane" superclass="dijit.layout.ContentPane dijit._Contained dijit._Templated">
    <description>An experimental expando-pane for dijit.layout.BorderContainer</description>
    <constructors>
      <constructor scope="instance">
        <description>An experimental expando-pane for dijit.layout.BorderContainer</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_currentSize" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_showing" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_showSize" visibility="internal"/>
      <property type="to" access="read-write" scope="instance" name="duration">
        <description>run show/hide animations</description>
      </property>
      <property type="String|Function" access="read-write" scope="instance" name="easeIn">
        <description>easing function use to show pane</description>
      </property>
      <property type="String|Function" access="read-write" scope="instance" name="easeOut">
        <description>easing function used to hide pane</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="maxHeight"/>
      <property type="Object" access="read-write" scope="instance" name="maxWidth"/>
      <property type="Object" access="read-write" scope="instance" name="postCreate"/>
      <property type="Object" access="read-write" scope="instance" name="splitter"/>
      <property type="Object" access="read-write" scope="instance" name="tamplateString"/>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Object" access="read-write" scope="instance" name="toggle"/>
      <property type="Object" access="read-write" scope="instance" name="_hideWrapper" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_setupAnims" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_showing" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_titleHeight" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="resize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>we aren't a layout widget, but need to act like one:</description>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_afterResize" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_hideEnd" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_showEnd" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>common animation onEnd code</description>
      </method>
      <method scope="instance" name="_trap" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.layout.FloatingPane" superclass="dojox.layout.ContentPane dijit._Templated">
    <description>A non-modal Floating window.</description>
    <constructors>
      <constructor scope="instance">
        <description>A non-modal Floating window.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="canvas.style.overflow"/>
      <property type="Object" access="read-write" scope="instance" name="closeNode.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="containerNode.style.overflow"/>
      <property type="Object" access="read-write" scope="instance" name="dockNode.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="dockTo">
        <description>if empty, will create private layout.Dock that scrolls with viewport on bottom span of viewport.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="domNode.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.style.position"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.style.visibility"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.style.width"/>
      <property type="Object" access="read-write" scope="instance" name="maxNode.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="resizeHandle.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="restoreNode.style.display"/>
      <property type="String" access="read-write" scope="instance" name="title">
        <description>Title to use in the header</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="titleNode.innerHTML"/>
      <property type="Object" access="read-write" scope="instance" name="_currentState" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_dockNode" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_isDocked" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_maximized" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_naturalState" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_resizeHandle" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_started" visibility="internal"/>
      <property type="Boolean" access="read-write" scope="instance" name="closable">
        <description>Allow closure of this Node</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="contentClass">
        <description>The className to give to the inner node which has the content</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="dockable">
        <description>Allow minimizing of pane if true</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="dockTo">
        <description>if empty, will create private layout.Dock that scrolls with viewport on bottom span of viewport.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="duration">
        <description>Time is MS to spend toggling in/out node</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="iconSrc">
        <description>[not implemented yet] will be either icon in titlepane to left of Title, and/or icon show when docked in a fisheye-like dock or maybe dockIcon would be better?</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="maxable">
        <description>Horrible param name for &amp;quot;Can you maximize this floating pane?&amp;quot;</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="resizable">
        <description>Allow resizing of pane true if true</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="resizeAxis">
        <description>One of: x | xy | y to limit pane's sizing direction</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
      <property type="String" access="read-write" scope="instance" name="title">
        <description>Title to use in the header</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_allFPs" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_dockNode" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_hideAnim" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_restoreState" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_showAnim" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_startZ" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="bringToTop">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>bring this FloatingPane above all other panes</description>
      </method>
      <method scope="instance" name="close">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Close and destroy this widget</description>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Destroy this FloatingPane completely</description>
      </method>
      <method scope="instance" name="hide">
        <parameters>
          <parameter name="callback" type="Function" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Close, but do not destroy this FloatingPane</description>
      </method>
      <method scope="instance" name="maximize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Make this FloatingPane full-screen (viewport)</description>
      </method>
      <method scope="instance" name="minimize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Hide and dock the FloatingPane</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="resize">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Size the FloatingPane and place accordingly</description>
      </method>
      <method scope="instance" name="setTitle">
        <parameters>
          <parameter name="title" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Update the Title bar with a new string</description>
      </method>
      <method scope="instance" name="show">
        <parameters>
          <parameter name="callback" type="Function" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Show the FloatingPane</description>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_dock" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_restore" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.layout.RadioGroup" superclass="dijit.layout.StackContainer dijit._Templated">
    <description>A Container that turns its Layout Children into a single Pane and transitions between states onHover of the button</description>
    <constructors>
      <constructor scope="instance">
        <description>A Container that turns its Layout Children into a single Pane and transitions between states onHover of the button</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_buttons" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_children" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_size" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="duration"/>
      <property type="Boolean" access="read-write" scope="instance" name="hasButtons">
        <description>toggles internal button making on or off</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="templateString">
        <description>the template for our container</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>scan the container for children, and make &amp;quot;tab buttons&amp;quot; for them</description>
      </method>
      <method scope="instance" name="_hideChild" visibility="internal">
        <parameters>
          <parameter name="page" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>hide the specified child widget</description>
      </method>
      <method scope="instance" name="_makeButton" visibility="internal">
        <parameters>
          <parameter name="n" type="DomNode" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>creates a hover button for a child node of the RadioGroup</description>
      </method>
      <method scope="instance" name="_showChild" visibility="internal">
        <parameters>
          <parameter name="page" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>show the selected child widget</description>
      </method>
      <method scope="instance" name="_transition" visibility="internal">
        <parameters>
          <parameter name="newWidget" type="Widget" usage="required"/>
          <parameter name="oldWidget" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called when StackContainer receives a selectChild call, used to transition the panes.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.layout.RadioGroupFade" superclass="dojox.layout.RadioGroup">
    <description>An extension on a stock RadioGroup, that fades the panes.</description>
    <constructors>
      <constructor scope="instance">
        <description>An extension on a stock RadioGroup, that fades the panes.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <methods>
      <method scope="instance" name="_hideChild" visibility="internal">
        <parameters>
          <parameter name="page" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>hide the specified child widget</description>
      </method>
      <method scope="instance" name="_showChild" visibility="internal">
        <parameters>
          <parameter name="page" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>show the specified child widget</description>
      </method>
    </methods>
  </class>
  <class type="dojox.layout.RadioGroupSlide" superclass="dojox.layout.RadioGroup">
    <description>A Sliding Radio Group</description>
    <constructors>
      <constructor scope="instance">
        <description>A Sliding Radio Group</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_anim" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="easing"/>
    </properties>
    <methods>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>on startup, set each of the panes off-screen (_showChild is called later)</description>
      </method>
      <method scope="instance" name="_hideChild" visibility="internal">
        <parameters>
          <parameter name="page" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>reset the position of the hidden pane out of sight</description>
      </method>
      <method scope="instance" name="_positionChild" visibility="internal">
        <parameters>
          <parameter name="page" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>randomly set the child out of view</description>
      </method>
      <method scope="instance" name="_showChild" visibility="internal">
        <parameters>
          <parameter name="page" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Slide in the selected child widget</description>
      </method>
    </methods>
  </class>
  <class type="dojox.layout.ResizeHandle" superclass="dijit._Widget dijit._Templated">
    <description>A dragable handle used to resize an attached node.</description>
    <constructors>
      <constructor scope="instance">
        <description>A dragable handle used to resize an attached node.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Boolean" access="read-write" scope="instance" name="animateSizing">
        <description>only applicable if activeResize = false. onMouseup, animate the node to the new size</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="minSize"/>
      <property type="Object" access="read-write" scope="instance" name="startPoint"/>
      <property type="Object" access="read-write" scope="instance" name="startSize"/>
      <property type="Object" access="read-write" scope="instance" name="targetDomNode"/>
      <property type="Object" access="read-write" scope="instance" name="targetWidget"/>
      <property type="Object" access="read-write" scope="instance" name="targetWidget.resize"/>
      <property type="Object" access="read-write" scope="instance" name="_activeResizeLastEvent" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_isSizing" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_pconnects" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_resizeHelper" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_resizeX" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_resizeY" visibility="internal"/>
      <property type="Boolean" access="read-write" scope="instance" name="activeResize">
        <description>if true, node will size realtime with mouse movement, if false, node will create virtual node, and only resize target on mouseUp</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="activeResizeClass">
        <description>css class applied to virtual resize node.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="animateDuration">
        <description>time in MS to run sizing animation. if animateMethod=&amp;quot;chain&amp;quot;, total animation playtime is 2*animateDuration</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="animateMethod">
        <description>one of &amp;quot;chain&amp;quot; or &amp;quot;combine&amp;quot; ... visual effect only. combine will &amp;quot;scale&amp;quot; node to size, &amp;quot;chain&amp;quot; will alter width, then height</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="animateSizing">
        <description>only applicable if activeResize = false. onMouseup, animate the node to the new size</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="minHeight">
        <description>smallest height in px resized node can be</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="minWidth">
        <description>smallest width in px resize node can be</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="resizeAxis">
        <description>one of: x|y|xy limit resizing to a single axis, default to xy ...</description>
      </property>
      <property type="DomNode" access="read-write" scope="instance" name="targetContainer">
        <description>over-ride targetId and attch this handle directly to a reference of a DomNode</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="targetId">
        <description>id of the Widget OR DomNode that I will size</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
    </properties>
    <methods>
      <method scope="instance" name="onResize">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Stub fired when sizing is done, for things like Grid</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>setup our one major listener upon creation</description>
      </method>
      <method scope="instance" name="_beginSizing" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>setup movement listeners and calculate initial size</description>
      </method>
      <method scope="instance" name="_changeSizing" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>apply sizing information based on information in (e) to attached node</description>
      </method>
      <method scope="instance" name="_endSizing" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>disconnect listenrs and cleanup sizing</description>
      </method>
      <method scope="instance" name="_getNewCoords" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_updateSizing" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called when moving the ResizeHandle ... determines new size based on settings/position and sets styles.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.layout.ScrollPane" superclass="dijit.layout._LayoutWidget dijit._Templated">
    <description>A pane that &amp;quot;scrolls&amp;quot; its content based on the mouse poisition inside</description>
    <constructors>
      <constructor scope="instance">
        <description>A pane that &amp;quot;scrolls&amp;quot; its content based on the mouse poisition inside</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_dir" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_edge" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_helpLine" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_hideAnim" visibility="internal"/>
      <property type="dojo._Line" access="read-write" scope="instance" name="_line" visibility="internal">
        <description>storage for our top and bottom most scrollpoints</description>
      </property>
      <property type="the" access="read-write" scope="instance" name="_lo" visibility="internal">
        <description>height of the visible pane</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_showAnim" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_size" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_vertical" visibility="internal"/>
      <property type="String" access="read-write" scope="instance" name="orientation">
        <description>either &amp;quot;horizontal&amp;quot; or &amp;quot;vertical&amp;quot; for scroll orientation.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="dojo._Line" access="read-write" scope="instance" name="_line" visibility="internal">
        <description>storage for our top and bottom most scrollpoints</description>
      </property>
      <property type="the" access="read-write" scope="instance" name="_lo" visibility="internal">
        <description>height of the visible pane</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_offset" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="layout">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>calculates required sizes. call this if we add/remove content manually, or reload the content.</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_calc" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>calculate the relative offset of the cursor over the node, and call _set</description>
      </method>
      <method scope="instance" name="_enter" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_leave" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_set" visibility="internal">
        <parameters>
          <parameter name="n" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set the pane's scroll offset, and position the virtual scroll helper</description>
      </method>
    </methods>
  </class>
  <class type="dojox.layout._DockNode" superclass="dijit._Widget dijit._Templated">
    <description>dojox.layout._DockNode is a private widget used to keep track of which pane is docked.</description>
    <constructors>
      <constructor scope="instance">
        <description>dojox.layout._DockNode is a private widget used to keep track of which pane is docked.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Widget" access="read-write" scope="instance" name="paneRef">
        <description>reference to the FloatingPane we reprasent in any given dock</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
      <property type="String" access="read-write" scope="instance" name="title">
        <description>Shown in dock icon. should read parent iconSrc?</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="restore">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>remove this dock item from parent dock, and call show() on reffed floatingpane</description>
      </method>
    </methods>
  </class>
  <class type="dojox.layout._RadioButton" superclass="dijit._Widget dijit._Contained dijit._Templated">
    <description>The Buttons for a RadioGroup</description>
    <constructors>
      <constructor scope="instance">
        <description>The Buttons for a RadioGroup</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="String" access="read-write" scope="instance" name="label">
        <description>the Text Label of the button</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="page"/>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
    </properties>
    <methods>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>start listening to mouseOver</description>
      </method>
      <method scope="instance" name="_clearSelected" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>remove hover state class from sibling Buttons. This is easier (and more reliable) than setting up an additional connection to onMouseOut FIXME: this relies on the template being [div][span]node[/span][/div]</description>
      </method>
      <method scope="instance" name="_onMouse" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set the selected child on hover, and set our hover state class</description>
      </method>
    </methods>
  </class>
  <class type="dojox.layout._ResizeHelper" superclass="dijit._Widget">
    <description>A global private resize helper shared between any resizeHandle with activeSizing='false;</description>
    <constructors>
      <constructor scope="instance">
        <description>A global private resize helper shared between any resizeHandle with activeSizing='false;</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="domNode.style.display"/>
    </properties>
    <methods>
      <method scope="instance" name="hide">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>hide helper after resizing is complete</description>
      </method>
      <method scope="instance" name="resize">
        <parameters>
          <parameter name="dim" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>size the widget and place accordingly  FIXME: this is off when padding present</description>
      </method>
      <method scope="instance" name="show">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>show helper to start resizing</description>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.math" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_base" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="curves"/>
    </properties>
    <methods>
      <method scope="static" name="degreesToRadians">
        <parameters>
          <parameter name="n" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Convert the passed number to radians.</description>
      </method>
      <method scope="static" name="radiansToDegrees">
        <parameters>
          <parameter name="n" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Convert the passed number to degrees.</description>
      </method>
      <method scope="static" name="factoral">
        <parameters>
          <parameter name="n" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Return the factoral of n.</description>
      </method>
      <method scope="static" name="permutations">
        <parameters>
          <parameter name="n" type="Number" usage="required"/>
          <parameter name="k" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>TODO</description>
      </method>
      <method scope="static" name="combinations">
        <parameters>
          <parameter name="n" type="Number" usage="required"/>
          <parameter name="r" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>TODO</description>
      </method>
      <method scope="static" name="bernstein">
        <parameters>
          <parameter name="t" type="Number" usage="required"/>
          <parameter name="n" type="Number" usage="required"/>
          <parameter name="i" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>TODO</description>
      </method>
      <method scope="static" name="gaussian">
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Return a random number based on the Gaussian algo.</description>
      </method>
      <method scope="static" name="sd">
        <parameters>
          <parameter name="a" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Returns the standard deviation of the passed arguments.</description>
      </method>
      <method scope="static" name="variance">
        <parameters>
          <parameter name="a" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Find the variance in the passed array of numbers.</description>
      </method>
      <method scope="static" name="range">
        <parameters>
          <parameter name="a" type="Number" usage="required"/>
          <parameter name="b" type="Number" usage="optional"/>
          <parameter name="step" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Create a range of numbers based on the parameters.</description>
      </method>
      <method scope="static" name="distance">
        <parameters>
          <parameter name="a" type="Array" usage="required"/>
          <parameter name="b" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Calculate the distance between point A and point B</description>
      </method>
      <method scope="static" name="midpoint">
        <parameters>
          <parameter name="a" type="Array" usage="required"/>
          <parameter name="b" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Calculate the midpoint between points A and B.  A and B may be multidimensional.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.math.matrix" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="iDF"/>
      <property type="Object" access="read-write" scope="static" name="ALMOST_ZERO"/>
    </properties>
    <methods>
      <method scope="static" name="multiply">
        <parameters>
          <parameter name="a" type="Array" usage="required"/>
          <parameter name="b" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Multiply matrix a by matrix b.</description>
      </method>
      <method scope="static" name="product">
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Return the product of N matrices</description>
      </method>
      <method scope="static" name="sum">
        <return-types>
          <return-type type="Number"/>
          <return-type type="Array"/>
        </return-types>
        <description>Return the sum of N matrices</description>
      </method>
      <method scope="static" name="inverse">
        <parameters>
          <parameter name="a" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Return the inversion of the passed matrix</description>
      </method>
      <method scope="static" name="determinant">
        <parameters>
          <parameter name="a" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Calculate the determinant of the passed square matrix.</description>
      </method>
      <method scope="static" name="create">
        <parameters>
          <parameter name="a" type="Number" usage="required"/>
          <parameter name="b" type="Number" usage="required"/>
          <parameter name="value" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Create a new matrix with rows a and cols b, and pre-populate with value.</description>
      </method>
      <method scope="static" name="ones">
        <parameters>
          <parameter name="a" type="Number" usage="required"/>
          <parameter name="b" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Create a matrix pre-populated with ones</description>
      </method>
      <method scope="static" name="zeros">
        <parameters>
          <parameter name="a" type="Number" usage="required"/>
          <parameter name="b" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Create a matrix pre-populated with zeros</description>
      </method>
      <method scope="static" name="identity">
        <parameters>
          <parameter name="size" type="Number" usage="required"/>
          <parameter name="scale" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Create an identity matrix based on the size and scale.</description>
      </method>
      <method scope="static" name="adjoint">
        <parameters>
          <parameter name="a" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Find the adjoint of the passed matrix</description>
      </method>
      <method scope="static" name="transpose">
        <parameters>
          <parameter name="a" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Transpose the passed matrix (i.e. rows to columns)</description>
      </method>
      <method scope="static" name="format">
        <parameters>
          <parameter name="a" type="Array" usage="required"/>
          <parameter name="points" type="Number" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Return a string representation of the matrix, rounded to points (if needed)</description>
      </method>
      <method scope="static" name="copy">
        <parameters>
          <parameter name="a" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Create a copy of the passed matrix</description>
      </method>
      <method scope="static" name="scale">
        <parameters>
          <parameter name="a" type="Array" usage="required"/>
          <parameter name="factor" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Create a copy of passed matrix and scale each member by factor.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.off" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="isOnline"/>
      <property type="Object" access="read-write" scope="static" name="NET_CHECK"/>
      <property type="Object" access="read-write" scope="static" name="STORAGE_NAMESPACE"/>
      <property type="Object" access="read-write" scope="static" name="enabled"/>
      <property type="Object" access="read-write" scope="static" name="availabilityURL"/>
      <property type="Object" access="read-write" scope="static" name="goingOnline"/>
      <property type="Object" access="read-write" scope="static" name="coreOpFailed"/>
      <property type="Object" access="read-write" scope="static" name="doNetChecking"/>
      <property type="Object" access="read-write" scope="static" name="hasOfflineCache"/>
      <property type="Object" access="read-write" scope="static" name="browserRestart"/>
      <property type="Object" access="read-write" scope="static" name="_STORAGE_APP_NAME" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_initializeCalled" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_storageLoaded" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_pageLoaded" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_common" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="demos"/>
      <property type="Object" access="read-write" scope="static" name="offline"/>
      <property type="Object" access="read-write" scope="static" name="resources"/>
    </properties>
    <methods>
      <method scope="static" name="onLoad">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called when Dojo Offline can be used.</description>
      </method>
      <method scope="static" name="onNetwork">
        <parameters>
          <parameter name="type" type="String" usage="required">
            <description>Either &amp;quot;online&amp;quot; or &amp;quot;offline&amp;quot;.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called when our on- or offline- status changes.</description>
      </method>
      <method scope="static" name="onFrameworkEvent">
        <parameters>
          <parameter name="type" type="String" usage="required">
            <description>The type of the event:  * &amp;quot;offlineCacheInstalled&amp;quot; An event that is fired when a user has installed an offline cache after the page has been loaded. If a user didn't have an offline cache when the page loaded, a UI of some kind might have prompted them to download one. This method is called if they have downloaded and installed an offline cache so a UI can reinitialize itself to begin using this offline cache. * &amp;quot;coreOperationFailed&amp;quot; Fired when a core operation during interaction with the offline cache is denied by the user. Some offline caches, such as Google Gears, prompts the user to approve or deny caching files, using the database, and more. If the user denies a request that is core to Dojo Offline's operation, we set dojox.off.coreOpFailed to true and call this method for listeners that would like to respond some how to Dojo Offline 'failing fast'. * &amp;quot;save&amp;quot; Called whenever the framework saves data into persistent storage. This could be useful for providing save feedback or providing appropriate error feedback if saving fails due to a user not allowing the save to occur</description>
          </parameter>
          <parameter name="saveData" type="Object" usage="optional">
            <description>If the type was 'save', then a saveData object is provided with further save information. This object has the following properties:  * status - dojox.storage.SUCCESS, dojox.storage.PENDING, dojox.storage.FAILED Whether the save succeeded, whether it is pending based on a UI dialog asking the user for permission, or whether it failed.  * isCoreSave - boolean If true, then this save was for a core piece of data necessary for the functioning of Dojo Offline. If false, then it is a piece of normal data being saved for offline access. Dojo Offline will 'fail fast' if some core piece of data could not be saved, automatically setting dojox.off.coreOpFailed to 'true' and dojox.off.enabled to 'false'.  * key - String The key that we are attempting to persist  * value - Object The object we are trying to persist  * namespace - String The Dojo Storage namespace we are saving this key/value pair into, such as &amp;quot;default&amp;quot;, &amp;quot;Documents&amp;quot;, &amp;quot;Contacts&amp;quot;, etc. Optional.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>For advanced usage; most developers can ignore this. A standard event handler that can be attached to to find out about low-level framework events. Most developers will not need to attach to this method; it is meant for low-level information that can be useful for updating offline user-interfaces in exceptional circumstances. The default Dojo Offline UI widget takes care of most of these situations.</description>
      </method>
      <method scope="static" name="_onLoad" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_onOfflineCacheChecked" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_keepCheckingUntilInstalled" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_finishStartingUp" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_getAvailabilityURL" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_onOfflineCacheInstalled" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_cacheDojoResources" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_save" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Causes the Dojo Offline framework to save its configuration data into local storage.</description>
      </method>
      <method scope="static" name="_load" visibility="internal">
        <parameters>
          <parameter name="callback" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Causes the Dojo Offline framework to load its configuration data from local storage</description>
      </method>
    </methods>
  </class>
  <class type="dojox.off.files" superclass="Object">
    <properties>
      <property type="String" access="read-write" scope="static" name="versionURL">
        <description>An optional file, that if present, records the version of our bundle of files to make available offline. If this file is present, and we are not currently debugging, then we only refresh our offline files if the version has changed.</description>
      </property>
      <property type="Array" access="read-write" scope="static" name="listOfURLs">
        <description>For advanced usage; most developers can ignore this. Our list of URLs that will be cached and made available offline.</description>
      </property>
      <property type="Boolean" access="read-write" scope="static" name="refreshing">
        <description>For advanced usage; most developers can ignore this. Whether we are currently in the middle of refreshing our list of offline files.</description>
      </property>
      <property type="Object" access="read-write" scope="static" name="_cancelID" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_error" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_errorMessages" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_currentFileIndex" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_store" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_doSlurp" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="cache">
        <parameters>
          <parameter name="urlOrList" type="String" usage="required">
            <description>or Array[] A URL of a file to cache or an Array of Strings of files to cache  console.debug(&amp;quot;dojox.off.files.cache, urlOrList=&amp;quot;+urlOrList);</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>void  Caches a file or list of files to be available offline. This can either be a full URL, such as http://foobar.com/index.html, or a relative URL, such as ../index.html. This URL is not actually cached until dojox.off.sync.synchronize() is called.</description>
      </method>
      <method scope="static" name="printURLs">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>A helper function that will dump and print out all of the URLs that are cached for offline availability. This can help with debugging if you are trying to make sure that all of your URLs are available offline</description>
      </method>
      <method scope="static" name="isAvailable">
        <parameters>
          <parameter name="url" type="String" usage="required">
            <description>The URL to check</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>boolean  Determines whether the given resource is available offline.</description>
      </method>
      <method scope="static" name="_slurp" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_sameLocation" visibility="internal">
        <parameters>
          <parameter name="url" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_trimAnchor" visibility="internal">
        <parameters>
          <parameter name="url" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_getVersionInfo" visibility="internal">
        <parameters>
          <parameter name="callback" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.off.sync" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="isSyncing"/>
      <property type="Object" access="read-write" scope="static" name="cancelled"/>
      <property type="Object" access="read-write" scope="static" name="successful"/>
      <property type="Object" access="read-write" scope="static" name="details"/>
      <property type="Object" access="read-write" scope="static" name="error"/>
      <property type="Object" access="read-write" scope="static" name="actions"/>
      <property type="Object" access="read-write" scope="static" name="autoSync"/>
    </properties>
    <methods>
      <method scope="static" name="onSync">
        <parameters>
          <parameter name="type" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="start">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>void  For advanced usage; most developers can ignore this. Called at the start of the syncing process. Advanced developers can over-ride this method to use their own sync mechanism to start syncing.</description>
      </method>
      <method scope="static" name="upload">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>void  For advanced usage; most developers can ignore this. Called when syncing wants to upload data. Advanced developers can over-ride this method to completely throw away the Action Log and replaying system and roll their own advanced sync mechanism if needed.</description>
      </method>
      <method scope="static" name="download">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>void  For advanced usage; most developers can ignore this. Called when syncing wants to download data. Advanced developers can over-ride this method to use their own sync mechanism.</description>
      </method>
      <method scope="static" name="_save" visibility="internal">
        <parameters>
          <parameter name="callback" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_load" visibility="internal">
        <parameters>
          <parameter name="callback" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.off.sync.ActionLog" superclass="Object">
    <properties>
      <property type="Array" access="read-write" scope="instance" name="entries">
        <description>An array of our action entries, where each one is simply a custom object literal that were passed to add() when this action entry was added.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="isReplaying">
        <description>If true, we are in the middle of replaying a command log; if false, then we are not</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="reasonHalted">
        <description>If we halted, the reason why</description>
      </property>
      <property type="defaults" access="read-write" scope="instance" name="add">
        <description>to true. For applications that are rapidly adding many action log entries in a short period of time, it can be useful to set this to false and simply call save() yourself when you are ready to persist your command log -- otherwise performance could be slow as the default action is to attempt to persist the actions log constantly with calls to add().</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="autoSave">
        <description>Whether we automatically save the action log after each call to</description>
      </property>
      <property type="Array" access="read-write" scope="instance" name="entries">
        <description>An array of our action entries, where each one is simply a custom object literal that were passed to add() when this action entry was added.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="isReplaying">
        <description>If true, we are in the middle of replaying a command log; if false, then we are not</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="reasonHalted">
        <description>If we halted, the reason why</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="clear">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>void  Completely clears this action log of its entries</description>
      </method>
      <method scope="instance" name="continueReplay">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>void  Indicates that we should continue processing out list of actions.</description>
      </method>
      <method scope="instance" name="haltReplay">
        <parameters>
          <parameter name="reason" type="String" usage="required">
            <description>The reason we halted.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>void Halts replaying this command log.</description>
      </method>
      <method scope="instance" name="length">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Number  Returns the length of this action log</description>
      </method>
      <method scope="instance" name="onReplay">
        <parameters>
          <parameter name="action" type="Object" usage="required">
            <description>replaying or actionLog.continueReplay() to have the action log continue replaying its log and proceed to the next action; the reason you must call these is the action you execute inside of onAction will probably be asynchronous, since it will be talking on the network, and you should call one of these two methods based on the result of your network call.</description>
          </parameter>
          <parameter name="actionLog" type="dojox.off.sync.ActionLog" usage="required">
            <description>haltReplay(reason if an error occurred and you would like to halt</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>void  Called when we replay our log, for each of our action entries.</description>
      </method>
      <method scope="instance" name="onReplayFinished">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>For advanced usage; most developers can ignore this. Called when we are finished replaying our commands; called if we have successfully exhausted all of our commands, or if an error occurred during replaying. The default implementation simply continues the synchronization process. Connect to this to register for the event:  dojo.connect(dojox.off.sync.actions, &amp;quot;onReplayFinished&amp;quot;, someFunc)</description>
      </method>
      <method scope="instance" name="replay">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>void  For advanced usage; most developers can ignore this. Replays all of the commands that have been cached in this command log when we go back online; onCommand will be called for each command we have</description>
      </method>
      <method scope="instance" name="toString">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_load" visibility="internal">
        <parameters>
          <parameter name="callback" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_save" visibility="internal">
        <parameters>
          <parameter name="callback" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.off.ui" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="appName"/>
      <property type="Object" access="read-write" scope="static" name="autoEmbed"/>
      <property type="Object" access="read-write" scope="static" name="autoEmbedID"/>
      <property type="Object" access="read-write" scope="static" name="runLink"/>
      <property type="Object" access="read-write" scope="static" name="runLinkTitle"/>
      <property type="Object" access="read-write" scope="static" name="learnHowPath"/>
      <property type="Object" access="read-write" scope="static" name="customLearnHowPath"/>
      <property type="Object" access="read-write" scope="static" name="htmlTemplatePath"/>
      <property type="Object" access="read-write" scope="static" name="cssTemplatePath"/>
      <property type="Object" access="read-write" scope="static" name="onlineImagePath"/>
      <property type="Object" access="read-write" scope="static" name="offlineImagePath"/>
      <property type="Object" access="read-write" scope="static" name="rollerImagePath"/>
      <property type="Object" access="read-write" scope="static" name="checkmarkImagePath"/>
      <property type="Object" access="read-write" scope="static" name="learnHowJSPath"/>
      <property type="Object" access="read-write" scope="static" name="_initialized" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="onLoad">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>A function that should be connected to allow your application to know when Dojo Offline, the page, and the Offline Widget are all initialized and ready to be used:  dojo.connect(dojox.off.ui, &amp;quot;onLoad&amp;quot;, someFunc)</description>
      </method>
      <method scope="static" name="_doAutoEmbed" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_testNet" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_updateNetIndicator" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_initLearnHow" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_validateAppName" visibility="internal">
        <parameters>
          <parameter name="appName" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_updateSyncUI" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_setSyncMessage" visibility="internal">
        <parameters>
          <parameter name="message" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_clearSyncMessage" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_initImages" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_showDetails" visibility="internal">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_cancel" visibility="internal">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_needsBrowserRestart" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_showNeedsOfflineCache" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_hideNeedsOfflineCache" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_initMainEvtHandlers" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_setOfflineEnabled" visibility="internal">
        <parameters>
          <parameter name="enabled" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_syncFinished" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_onSync" visibility="internal">
        <parameters>
          <parameter name="type" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_onNetwork" visibility="internal">
        <parameters>
          <parameter name="type" type="String" usage="required">
            <description>&amp;quot;online&amp;quot; if we just moved online, and &amp;quot;offline&amp;quot; if we just moved offline.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called when we go on- or off-line</description>
      </method>
    </methods>
  </class>
  <class type="dojox.presentation" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_base" visibility="internal"/>
    </properties>
  </class>
  <class type="dojox.presentation.Action" superclass="dijit._Widget dijit._Contained">
    <description>a widget to attach to a dojox.presentation.Part to control it's properties based on an inherited chain of events ...</description>
    <constructors>
      <constructor scope="instance">
        <description>a widget to attach to a dojox.presentation.Part to control it's properties based on an inherited chain of events ...</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="String" access="read-write" scope="instance" name="forSlide">
        <description>attach this action to a dojox.presentation.Part with a matching 'as' attribute</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_attached" visibility="internal"/>
      <property type="Number" access="read-write" scope="instance" name="delay"/>
      <property type="Number" access="read-write" scope="instance" name="duration">
        <description>default time in MS to run this action effect on it's 'forSlide' node</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="forSlide">
        <description>attach this action to a dojox.presentation.Part with a matching 'as' attribute</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="on">
        <description>of=&amp;quot;&amp;quot;, and on=&amp;quot;auto&amp;quot;. those should make semantic sense to you.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="toggle">
        <description>will toggle attached [matching] node(s) via forSlide/as relationship(s)</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_attached" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_nullAnim" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>run this once, should this be startup: function()?</description>
      </method>
      <method scope="instance" name="_getSiblingsByType" visibility="internal">
        <parameters>
          <parameter name="declaredClass" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dijit._Widget"/>
        </return-types>
        <description>quick replacement for getChildrenByType(&amp;quot;class&amp;quot;), but in a child here ... so it's getSiblings. courtesy bill in #dojo could be moved into parent, and just call this.getChildren(), which makes more sense.</description>
      </method>
      <method scope="instance" name="_runAction" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>runs this action on attached node(s)</description>
      </method>
    </methods>
  </class>
  <class type="dojox.presentation.Deck" superclass="dijit.layout.StackContainer dijit._Templated">
    <description>dojox.presentation class basic powerpoint esque engine for handling transitons and control in a page-by-page and part-by-part way  FIXME: parsing part(s)/widget(s) in href=&amp;quot;&amp;quot; Slides not working TODO: make auto actions progress. FIXME: Safari keydown/press/up listener not working.</description>
    <constructors>
      <constructor scope="instance">
        <description>dojox.presentation class basic powerpoint esque engine for handling transitons and control in a page-by-page and part-by-part way  FIXME: parsing part(s)/widget(s) in href=&amp;quot;&amp;quot; Slides not working TODO: make auto actions progress. FIXME: Safari keydown/press/up listener not working.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="select.selectedIndex"/>
      <property type="Object" access="read-write" scope="instance" name="selectedChildWidget.domNode.style.height"/>
      <property type="Object" access="read-write" scope="instance" name="selectedChildWidget.domNode.style.width"/>
      <property type="Object" access="read-write" scope="instance" name="showNav.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="_navAnim" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_slideIndex" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_slides" visibility="internal"/>
      <property type="Boolean" access="read-write" scope="instance" name="fullScreen">
        <description>unsupported (that i know of) just yet. Default it to take control of window. Would be nice to be able to contain presentation in a styled container, like StackContainer ... theoretically possible. [and may not need this variable?]</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="navDuration">
        <description>time in MS fadein/out of popup nav [default: 250]</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="nextIcon">
        <description>icon for navigation &amp;quot;next&amp;quot; button</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="noClick">
        <description>if true, prevents _any_ click events to propagate actions (limiting control to keyboard and/or action.on=&amp;quot;auto&amp;quot; or action.delay=&amp;quot;&amp;quot; actions.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="prevIcon">
        <description>icon for navigation &amp;quot;previous&amp;quot; button</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="setHash">
        <description>if true, window location bar will get a #link to slide for direct access to a particular slide number.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
      <property type="Boolean" access="read-write" scope="instance" name="useNav">
        <description>true to allow navigation popup, false to disallow</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_inNav" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_navOpacMax" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_navOpacMin" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_navShowing" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_slideIndex" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_slides" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="getHash">
        <parameters>
          <parameter name="id" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>get the current hash to set in localtion</description>
      </method>
      <method scope="instance" name="moveTo">
        <parameters>
          <parameter name="number" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>jump to slide based on param</description>
      </method>
      <method scope="instance" name="nextSlide">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>transition to the next slide.</description>
      </method>
      <method scope="instance" name="onMove">
        <parameters>
          <parameter name="number" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>stub function? TODOC: ?</description>
      </method>
      <method scope="instance" name="previousSlide">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>transition to the previous slide</description>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>connect to the various handlers and controls for this presention</description>
      </method>
      <method scope="instance" name="_gotoSlide" visibility="internal">
        <parameters>
          <parameter name="slideIndex" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>goes to slide</description>
      </method>
      <method scope="instance" name="_handleNav" visibility="internal">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>does nothing? _that_ seems useful.</description>
      </method>
      <method scope="instance" name="_hideNav" visibility="internal">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>hides navigation</description>
      </method>
      <method scope="instance" name="_isUnclickable" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>returns true||false base of a nodes click-ability</description>
      </method>
      <method scope="instance" name="_onEvent" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>main presentation function, determines next 'best action' for a specified event.</description>
      </method>
      <method scope="instance" name="_readHash" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_resizeWindow" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>resize this and children to fix this window/container</description>
      </method>
      <method scope="instance" name="_setHash" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sets url #mark to direct slide access</description>
      </method>
      <method scope="instance" name="_showNav" visibility="internal">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>shows navigation</description>
      </method>
      <method scope="instance" name="_transition" visibility="internal">
        <parameters>
          <parameter name="newWidget" type="Object" usage="required"/>
          <parameter name="oldWidget" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>over-ride stackcontainers _transition method but atm, i find it to be ugly with not way to call _showChild() without over-riding it too. hopefull basic toggles in superclass._transition will be available in dijit, and this won't be necessary.</description>
      </method>
      <method scope="instance" name="_updateSlides" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>populate navigation select list with refs to slides call this if you add a node to your presentation dynamically.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.presentation.Part" superclass="dijit._Widget dijit._Contained">
    <description>a node in a presentation.Slide that inherits control from a dojox.presentation.Action can be any element type, and requires styling before parsing</description>
    <constructors>
      <constructor scope="instance">
        <description>a node in a presentation.Slide that inherits control from a dojox.presentation.Action can be any element type, and requires styling before parsing</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_isShowing" visibility="internal"/>
      <property type="String" access="read-write" scope="instance" name="as">
        <description>like an ID, attach to Action via (part) as=&amp;quot;&amp;quot; / (action) forSlide=&amp;quot;&amp;quot; tags this should be unique identifier?</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="startVisible">
        <description>true to leave in page on slide startup/reset false to hide on slide startup/reset</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_isShowing" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>override and init() this component</description>
      </method>
      <method scope="instance" name="_quickToggle" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>ugly [unworking] fix to test setting state of component before/after an animation. display:none prevents fadeIns?</description>
      </method>
      <method scope="instance" name="_reset" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set part back to initial calculate state these _seem_ backwards, but quickToggle flips it</description>
      </method>
    </methods>
  </class>
  <class type="dojox.presentation.Slide" superclass="dijit.layout.ContentPane dijit._Contained dijit._Container dijit._Templated">
    <description>a Comonent of a dojox.presentation, and container for each 'Slide' made up of direct HTML (no part/action relationship), and dojox.presentation.Part(s), and their attached Actions.</description>
    <constructors>
      <constructor scope="instance">
        <description>a Comonent of a dojox.presentation, and container for each 'Slide' made up of direct HTML (no part/action relationship), and dojox.presentation.Part(s), and their attached Actions.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="slideTitleText.innerHTML"/>
      <property type="Object" access="read-write" scope="instance" name="_actionIndex" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_actions" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_runningDelay" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="doLayout"/>
      <property type="Boolean" access="read-write" scope="instance" name="noClick">
        <description>true on slide tag prevents clicking, false allows (can also be set on base presentation for global control)</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="parseContent"/>
      <property type="Object" access="read-write" scope="instance" name="preLoad"/>
      <property type="Object" access="read-write" scope="instance" name="refreshOnShow"/>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="String" access="read-write" scope="instance" name="title">
        <description>string to insert into titleNode, title of Slide</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_actionIndex" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_actions" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_parts" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_runningDelay" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>setup this slide with actions and components (Parts)</description>
      </method>
      <method scope="instance" name="_getNextAction" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>returns the _next action in this sequence</description>
      </method>
      <method scope="instance" name="_nextAction" visibility="internal">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>gotoAndPlay current cached action</description>
      </method>
      <method scope="instance" name="_reset" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set action chain back to 0 and re-init each Part</description>
      </method>
    </methods>
  </class>
  <class type="dojox.regexp" superclass="Object">
    <description>Additional pre-made regular expressions for use</description>
    <methods>
      <method scope="static" name="tld">
        <parameters>
          <parameter name="flags" type="Object" usage="optional">
            <description>allowInfra  Include infrastructure domains.  Default is true.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Builds a RE that matches a top-level domain</description>
      </method>
      <method scope="static" name="ipAddress">
        <parameters>
          <parameter name="flags" type="Object" usage="optional">
            <description>allowHybrid   IPv6 address written as six groups of four hexadecimal digits followed by the usual 4 dotted decimal digit notation of IPv4. x:x:x:x:x:x:d.d.d.d</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Builds a RE that matches an IP Address</description>
      </method>
      <method scope="static" name="host">
        <parameters>
          <parameter name="flags" type="Object" usage="optional">
            <description>in regexp.tld can be applied.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Builds a RE that matches a host</description>
      </method>
      <method scope="static" name="url">
        <parameters>
          <parameter name="flags" type="Object" usage="optional">
            <description>in regexp.tld can be applied.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Builds a regular expression that matches a URL</description>
      </method>
      <method scope="static" name="emailAddress">
        <parameters>
          <parameter name="flags" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
      </method>
      <method scope="static" name="emailAddressList">
        <parameters>
          <parameter name="flags" type="Object" usage="optional">
            <description>in regexp.tld can be applied.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Builds a regular expression that matches a list of email addresses.</description>
      </method>
      <method scope="static" name="numberFormat">
        <parameters>
          <parameter name="flags" type="Object" usage="optional">
            <description>format  A string or an Array of strings for multiple formats.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Builds a regular expression to match any sort of number based format</description>
      </method>
    </methods>
  </class>
  <class type="dojox.regexp.ca" superclass="Object">
    <methods>
      <method scope="static" name="postalCode">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="province">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>a regular expression to match Canadian Province Abbreviations</description>
      </method>
    </methods>
  </class>
  <class type="dojox.regexp.us" superclass="Object">
    <methods>
      <method scope="static" name="state">
        <parameters>
          <parameter name="flags" type="Object" usage="optional">
            <description>allowMilitary  Allow military 'states', e.g. Armed Forces Europe (AE).  Default is true.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>A regular expression to match US state and territory abbreviations</description>
      </method>
    </methods>
  </class>
  <class type="dojox.rpc" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="CouchDBRestStore"/>
      <property type="Object" access="read-write" scope="static" name="JsonRPC"/>
      <property type="Object" access="read-write" scope="static" name="_index" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="JsonReferencing"/>
      <property type="Object" access="read-write" scope="static" name="JsonRestStore"/>
      <property type="Object" access="read-write" scope="static" name="PersevereRestStore"/>
      <property type="Object" access="read-write" scope="static" name="Rest"/>
      <property type="Object" access="read-write" scope="static" name="services"/>
      <property type="Object" access="read-write" scope="static" name="transportRegistry"/>
      <property type="Object" access="read-write" scope="static" name="envelopeRegistry"/>
    </properties>
    <methods>
      <method scope="static" name="onUpdate">
        <parameters>
          <parameter name="object" type="Object" usage="required"/>
          <parameter name="attribute" type="Object" usage="required"/>
          <parameter name="oldValue" type="any" usage="required"/>
          <parameter name="newValue" type="any" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This function is called when an existing object in the system is updated. Existing objects are found by id.</description>
      </method>
      <method scope="static" name="resolveJson">
        <parameters>
          <parameter name="it" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="fromJson">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="toJson">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="getTarget">
        <parameters>
          <parameter name="smd" type="Object" usage="required"/>
          <parameter name="method" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="toNamed">
        <parameters>
          <parameter name="method" type="Object" usage="required"/>
          <parameter name="args" type="Object" usage="required"/>
          <parameter name="strictParams" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="toOrdered">
        <parameters>
          <parameter name="method" type="Object" usage="required"/>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.rpc.Service" superclass="Object">
    <description>Take a string as a url to retrieve an smd or an object that is an smd or partial smd to use as a definition for the service</description>
    <constructors>
      <constructor scope="instance">
        <description>Take a string as a url to retrieve an smd or an object that is an smd or partial smd to use as a definition for the service</description>
        <parameters>
          <parameter name="smd" type="Object" usage="required">
            <description>Takes a number of properties as kwArgs for defining the service.  It also accepts a string.  When passed a string, it is treated as a url from which it should synchronously retrieve an smd file.  Otherwise it is a kwArgs object.  It accepts serviceUrl, to manually define a url for the rpc service allowing the rpc system to be used without an smd definition. strictArgChecks forces the system to verify that the # of arguments provided in a call matches those defined in the smd.  smdString allows a developer to pass a jsonString directly, which will be converted into an object or alternatively smdObject is accepts an smdObject directly.</description>
          </parameter>
          <parameter name="options" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_options" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_requestId" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="_executeMethod" visibility="internal">
        <parameters>
          <parameter name="method" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_generateService" visibility="internal">
        <parameters>
          <parameter name="serviceName" type="Object" usage="required"/>
          <parameter name="method" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.rpc._restMethods" superclass="Object">
    <methods>
      <method scope="static" name="put">
        <parameters>
          <parameter name="r" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="post">
        <parameters>
          <parameter name="r" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="delete&quot;">
        <parameters>
          <parameter name="r" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.sketch" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="tools"/>
      <property type="Object" access="read-write" scope="static" name="CommandTypes"/>
    </properties>
    <methods>
      <method scope="static" name="registerTool">
        <parameters>
          <parameter name="type" type="Object" usage="required"/>
          <parameter name="fn" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="makeToolbar">
        <parameters>
          <parameter name="node" type="Object" usage="required"/>
          <parameter name="figure" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.sketch.Anchor" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="an" type="Object" usage="required"/>
          <parameter name="id" type="Object" usage="required"/>
          <parameter name="isControl" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="annotation"/>
      <property type="Object" access="read-write" scope="instance" name="id"/>
      <property type="Object" access="read-write" scope="instance" name="isControl"/>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
      <property type="Object" access="read-write" scope="instance" name="_key" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="count"/>
    </properties>
    <methods>
      <method scope="instance" name="beginEdit">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="disable">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="doChange">
        <parameters>
          <parameter name="pt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="enable">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="endEdit">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setBinding">
        <parameters>
          <parameter name="pt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setUndo">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="type">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.sketch.Annotation" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="figure" type="Object" usage="required"/>
          <parameter name="id" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="anchors"/>
      <property type="Object" access="read-write" scope="instance" name="boundingBox"/>
      <property type="Object" access="read-write" scope="instance" name="figure"/>
      <property type="Object" access="read-write" scope="instance" name="hasAnchors"/>
      <property type="Object" access="read-write" scope="instance" name="id"/>
      <property type="Object" access="read-write" scope="instance" name="mode"/>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
      <property type="Object" access="read-write" scope="instance" name="_properties" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="Modes"/>
      <property type="Object" access="read-write" scope="static" name="labelFont"/>
    </properties>
    <methods>
      <method scope="static" name="register">
        <parameters>
          <parameter name="name" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.sketch.AnnotationTool" superclass="ta._Plugin">
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_cshape" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="onMouseMove">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
          <parameter name="rect" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onMouseUp">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_create" visibility="internal">
        <parameters>
          <parameter name="start" type="Object" usage="required"/>
          <parameter name="end" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.sketch.ButtonGroup" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_childMaps" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_children" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="add">
        <parameters>
          <parameter name="plugin" type="_Plugin" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_resetGroup" visibility="internal">
        <parameters>
          <parameter name="p" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.sketch.DoubleArrowAnnotation" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="figure" type="Object" usage="required"/>
          <parameter name="id" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="anchors.control"/>
      <property type="Object" access="read-write" scope="instance" name="anchors.end"/>
      <property type="Object" access="read-write" scope="instance" name="anchors.start"/>
      <property type="Object" access="read-write" scope="instance" name="control"/>
      <property type="Object" access="read-write" scope="instance" name="end"/>
      <property type="Object" access="read-write" scope="instance" name="endArrow"/>
      <property type="Object" access="read-write" scope="instance" name="endArrowGroup"/>
      <property type="Object" access="read-write" scope="instance" name="endRotation"/>
      <property type="Object" access="read-write" scope="instance" name="labelShape"/>
      <property type="Object" access="read-write" scope="instance" name="pathShape"/>
      <property type="Object" access="read-write" scope="instance" name="start"/>
      <property type="Object" access="read-write" scope="instance" name="startArrow"/>
      <property type="Object" access="read-write" scope="instance" name="startArrowGroup"/>
      <property type="Object" access="read-write" scope="instance" name="startRotation"/>
      <property type="Object" access="read-write" scope="instance" name="textAlign"/>
      <property type="Object" access="read-write" scope="instance" name="textOffset"/>
      <property type="Object" access="read-write" scope="instance" name="textPosition"/>
      <property type="Object" access="read-write" scope="instance" name="textYOffset"/>
      <property type="Object" access="read-write" scope="instance" name="transform"/>
      <property type="Object" access="read-write" scope="static" name="prototype"/>
    </properties>
  </class>
  <class type="dojox.sketch.Figure" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="group"/>
      <property type="Object" access="read-write" scope="instance" name="image"/>
      <property type="Object" access="read-write" scope="instance" name="imageSrc"/>
      <property type="Object" access="read-write" scope="instance" name="node"/>
      <property type="Object" access="read-write" scope="instance" name="obj"/>
      <property type="Object" access="read-write" scope="instance" name="selected"/>
      <property type="Object" access="read-write" scope="instance" name="shapes"/>
      <property type="Object" access="read-write" scope="instance" name="size"/>
      <property type="Object" access="read-write" scope="instance" name="surface"/>
      <property type="Object" access="read-write" scope="instance" name="tools"/>
      <property type="Object" access="read-write" scope="instance" name="zoomFactor"/>
      <property type="Object" access="read-write" scope="instance" name="_absEnd" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_action" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_c" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_cshape" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_ctool" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_ctr" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_end" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_lp" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_prevState" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_start" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_startPoint" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clearSelections">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="deselect">
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="hasSelections">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isSelected">
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="nextKey">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="replaceSelection">
        <parameters>
          <parameter name="n" type="Object" usage="required"/>
          <parameter name="o" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="select">
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_click" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_dblclick" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_delete" visibility="internal">
        <parameters>
          <parameter name="arr" type="Object" usage="required"/>
          <parameter name="noundo" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_keydown" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_md" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_mm" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_mu" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.sketch.LeadAnnotation" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="figure" type="Object" usage="required"/>
          <parameter name="id" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="anchors.control"/>
      <property type="Object" access="read-write" scope="instance" name="anchors.end"/>
      <property type="Object" access="read-write" scope="instance" name="anchors.start"/>
      <property type="Object" access="read-write" scope="instance" name="control"/>
      <property type="Object" access="read-write" scope="instance" name="end"/>
      <property type="Object" access="read-write" scope="instance" name="labelShape"/>
      <property type="Object" access="read-write" scope="instance" name="pathShape"/>
      <property type="Object" access="read-write" scope="instance" name="start"/>
      <property type="Object" access="read-write" scope="instance" name="textAlign"/>
      <property type="Object" access="read-write" scope="instance" name="textOffset"/>
      <property type="Object" access="read-write" scope="instance" name="textPosition"/>
      <property type="Object" access="read-write" scope="instance" name="textYOffset"/>
      <property type="Object" access="read-write" scope="instance" name="transform"/>
      <property type="Object" access="read-write" scope="static" name="prototype"/>
    </properties>
  </class>
  <class type="dojox.sketch.PreexistingAnnotation" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="figure" type="Object" usage="required"/>
          <parameter name="id" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="anchors.end"/>
      <property type="Object" access="read-write" scope="instance" name="anchors.start"/>
      <property type="Object" access="read-write" scope="instance" name="end"/>
      <property type="Object" access="read-write" scope="instance" name="labelShape"/>
      <property type="Object" access="read-write" scope="instance" name="radius"/>
      <property type="Object" access="read-write" scope="instance" name="rectShape"/>
      <property type="Object" access="read-write" scope="instance" name="start"/>
      <property type="Object" access="read-write" scope="instance" name="textAlign"/>
      <property type="Object" access="read-write" scope="instance" name="textOffset"/>
      <property type="Object" access="read-write" scope="instance" name="textPosition"/>
      <property type="Object" access="read-write" scope="instance" name="transform"/>
      <property type="Object" access="read-write" scope="static" name="prototype"/>
    </properties>
  </class>
  <class type="dojox.sketch.SingleArrowAnnotation" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="figure" type="Object" usage="required"/>
          <parameter name="id" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="anchors.control"/>
      <property type="Object" access="read-write" scope="instance" name="anchors.end"/>
      <property type="Object" access="read-write" scope="instance" name="anchors.start"/>
      <property type="Object" access="read-write" scope="instance" name="arrowhead"/>
      <property type="Object" access="read-write" scope="instance" name="arrowheadGroup"/>
      <property type="Object" access="read-write" scope="instance" name="control"/>
      <property type="Object" access="read-write" scope="instance" name="end"/>
      <property type="Object" access="read-write" scope="instance" name="labelShape"/>
      <property type="Object" access="read-write" scope="instance" name="pathShape"/>
      <property type="Object" access="read-write" scope="instance" name="rotation"/>
      <property type="Object" access="read-write" scope="instance" name="start"/>
      <property type="Object" access="read-write" scope="instance" name="textAlign"/>
      <property type="Object" access="read-write" scope="instance" name="textOffset"/>
      <property type="Object" access="read-write" scope="instance" name="textPosition"/>
      <property type="Object" access="read-write" scope="instance" name="textYOffset"/>
      <property type="Object" access="read-write" scope="instance" name="transform"/>
      <property type="Object" access="read-write" scope="static" name="prototype"/>
    </properties>
  </class>
  <class type="dojox.sketch.Slider" superclass="dojox.sketch._Plugin">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="args" type="Object" usage="optional"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="slider"/>
    </properties>
    <methods>
      <method scope="instance" name="setToolbar">
        <parameters>
          <parameter name="t" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_initButton" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setZoom" visibility="internal">
        <parameters>
          <parameter name="v" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_zoomToFit" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.sketch.Toolbar" superclass="dijit.Toolbar">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="plugins"/>
      <property type="Object" access="read-write" scope="instance" name="shapeGroup"/>
      <property type="Object" access="read-write" scope="instance" name="_defaultTool" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_plugins" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="figure"/>
      <property type="Object" access="read-write" scope="instance" name="plugins"/>
    </properties>
    <methods>
      <method scope="instance" name="addGroupItem">
        <parameters>
          <parameter name="item" type="_Plugin" usage="required"/>
          <parameter name="group" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="reset">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setShape" visibility="internal">
        <parameters>
          <parameter name="s" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.sketch.UnderlineAnnotation" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="figure" type="Object" usage="required"/>
          <parameter name="id" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="anchors.start"/>
      <property type="Object" access="read-write" scope="instance" name="labelShape"/>
      <property type="Object" access="read-write" scope="instance" name="lineShape"/>
      <property type="Object" access="read-write" scope="instance" name="start"/>
      <property type="Object" access="read-write" scope="instance" name="transform"/>
      <property type="Object" access="read-write" scope="static" name="prototype"/>
    </properties>
  </class>
  <class type="dojox.sketch.UndoStack" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="figure" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="figure"/>
      <property type="Object" access="read-write" scope="instance" name="_steps" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_undoedSteps" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="add">
        <parameters>
          <parameter name="cmd" type="String" usage="required"/>
          <parameter name="ann" type="ta.Annotation" usage="optional"/>
          <parameter name="before" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="apply">
        <parameters>
          <parameter name="state" type="Object" usage="required"/>
          <parameter name="from" type="Object" usage="required"/>
          <parameter name="to" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="redo">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="undo">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.sketch._Plugin" superclass="Object">
    <description>This represents a &amp;quot;plugin&amp;quot; to the dojox.sketch.Figure, which is basically a single button on the Toolbar and some associated code</description>
    <constructors>
      <constructor scope="instance">
        <description>This represents a &amp;quot;plugin&amp;quot; to the dojox.sketch.Figure, which is basically a single button on the Toolbar and some associated code</description>
        <parameters>
          <parameter name="args" type="Object" usage="optional"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="button"/>
      <property type="Object" access="read-write" scope="instance" name="figure"/>
      <property type="Object" access="read-write" scope="instance" name="_connects" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="button"/>
      <property type="Object" access="read-write" scope="instance" name="buttonClass"/>
      <property type="Object" access="read-write" scope="instance" name="figure"/>
      <property type="Object" access="read-write" scope="instance" name="iconClassPrefix"/>
      <property type="Object" access="read-write" scope="instance" name="itemGroup"/>
      <property type="Object" access="read-write" scope="instance" name="queryCommand"/>
      <property type="Object" access="read-write" scope="instance" name="shape"/>
      <property type="Object" access="read-write" scope="instance" name="useDefaultCommand"/>
    </properties>
    <methods>
      <method scope="instance" name="activate">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="attr">
        <parameters>
          <parameter name="name" type="Object" usage="required"/>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="connect">
        <parameters>
          <parameter name="o" type="Object" usage="required"/>
          <parameter name="f" type="Object" usage="required"/>
          <parameter name="tf" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="destroy">
        <parameters>
          <parameter name="f" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onActivate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onMouseDown">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onMouseMove">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onMouseUp">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setFigure">
        <parameters>
          <parameter name="figure" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setToolbar">
        <parameters>
          <parameter name="toolbar" type="Widget" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_initButton" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.sql" superclass="Object">
    <description>objects to support Dojo Offline (dojox.off)</description>
    <properties>
      <property type="Object" access="read-write" scope="static" name="dbName"/>
      <property type="Object" access="read-write" scope="static" name="debug"/>
    </properties>
    <methods>
      <method scope="static" name="_printDebugSQL" visibility="internal">
        <parameters>
          <parameter name="sql" type="Object" usage="required"/>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_normalizeResults" visibility="internal">
        <parameters>
          <parameter name="rs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_needsEncrypt" visibility="internal">
        <parameters>
          <parameter name="sql" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="_needsDecrypt" visibility="internal">
        <parameters>
          <parameter name="sql" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.sql._SQLCrypto" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="action" type="Object" usage="required"/>
          <parameter name="sql" type="Object" usage="required"/>
          <parameter name="password" type="Object" usage="required"/>
          <parameter name="args" type="Object" usage="required"/>
          <parameter name="callback" type="Object" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_finalArgs" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_finalResultSet" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_finishedCrypto" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_finishedSpawningCrypto" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_totalCrypto" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="_decrypt" visibility="internal">
        <parameters>
          <parameter name="resultSet" type="Object" usage="required"/>
          <parameter name="needsDecrypt" type="Object" usage="required"/>
          <parameter name="password" type="Object" usage="required"/>
          <parameter name="callback" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_decryptSingleColumn" visibility="internal">
        <parameters>
          <parameter name="columnName" type="Object" usage="required"/>
          <parameter name="columnValue" type="Object" usage="required"/>
          <parameter name="password" type="Object" usage="required"/>
          <parameter name="currentRowIndex" type="Object" usage="required"/>
          <parameter name="callback" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_determineDecryptedColumns" visibility="internal">
        <parameters>
          <parameter name="sql" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_encrypt" visibility="internal">
        <parameters>
          <parameter name="sql" type="Object" usage="required"/>
          <parameter name="password" type="Object" usage="required"/>
          <parameter name="args" type="Object" usage="required"/>
          <parameter name="encryptColumns" type="Object" usage="required"/>
          <parameter name="callback" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_execDecryptSQL" visibility="internal">
        <parameters>
          <parameter name="sql" type="Object" usage="required"/>
          <parameter name="password" type="Object" usage="required"/>
          <parameter name="args" type="Object" usage="required"/>
          <parameter name="callback" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_execEncryptSQL" visibility="internal">
        <parameters>
          <parameter name="sql" type="Object" usage="required"/>
          <parameter name="password" type="Object" usage="required"/>
          <parameter name="args" type="Object" usage="required"/>
          <parameter name="callback" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_flagEncryptedArgs" visibility="internal">
        <parameters>
          <parameter name="sql" type="Object" usage="required"/>
          <parameter name="args" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_stripCryptoSQL" visibility="internal">
        <parameters>
          <parameter name="sql" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.storage" superclass="Object">
    <description>Objects for mass storage within the browser.  For when cookies just aren't enough.</description>
    <properties>
      <property type="Object" access="read-write" scope="static" name="_common" visibility="internal"/>
    </properties>
  </class>
  <class type="dojox.storage.AirDBStorageProvider" superclass="dojox.storage.Provider">
    <properties>
      <property type="Object" access="read-write" scope="instance" name="initialized"/>
      <property type="Object" access="read-write" scope="instance" name="_db" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_statusHandler" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="DATABASE_FILE"/>
      <property type="Object" access="read-write" scope="instance" name="initialized"/>
      <property type="Object" access="read-write" scope="instance" name="TABLE_NAME"/>
      <property type="Object" access="read-write" scope="instance" name="_db" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clear">
        <parameters>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="get">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getKeys">
        <parameters>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getMaximumSize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getMultiple">
        <parameters>
          <parameter name="keys" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getNamespaces">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="hasSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="hideSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="initialize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isAvailable">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isPermanent">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="put">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="resultsHandler" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="putMultiple">
        <parameters>
          <parameter name="keys" type="Object" usage="required"/>
          <parameter name="values" type="Object" usage="required"/>
          <parameter name="resultsHandler" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="remove">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="removeMultiple">
        <parameters>
          <parameter name="keys" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="showSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_beginTransaction" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_commitTransaction" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_sql" visibility="internal">
        <parameters>
          <parameter name="query" type="Object" usage="required"/>
          <parameter name="params" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.storage.AirEncryptedLocalStorageProvider" superclass="dojox.storage.Provider">
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_statusHandler" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clear">
        <parameters>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="get">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getKeys">
        <parameters>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getMaximumSize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getMultiple">
        <parameters>
          <parameter name="keys" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getNamespaces">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="hasSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="hideSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="initialize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isAvailable">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isPermanent">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="put">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="resultsHandler" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="putMultiple">
        <parameters>
          <parameter name="keys" type="Object" usage="required"/>
          <parameter name="values" type="Object" usage="required"/>
          <parameter name="resultsHandler" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="remove">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="removeMultiple">
        <parameters>
          <parameter name="keys" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="showSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getItem" visibility="internal">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_removeItem" visibility="internal">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setItem" visibility="internal">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.storage.AirFileStorageProvider" superclass="dojox.storage.Provider">
    <properties>
      <property type="Object" access="read-write" scope="instance" name="initialized"/>
      <property type="Object" access="read-write" scope="instance" name="_statusHandler" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="initialized"/>
      <property type="Object" access="read-write" scope="instance" name="_storagePath" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clear">
        <parameters>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="get">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getKeys">
        <parameters>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getMaximumSize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getMultiple">
        <parameters>
          <parameter name="keys" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getNamespaces">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="hasSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="hideSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="initialize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isAvailable">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isPermanent">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="put">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="resultsHandler" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="putMultiple">
        <parameters>
          <parameter name="keys" type="Object" usage="required"/>
          <parameter name="values" type="Object" usage="required"/>
          <parameter name="resultsHandler" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="remove">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="removeMultiple">
        <parameters>
          <parameter name="keys" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="showSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.storage.FlashStorageProvider" superclass="dojox.storage.Provider">
    <properties>
      <property type="Object" access="read-write" scope="instance" name="initialized"/>
      <property type="Object" access="read-write" scope="instance" name="_allNamespaces" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_available" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_flashReady" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_pageReady" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_statusHandler" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="initialized"/>
      <property type="Object" access="read-write" scope="instance" name="_available" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_flashReady" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_pageReady" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_statusHandler" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clear">
        <parameters>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="flush">
        <parameters>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="get">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getFlushDelay">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getKeys">
        <parameters>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getMaximumSize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getMultiple">
        <parameters>
          <parameter name="keys" type="Array" usage="required"/>
          <parameter name="namespace" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getNamespaces">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getResourceList">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="hasSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="hideSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="initialize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isAvailable">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isPermanent">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="put">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="resultsHandler" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="putMultiple">
        <parameters>
          <parameter name="keys" type="Object" usage="required"/>
          <parameter name="values" type="Object" usage="required"/>
          <parameter name="resultsHandler" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="remove">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="removeMultiple">
        <parameters>
          <parameter name="keys" type="Array" usage="required"/>
          <parameter name="namespace" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setFlushDelay">
        <parameters>
          <parameter name="newDelay" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="showSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_destringify" visibility="internal">
        <parameters>
          <parameter name="results" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_loaded" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onStatus" visibility="internal">
        <parameters>
          <parameter name="statusResult" type="Object" usage="required"/>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.storage.GearsStorageProvider" superclass="dojox.storage.Provider">
    <description>Storage provider that uses the features of Google Gears to store data (it is saved into the local SQL database provided by Gears, using dojox.sql)</description>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="initialized"/>
      <property type="Object" access="read-write" scope="instance" name="TABLE_NAME"/>
      <property type="Object" access="read-write" scope="instance" name="_available" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_statusHandler" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="initialized"/>
      <property type="Object" access="read-write" scope="instance" name="TABLE_NAME"/>
      <property type="Object" access="read-write" scope="instance" name="_available" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clear">
        <parameters>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="get">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getKeys">
        <parameters>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getMaximumSize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getMultiple">
        <parameters>
          <parameter name="keys" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getNamespaces">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="hasSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="hideSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="initialize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isAvailable">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isPermanent">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="put">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="resultsHandler" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="putMultiple">
        <parameters>
          <parameter name="keys" type="Object" usage="required"/>
          <parameter name="values" type="Object" usage="required"/>
          <parameter name="resultsHandler" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="remove">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="removeMultiple">
        <parameters>
          <parameter name="keys" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="showSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.storage.manager" superclass="Object">
    <description>A singleton class in charge of the dojox.storage system</description>
    <constructors>
      <constructor scope="instance">
        <description>A singleton class in charge of the dojox.storage system</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="available"/>
      <property type="Object" access="read-write" scope="instance" name="currentProvider">
        <description>The storage provider that was automagically chosen to do storage on this platform, such as dojox.storage.FlashStorageProvider.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="currentProvider.declaredClass"/>
      <property type="Object" access="read-write" scope="instance" name="providers"/>
      <property type="Object" access="read-write" scope="instance" name="_initialized" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_onLoadListeners" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="addOnLoad">
        <parameters>
          <parameter name="func" type="Function" usage="required">
            <description>A function to call when Dojo Offline is ready to go</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>void  Adds an onload listener to know when Dojo Offline can be used.</description>
      </method>
      <method scope="instance" name="autodetect">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Autodetects the best possible persistent storage provider</description>
      </method>
      <method scope="instance" name="getProvider">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Object Gets the current provider</description>
      </method>
      <method scope="instance" name="getResourceList">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns a list of whatever resources are necessary for storage providers to work.</description>
      </method>
      <method scope="instance" name="initialize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Initializes the storage system and autodetects the best storage provider we can provide on this platform</description>
      </method>
      <method scope="instance" name="isAvailable">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Boolean Returns whether any storage options are available.</description>
      </method>
      <method scope="instance" name="isInitialized">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Boolean  Returns whether the storage system is initialized and ready to be used.</description>
      </method>
      <method scope="instance" name="loaded">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>The storage provider should call this method when it is loaded and ready to be used. Clients who will use the provider will connect to this method to know when they can use the storage system. You can either use dojo.connect to connect to this function, or can use dojox.storage.manager.addOnLoad() to add a listener that does not depend on the dojo.event package.</description>
      </method>
      <method scope="instance" name="register">
        <parameters>
          <parameter name="name" type="String" usage="required">
            <description>The full class name of this provider, such as &amp;quot;dojox.storage.FlashStorageProvider&amp;quot;.</description>
          </parameter>
          <parameter name="instance" type="Object" usage="required">
            <description>An instance of this provider, which we will use to call isAvailable() on.  keep list of providers as a list so that we can know what order storage providers are preferred; also, store the providers hashed by name in case someone wants to get a provider that uses a particular storage backend</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Registers the existence of a new storage provider; used by subclasses to inform the manager of their existence. The storage manager will select storage providers based on their ordering, so the order in which you call this method matters.</description>
      </method>
      <method scope="instance" name="removeOnLoad">
        <parameters>
          <parameter name="func" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>void Removes the given onLoad listener</description>
      </method>
      <method scope="instance" name="setProvider">
        <parameters>
          <parameter name="storageClass" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Instructs the storageManager to use the given storage class for all storage requests.</description>
      </method>
      <method scope="instance" name="supportsProvider">
        <parameters>
          <parameter name="storageClass" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Boolean Determines if this platform supports the given storage provider.</description>
      </method>
      <method scope="instance" name="_fireLoaded" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.storage.Provider" superclass="Object">
    <description>A singleton for working with dojox.storage.</description>
    <properties>
      <property type="String" access="read-write" scope="instance" name="DEFAULT_NAMESPACE">
        <description>The namespace for all storage operations. This is useful if several applications want access to the storage system from the same domain but want different storage silos.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="FAILED">
        <description>Flag that indicates a put() call to a storage provider failed.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="PENDING">
        <description>Flag that indicates a put() call to a storage provider is pending user approval.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="SIZE_NOT_AVAILABLE">
        <description>Returned by getMaximumSize() if this storage provider can not determine the maximum amount of data it can support.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="SIZE_NO_LIMIT">
        <description>Returned by getMaximumSize() if this storage provider has no theoretical limit on the amount of data it can store.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="SUCCESS">
        <description>Flag that indicates a put() call to a storage provider was succesful.</description>
      </property>
      <property type="Object" access="read-write" scope="static" name="constructor">
        <description>perform initialization in your initialize() method.</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="clear">
        <parameters>
          <parameter name="namespace" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Completely clears this storage system of all of it's values and keys. If 'namespace' is provided just clears the keys in that</description>
      </method>
      <method scope="instance" name="get">
        <parameters>
          <parameter name="key" type="String" usage="required">
            <description>A string key to get the value of.</description>
          </parameter>
          <parameter name="namespace" type="String" usage="optional">
            <description>Optional string namespace that this value will be retrieved from; if left off, the value will be retrieved from dojox.storage.DEFAULT_NAMESPACE return: Returns any JavaScript object type; null if the key is not present</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Object  Gets the value with the given key. Returns null if this key is not in the storage system.</description>
      </method>
      <method scope="instance" name="getKeys">
        <parameters>
          <parameter name="namespace" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Array Enumerates all of the available keys in this storage system. return: Array of available keys</description>
      </method>
      <method scope="instance" name="getMaximumSize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>mixed The maximum storage allowed by this provider</description>
      </method>
      <method scope="instance" name="getMultiple">
        <parameters>
          <parameter name="keys" type="Array" usage="required">
            <description>An array of string keys to get the value of.</description>
          </parameter>
          <parameter name="namespace" type="String" usage="optional">
            <description>Optional string namespace that this value will be retrieved from; if left off, the value will be retrieved from dojox.storage.DEFAULT_NAMESPACE return: Returns any JavaScript object type; null if the key is not present</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Object  Gets the valuse corresponding to each of the given keys. Returns a null array element for each given key that is not in the storage system.</description>
      </method>
      <method scope="instance" name="getNamespaces">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getResourceList">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Array[]  Returns a list of URLs that this storage provider might depend on.</description>
      </method>
      <method scope="instance" name="hasKey">
        <parameters>
          <parameter name="key" type="String" usage="required"/>
          <parameter name="namespace" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Determines whether the storage has the given key.</description>
      </method>
      <method scope="instance" name="hasSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Boolean Determines whether this provider has a settings UI.</description>
      </method>
      <method scope="instance" name="hideSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>If this provider has a settings UI, hides it.</description>
      </method>
      <method scope="instance" name="initialize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Allows this storage provider to initialize itself. This is called after the page has finished loading, so you can not do document.writes(). Storage Provider subclasses should initialize themselves inside of here rather than in their function constructor.</description>
      </method>
      <method scope="instance" name="isAvailable">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Boolean  Returns whether this storage provider is available on this platform.</description>
      </method>
      <method scope="instance" name="isPermanent">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Boolean  Returns whether this storage provider's values are persisted when this platform is shutdown.</description>
      </method>
      <method scope="instance" name="isValidKey">
        <parameters>
          <parameter name="keyName" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Boolean  Subclasses can call this to ensure that the key given is valid in a consistent way across different storage providers. We use the lowest common denominator for key values allowed: only letters, numbers, and underscores are allowed. No spaces.</description>
      </method>
      <method scope="instance" name="isValidKeyArray">
        <parameters>
          <parameter name="keys" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onHideSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>If a function is assigned to this property, then when the settings provider's UI is closed this function is called. Useful, for example, if the user has just cleared out all storage for this provider using the settings UI, and you want to update your UI.</description>
      </method>
      <method scope="instance" name="put">
        <parameters>
          <parameter name="key" type="String" usage="required">
            <description>A string key to use when retrieving this value in the future.</description>
          </parameter>
          <parameter name="value" type="Object" usage="required">
            <description>A value to store; this can be any JavaScript type.</description>
          </parameter>
          <parameter name="resultsHandler" type="Function" usage="required">
            <description>A callback function that will receive three arguments. The first argument is one of three values: dojox.storage.SUCCESS, dojox.storage.FAILED, or dojox.storage.PENDING; these values determine how the put request went. In some storage systems users can deny a storage request, resulting in a dojox.storage.FAILED, while in other storage systems a storage request must wait for user approval, resulting in a dojox.storage.PENDING status until the request is either approved or denied, resulting in another call back with dojox.storage.SUCCESS. The second argument in the call back is the key name that was being stored. The third argument in the call back is an optional message that details possible error messages that might have occurred during the storage process.</description>
          </parameter>
          <parameter name="namespace" type="String" usage="optional">
            <description>Optional string namespace that this value will be placed into; if left off, the value will be placed into dojox.storage.DEFAULT_NAMESPACE</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Puts a key and value into this storage system.</description>
      </method>
      <method scope="instance" name="putMultiple">
        <parameters>
          <parameter name="keys" type="Array" usage="required">
            <description>An array of string keys to use when retrieving this value in the future, one per value to be stored</description>
          </parameter>
          <parameter name="values" type="Array" usage="required">
            <description>An array of values to store; this can be any JavaScript type, though the performance of plain strings is considerably better</description>
          </parameter>
          <parameter name="resultsHandler" type="Function" usage="required">
            <description>A callback function that will receive three arguments. The first argument is one of three values: dojox.storage.SUCCESS, dojox.storage.FAILED, or dojox.storage.PENDING; these values determine how the put request went. In some storage systems users can deny a storage request, resulting in a dojox.storage.FAILED, while in other storage systems a storage request must wait for user approval, resulting in a dojox.storage.PENDING status until the request is either approved or denied, resulting in another call back with dojox.storage.SUCCESS. The second argument in the call back is the key name that was being stored. The third argument in the call back is an optional message that details possible error messages that might have occurred during the storage process.</description>
          </parameter>
          <parameter name="namespace" type="String" usage="optional">
            <description>Optional string namespace that this value will be placed into; if left off, the value will be placed into dojox.storage.DEFAULT_NAMESPACE</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Puts multiple keys and values into this storage system.</description>
      </method>
      <method scope="instance" name="remove">
        <parameters>
          <parameter name="key" type="String" usage="required"/>
          <parameter name="namespace" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Removes the given key from this storage system.</description>
      </method>
      <method scope="instance" name="removeMultiple">
        <parameters>
          <parameter name="keys" type="Array" usage="required"/>
          <parameter name="namespace" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Removes the given keys from this storage system.</description>
      </method>
      <method scope="instance" name="showSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>If this provider has a settings UI, determined by calling hasSettingsUI(), it is shown.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.storage.WhatWGStorageProvider" superclass="dojox.storage.Provider">
    <description>Storage provider that uses WHAT Working Group features in Firefox 2 to achieve permanent storage.</description>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="initialized"/>
      <property type="Object" access="read-write" scope="instance" name="_available" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_domain" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_statusHandler" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="initialized"/>
      <property type="Object" access="read-write" scope="instance" name="_allNamespaces" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_available" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_domain" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_statusHandler" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_storageEventListener" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clear">
        <parameters>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="get">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getFullKey">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getKeys">
        <parameters>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getMaximumSize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getNamespaces">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="hasSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="hideSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="initialize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isAvailable">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isPermanent">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="put">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="resultsHandler" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="remove">
        <parameters>
          <parameter name="key" type="Object" usage="required"/>
          <parameter name="namespace" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="showSettingsUI">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.string" superclass="Object">
    <description>A collection of various objects for advanced string manipulation, including a Builder and a tokenizer.</description>
    <methods>
      <method scope="static" name="sprintf">
        <parameters>
          <parameter name="format" type="String" usage="required"/>
          <parameter name="filler" type="mixed" usage="one-or-more"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="tokenize">
        <parameters>
          <parameter name="str" type="String" usage="required"/>
          <parameter name="re" type="RegExp" usage="required"/>
          <parameter name="parseDelim" type="Function" usage="optional">
            <description>Each group (excluding the 0 group) is passed as a parameter. If the function returns a value, it's added to the list of tokens.</description>
          </parameter>
          <parameter name="instance" type="Object" usage="optional">
            <description>Used as the &amp;quot;this&amp;quot; instance when calling parseDelim</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Split a string by a regular expression with the ability to capture the delimeters</description>
      </method>
    </methods>
  </class>
  <class type="dojox.string.Builder" superclass="Object">
    <description>A fast buffer for creating large strings</description>
    <constructors>
      <constructor scope="instance">
        <description>A fast buffer for creating large strings</description>
        <parameters>
          <parameter name="str" type="String" usage="optional">
            <description>The initial string to seed the buffer with</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <mixins scope="instance">
      <mixin scope="static" type="m"/>
    </mixins>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="b"/>
    </properties>
  </class>
  <class type="dojox.string.sprintf.Formatter" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="format" type="String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_format" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_mapped" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_tokens" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_re" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_spaces10" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_zeros10" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="fitField">
        <parameters>
          <parameter name="token" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="format">
        <parameters>
          <parameter name="filler" type="mixed" usage="one-or-more"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="formatDouble">
        <parameters>
          <parameter name="token" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="formatInt">
        <parameters>
          <parameter name="token" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="spacePad">
        <parameters>
          <parameter name="token" type="Object" usage="required"/>
          <parameter name="length" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="zeroPad">
        <parameters>
          <parameter name="token" type="Object" usage="required"/>
          <parameter name="length" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_parseDelim" visibility="internal">
        <parameters>
          <parameter name="mapping" type="Object" usage="required"/>
          <parameter name="intmapping" type="Object" usage="required"/>
          <parameter name="flags" type="Object" usage="required"/>
          <parameter name="minWidth" type="Object" usage="required"/>
          <parameter name="period" type="Object" usage="required"/>
          <parameter name="precision" type="Object" usage="required"/>
          <parameter name="specifier" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.string.sprintf.Formatter._specifiers" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="b"/>
      <property type="Object" access="read-write" scope="static" name="o"/>
      <property type="Object" access="read-write" scope="static" name="x"/>
      <property type="Object" access="read-write" scope="static" name="X"/>
      <property type="Object" access="read-write" scope="static" name="d"/>
      <property type="Object" access="read-write" scope="static" name="i"/>
      <property type="Object" access="read-write" scope="static" name="u"/>
      <property type="Object" access="read-write" scope="static" name="e"/>
      <property type="Object" access="read-write" scope="static" name="E"/>
      <property type="Object" access="read-write" scope="static" name="f"/>
      <property type="Object" access="read-write" scope="static" name="F"/>
      <property type="Object" access="read-write" scope="static" name="g"/>
      <property type="Object" access="read-write" scope="static" name="G"/>
    </properties>
  </class>
  <class type="dojox.string.sprintf.Formatter._specifiers.c" superclass="Object">
    <methods>
      <method scope="static" name="setArg">
        <parameters>
          <parameter name="token" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.string.sprintf.Formatter._specifiers.s" superclass="Object">
    <methods>
      <method scope="static" name="setMaxWidth">
        <parameters>
          <parameter name="token" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.timing" superclass="Object">
    <description>A set of objects to perform advanced time-based tasks, including a basic Timer.</description>
    <properties>
      <property type="Object" access="read-write" scope="static" name="threadStates"/>
      <property type="Object" access="read-write" scope="static" name="threadPriorities"/>
      <property type="Object" access="read-write" scope="static" name="ThreadPool"/>
      <property type="Object" access="read-write" scope="static" name="_base" visibility="internal"/>
    </properties>
  </class>
  <class type="dojox.timing.Sequence" superclass="Object">
    <description>This class provides functionality to really sequentialize function calls. You need to provide a list of functions and some parameters for each (like: pauseBefore) and they will be run one after another. This can be very useful for slideshows or alike things.</description>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_curId" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_goOnPause" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_running" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_defsResolved" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_goOnPause" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_running" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="go">
        <parameters>
          <parameter name="defs" type="Array" usage="required">
            <description>the sequence of actions</description>
          </parameter>
          <parameter name="doneFunction" type="Function|Array" usage="optional">
            <description>Function|Array The function to call when done</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="goOn">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>This method just provides a hook from the outside, so that an interrupted sequence can be continued.</description>
      </method>
      <method scope="instance" name="stop">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Stop the currently running sequence.</description>
      </method>
      <method scope="instance" name="_go" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Execute one task of this._defsResolved.  if _running was set to false stop the sequence, this is the case when i.e. stop() was called.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.timing.Streamer" superclass="Object">
    <description>Streamer will take an input function that pushes N datapoints into a queue, and will pass the next point in that queue out to an</description>
    <constructors>
      <constructor scope="instance">
        <description>Streamer will take an input function that pushes N datapoints into a queue, and will pass the next point in that queue out to an</description>
        <parameters>
          <parameter name="input" type="Function" usage="required">
            <description>the function executed when the internal queue reaches minimumSize</description>
          </parameter>
          <parameter name="output" type="Function" usage="required">
            <description>the function executed on internal tick</description>
          </parameter>
          <parameter name="interval" type="Number" usage="required">
            <description>the interval in ms at which the output function is fired.</description>
          </parameter>
          <parameter name="minimum" type="Number" usage="required">
            <description>the minimum number of elements in the internal queue.</description>
          </parameter>
          <parameter name="initialData" type="Array" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="inputFunction"/>
      <property type="the" access="read-write" scope="instance" name="interval">
        <description>interval in ms at which the output function is fired.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="minimumSize"/>
      <property type="Object" access="read-write" scope="instance" name="outputFunction"/>
    </properties>
    <methods>
      <method scope="instance" name="onStart">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onStop">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onTick">
        <parameters>
          <parameter name="obj" type="dojox.timing.Streamer" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setInterval">
        <parameters>
          <parameter name="ms" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sets the interval in milliseconds of the internal timer</description>
      </method>
      <method scope="instance" name="start">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>starts the Streamer</description>
      </method>
      <method scope="instance" name="stop">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>stops the Streamer</description>
      </method>
    </methods>
  </class>
  <class type="dojox.timing.Thread" superclass="Object">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="fn" type="Function" usage="required"/>
          <parameter name="priority" type="dojox.timing.threadPriorities" usage="optional"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="func"/>
      <property type="Object" access="read-write" scope="instance" name="lastError"/>
      <property type="Object" access="read-write" scope="instance" name="priority"/>
      <property type="Object" access="read-write" scope="instance" name="state"/>
    </properties>
    <methods>
      <method scope="instance" name="invoke">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.timing.Timer" superclass="Object">
    <description>Timer object executes an &amp;quot;onTick()&amp;quot; method repeatedly at a specified interval. repeatedly at a given interval.</description>
    <constructors>
      <constructor scope="instance">
        <description>Timer object executes an &amp;quot;onTick()&amp;quot; method repeatedly at a specified interval. repeatedly at a given interval.</description>
        <parameters>
          <parameter name="interval" type="Number" usage="required">
            <description>Interval between function calls, in milliseconds.</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Interval" access="read-write" scope="instance" name="interval">
        <description>between function calls, in milliseconds.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="isRunning"/>
      <property type="Object" access="read-write" scope="instance" name="onStart"/>
      <property type="Object" access="read-write" scope="instance" name="onStop"/>
      <property type="Object" access="read-write" scope="instance" name="timer"/>
    </properties>
    <methods>
      <method scope="instance" name="onTick">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Method called every time the interval passes.  Override to do something useful.</description>
      </method>
      <method scope="instance" name="setInterval">
        <parameters>
          <parameter name="interval" type="New" usage="required">
            <description>interval, in milliseconds.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Reset the interval of a timer, whether running or not.</description>
      </method>
      <method scope="instance" name="start">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Start the timer ticking.</description>
      </method>
      <method scope="instance" name="stop">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Stop the timer.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.uuid" superclass="Object">
    <description>Universally Unique Identifier (UUID) implementations, including an implementation of UUID 2</description>
    <properties>
      <property type="Object" access="read-write" scope="static" name="version"/>
      <property type="Object" access="read-write" scope="static" name="variant"/>
      <property type="Object" access="read-write" scope="static" name="NIL_UUID"/>
      <property type="Object" access="read-write" scope="static" name="_base" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="assert">
        <parameters>
          <parameter name="booleanValue" type="Boolean" usage="required">
            <description>Must be true for the assertion to succeed.</description>
          </parameter>
          <parameter name="message" type="String" usage="optional">
            <description>A string describing the assertion. throws: Throws an Error if 'booleanValue' is false.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Throws an exception if the assertion fails.</description>
      </method>
      <method scope="static" name="generateNilUuid">
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>This function returns the Nil UUID: &amp;quot;00000000-0000-0000-0000-000000000000&amp;quot;.</description>
      </method>
      <method scope="static" name="isValid">
        <parameters>
          <parameter name="uuidString" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Returns true if the UUID was initialized with a valid value.</description>
      </method>
      <method scope="static" name="getVariant">
        <parameters>
          <parameter name="uuidString" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojox.uuid.variant"/>
        </return-types>
        <description>Returns a variant code that indicates what type of UUID this is. Returns one of the enumerated dojox.uuid.variant values.</description>
      </method>
      <method scope="static" name="getVersion">
        <parameters>
          <parameter name="uuidString" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojox.uuid.version"/>
        </return-types>
        <description>Returns a version number that indicates what type of UUID this is. Returns one of the enumerated dojox.uuid.version values.</description>
      </method>
      <method scope="static" name="getNode">
        <parameters>
          <parameter name="uuidString" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>If this is a version 1 UUID (a time-based UUID), getNode() returns a 12-character string with the &amp;quot;node&amp;quot; or &amp;quot;pseudonode&amp;quot; portion of the UUID, which is the rightmost 12 characters.</description>
      </method>
      <method scope="static" name="getTimestamp">
        <parameters>
          <parameter name="uuidString" type="String" usage="required"/>
          <parameter name="returnType" type="String" usage="optional">
            <description>Any of these five values: &amp;quot;string&amp;quot;, String, &amp;quot;hex&amp;quot;, &amp;quot;date&amp;quot;, Date</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Date"/>
        </return-types>
        <description>If this is a version 1 UUID (a time-based UUID), this method returns the timestamp value encoded in the UUID.  The caller can ask for the timestamp to be returned either as a JavaScript Date object or as a 15-character string of hex digits.</description>
      </method>
      <method scope="static" name="generateRandomUuid">
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>This function generates random UUIDs, meaning &amp;quot;version 4&amp;quot; UUIDs.</description>
      </method>
      <method scope="static" name="generateTimeBasedUuid">
        <parameters>
          <parameter name="node" type="String" usage="optional">
            <description>A 12-character hex string representing either a pseudo-node or hardware-node (an IEEE 802.3 network node).  A hardware-node will be something like &amp;quot;017bf397618a&amp;quot;, always with the first bit being 0.  A pseudo-node will be something like &amp;quot;f17bf397618a&amp;quot;, always with the first bit being 1. examples: string = dojox.uuid.generateTimeBasedUuid(); string = dojox.uuid.generateTimeBasedUuid(&amp;quot;017bf397618a&amp;quot;); dojox.uuid.generateTimeBasedUuid.setNode(&amp;quot;017bf397618a&amp;quot;); string = dojox.uuid.generateTimeBasedUuid(); // the generated UUID has node == &amp;quot;017bf397618a&amp;quot;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>This function generates time-based UUIDs, meaning &amp;quot;version 1&amp;quot; UUIDs.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.uuid.generateTimeBasedUuid._generator" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="GREGORIAN_CHANGE_OFFSET_IN_HOURS"/>
    </properties>
    <methods>
      <method scope="instance" name="generateUuidString">
        <parameters>
          <parameter name="node" type="String" usage="optional">
            <description>An optional 12-character string to use as the node in the new UUID.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Generates a time-based UUID, meaning a version 1 UUID.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.uuid.Uuid" superclass="Object">
    <description>This is the constructor for the Uuid class.  The Uuid class offers methods for inspecting existing UUIDs.</description>
    <constructors>
      <constructor scope="instance">
        <description>This is the constructor for the Uuid class.  The Uuid class offers methods for inspecting existing UUIDs.</description>
        <parameters>
          <parameter name="input" type="String" usage="optional">
            <description>A 36-character string that conforms to the UUID spec. examples: var uuid; uuid = new dojox.uuid.Uuid(&amp;quot;3b12f1df-5232-4804-897e-917bf397618a&amp;quot;); uuid = new dojox.uuid.Uuid(); // &amp;quot;00000000-0000-0000-0000-000000000000&amp;quot; uuid = new dojox.uuid.Uuid(dojox.uuid.generateRandomUuid()); uuid = new dojox.uuid.Uuid(dojox.uuid.generateTimeBasedUuid()); dojox.uuid.Uuid.setGenerator(dojox.uuid.generateRandomUuid); uuid = new dojox.uuid.Uuid(); dojox.uuid.assert(!uuid.isEqual(dojox.uuid.NIL_UUID));</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_nodeString" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_timestampAsDate" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_timestampAsHexString" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_uuidString" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_versionNumber" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="compare">
        <parameters>
          <parameter name="uuidOne" type="dojox.uuid.Uuid" usage="required">
            <description>Any object that has toString() method that returns a 36-character string that conforms to the UUID spec.</description>
          </parameter>
          <parameter name="uuidTwo" type="dojox.uuid.Uuid" usage="required">
            <description>Any object that has toString() method that returns a 36-character string that conforms to the UUID spec.</description>
          </parameter>
          <parameter name="otherUuid" type="dojox.uuid.Uuid" usage="required">
            <description>Any object that has toString() method that returns a 36-character string that conforms to the UUID spec.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Compares this UUID to another UUID, and returns 0, 1, or -1.</description>
      </method>
      <method scope="instance" name="getNode">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>If this is a version 1 UUID (a time-based UUID), getNode() returns a 12-character string with the &amp;quot;node&amp;quot; or &amp;quot;pseudonode&amp;quot; portion of the UUID, which is the rightmost 12 characters.</description>
      </method>
      <method scope="instance" name="getTimestamp">
        <parameters>
          <parameter name="returnType" type="String" usage="optional">
            <description>Any of these five values: &amp;quot;string&amp;quot;, String, &amp;quot;hex&amp;quot;, &amp;quot;date&amp;quot;, Date</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Date"/>
        </return-types>
        <description>If this is a version 1 UUID (a time-based UUID), this method returns the timestamp value encoded in the UUID.  The caller can ask for the timestamp to be returned either as a JavaScript Date object or as a 15-character string of hex digits.</description>
      </method>
      <method scope="instance" name="getVariant">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns a variant code that indicates what type of UUID this is. Returns one of the enumerated dojox.uuid.variant values.</description>
      </method>
      <method scope="instance" name="getVersion">
        <return-types>
          <return-type type="dojox.uuid.version"/>
        </return-types>
        <description>Returns a version number that indicates what type of UUID this is. Returns one of the enumerated dojox.uuid.version values.</description>
      </method>
      <method scope="instance" name="isEqual">
        <parameters>
          <parameter name="otherUuid" type="dojox.uuid.Uuid" usage="required">
            <description>Any object that has toString() method that returns a 36-character string that conforms to the UUID spec.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Returns true if this UUID is equal to the otherUuid, or false otherwise.</description>
      </method>
      <method scope="instance" name="isValid">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns true if the UUID was initialized with a valid value.</description>
      </method>
      <method scope="instance" name="toString">
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>This method returns a standard 36-character string representing the UUID, such as &amp;quot;3b12f1df-5232-4804-897e-917bf397618a&amp;quot;.</description>
      </method>
      <method scope="static" name="setGenerator">
        <parameters>
          <parameter name="generator" type="Function" usage="optional">
            <description>A UUID generator function, such as dojox.uuid.generateTimeBasedUuid.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets the default generator, which will be used by the &amp;quot;new dojox.uuid.Uuid()&amp;quot; constructor if no parameters are passed in.</description>
      </method>
      <method scope="static" name="getGenerator">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns the default generator.  See setGenerator().</description>
      </method>
    </methods>
  </class>
  <class type="dojox.validate" superclass="Object">
    <description>Additional input validation methods</description>
    <properties>
      <property type="Object" access="read-write" scope="static" name="creditCard"/>
      <property type="Object" access="read-write" scope="static" name="_isInRangeCache" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_base" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="isbn"/>
      <property type="Object" access="read-write" scope="static" name="regexp"/>
      <property type="Object" access="read-write" scope="static" name="web"/>
    </properties>
    <methods>
      <method scope="static" name="isText">
        <parameters>
          <parameter name="value" type="String" usage="required">
            <description>A string</description>
          </parameter>
          <parameter name="flags" type="Object" usage="optional">
            <description>maxlength  If set, checks if there are at most flags.maxlength number of characters.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Checks if a string has non whitespace characters. Parameters allow you to constrain the length.</description>
      </method>
      <method scope="static" name="isInRange">
        <parameters>
          <parameter name="value" type="String" usage="required">
            <description>A string</description>
          </parameter>
          <parameter name="flags" type="Object" usage="optional">
            <description>decimal  The character used for the decimal point.  Default is &amp;quot;.&amp;quot;.  fixes ticket #2908</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Validates whether a string denoting an integer, real number, or monetary value is between a max and min.</description>
      </method>
      <method scope="static" name="isNumberFormat">
        <parameters>
          <parameter name="value" type="String" usage="required">
            <description>A string</description>
          </parameter>
          <parameter name="flags" type="Object" usage="optional">
            <description>format  A string or an Array of strings for multiple formats.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Validates any sort of number based format</description>
      </method>
      <method scope="static" name="isValidLuhn">
        <parameters>
          <parameter name="value" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Compares value against the Luhn algorithm to verify its integrity</description>
      </method>
      <method scope="static" name="check">
        <parameters>
          <parameter name="form" type="HTMLFormElement" usage="required">
            <description>form to be validated</description>
          </parameter>
          <parameter name="profile" type="Object" usage="required">
            <description>specifies how the form fields are to be validated {trim:Array, uppercase:Array, lowercase:Array, ucfirst:Array, digit:Array, required:Array, dependencies:Object, constraints:Object, confirm:Object}</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>validates user input of an HTML form based on input profile</description>
      </method>
      <method scope="static" name="evaluateConstraint">
        <parameters>
          <parameter name="profile" type="The" usage="required">
            <description>dojo.validate.check() profile that this evaluation is against.</description>
          </parameter>
          <parameter name="constraint" type="Array" usage="required">
            <description>The single [] array of function and arguments for the function.</description>
          </parameter>
          <parameter name="fieldName" type="The" usage="required">
            <description>form dom name of the field being validated.</description>
          </parameter>
          <parameter name="elem" type="The" usage="required">
            <description>form element field.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Evaluates dojo.validate.check() constraints that are specified as array arguments</description>
      </method>
      <method scope="static" name="isValidCreditCard">
        <parameters>
          <parameter name="value" type="String|Number" usage="required"/>
          <parameter name="ccType" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="static" name="isValidCreditCardNumber">
        <parameters>
          <parameter name="value" type="String|Number" usage="required">
            <description>Boolean CC #, white spaces and dashes are ignored</description>
          </parameter>
          <parameter name="ccType" type="String" usage="optional">
            <description>one of the values in cardinfo -- if Omitted it it returns a | delimited string of matching card types, or false if no matches found</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
          <return-type type="String"/>
          <return-type type="Boolean"/>
        </return-types>
        <description>checks if value matches the pattern for that card or any card types if none is specified</description>
      </method>
      <method scope="static" name="isValidCvv">
        <parameters>
          <parameter name="value" type="String|Number" usage="required"/>
          <parameter name="ccType" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
      </method>
      <method scope="static" name="isValidIsbn">
        <parameters>
          <parameter name="value" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Vadlidate ISBN-10 or ISBN-13 based on the length of value</description>
      </method>
      <method scope="static" name="isIpAddress">
        <parameters>
          <parameter name="value" type="String" usage="required">
            <description>A string.</description>
          </parameter>
          <parameter name="flags" type="Object" usage="optional">
            <description>allowHybrid   IPv6 address written as six groups of four hexadecimal digits followed by the usual 4 dotted decimal digit notation of IPv4. x:x:x:x:x:x:d.d.d.d</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Validates an IP address</description>
      </method>
      <method scope="static" name="isUrl">
        <parameters>
          <parameter name="value" type="String" usage="required">
            <description>A string</description>
          </parameter>
          <parameter name="flags" type="Object" usage="optional">
            <description>in regexp.tld can be applied.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Checks if a string could be a valid URL</description>
      </method>
      <method scope="static" name="isEmailAddress">
        <parameters>
          <parameter name="value" type="String" usage="required">
            <description>A string</description>
          </parameter>
          <parameter name="flags" type="Object" usage="optional">
            <description>in regexp.tld can be applied.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Checks if a string could be a valid email address</description>
      </method>
      <method scope="static" name="isEmailAddressList">
        <parameters>
          <parameter name="value" type="String" usage="required">
            <description>A string.</description>
          </parameter>
          <parameter name="flags" type="Object" usage="optional">
            <description>in regexp.tld can be applied.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Checks if a string could be a valid email address list.</description>
      </method>
      <method scope="static" name="getEmailAddressList">
        <parameters>
          <parameter name="value" type="String" usage="required">
            <description>A string</description>
          </parameter>
          <parameter name="flags" type="Object" usage="optional">
            <description>An object (same as dojo.validate.isEmailAddressList)</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Check if value is an email address list. If an empty list is returned, the value didn't pass the test or it was empty.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.validate.ca" superclass="Object">
    <description>Methods specific to the Canadian provinces</description>
    <methods>
      <method scope="static" name="isPhoneNumber">
        <parameters>
          <parameter name="value" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Validates 10 Canadian digit phone number for several common formats</description>
      </method>
      <method scope="static" name="isProvince">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Validates Canadian province abbreviations (2 chars)</description>
      </method>
      <method scope="static" name="isSocialInsuranceNumber">
        <parameters>
          <parameter name="value" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Validates Canadian 9 digit social insurance number for several common formats This routine only pattern matches and does not use the Luhn Algorithm to validate number.</description>
      </method>
      <method scope="static" name="isPostalCode">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Validates Canadian 6 digit postal code: Canadian postal codes are in the format ANA NAN, where A is a letter and N is a digit, with a space separating the third and fourth characters.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.validate.us" superclass="Object">
    <methods>
      <method scope="static" name="isState">
        <parameters>
          <parameter name="value" type="String" usage="required">
            <description>A two character string</description>
          </parameter>
          <parameter name="flags" type="Object" usage="optional">
            <description>allowMilitary  Allow military 'states', e.g. Armed Forces Europe (AE).  Default is true.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Validates US state and territory abbreviations.</description>
      </method>
      <method scope="static" name="isPhoneNumber">
        <parameters>
          <parameter name="value" type="String" usage="required">
            <description>The telephone number string</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Validates 10 US digit phone number for several common formats</description>
      </method>
      <method scope="static" name="isSocialSecurityNumber">
        <parameters>
          <parameter name="value" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Validates social security number</description>
      </method>
      <method scope="static" name="isZipCode">
        <parameters>
          <parameter name="value" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Validates U.S. zip-code</description>
      </method>
    </methods>
  </class>
  <class type="dojox.VirtualGrid" superclass="dijit._Widget dijit._Templated">
    <description>A grid widget with virtual scrolling, cell editing, complex rows, sorting, fixed columns, sizeable columns, etc.</description>
    <constructors>
      <constructor scope="instance">
        <description>A grid widget with virtual scrolling, cell editing, complex rows, sorting, fixed columns, sizeable columns, etc.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <mixins scope="static">
      <mixin scope="static" type="dojox.grid.publicEvents"/>
    </mixins>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="delayScroll"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.onReveal"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.onSizeChange"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.parentNode"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.style.height"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.style.width"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.tabIndex"/>
      <property type="Object" access="read-write" scope="instance" name="edit"/>
      <property type="Object" access="read-write" scope="instance" name="fitTo"/>
      <property type="Object" access="read-write" scope="instance" name="focus"/>
      <property type="Object" access="read-write" scope="instance" name="invalidated"/>
      <property type="Object" access="read-write" scope="instance" name="invalidated.all"/>
      <property type="Object" access="read-write" scope="instance" name="invalidated.rowCount"/>
      <property type="Number" access="read-write" scope="instance" name="keepRows">
        <description>Number of rows to keep in the rendering cache.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="lastScrollTop"/>
      <property type="Object" access="read-write" scope="instance" name="layout"/>
      <property type="settings" access="read-write" scope="instance" name="rowCount">
        <description>Integer Number of rows to display.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="rows"/>
      <property type="Object" access="read-write" scope="instance" name="scroller"/>
      <property type="Object" access="read-write" scope="instance" name="scroller.defaultRowHeight"/>
      <property type="Object" access="read-write" scope="instance" name="scroller.removeRow"/>
      <property type="Object" access="read-write" scope="instance" name="scroller.renderRow"/>
      <property type="Object" access="read-write" scope="instance" name="scroller.windowHeight"/>
      <property type="Object" access="read-write" scope="instance" name="scroller._pageIdPrefix" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="scrollTop"/>
      <property type="Object" access="read-write" scope="instance" name="selection"/>
      <property type="Object" access="read-write" scope="instance" name="sortInfo"/>
      <property type="Object|String" access="read-write" scope="instance" name="structure">
        <description>View layout defintion. Can be set to a layout object, or to the (string) name of a layout object.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="update"/>
      <property type="Object" access="read-write" scope="instance" name="updating"/>
      <property type="Object" access="read-write" scope="instance" name="views"/>
      <property type="Object" access="read-write" scope="instance" name="views.createView"/>
      <property type="Object" access="read-write" scope="instance" name="viewsHeaderNode.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="viewsNode.style.height"/>
      <property type="Object" access="read-write" scope="instance" name="_click" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_padBorder" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_sizeBox" visibility="internal"/>
      <property type="Boolean" access="read-write" scope="instance" name="autoHeight">
        <description>If autoHeight is true, grid height is automatically set to fit the data.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="autoRender">
        <description>If autoRender is true, grid will render itself after initialization.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="autoWidth">
        <description>If autoWidth is true, grid width is automatically set to fit the data.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="classTag">
        <description>CSS class applied to the grid's domNode</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="defaultHeight">
        <description>default height of the grid, measured in any valid css unit.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="delayScroll"/>
      <property type="Number" access="read-write" scope="instance" name="elasticView">
        <description>Override defaults and make the indexed grid view elastic, thus filling available horizontal space.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="fastScroll">
        <description>flag modifies vertical scrolling behavior. Defaults to true but set to false for slower scroll performance but more immediate scrolling feedback</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="invalidated"/>
      <property type="Number" access="read-write" scope="instance" name="keepRows">
        <description>Number of rows to keep in the rendering cache.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="render"/>
      <property type="settings" access="read-write" scope="instance" name="rowCount">
        <description>Integer Number of rows to display.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="rowsPerPage">
        <description>Number of rows to render at a time.</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="scrollRedrawThreshold">
        <description>pixel distance a user must scroll vertically to trigger grid scrolling.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="singleClickEdit">
        <description>Single-click starts editing. Default is double-click</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="sortInfo"/>
      <property type="Object|String" access="read-write" scope="instance" name="structure">
        <description>View layout defintion. Can be set to a layout object, or to the (string) name of a layout object.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Object" access="read-write" scope="instance" name="themeable"/>
      <property type="Object" access="read-write" scope="instance" name="update"/>
      <property type="Object" access="read-write" scope="instance" name="updating"/>
      <property type="Object" access="read-write" scope="instance" name="_click" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="get">
        <parameters>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>Row for which to provide data</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Default data getter.</description>
      </method>
      <method scope="instance" name="styleChanged">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="adaptHeight">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="adaptWidth">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="addRow">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Add a row to the grid.</description>
      </method>
      <method scope="instance" name="beginUpdate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Use to make multiple changes to rows while queueing row updating. NOTE: not currently supporting nested begin/endUpdate calls</description>
      </method>
      <method scope="instance" name="buildRendering">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="buildViews">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="canSort">
        <parameters>
          <parameter name="inSortInfo" type="Number" usage="required">
            <description>Sort information, 1-based index of column on which to sort, positive for an ascending sort and negative for a descending sort</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Determines if the grid can be sorted</description>
      </method>
      <method scope="instance" name="createLayout">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Creates a new Grid layout</description>
      </method>
      <method scope="instance" name="createManagers">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>create grid managers for various tasks including rows, focus, selection, editing  row manager</description>
      </method>
      <method scope="instance" name="createScroller">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Creates a new virtual scroller</description>
      </method>
      <method scope="instance" name="createView">
        <parameters>
          <parameter name="inClass" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="createViews">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="defaultUpdate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="dispatchContentEvent">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="dispatchHeaderEvent">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="dispatchKeyEvent">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="doApplyCellEdit">
        <parameters>
          <parameter name="inValue" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inFieldIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="doApplyEdit">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="doCancelEdit">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="doclick">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="docontextmenu">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="dodblclick">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="doheaderclick">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="doheadercontextmenu">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="doheaderdblclick">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="dokeydown">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="doKeyEvent">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="doStartEdit">
        <parameters>
          <parameter name="inCell" type="Object" usage="required"/>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="endUpdate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Use after calling beginUpdate to render any changes made to rows.</description>
      </method>
      <method scope="instance" name="finishScrollJob">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="get">
        <parameters>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>Row for which to provide data</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Default data getter.</description>
      </method>
      <method scope="instance" name="getCell">
        <parameters>
          <parameter name="inIndex" type="Number" usage="required">
            <description>Grid column index of cell to retrieve</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Retrieves the cell object for a given grid column.</description>
      </method>
      <method scope="instance" name="getCellName">
        <parameters>
          <parameter name="inCell" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Returns the cell name of a passed cell</description>
      </method>
      <method scope="instance" name="getSortAsc">
        <parameters>
          <parameter name="inSortInfo" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Returns true if grid is sorted in an ascending direction.</description>
      </method>
      <method scope="instance" name="getSortIndex">
        <parameters>
          <parameter name="inSortInfo" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Returns the index of the column on which the grid is sorted</description>
      </method>
      <method scope="instance" name="hasLayout">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postrender">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postresize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="prerender">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="removeSelectedRows">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Remove the selected rows from the grid.</description>
      </method>
      <method scope="instance" name="renderOnIdle">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="renderRow">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inNodes" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>private, used internally to render rows</description>
      </method>
      <method scope="instance" name="resize">
        <parameters>
          <parameter name="sizeBox" type="Object" usage="optional">
            <description>{w: int, h: int, l: int, t: int}  FIXME: If grid is not sized explicitly, sometimes bogus scrollbars can appear in our container, which may require an extra call to 'resize' to sort out.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Update the grid's rendering dimensions and resize it</description>
      </method>
      <method scope="instance" name="rowHeightChanged">
        <parameters>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>index of the row that has changed height</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Update grid when the height of a row has changed. Row height is handled automatically as rows are rendered. Use this function only to update a row's height outside the normal rendering process.</description>
      </method>
      <method scope="instance" name="rowRemoved">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>private, used internally to remove rows</description>
      </method>
      <method scope="instance" name="scrollTo">
        <parameters>
          <parameter name="inTop" type="Number" usage="required">
            <description>vertical position of the grid in pixels</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Vertically scroll the grid to a given pixel position</description>
      </method>
      <method scope="instance" name="scrollToRow">
        <parameters>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>grid row index</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Scroll the grid to a specific row.</description>
      </method>
      <method scope="instance" name="setCellWidth">
        <parameters>
          <parameter name="inIndex" type="Object" usage="required"/>
          <parameter name="inUnitWidth" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setScrollTop">
        <parameters>
          <parameter name="inTop" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setSortIndex">
        <parameters>
          <parameter name="inIndex" type="Number" usage="required">
            <description>Column index on which to sort.</description>
          </parameter>
          <parameter name="inAsc" type="Boolean" usage="required">
            <description>If true, sort the grid in ascending order, otherwise in descending order</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sort the grid on a column in a specified direction</description>
      </method>
      <method scope="instance" name="setSortInfo">
        <parameters>
          <parameter name="inSortInfo" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setStructure">
        <parameters>
          <parameter name="inStructure" type="Object" usage="required">
            <description>Structure object defines the grid layout and provides various options for grid views and columns</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Install a new structure and rebuild the grid.</description>
      </method>
      <method scope="instance" name="sizeChange">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="sort">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="styleChanged">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="styleRowNode">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
          <parameter name="inRowNode" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="textSizeChanged">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="updateRow">
        <parameters>
          <parameter name="inRowIndex" type="Number" usage="required">
            <description>Index of the row to render</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Render a single row.</description>
      </method>
      <method scope="instance" name="updateRowCount">
        <parameters>
          <parameter name="inRowCount" type="Number" usage="required">
            <description>Number of rows in the grid.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Change the number of rows.</description>
      </method>
      <method scope="instance" name="updateRowStyles">
        <parameters>
          <parameter name="inRowIndex" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Update the styles for a row after it's state has changed.</description>
      </method>
      <method scope="instance" name="_dispatch" visibility="internal">
        <parameters>
          <parameter name="m" type="Object" usage="required"/>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getPadBorder" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_resize" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_structureChanged" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_styleChanged" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_textSizeChanged" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.widget" superclass="Object">
    <description>A Collection of un-categorized widgets, or code not requiring it's own package.</description>
    <properties>
      <property type="Object" access="read-write" scope="static" name="Wizard"/>
      <property type="Object" access="read-write" scope="static" name="nls"/>
    </properties>
  </class>
  <class type="dojox.widget.ColorPicker" superclass="dijit.form._FormWidget">
    <description>a HSV color picker - like PhotoShop</description>
    <constructors>
      <constructor scope="instance">
        <description>a HSV color picker - like PhotoShop</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="Bval.value"/>
      <property type="Object" access="read-write" scope="instance" name="colorUnderlay.src"/>
      <property type="Object" access="read-write" scope="instance" name="colorUnderlay.style.filter"/>
      <property type="Object" access="read-write" scope="instance" name="Gval.value"/>
      <property type="Object" access="read-write" scope="instance" name="hexCode.value"/>
      <property type="Object" access="read-write" scope="instance" name="hexNode.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="hsvNode.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="Hval.value"/>
      <property type="Object" access="read-write" scope="instance" name="previewNode.style.backgroundColor"/>
      <property type="Object" access="read-write" scope="instance" name="rgbNode.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="Rval.value"/>
      <property type="Object" access="read-write" scope="instance" name="safePreviewNode.style.backgroundColor"/>
      <property type="Object" access="read-write" scope="instance" name="safePreviewNode.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="Sval.value"/>
      <property type="Object" access="read-write" scope="instance" name="value"/>
      <property type="Object" access="read-write" scope="instance" name="Vval.value"/>
      <property type="Object" access="read-write" scope="instance" name="_hueMover" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_hueSc" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_mover" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_offset" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_sc" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_timer" visibility="internal"/>
      <property type="Boolean" access="read-write" scope="instance" name="animatePoint">
        <description>toggle to use slideTo (true) or just place the cursor (false) on click</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="showHex">
        <description>show/update Hex value field</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="showHsv">
        <description>show/update HSV input nodes</description>
      </property>
      <property type="false" access="read-write" scope="instance" name="showRgb">
        <description>});  markup: &amp;lt;div dojoType=&amp;quot;dojox.widget.ColorPicker&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="slideDuration">
        <description>time in ms picker node will slide to next location (non-dragging) when animatePoint=true</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Boolean" access="read-write" scope="instance" name="webSafe">
        <description>deprecated? or just use a toggle to show/hide that node, too?</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_underlay" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>As quickly as we can, set up ie6 alpha-filter support for our underlay.  we don't do image handles (done in css), just the 'core' of this widget: the underlay.</description>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>defer all additional calls until we're started, and our embeded sliders are loaded? (not implemented yet)</description>
      </method>
      <method scope="instance" name="_clearTimer" visibility="internal">
        <parameters>
          <parameter name="mover" type="dojo.dnd.Mover" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_hsv2rgb" visibility="internal">
        <parameters>
          <parameter name="h" type="Number|Array" usage="required"/>
          <parameter name="s" type="Number" usage="required"/>
          <parameter name="v" type="Number" usage="required"/>
          <parameter name="options" type="Object" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>converts an HSV value set to RGB, ranges depending on optional options object. patch for options by Matthew Eernisse</description>
      </method>
      <method scope="instance" name="_setHue" visibility="internal">
        <parameters>
          <parameter name="h" type="Number" usage="required">
            <description>0..255</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sets a natural color background for the underlay image against closest hue value (full saturation)</description>
      </method>
      <method scope="instance" name="_setHuePoint" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set the hue picker handle on relative y coordinates</description>
      </method>
      <method scope="instance" name="_setPoint" visibility="internal">
        <parameters>
          <parameter name="evt" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set our picker point based on relative x/y coordinates</description>
      </method>
      <method scope="instance" name="_setTimer" visibility="internal">
        <parameters>
          <parameter name="mover" type="dojo.dnd.Mover" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_updateColor" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>update the previewNode color, and input values [optional]</description>
      </method>
    </methods>
  </class>
  <class type="dojox.widget.FileInput" superclass="dijit.form._FormWidget">
    <description>A styled input type=&amp;quot;file&amp;quot;</description>
    <constructors>
      <constructor scope="instance">
        <description>A styled input type=&amp;quot;file&amp;quot;</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="cancelNode.style.visibility"/>
      <property type="Object" access="read-write" scope="instance" name="fileInput"/>
      <property type="Object" access="read-write" scope="instance" name="inputNode.value"/>
      <property type="Object" access="read-write" scope="instance" name="titleNode.innerHTML"/>
      <property type="Object" access="read-write" scope="instance" name="_keyListener" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_listener" visibility="internal"/>
      <property type="String" access="read-write" scope="instance" name="cancelText">
        <description>the title of the &amp;quot;Cancel&amp;quot; button</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="label"/>
      <property type="String" access="read-write" scope="instance" name="name">
        <description>ugh, this should be pulled from this.domNode</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
    </properties>
    <methods>
      <method scope="instance" name="setLabel">
        <parameters>
          <parameter name="label" type="String" usage="required"/>
          <parameter name="cssClass" type="String" usage="optional"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>method to allow use to change button label</description>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>listen for changes on our real file input</description>
      </method>
      <method scope="instance" name="_matchValue" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set the content of the upper input based on the semi-hidden file input</description>
      </method>
      <method scope="instance" name="_onClick" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>on click of cancel button, since we can't clear the input because of security reasons, we destroy it, and add a new one in it's place.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.widget.FileInputAuto" superclass="dojox.widget.FileInput">
    <description>An extension on dojox.widget.FileInput providing background upload progress</description>
    <constructors>
      <constructor scope="instance">
        <description>An extension on dojox.widget.FileInput providing background upload progress</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="fakeNodeHolder.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="fileInput.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="overlay.innerHTML"/>
      <property type="Object" access="read-write" scope="instance" name="overlay.style.backgroundImage"/>
      <property type="Object" access="read-write" scope="instance" name="_blurListener" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_blurTimer" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_focusListener" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_sent" visibility="internal"/>
      <property type="Number" access="read-write" scope="instance" name="blurDelay">
        <description>time in ms before an un-focused widget will wait before uploading the file to the url=&amp;quot;&amp;quot; specified default: 2 seconds</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="duration">
        <description>The time in ms to use as the generic timing mechanism for the animations set to 1 or 0 for &amp;quot;immediate respose&amp;quot;</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="String" access="read-write" scope="instance" name="uploadMessage">
        <description>FIXME: i18n somehow?</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="url"/>
      <property type="Object" access="read-write" scope="instance" name="_sent" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="onComplete">
        <parameters>
          <parameter name="data" type="the" usage="required">
            <description>raw data found in the first [TEXTAREA] tag of the post url</description>
          </parameter>
          <parameter name="ioArgs" type="the" usage="required">
            <description>dojo.Deferred data being passed from the handle: callback</description>
          </parameter>
          <parameter name="widgetRef" type="this" usage="required">
            <description>widget pointer, so you can set this.overlay to a completed/error message easily</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>stub function fired when an upload has finished.</description>
      </method>
      <method scope="instance" name="setMessage">
        <parameters>
          <parameter name="title" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set the text of the progressbar  FIXME: this throws errors in IE?!?!?!? egads.</description>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>add our extra blur listeners</description>
      </method>
      <method scope="instance" name="_handleSend" visibility="internal">
        <parameters>
          <parameter name="data" type="Object" usage="required"/>
          <parameter name="ioArgs" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>The callback to toggle the progressbar, and fire the user-defined callback</description>
      </method>
      <method scope="instance" name="_onBlur" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>start the upload timer</description>
      </method>
      <method scope="instance" name="_onClick" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>accomodate our extra focusListeners</description>
      </method>
      <method scope="instance" name="_onFocus" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>clear the upload timer</description>
      </method>
      <method scope="instance" name="_sendFile" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>triggers the chain of events needed to upload a file in the background.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.widget.FileInputBlind" superclass="dojox.widget.FileInputAuto">
    <description>An extended version of dojox.widget.FileInputAuto that does not display an input node, but rather only a button and otherwise behaves just like FileInputAuto</description>
    <constructors>
      <constructor scope="instance">
        <description>An extended version of dojox.widget.FileInputAuto that does not display an input node, but rather only a button and otherwise behaves just like FileInputAuto</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="inputNode.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="_off" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>hide our fileInput input field</description>
      </method>
      <method scope="instance" name="_fixPosition" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>in this case, set the button under where the visible button is</description>
      </method>
      <method scope="instance" name="_onClick" visibility="internal">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>onclick, we need to reposition our newly created input type=&amp;quot;file&amp;quot;</description>
      </method>
    </methods>
  </class>
  <class type="dojox.widget.FisheyeList" superclass="dijit._Widget dijit._Container dijit._Templated">
    <description>Menu similar to the fish eye menu on the Mac OS</description>
    <constructors>
      <constructor scope="instance">
        <description>Menu similar to the fish eye menu on the Mac OS</description>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="anchorEdge"/>
      <property type="Object" access="read-write" scope="instance" name="barHeight"/>
      <property type="Object" access="read-write" scope="instance" name="barWidth"/>
      <property type="Object" access="read-write" scope="instance" name="children"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.style.height"/>
      <property type="Object" access="read-write" scope="instance" name="domNode.style.width"/>
      <property type="Object" access="read-write" scope="instance" name="hitX1"/>
      <property type="Object" access="read-write" scope="instance" name="hitX2"/>
      <property type="Object" access="read-write" scope="instance" name="hitY1"/>
      <property type="Object" access="read-write" scope="instance" name="hitY2"/>
      <property type="Object" access="read-write" scope="instance" name="isHorizontal"/>
      <property type="Object" access="read-write" scope="instance" name="isOver"/>
      <property type="Object" access="read-write" scope="instance" name="itemCount"/>
      <property type="String" access="read-write" scope="instance" name="labelEdge">
        <description>controls were the labels show up in relation to the menu item icons values &amp;quot;center&amp;quot;, &amp;quot;left&amp;quot;, &amp;quot;right&amp;quot;, &amp;quot;top&amp;quot;, &amp;quot;bottom&amp;quot;.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="pos"/>
      <property type="Object" access="read-write" scope="instance" name="proximityBottom"/>
      <property type="Object" access="read-write" scope="instance" name="proximityLeft"/>
      <property type="Object" access="read-write" scope="instance" name="proximityRight"/>
      <property type="Object" access="read-write" scope="instance" name="proximityTop"/>
      <property type="Object" access="read-write" scope="instance" name="selectedNode"/>
      <property type="Object" access="read-write" scope="instance" name="timerScale"/>
      <property type="Object" access="read-write" scope="instance" name="totalHeight"/>
      <property type="Object" access="read-write" scope="instance" name="totalWidth"/>
      <property type="Object" access="read-write" scope="instance" name="_addChildHandle" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_onMouseMoveHandle" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_onMouseOutHandle" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_onResizeHandle" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_onScrollHandle" visibility="internal"/>
      <property type="String" access="read-write" scope="instance" name="attachEdge">
        <description>controls the border that the menu items don't expand past; for example, if set to &amp;quot;top&amp;quot;, then the menu items will drop downwards as they expand. values &amp;quot;center&amp;quot;, &amp;quot;left&amp;quot;, &amp;quot;right&amp;quot;, &amp;quot;top&amp;quot;, &amp;quot;bottom&amp;quot;.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="conservativeTrigger">
        <description>if true, don't start enlarging menu items until mouse is over an image; if false, start enlarging menu items as the mouse moves near them.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="EDGE"/>
      <property type="Number" access="read-write" scope="instance" name="effectUnits">
        <description>controls how much reaction the menu makes, relative to the distance of the mouse from the menu</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="imgNode"/>
      <property type="Boolean" access="read-write" scope="instance" name="isFixed">
        <description>toggle to enable additional listener (window scroll) if FisheyeList is in a fixed postion</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="itemHeight">
        <description>height of menu item (in pixels) in it's dormant state (when the mouse is far away)</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="itemMaxHeight">
        <description>height of menu item (in pixels) in it's fully enlarged state (when the mouse is directly over it)</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="itemMaxWidth">
        <description>width of menu item (in pixels) in it's fully enlarged state (when the mouse is directly over it)</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="itemPadding">
        <description>padding (in pixels) betweeen each menu item</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="itemWidth">
        <description>width of menu item (in pixels) in it's dormant state (when the mouse is far away)</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="labelEdge">
        <description>controls were the labels show up in relation to the menu item icons values &amp;quot;center&amp;quot;, &amp;quot;left&amp;quot;, &amp;quot;right&amp;quot;, &amp;quot;top&amp;quot;, &amp;quot;bottom&amp;quot;.</description>
      </property>
      <property type="of" access="read-write" scope="instance" name="orientation">
        <description>the menu, either &amp;quot;horizontal&amp;quot; or &amp;quot;vertical&amp;quot;</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="snarfChildDomOutput"/>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
    </properties>
    <methods>
      <method scope="instance" name="destroyRecursive">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onResized">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>create our connections and setup our FisheyeList</description>
      </method>
      <method scope="instance" name="_calcHitGrid" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_expandSlowly" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>slowly expand the image to user specified max size</description>
      </method>
      <method scope="instance" name="_initializePositioning" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onBodyOut" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onGridMouseMove" visibility="internal">
        <parameters>
          <parameter name="x" type="Object" usage="required"/>
          <parameter name="y" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called when mouse is moved in the vicinity of the menu</description>
      </method>
      <method scope="instance" name="_onMouseMove" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called when mouse is moved</description>
      </method>
      <method scope="instance" name="_onScroll" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_overElement" visibility="internal">
        <parameters>
          <parameter name="node" type="DomNode|String" usage="required"/>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Returns whether the mouse is over the passed element. Node: Must must be display:block (ie, not a &amp;lt;span&amp;gt;)</description>
      </method>
      <method scope="instance" name="_paint" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_positionElementsFrom" visibility="internal">
        <parameters>
          <parameter name="p" type="Object" usage="required"/>
          <parameter name="offset" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_positionLabel" visibility="internal">
        <parameters>
          <parameter name="itm" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setActive" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called when mouse is moved into menu's range</description>
      </method>
      <method scope="instance" name="_setDormant" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>called when mouse moves out of menu's range</description>
      </method>
      <method scope="instance" name="_setItemSize" visibility="internal">
        <parameters>
          <parameter name="p" type="Object" usage="required"/>
          <parameter name="scale" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_toEdge" visibility="internal">
        <parameters>
          <parameter name="inp" type="Object" usage="required"/>
          <parameter name="def" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_weighAt" visibility="internal">
        <parameters>
          <parameter name="cen" type="Number" usage="required"/>
          <parameter name="i" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.widget.FisheyeListItem" superclass="dijit._Widget dijit._Contained dijit._Templated">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="imgNode.src"/>
      <property type="Object" access="read-write" scope="instance" name="imgNode.style.filter"/>
      <property type="Object" access="read-write" scope="instance" name="parent"/>
      <property type="Object" access="read-write" scope="instance" name="iconSrc"/>
      <property type="String" access="read-write" scope="instance" name="id">
        <description>will be set to the id of the orginal div element</description>
      </property>
      <property type="to" access="read-write" scope="instance" name="label">
        <description>print next to the icon, when it is moused-over</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
      <property type="Object" access="read-write" scope="instance" name="_blankImgPath" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="onClick">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>user overridable callback when user clicks this menu item</description>
      </method>
      <method scope="instance" name="onMouseOut">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>callback when user moves mouse off of this menu item</description>
      </method>
      <method scope="instance" name="onMouseOver">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>callback when user moves mouse over this menu item in conservative mode, don't activate the menu until user mouses over an icon</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_hasParent" visibility="internal">
        <parameters>
          <parameter name="node" type="Node" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
      </method>
      <method scope="instance" name="_isNode" visibility="internal">
        <parameters>
          <parameter name="wh" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>checks to see if wh is actually a node.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.widget.FisheyeLite" superclass="dijit._Widget">
    <description>A Light-weight Fisheye Component, or an exhanced version of dojo.fx.Toggler ...</description>
    <constructors>
      <constructor scope="instance">
        <description>A Light-weight Fisheye Component, or an exhanced version of dojo.fx.Toggler ...</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_runningIn" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_runningOut" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_target" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="durationIn"/>
      <property type="Number" access="read-write" scope="instance" name="durationOut">
        <description>The Time (in ms) to run the hide animation</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="properties">
        <description>but was trying to shorthand the logic there</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="unit">
        <description>Sometimes, you need to specify a unit. Should be part of</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="easeIn">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>An easing function to use for the show animation</description>
      </method>
      <method scope="instance" name="easeOut">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>An easing function to use for the hide animation</description>
      </method>
      <method scope="instance" name="hide">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Hide this fisheye item on mouse leave</description>
      </method>
      <method scope="instance" name="onClick">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>stub function fired when target is clicked connect or override to use.</description>
      </method>
      <method scope="instance" name="onSelected">
        <parameters>
          <parameter name="e" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>stub function fired when Fisheye Item is fully visible and hovered. connect or override use.</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="show">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Show this Fisheye item.</description>
      </method>
      <method scope="instance" name="_makeAnims" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Pre-generate the animations</description>
      </method>
    </methods>
  </class>
  <class type="dojox.widget.Iterator" superclass="dijit.Declaration">
    <constructors>
      <constructor scope="instance">
        <parameters>
          <parameter name="p" type="Object" usage="required"/>
          <parameter name="s" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="dojox.widget.Iterator"/>
        </return-types>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="attrs"/>
      <property type="Object" access="read-write" scope="instance" name="children"/>
      <property type="Object" access="read-write" scope="instance" name="widgetCtor"/>
      <property type="Object" access="read-write" scope="instance" name="_srcIndex" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_srcParent" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="attrs"/>
      <property type="Object" access="read-write" scope="instance" name="constructor"/>
      <property type="Object" access="read-write" scope="instance" name="data"/>
      <property type="Object" access="read-write" scope="instance" name="dataValues"/>
      <property type="Object" access="read-write" scope="instance" name="defaultValue"/>
      <property type="Object" access="read-write" scope="instance" name="fetchMax"/>
      <property type="Object" access="read-write" scope="instance" name="query"/>
      <property type="Object" access="read-write" scope="instance" name="start"/>
      <property type="Object" access="read-write" scope="instance" name="store"/>
      <property type="Object" access="read-write" scope="instance" name="widgetCtor"/>
      <property type="Object" access="read-write" scope="instance" name="_srcIndex" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_srcParent" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_classes" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="clear">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="fetch">
        <parameters>
          <parameter name="query" type="Object" usage="required"/>
          <parameter name="start" type="Object" usage="required"/>
          <parameter name="end" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="getAttrValuesObj">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="onDataAvailable">
        <parameters>
          <parameter name="data" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postscript">
        <parameters>
          <parameter name="p" type="Object" usage="required"/>
          <parameter name="s" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="update">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_addItem" visibility="internal">
        <parameters>
          <parameter name="config" type="Object" usage="required"/>
          <parameter name="idx" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_setSrcIndex" visibility="internal">
        <parameters>
          <parameter name="s" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.widget.Loader" superclass="dijit._Widget dijit._Templated">
    <description>a configurable global xhr-listener to display a loading message during running xhr's or to simply provide base-level topic to subscribe to for custom loading messages</description>
    <constructors>
      <constructor scope="instance">
        <description>a configurable global xhr-listener to display a loading message during running xhr's or to simply provide base-level topic to subscribe to for custom loading messages</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="loadMessageNode.innerHTML"/>
      <property type="Object" access="read-write" scope="instance" name="loadNode.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="_pointerConnect" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_xhrEnd" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_xhrStart" visibility="internal"/>
      <property type="true" access="read-write" scope="instance" name="attachToPointer">
        <description>to use visual indicator where cursor is</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="duration">
        <description>time in ms to toggle in/out the visual load indicator</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="hasVisuals">
        <description>true to display a fixed loading message in TR cornder, false to unly provide &amp;quot;Loader&amp;quot; topic to subscribe to for your own custom loading message.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="loadIcon"/>
      <property type="String" access="read-write" scope="instance" name="loadMessage">
        <description>string to use for progress loading</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
      <property type="Number" access="read-write" scope="instance" name="_offset" visibility="internal">
        <description>distance in px from the mouse pointer to show attachToPointer avatar</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_pointerConnect" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_xhrEnd" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_xhrStart" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>setup the loader</description>
      </method>
      <method scope="instance" name="_hide" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>publish &amp;quot;xhr ended&amp;quot; and hide progress indicator</description>
      </method>
      <method scope="instance" name="_putLoader" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>place the floating loading element based on mousemove connection position</description>
      </method>
      <method scope="instance" name="_setMessage" visibility="internal">
        <parameters>
          <parameter name="message" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set's the message in the loader</description>
      </method>
      <method scope="instance" name="_show" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>publish and show progress indicator</description>
      </method>
    </methods>
  </class>
  <class type="dojox.widget.MultiComboBox" superclass="dijit.form.ValidationTextBox dijit.form.ComboBoxMixin">
    <description>A ComboBox that accpets multiple inputs on a single line?</description>
    <constructors>
      <constructor scope="instance">
        <description>A ComboBox that accpets multiple inputs on a single line?</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_previousMatches" visibility="internal"/>
      <property type="String" access="read-write" scope="instance" name="delimiter">
        <description>The character to use to separate items in the ComboBox input</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_previousMatches" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_addPreviousMatches" visibility="internal">
        <parameters>
          <parameter name="text" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
      </method>
      <method scope="instance" name="_autoCompleteText" visibility="internal">
        <parameters>
          <parameter name="text" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_cleanupDelimiters" visibility="internal">
        <parameters>
          <parameter name="text" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_startSearch" visibility="internal">
        <parameters>
          <parameter name="text" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.widget.Rating" superclass="dijit.form._FormWidget">
    <description>A widget for rating using stars.  required: Boolean TODO: Can be true or false, default is false. required: false,</description>
    <constructors>
      <constructor scope="instance">
        <description>A widget for rating using stars.  required: Boolean TODO: Can be true or false, default is false. required: false,</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="constructor"/>
      <property type="Number" access="read-write" scope="instance" name="numStars">
        <description>The number of stars to show, default is 3.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="onStarClick"/>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
      <property type="Number" access="read-write" scope="instance" name="value">
        <description>The current value of the Rating</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="onMouseOver">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>connect here if you like to, the value is passed to this function as the second parameter!</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_onMouse" visibility="internal">
        <parameters>
          <parameter name="evt" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_renderStars" visibility="internal">
        <parameters>
          <parameter name="value" type="Object" usage="required"/>
          <parameter name="hover" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Render the stars depending on the value.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.widget.SortList" superclass="dijit.layout._LayoutWidget dijit._Templated">
    <description>A sortable unordered-list with a fixed header for use in dijit.demos.chat for demonstration purposes only for now. feel free to make API suggestions or fixes.</description>
    <constructors>
      <constructor scope="instance">
        <description>A sortable unordered-list with a fixed header for use in dijit.demos.chat for demonstration purposes only for now. feel free to make API suggestions or fixes.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="bodyWrapper.style.height"/>
      <property type="Boolean" access="read-write" scope="instance" name="descending">
        <description>Toggle sort order based on this value.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="focusNode.innerHTML"/>
      <property type="Array" access="read-write" scope="instance" name="selected">
        <description>A list of the selected &amp;lt;li&amp;gt; nodes at any given time.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="store"/>
      <property type="String" access="read-write" scope="instance" name="title">
        <description>The title in the header</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_selected" visibility="internal"/>
      <property type="Boolean" access="read-write" scope="instance" name="descending">
        <description>Toggle sort order based on this value.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="heading">
        <description>In the event a parent container is expecting a title=&amp;quot;&amp;quot; attribute, set it for the parent via title, and the title of this widget via heading=&amp;quot;&amp;quot; ... assuming you want different titles for each. eg: TabContainer, AccordionContainer, etc.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="key"/>
      <property type="Array" access="read-write" scope="instance" name="selected">
        <description>A list of the selected &amp;lt;li&amp;gt; nodes at any given time.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="sortable">
        <description>toggle to enable/disable sorting</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="store"/>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="String" access="read-write" scope="instance" name="title">
        <description>The title in the header</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="onChanged">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>stub function, passes the last changed item, and is fired after current state</description>
      </method>
      <method scope="instance" name="onSort">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sort the data, and style the nodes.</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="resize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>do our additional calculations when resize() is called by or in a parent</description>
      </method>
      <method scope="instance" name="setTitle">
        <parameters>
          <parameter name="title" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Sets the widget title to a String</description>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_addItem" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_handleClick" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>click listener for data portion of widget. toggle selected state of node, and update this.selected array accordingly</description>
      </method>
      <method scope="instance" name="_set" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>set hover state</description>
      </method>
      <method scope="instance" name="_sorter" visibility="internal">
        <parameters>
          <parameter name="a" type="Object" usage="required"/>
          <parameter name="b" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>a basic sort function, use query sort, or keep this?</description>
      </method>
      <method scope="instance" name="_unset" visibility="internal">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>remove hover state (FIXME: combine with _set?)</description>
      </method>
      <method scope="instance" name="_updateValues" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.widget.TimeSpinner" superclass="dijit.form._Spinner">
    <description>Time Spinner</description>
    <constructors>
      <constructor scope="instance">
        <description>Time Spinner</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="largeDelta"/>
      <property type="Object" access="read-write" scope="instance" name="required"/>
      <property type="Object" access="read-write" scope="instance" name="serialize"/>
      <property type="Object" access="read-write" scope="instance" name="smallDelta"/>
      <property type="Object" access="read-write" scope="instance" name="timeoutChangeRate"/>
      <property type="Object" access="read-write" scope="instance" name="value"/>
    </properties>
    <methods>
      <method scope="instance" name="adjust">
        <parameters>
          <parameter name="val" type="Object" usage="required"/>
          <parameter name="delta" type="Number" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="format">
        <parameters>
          <parameter name="time" type="Object" usage="required"/>
          <parameter name="locale" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="isValid">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="parse">
        <parameters>
          <parameter name="time" type="Object" usage="required"/>
          <parameter name="locale" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.widget.Toaster" superclass="dijit._Widget dijit._Templated">
    <description>Message that slides in from the corner of the screen, used for notifications like &amp;quot;new email&amp;quot;.</description>
    <constructors>
      <constructor scope="instance">
        <description>Message that slides in from the corner of the screen, used for notifications like &amp;quot;new email&amp;quot;.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="bgIframe"/>
      <property type="Object" access="read-write" scope="instance" name="clipNode.className"/>
      <property type="Object" access="read-write" scope="instance" name="clipNode.id"/>
      <property type="Object" access="read-write" scope="instance" name="contentNode.className"/>
      <property type="Object" access="read-write" scope="instance" name="contentNode.innerHTML"/>
      <property type="Object" access="read-write" scope="instance" name="fadeAnim"/>
      <property type="Object" access="read-write" scope="instance" name="isVisible"/>
      <property type="Object" access="read-write" scope="instance" name="slideAnim"/>
      <property type="Object" access="read-write" scope="instance" name="_scrollConnected" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_stickyMessage" visibility="internal"/>
      <property type="String" access="read-write" scope="instance" name="defaultType">
        <description>If message type isn't specified (see &amp;quot;messageTopic&amp;quot; parameter), then display message as this type. Possible values in messageTypes enumeration (&amp;quot;message&amp;quot;, &amp;quot;warning&amp;quot;, &amp;quot;error&amp;quot;, &amp;quot;fatal&amp;quot;)</description>
      </property>
      <property type="Number" access="read-write" scope="instance" name="duration">
        <description>Number of milliseconds to show message</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="messageTopic">
        <description>Name of topic; anything published to this topic will be displayed as a message. Message format is either String or an object like {message: &amp;quot;hello word&amp;quot;, type: &amp;quot;error&amp;quot;, duration: 500}</description>
      </property>
      <property type="Enumeration" access="read-write" scope="instance" name="messageTypes">
        <description>Possible message types.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="positionDirection">
        <description>Position from which message slides into screen, one of [&amp;quot;br-up&amp;quot;, &amp;quot;br-left&amp;quot;, &amp;quot;bl-up&amp;quot;, &amp;quot;bl-right&amp;quot;, &amp;quot;tr-down&amp;quot;, &amp;quot;tr-left&amp;quot;, &amp;quot;tl-down&amp;quot;, &amp;quot;tl-right&amp;quot;]</description>
      </property>
      <property type="Array" access="read-write" scope="instance" name="positionDirectionTypes">
        <description>Possible values for positionDirection parameter</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="separator">
        <description>String used to separate messages if consecutive calls are made to setContent before previous messages go away</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
      <property type="Object" access="read-write" scope="instance" name="_cancelHideTimer" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_setHideTimer" visibility="internal"/>
      <property type="Object" access="read-write" scope="instance" name="_uniqueId" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="hide">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>hide the Toaster</description>
      </method>
      <method scope="instance" name="onSelect">
        <parameters>
          <parameter name="e" type="Event" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>callback for when user clicks the message</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="setContent">
        <parameters>
          <parameter name="message" type="String" usage="required">
            <description>the message</description>
          </parameter>
          <parameter name="messageType" type="String" usage="required">
            <description>type of message; possible values in messageTypes enumeration (&amp;quot;message&amp;quot;, &amp;quot;warning&amp;quot;, &amp;quot;error&amp;quot;, &amp;quot;fatal&amp;quot;)</description>
          </parameter>
          <parameter name="duration" type="Number" usage="optional">
            <description>in milliseconds to display message before removing it. Widget has default value.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>sets and displays the given message and show duration</description>
      </method>
      <method scope="instance" name="show">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>show the Toaster</description>
      </method>
      <method scope="instance" name="_capitalize" visibility="internal">
        <parameters>
          <parameter name="w" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_handleMessage" visibility="internal">
        <parameters>
          <parameter name="message" type="String|Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_placeClip" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.widget.WizardContainer" superclass="dijit.layout.StackContainer dijit._Templated">
    <description>A set of panels that display sequentially, typically notating a step-by-step procedure like an install</description>
    <constructors>
      <constructor scope="instance">
        <description>A set of panels that display sequentially, typically notating a step-by-step procedure like an install</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="cancelButton.domNode.style.display"/>
      <property type="FunctionName" access="read-write" scope="instance" name="cancelFunction">
        <description>Name of function to call if user presses cancel button. Cancel button is not displayed if function is not specified.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="doneButton.domNode.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="nextButton.domNode.style.display"/>
      <property type="Object" access="read-write" scope="instance" name="_subscription" visibility="internal"/>
      <property type="String" access="read-write" scope="instance" name="cancelButtonLabel">
        <description>Label override for the &amp;quot;Cancel&amp;quot; button.</description>
      </property>
      <property type="FunctionName" access="read-write" scope="instance" name="cancelFunction">
        <description>Name of function to call if user presses cancel button. Cancel button is not displayed if function is not specified.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="doneButtonLabel">
        <description>Label override for the &amp;quot;Done&amp;quot; button.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="hideDisabled">
        <description>If true, disabled buttons are hidden; otherwise, they are assigned the &amp;quot;WizardButtonDisabled&amp;quot; CSS class</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="nextButtonLabel">
        <description>Label override for the &amp;quot;Next&amp;quot; button.</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="previousButtonLabel">
        <description>Label override for the &amp;quot;Previous&amp;quot; button.</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="templatePath"/>
      <property type="Object" access="read-write" scope="instance" name="widgetsInTemplate"/>
    </properties>
    <methods>
      <method scope="instance" name="destroy">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="done">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Finish the wizard's operation</description>
      </method>
      <method scope="instance" name="postMixInProperties">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_checkButtons" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_forward" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>callback when next button is clicked</description>
      </method>
      <method scope="instance" name="_setButtonClass" visibility="internal">
        <parameters>
          <parameter name="button" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox.widget.WizardPane" superclass="dijit.layout.ContentPane">
    <description>a panel in a WizardContainer</description>
    <constructors>
      <constructor scope="instance">
        <description>a panel in a WizardContainer</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Boolean" access="read-write" scope="instance" name="canGoBack">
        <description>If true, then can move back to a previous panel (by clicking the &amp;quot;Previous&amp;quot; button)</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="doneFunction">
        <description>Name of function that is run if you press the &amp;quot;Done&amp;quot; button from this panel</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="passFunction">
        <description>Name of function that checks if it's OK to advance to the next panel. If it's not OK (for example, mandatory field hasn't been entered), then returns an error message (String) explaining the reason.</description>
      </property>
      <property type="Boolean" access="read-write" scope="instance" name="canGoBack">
        <description>If true, then can move back to a previous panel (by clicking the &amp;quot;Previous&amp;quot; button)</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="doneFunction">
        <description>Name of function that is run if you press the &amp;quot;Done&amp;quot; button from this panel</description>
      </property>
      <property type="String" access="read-write" scope="instance" name="passFunction">
        <description>Name of function that checks if it's OK to advance to the next panel. If it's not OK (for example, mandatory field hasn't been entered), then returns an error message (String) explaining the reason.</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="done">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="postMixInProperties">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_checkPass" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Called when the user presses the &amp;quot;next&amp;quot; button. Calls passFunction to see if it's OK to advance to next panel, and if it isn't, then display error. Returns true to advance, false to not advance.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_wireClasses" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_defaultWireClass" visibility="internal"/>
      <property type="Object" access="read-write" scope="static" name="_base" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="register">
        <parameters>
          <parameter name="wireClass" type="Function|String" usage="required">
            <description>A class or full qualified class name</description>
          </parameter>
          <parameter name="key" type="String" usage="required">
            <description>A key property of arguments to create a Wire</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="undefined"/>
        </return-types>
        <description>Register a Wire class desription: The specified Wire class or a class name is registered with a key property of arguments to create a Wire</description>
      </method>
      <method scope="static" name="_getClass" visibility="internal">
        <parameters>
          <parameter name="name" type="String" usage="required">
            <description>A class name</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Function"/>
        </return-types>
        <description>Returns a class</description>
      </method>
      <method scope="static" name="create">
        <parameters>
          <parameter name="args" type="Object" usage="required">
            <description>Arguments to create a Wire</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Create a Wire from arguments</description>
      </method>
      <method scope="static" name="isWire">
        <parameters>
          <parameter name="wire" type="Object" usage="required">
            <description>An object to check</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Check if an object is a Wire</description>
      </method>
      <method scope="static" name="transfer">
        <parameters>
          <parameter name="source" type="Wire|Object" usage="required">
            <description>A Wire or arguments to create a Wire for a source value</description>
          </parameter>
          <parameter name="target" type="Wire|Object" usage="required">
            <description>A Wire or arguments to create a Wire for a target value</description>
          </parameter>
          <parameter name="defaultObject" type="Object" usage="optional"/>
          <parameter name="defaultTargetObject" type="Object" usage="optional">
            <description>Optional default root objects passed to Wires</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="undefined"/>
        </return-types>
        <description>Transfer a source value to a target value</description>
      </method>
      <method scope="static" name="connect">
        <parameters>
          <parameter name="trigger" type="Object" usage="required">
            <description>An event or topic to trigger a transfer</description>
          </parameter>
          <parameter name="source" type="Wire|Object" usage="required">
            <description>A Wire or arguments to create a Wire for a source value</description>
          </parameter>
          <parameter name="target" type="Wire|Object" usage="required">
            <description>A Wire or arguments to create a Wire for a target value</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="undefined"/>
          <return-type type="Object"/>
        </return-types>
        <description>Transfer a source value to a target value on a trigger event or topic</description>
      </method>
      <method scope="static" name="disconnect">
        <parameters>
          <parameter name="connection" type="Object" usage="required">
            <description>A connection handle returned by connect()</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="undefined"/>
        </return-types>
        <description>Remove a connection or subscription for transfer</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.CompositeWire" superclass="dojox.wire.Wire">
    <description>Initialize properties</description>
    <constructors>
      <constructor scope="instance">
        <description>Initialize properties</description>
        <parameters>
          <parameter name="args" type="Object" usage="required">
            <description>Arguments to initialize properties children: An object or array containing child Wires</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_wireClass" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="_getValue" visibility="internal">
        <parameters>
          <parameter name="object" type="Object|Array" usage="required">
            <description>A root object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
          <return-type type="Array"/>
        </return-types>
        <description>Return an object with property values or an array with element values</description>
      </method>
      <method scope="instance" name="_initializeChildren" visibility="internal">
        <parameters>
          <parameter name="children" type="Object|Array" usage="required">
            <description>An object or array containing child Wires</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="undefined"/>
        </return-types>
        <description>Initialize child Wires</description>
      </method>
      <method scope="instance" name="_setValue" visibility="internal">
        <parameters>
          <parameter name="object" type="Object|Array" usage="required">
            <description>A root object</description>
          </parameter>
          <parameter name="value" type="Object|Array" usage="required">
            <description>An object or array with values to set</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
          <return-type type="Array"/>
        </return-types>
        <description>Set an object properties or an array elements to an object desription: This method calls setValues() method of the child Wires with a corresponding property or element in 'value' argument and 'object' argument.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.DataWire" superclass="dojox.wire.Wire">
    <description>Initialize properties</description>
    <constructors>
      <constructor scope="instance">
        <description>Initialize properties</description>
        <parameters>
          <parameter name="args" type="Object" usage="required">
            <description>Arguments to initialize properties</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="A" access="read-write" scope="instance" name="dataStore">
        <description>data store attribute: A dotted notation to a descendant attribute</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_wireClass" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="_getAttributeValue" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required">
            <description>An item</description>
          </parameter>
          <parameter name="attribute" type="String" usage="required">
            <description>An attribute name</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="anything"/>
        </return-types>
        <description>Return an attribute value of an item</description>
      </method>
      <method scope="instance" name="_getValue" visibility="internal">
        <parameters>
          <parameter name="object" type="Object" usage="required">
            <description>A root item</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
          <return-type type="undefined"/>
          <return-type type="anything"/>
        </return-types>
        <description>Return an attribute value of an item</description>
      </method>
      <method scope="instance" name="_setAttributeValue" visibility="internal">
        <parameters>
          <parameter name="item" type="Object" usage="required">
            <description>An item</description>
          </parameter>
          <parameter name="attribute" type="String" usage="required">
            <description>An attribute name</description>
          </parameter>
          <parameter name="value" type="anything" usage="required">
            <description>A value to set</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Set an attribute value to an item</description>
      </method>
      <method scope="instance" name="_setValue" visibility="internal">
        <parameters>
          <parameter name="object" type="Object" usage="required">
            <description>A root item</description>
          </parameter>
          <parameter name="value" type="anything" usage="required">
            <description>A value to set</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
          <return-type type="undefined"/>
        </return-types>
        <description>Set an attribute value to an item</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.demos" superclass="Object"/>
  <class type="dojox.wire.demos.TableContainer" superclass="dijit._Widget dijit._Container dijit._Templated">
    <description>Extremely simple 'widget' that is a table generator with an addRow function that takes an array as the row to add, where each entry is a cell in the row.  This demo widget is for use with the wire demos.</description>
    <constructors>
      <constructor scope="instance">
        <description>Extremely simple 'widget' that is a table generator with an addRow function that takes an array as the row to add, where each entry is a cell in the row.  This demo widget is for use with the wire demos.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="rowCount"/>
      <property type="Object" access="read-write" scope="instance" name="headers"/>
      <property type="Object" access="read-write" scope="instance" name="rowCount"/>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
    </properties>
    <methods>
      <method scope="instance" name="addRow">
        <parameters>
          <parameter name="array" type="Array" usage="required">
            <description>of row values to add.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Function to add in a new row from the elements in the array map to cells in the row.</description>
      </method>
      <method scope="instance" name="clearTable">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Function to clear all the current rows in the table, except for the header.</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Widget lifecycle function to handle generation of the header elements in the table.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.demos.WidgetRepeater" superclass="dijit._Widget dijit._Container dijit._Templated">
    <description>Simple widget that does generation of widgets repetatively, based on calls to the createNew function and contains them as child widgets.</description>
    <constructors>
      <constructor scope="instance">
        <description>Simple widget that does generation of widgets repetatively, based on calls to the createNew function and contains them as child widgets.</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="widget"/>
      <property type="Object" access="read-write" scope="instance" name="repeater"/>
      <property type="Object" access="read-write" scope="instance" name="templateString"/>
      <property type="Object" access="read-write" scope="instance" name="widget"/>
    </properties>
    <methods>
      <method scope="instance" name="createNew">
        <parameters>
          <parameter name="obj" type="The" usage="required">
            <description>parameters to pass to the widget.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Function to handle the creation of a new widget and appending it into the widget tree.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.ml" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="util"/>
    </properties>
    <methods>
      <method scope="static" name="_getValue" visibility="internal">
        <parameters>
          <parameter name="source" type="String" usage="required">
            <description>A string to specify an object and its property</description>
          </parameter>
          <parameter name="args" type="Array" usage="required">
            <description>An optional arguments array</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="undefined"/>
          <return-type type="Object"/>
          <return-type type="anything"/>
        </return-types>
        <description>Return a value</description>
      </method>
      <method scope="static" name="_setValue" visibility="internal">
        <parameters>
          <parameter name="target" type="String" usage="required">
            <description>A string to specify an object and its property</description>
          </parameter>
          <parameter name="value" type="anything" usage="required">
            <description>A value</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="undefined"/>
        </return-types>
        <description>Store a value</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.ml.Action" superclass="dijit._Widget dijit._Container">
    <description>A base widget to &amp;quot;run&amp;quot; a task on an event or a topic</description>
    <constructors>
      <constructor scope="instance">
        <description>A base widget to &amp;quot;run&amp;quot; a task on an event or a topic</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_triggerHandle" visibility="internal"/>
      <property type="An" access="read-write" scope="instance" name="trigger">
        <description>event scope</description>
      </property>
      <property type="An" access="read-write" scope="instance" name="triggerEvent">
        <description>event (function) name</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="triggerTopic">
        <description>topic name</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Call _connect()</description>
      </method>
      <method scope="instance" name="run">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Run a task</description>
      </method>
      <method scope="instance" name="uninitialize">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Over-ride of base widget unitialize function to do some connection cleanup.</description>
      </method>
      <method scope="instance" name="_connect" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Connect run() method to an event or a topic</description>
      </method>
      <method scope="instance" name="_disconnect" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Disconnect run() method from an event or a topic</description>
      </method>
      <method scope="instance" name="_run" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Call run() methods of child Action widgets</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.ml.ActionFilter" superclass="dijit._Widget">
    <description>A widget to define a filter for the parent Action to run</description>
    <constructors>
      <constructor scope="instance">
        <description>A widget to define a filter for the parent Action to run</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="A" access="read-write" scope="instance" name="required">
        <description>property required</description>
      </property>
      <property type="Optional." access="read-write" scope="instance" name="requiredValue">
        <description>A specific value the property is required to have.  If this isn't provided than any non-false/non-null value of the required propery will cause this filter to pass.</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="error">
        <description>property to store an error due to property mismatch.</description>
      </property>
      <property type="An" access="read-write" scope="instance" name="message">
        <description>error message to emit if the filter doesn't execute due to property mismatch.</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="required">
        <description>property required</description>
      </property>
      <property type="Optional." access="read-write" scope="instance" name="requiredValue">
        <description>A specific value the property is required to have.  If this isn't provided than any non-false/non-null value of the required propery will cause this filter to pass.</description>
      </property>
      <property type="Optional." access="read-write" scope="instance" name="type">
        <description>A specific type to compare the values as (if requiredValue is set) Valid values for type are boolean, int, string.  Default is string.</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="filter">
        <return-types>
          <return-type type="Boolean"/>
          <return-type type="Boolean"/>
        </return-types>
        <description>Check if a required property is specified.  Also, if provided, check to see if the required property contains a specific value.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.ml.ChildWire" superclass="dijit._Widget">
    <description>A widget to add a child wire</description>
    <constructors>
      <constructor scope="instance">
        <description>A widget to add a child wire</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="A" access="read-write" scope="instance" name="attribute">
        <description>data item attribute for the value</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="converter">
        <description>class name of a converter for the value</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="name">
        <description>composite property name</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="object">
        <description>root object for the value</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="path">
        <description>simplified XPath for the value</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="property">
        <description>property for the value</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="type">
        <description>type of the value</description>
      </property>
      <property type="Which" access="read-write" scope="instance" name="which">
        <description>Wire to add a child Wire, &amp;quot;source&amp;quot; or &amp;quot;target&amp;quot;, default to &amp;quot;source&amp;quot;</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="_addWire" visibility="internal">
        <parameters>
          <parameter name="parent" type="Transfer" usage="required">
            <description>A parent Transfer widget</description>
          </parameter>
          <parameter name="args" type="Object" usage="required">
            <description>Wire arguments</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Add a child Wire to Wire arguments</description>
      </method>
      <method scope="instance" name="_getWire" visibility="internal">
        <parameters>
          <parameter name="parent" type="Transfer" usage="required">
            <description>A parent Transfer widget</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Build child Wire arguments from attributes</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.ml.ColumnWire" superclass="dojox.wire.ml.ChildWire">
    <description>A widget to add a column wire</description>
    <constructors>
      <constructor scope="instance">
        <description>A widget to add a column wire</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="A" access="read-write" scope="instance" name="column">
        <description>column name</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="_addWire" visibility="internal">
        <parameters>
          <parameter name="parent" type="Transfer" usage="required">
            <description>A parent Transfer widget</description>
          </parameter>
          <parameter name="args" type="Object" usage="required">
            <description>Wire arguments</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Add a column Wire to Wire arguments</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.ml.Data" superclass="dijit._Widget dijit._Container">
    <description>A widget for a data object</description>
    <constructors>
      <constructor scope="instance">
        <description>A widget for a data object</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_properties" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="getPropertyValue">
        <parameters>
          <parameter name="property" type="String" usage="required">
            <description>A property name</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="anything"/>
        </return-types>
        <description>Return a property value</description>
      </method>
      <method scope="instance" name="setPropertyValue">
        <parameters>
          <parameter name="property" type="String" usage="required">
            <description>A property name</description>
          </parameter>
          <parameter name="value" type="anything" usage="required">
            <description>A property value</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Store a property value</description>
      </method>
      <method scope="instance" name="startup">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Call _initializeProperties()</description>
      </method>
      <method scope="instance" name="_initializeProperties" visibility="internal">
        <parameters>
          <parameter name="reset" type="Boolean" usage="required">
            <description>A boolean to reset current properties</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Initialize a data object</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.ml.DataProperty" superclass="dijit._Widget dijit._Container">
    <description>A widget to define a data property</description>
    <constructors>
      <constructor scope="instance">
        <description>A widget to define a data property</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="A" access="read-write" scope="instance" name="type">
        <description>property type name</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="name">
        <description>property name</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="type">
        <description>property type name</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="value">
        <description>property value</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="getValue">
        <return-types>
          <return-type type="anything"/>
        </return-types>
        <description>Returns a property value</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.ml.DataStore" superclass="dijit._Widget">
    <description>A widget for a data store</description>
    <constructors>
      <constructor scope="instance">
        <description>A widget for a data store</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="store"/>
      <property type="A" access="read-write" scope="instance" name="storeClass">
        <description>class name of a data store</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="deleteItem">
        <parameters>
          <parameter name="item" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Call deleteItem() method of a data store</description>
      </method>
      <method scope="instance" name="fetch">
        <parameters>
          <parameter name="request" type="Object" usage="required">
            <description>A request object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Call fetch() method of a data store</description>
      </method>
      <method scope="instance" name="getFeatures">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Call getFeatures() method of a data store</description>
      </method>
      <method scope="instance" name="newItem">
        <parameters>
          <parameter name="args" type="Object" usage="required">
            <description>A new item arguments object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Call newItem() method of a data store</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Call _createStore()</description>
      </method>
      <method scope="instance" name="revert">
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Call revert() method of a data store</description>
      </method>
      <method scope="instance" name="save">
        <parameters>
          <parameter name="args" type="Object" usage="required">
            <description>A save arguments object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Call save() method of a data store</description>
      </method>
      <method scope="instance" name="_createStore" visibility="internal">
        <return-types>
          <return-type type="null"/>
          <return-type type="Object"/>
        </return-types>
        <description>Create a data store desription: A data store of 'storeClass' is created with arguments specified with attributes.</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.ml.Invocation" superclass="dojox.wire.ml.Action">
    <description>A widget to invoke a method or publish a topic</description>
    <constructors>
      <constructor scope="instance">
        <description>A widget to invoke a method or publish a topic</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="A" access="read-write" scope="instance" name="method">
        <description>name of a method to invoke</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="error">
        <description>property to store an error on the method call</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="method">
        <description>name of a method to invoke</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="object">
        <description>scope of a method to invoke</description>
      </property>
      <property type="Arguments" access="read-write" scope="instance" name="parameters">
        <description>for the method or the topic</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="result">
        <description>property to store a return value of the method call</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="topic">
        <description>name of a topic to publish</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="onComplete">
        <parameters>
          <parameter name="result" type="anything" usage="required">
            <description>The return value of a method or undefined for a topic</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>A function called when the method or the topic publish completed</description>
      </method>
      <method scope="instance" name="onError">
        <parameters>
          <parameter name="error" type="anything" usage="required">
            <description>The exception or error occurred</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>A function called on an error occurs</description>
      </method>
      <method scope="instance" name="_getParameters" visibility="internal">
        <parameters>
          <parameter name="args" type="Array" usage="required">
            <description>Arguments to a trigger event or topic</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Returns arguments to a method or topic to invoke</description>
      </method>
      <method scope="instance" name="_run" visibility="internal">
        <return-types>
          <return-type type="undefined"/>
        </return-types>
        <description>Invoke a method or publish a topic</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.ml.JsonHandler" superclass="dojox.wire.ml.RestHandler">
    <description>A REST service handler for JSON</description>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contentType"/>
      <property type="Object" access="read-write" scope="instance" name="handleAs"/>
      <property type="Object" access="read-write" scope="instance" name="headers"/>
    </properties>
    <methods>
      <method scope="instance" name="_getContent" visibility="internal">
        <parameters>
          <parameter name="method" type="String" usage="required">
            <description>A method name</description>
          </parameter>
          <parameter name="parameters" type="Array" usage="required">
            <description>An array of parameters</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Generate a request content</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.ml.NodeWire" superclass="dojox.wire.ml.ChildWire dijit._Container">
    <description>A widget to add node wires</description>
    <constructors>
      <constructor scope="instance">
        <description>A widget to add node wires</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="A" access="read-write" scope="instance" name="titleAttribute">
        <description>data item attribute for the node title</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="titlePath">
        <description>simplified XPath for the node title</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="titleProperty">
        <description>property for the node title</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="_addWire" visibility="internal">
        <parameters>
          <parameter name="parent" type="Transfer" usage="required">
            <description>A parent Transfer widget</description>
          </parameter>
          <parameter name="args" type="Object" usage="required">
            <description>Wire arguments</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Add node Wires to Wire arguments</description>
      </method>
      <method scope="instance" name="_getWires" visibility="internal">
        <parameters>
          <parameter name="parent" type="Transfer" usage="required">
            <description>A parent Transfer widget</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Build node Wires arguments from attributes</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.ml.RestHandler" superclass="Object">
    <description>A REST service handler</description>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contentType"/>
      <property type="Object" access="read-write" scope="instance" name="handleAs"/>
    </properties>
    <methods>
      <method scope="instance" name="bind">
        <parameters>
          <parameter name="method" type="A" usage="required">
            <description>method name</description>
          </parameter>
          <parameter name="parameters" type="An" usage="required">
            <description>array of parameters</description>
          </parameter>
          <parameter name="deferred" type="Deferred" usage="required"/>
          <parameter name="url" type="A" usage="required">
            <description>URL for the method</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Call a service method with parameters.</description>
      </method>
      <method scope="instance" name="_getContent" visibility="internal">
        <parameters>
          <parameter name="method" type="String" usage="required">
            <description>A method name</description>
          </parameter>
          <parameter name="parameters" type="Array" usage="required">
            <description>An array of parameters</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="anything"/>
          <return-type type="null"/>
        </return-types>
        <description>Generate a request content</description>
      </method>
      <method scope="instance" name="_getResult" visibility="internal">
        <parameters>
          <parameter name="data" type="anything" usage="required">
            <description>A response data returned by a service</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="anything"/>
        </return-types>
        <description>Extract a result</description>
      </method>
      <method scope="instance" name="_getUrl" visibility="internal">
        <parameters>
          <parameter name="method" type="String" usage="required">
            <description>A method name</description>
          </parameter>
          <parameter name="parameters" type="Array" usage="required">
            <description>An array of parameters</description>
          </parameter>
          <parameter name="url" type="String" usage="required">
            <description>A base URL</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Generate a URL</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.ml.SegmentWire" superclass="dojox.wire.ml.ChildWire">
    <description>A widget to add a segment wire</description>
    <constructors>
      <constructor scope="instance">
        <description>A widget to add a segment wire</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <methods>
      <method scope="instance" name="_addWire" visibility="internal">
        <parameters>
          <parameter name="parent" type="Transfer" usage="required">
            <description>A parent Transfer widget</description>
          </parameter>
          <parameter name="args" type="Object" usage="required">
            <description>Wire arguments</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Add a segument Wire to Wire arguments</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.ml.Service" superclass="dijit._Widget">
    <description>A widget for a service</description>
    <constructors>
      <constructor scope="instance">
        <description>A widget for a service</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="handler"/>
      <property type="A" access="read-write" scope="instance" name="serviceUrl">
        <description>URL to a service</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="handlerClass">
        <description>service handler class name</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="preventCache"/>
      <property type="A" access="read-write" scope="instance" name="serviceType">
        <description>service type</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="serviceUrl">
        <description>URL to a service</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="url">
        <description>URL to a service description</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_handlerClasses" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="callMethod">
        <parameters>
          <parameter name="method" type="A" usage="required">
            <description>method name</description>
          </parameter>
          <parameter name="parameters" type="An" usage="required">
            <description>array parameters</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Call a service method with parameters</description>
      </method>
      <method scope="instance" name="postCreate">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Call _createHandler()</description>
      </method>
      <method scope="instance" name="_createHandler" visibility="internal">
        <return-types>
          <return-type type="null"/>
          <return-type type="Object"/>
        </return-types>
        <description>Create a service handler desription: A service handler class is determined by: 1. 'handlerClass' attribute 2. 'serviceType' attribute 3. 'serviceType' property in a service description</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.ml.Transfer" superclass="dojox.wire.ml.Action">
    <description>A widget to transfer values through source and target Wires</description>
    <constructors>
      <constructor scope="instance">
        <description>A widget to transfer values through source and target Wires</description>
        <parameters>
          <parameter name="params" type="Object" usage="optional"/>
          <parameter name="srcNodeRef" type="DomNode|String" usage="required"/>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="A" access="read-write" scope="instance" name="converter">
        <description>class name of a converter for the value to be transferred</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="delimiter"/>
      <property type="A" access="read-write" scope="instance" name="source">
        <description>source object and/or property</description>
      </property>
      <property type="An" access="read-write" scope="instance" name="sourceAttribute">
        <description>attribute of a source data item</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="sourcePath">
        <description>simplified XPath to a source property of an XML element</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="sourceStore">
        <description>data store for a source data item</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="target">
        <description>target object and/or property</description>
      </property>
      <property type="An" access="read-write" scope="instance" name="targetAttribute">
        <description>attribute of a target data item</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="targetPath">
        <description>simplified XPath to a target property of an XML element</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="targetStore">
        <description>data store for a target data item</description>
      </property>
      <property type="A" access="read-write" scope="instance" name="type">
        <description>type of the value to be transferred</description>
      </property>
    </properties>
    <methods>
      <method scope="instance" name="_getWire" visibility="internal">
        <parameters>
          <parameter name="which" type="String" usage="required">
            <description>Which Wire arguments to build, &amp;quot;source&amp;quot; or &amp;quot;target&amp;quot;</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Build Wire arguments from attributes</description>
      </method>
      <method scope="instance" name="_run" visibility="internal">
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Transfer a value from a source to a target</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.ml.XmlElement" superclass="Object">
    <description>Initialize with an XML element or a tag name</description>
    <constructors>
      <constructor scope="instance">
        <description>Initialize with an XML element or a tag name</description>
        <parameters>
          <parameter name="element" type="Element|String" usage="required">
            <description>An XML element or a tag name</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="An" access="read-write" scope="instance" name="element">
        <description>XML element or a tag name</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="element.nodeType"/>
    </properties>
    <methods>
      <method scope="instance" name="getPropertyValue">
        <parameters>
          <parameter name="property" type="String" usage="required">
            <description>A property name</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="undefined"/>
          <return-type type="String"/>
          <return-type type="Array"/>
          <return-type type="XmlElement"/>
        </return-types>
        <description>Return a property value</description>
      </method>
      <method scope="instance" name="setPropertyValue">
        <parameters>
          <parameter name="property" type="String" usage="required">
            <description>A property name</description>
          </parameter>
          <parameter name="value" type="String|Array|XmlElement" usage="required">
            <description>A property value</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="undefined"/>
        </return-types>
        <description>Store a property value</description>
      </method>
      <method scope="instance" name="toObject">
        <return-types>
          <return-type type="null"/>
          <return-type type="String"/>
          <return-type type="Object"/>
        </return-types>
        <description>Return an object representation of the element</description>
      </method>
      <method scope="instance" name="toString">
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Return a value of the first text child of the element</description>
      </method>
      <method scope="instance" name="_getDocument" visibility="internal">
        <return-types>
          <return-type type="Document"/>
        </return-types>
        <description>Return a DOM document</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.ml.XmlHandler" superclass="dojox.wire.ml.RestHandler">
    <description>A REST service handler for XML</description>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="contentType"/>
      <property type="Object" access="read-write" scope="instance" name="handleAs"/>
    </properties>
    <methods>
      <method scope="instance" name="_getContent" visibility="internal">
        <parameters>
          <parameter name="method" type="String" usage="required">
            <description>A method name</description>
          </parameter>
          <parameter name="parameters" type="Array" usage="required">
            <description>An array of parameters</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_getResult" visibility="internal">
        <parameters>
          <parameter name="data" type="Document" usage="required">
            <description>A response data returned by a service</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Extract a result</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.TableAdapter" superclass="dojox.wire.CompositeWire">
    <description>Initialize properties</description>
    <constructors>
      <constructor scope="instance">
        <description>Initialize properties</description>
        <parameters>
          <parameter name="args" type="Object" usage="required">
            <description>Arguments to initialize properties columns: An object or array containing child Wires for column values</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_wireClass" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="_getRow" visibility="internal">
        <parameters>
          <parameter name="object" type="Object|Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Array"/>
          <return-type type="Object"/>
        </return-types>
        <description>Return an array or object for a table row</description>
      </method>
      <method scope="instance" name="_getValue" visibility="internal">
        <parameters>
          <parameter name="object" type="Array" usage="required">
            <description>A root array</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Return an array of table row value (object or array)</description>
      </method>
      <method scope="instance" name="_setValue" visibility="internal">
        <parameters>
          <parameter name="object" type="Array" usage="required"/>
          <parameter name="value" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Not supported</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.TextAdapter" superclass="dojox.wire.CompositeWire">
    <description>Initialize properties</description>
    <constructors>
      <constructor scope="instance">
        <description>Initialize properties</description>
        <parameters>
          <parameter name="args" type="Object" usage="required">
            <description>Arguments to initialize properties segments: An array containing child Wires for text segment values</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="A" access="read-write" scope="instance" name="delimiter">
        <description>delimiter string</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="_wireClass" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="_addSegment" visibility="internal">
        <parameters>
          <parameter name="text" type="String" usage="required">
            <description>A base text</description>
          </parameter>
          <parameter name="segment" type="String" usage="required">
            <description>A text segment to add</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Return a concatenated text</description>
      </method>
      <method scope="instance" name="_getValue" visibility="internal">
        <parameters>
          <parameter name="object" type="Object|Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
          <return-type type="Array"/>
          <return-type type="String"/>
        </return-types>
        <description>Return a concatenated text</description>
      </method>
      <method scope="instance" name="_setValue" visibility="internal">
        <parameters>
          <parameter name="object" type="Object|Array" usage="required"/>
          <parameter name="value" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Not supported</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.TreeAdapter" superclass="dojox.wire.CompositeWire">
    <description>Initialize properties</description>
    <constructors>
      <constructor scope="instance">
        <description>Initialize properties</description>
        <parameters>
          <parameter name="args" type="Object" usage="required">
            <description>Arguments to initialize properties nodes: An array containing objects for child Wires for node values</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_wireClass" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="_getNodes" visibility="internal">
        <parameters>
          <parameter name="object" type="Object" usage="required">
            <description>An object</description>
          </parameter>
          <parameter name="child" type="Object" usage="required">
            <description>An object with child Wires</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Return an array of tree node values</description>
      </method>
      <method scope="instance" name="_getValue" visibility="internal">
        <parameters>
          <parameter name="object" type="Array" usage="required">
            <description>A root array</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Return an array of tree node values</description>
      </method>
      <method scope="instance" name="_initializeChildren" visibility="internal">
        <parameters>
          <parameter name="children" type="Array" usage="required">
            <description>An array of objects containing child Wires</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="undefined"/>
        </return-types>
        <description>Initialize child Wires</description>
      </method>
      <method scope="instance" name="_setValue" visibility="internal">
        <parameters>
          <parameter name="object" type="Array" usage="required"/>
          <parameter name="value" type="Array" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Not supported</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.Wire" superclass="Object">
    <description>Initialize properties</description>
    <constructors>
      <constructor scope="instance">
        <description>Initialize properties</description>
        <parameters>
          <parameter name="args" type="Object" usage="required">
            <description>Arguments to initialize properties object: A root object (or another Wire to access a root object) property: A dotted notation to a descendant property type: A type of the return value (for the source Wire)</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="A" access="read-write" scope="instance" name="converter">
        <description>converter object (or class name) to convert the return value (for the source Wire)</description>
      </property>
      <property type="Object" access="read-write" scope="instance" name="type"/>
      <property type="Object" access="read-write" scope="instance" name="_wireClass" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="getValue">
        <parameters>
          <parameter name="defaultObject" type="Object|Array" usage="required">
            <description>A default root object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="anything"/>
        </return-types>
        <description>Return a value of an object</description>
      </method>
      <method scope="instance" name="setValue">
        <parameters>
          <parameter name="value" type="anything" usage="required">
            <description>A value to set</description>
          </parameter>
          <parameter name="defaultObject" type="Object|Array" usage="required">
            <description>A default root object</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Set a value to an object</description>
      </method>
      <method scope="instance" name="_getPropertyValue" visibility="internal">
        <parameters>
          <parameter name="object" type="Object|Array" usage="required">
            <description>A default root object</description>
          </parameter>
          <parameter name="property" type="String" usage="required">
            <description>A property name</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="anything"/>
        </return-types>
        <description>Return a property value of an object</description>
      </method>
      <method scope="instance" name="_setPropertyValue" visibility="internal">
        <parameters>
          <parameter name="object" type="Object|Array" usage="required">
            <description>An object</description>
          </parameter>
          <parameter name="property" type="String" usage="required">
            <description>A property name</description>
          </parameter>
          <parameter name="value" type="anything" usage="required">
            <description>A value to set</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Set a property value to an object</description>
      </method>
    </methods>
  </class>
  <class type="dojox.wire.XmlWire" superclass="dojox.wire.Wire">
    <description>Initialize properties</description>
    <constructors>
      <constructor scope="instance">
        <description>Initialize properties</description>
        <parameters>
          <parameter name="args" type="Object" usage="required">
            <description>Arguments to initialize properties path: A simplified XPath to an attribute, a text or elements</description>
          </parameter>
        </parameters>
      </constructor>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="_wireClass" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="_getChildNode" visibility="internal">
        <parameters>
          <parameter name="node" type="Node" usage="required">
            <description>A parent node</description>
          </parameter>
          <parameter name="name" type="String" usage="required">
            <description>A tag name</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Node"/>
          <return-type type="null"/>
        </return-types>
        <description>Return a child node</description>
      </method>
      <method scope="instance" name="_getDocument" visibility="internal">
        <parameters>
          <parameter name="node" type="Node" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Document"/>
        </return-types>
        <description>Return a DOM document</description>
      </method>
      <method scope="instance" name="_getNodeValue" visibility="internal">
        <parameters>
          <parameter name="node" type="Node" usage="required">
            <description>A node</description>
          </parameter>
          <parameter name="exp" type="String" usage="required">
            <description>An expression for attribute, text or elements</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
          <return-type type="Array"/>
        </return-types>
        <description>Return an attribute value, a text value or an array of elements</description>
      </method>
      <method scope="instance" name="_getValue" visibility="internal">
        <parameters>
          <parameter name="object" type="Node" usage="required">
            <description>A root node</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Node"/>
          <return-type type="undefined"/>
          <return-type type="String"/>
          <return-type type="Array"/>
        </return-types>
        <description>Return an attribute value, a text value or an array of elements</description>
      </method>
      <method scope="instance" name="_setNodeValue" visibility="internal">
        <parameters>
          <parameter name="node" type="Node" usage="required">
            <description>A node</description>
          </parameter>
          <parameter name="exp" type="String" usage="required">
            <description>An expression for attribute or text</description>
          </parameter>
          <parameter name="value" type="String" usage="required">
            <description>A value to set</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Set an attribute value or a child text value to an element</description>
      </method>
      <method scope="instance" name="_setValue" visibility="internal">
        <parameters>
          <parameter name="object" type="Node" usage="required">
            <description>A root node</description>
          </parameter>
          <parameter name="value" type="String" usage="required">
            <description>A value to set</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Node"/>
          <return-type type="undefined"/>
        </return-types>
        <description>Set an attribute value or a child text value to an element</description>
      </method>
    </methods>
  </class>
  <class type="dojox.xml" superclass="Object">
    <description>XML utilities.  Currently only includes a DomParser, which returns a psuedo-XML document in JSON-like form.</description>
  </class>
  <class type="dojox.xml.DomParser" superclass="Object">
    <constructors>
      <constructor scope="instance"/>
    </constructors>
    <properties>
      <property type="Object" access="read-write" scope="instance" name="byId"/>
      <property type="Object" access="read-write" scope="instance" name="byName"/>
      <property type="Object" access="read-write" scope="instance" name="byNameNS"/>
      <property type="Object" access="read-write" scope="instance" name="childNodes"/>
      <property type="Object" access="read-write" scope="instance" name="childrenByName"/>
      <property type="Object" access="read-write" scope="instance" name="documentElement"/>
      <property type="Object" access="read-write" scope="instance" name="namespaces"/>
      <property type="Object" access="read-write" scope="instance" name="nodeName"/>
      <property type="Object" access="read-write" scope="instance" name="nodeType"/>
      <property type="Object" access="read-write" scope="instance" name="_nsPaths" visibility="internal"/>
    </properties>
    <methods>
      <method scope="instance" name="getElementById">
        <parameters>
          <parameter name="id" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="parse">
        <parameters>
          <parameter name="str" type="String" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_add" visibility="internal">
        <parameters>
          <parameter name="obj" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
      <method scope="instance" name="_remove" visibility="internal">
        <parameters>
          <parameter name="id" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
  <class type="dojox._sql" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="common"/>
    </properties>
  </class>
  <class type="dojox._sql._crypto" superclass="Object">
    <properties>
      <property type="Object" access="read-write" scope="static" name="_POOL_SIZE" visibility="internal"/>
    </properties>
    <methods>
      <method scope="static" name="encrypt">
        <parameters>
          <parameter name="plaintext" type="Object" usage="required"/>
          <parameter name="password" type="Object" usage="required"/>
          <parameter name="callback" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Use Corrected Block TEA to encrypt plaintext using password (note plaintext &amp;amp; password must be strings not string objects). Results will be returned to the 'callback' asychronously.</description>
      </method>
      <method scope="static" name="decrypt">
        <parameters>
          <parameter name="ciphertext" type="Object" usage="required"/>
          <parameter name="password" type="Object" usage="required"/>
          <parameter name="callback" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Use Corrected Block TEA to decrypt ciphertext using password (note ciphertext &amp;amp; password must be strings not string objects). Results will be returned to the 'callback' asychronously.</description>
      </method>
      <method scope="static" name="_workerHandler" visibility="internal">
        <parameters>
          <parameter name="msg" type="Object" usage="required"/>
          <parameter name="sender" type="Object" usage="required"/>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
      </method>
    </methods>
  </class>
</javascript>
